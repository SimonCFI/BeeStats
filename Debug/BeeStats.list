
BeeStats.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009874  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08009a14  08009a14  0000aa14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b24  08009b24  0000b15c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b24  08009b24  0000ab24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b2c  08009b2c  0000b15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b2c  08009b2c  0000ab2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b30  08009b30  0000ab30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08009b34  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd0  2000015c  08009c90  0000b15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f2c  08009c90  0000bf2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001361c  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c5  00000000  00000000  0001e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00021f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc0  00000000  00000000  00023060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a607  00000000  00000000  00023d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175af  00000000  00000000  0003e327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ce9  00000000  00000000  000558d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e75bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c60  00000000  00000000  000e7604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ec264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099fc 	.word	0x080099fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	080099fc 	.word	0x080099fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <getBH1750_Lux>:

uint8_t cmd = 0x10;
int16_t rawLux[2];
int16_t lux;

int16_t getBH1750_Lux (void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, DEV_ADR<<1, &cmd, 1, HAL_MAX_DELAY);
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <getBH1750_Lux+0x54>)
 80005bc:	2146      	movs	r1, #70	@ 0x46
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <getBH1750_Lux+0x58>)
 80005c0:	f001 f818 	bl	80015f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(150);
 80005c4:	2096      	movs	r0, #150	@ 0x96
 80005c6:	f000 fc17 	bl	8000df8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, 0x23<<1, rawLux, 2, HAL_MAX_DELAY);
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2302      	movs	r3, #2
 80005d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <getBH1750_Lux+0x5c>)
 80005d4:	2146      	movs	r1, #70	@ 0x46
 80005d6:	480b      	ldr	r0, [pc, #44]	@ (8000604 <getBH1750_Lux+0x58>)
 80005d8:	f001 f90a 	bl	80017f0 <HAL_I2C_Master_Receive>

	lux=(rawLux[0] << 8) | rawLux[1];
 80005dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <getBH1750_Lux+0x5c>)
 80005de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	b21a      	sxth	r2, r3
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <getBH1750_Lux+0x5c>)
 80005e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <getBH1750_Lux+0x60>)
 80005f2:	801a      	strh	r2, [r3, #0]

	return lux;
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <getBH1750_Lux+0x60>)
 80005f6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000000 	.word	0x20000000
 8000604:	20000180 	.word	0x20000180
 8000608:	20000178 	.word	0x20000178
 800060c:	2000017c 	.word	0x2000017c

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b092      	sub	sp, #72	@ 0x48
 8000614:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb7d 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f893 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f983 	bl	8000928 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000622:	f000 f8f9 	bl	8000818 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000626:	f007 fdab 	bl	8008180 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800062a:	f000 f923 	bl	8000874 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableBkUpAccess();  // Zugriff auf RTC Backup-Domain erlauben
 800062e:	f003 fa17 	bl	8003a60 <HAL_PWR_EnableBkUpAccess>

  RTC_TimeTypeDef sTime = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]

  // Zeit setzen
  sTime.Hours = 15;
 8000646:	230f      	movs	r3, #15
 8000648:	f887 3020 	strb.w	r3, [r7, #32]
  sTime.Minutes = 00;
 800064c:	2300      	movs	r3, #0
 800064e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sTime.Seconds = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800065c:	2300      	movs	r3, #0
 800065e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	4831      	ldr	r0, [pc, #196]	@ (8000730 <main+0x120>)
 800066a:	f003 ffc2 	bl	80045f2 <HAL_RTC_SetTime>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0x68>
      Error_Handler();
 8000674:	f000 f9ad 	bl	80009d2 <Error_Handler>
  }

  // Datum setzen
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000678:	2307      	movs	r3, #7
 800067a:	773b      	strb	r3, [r7, #28]
  sDate.Month = RTC_MONTH_JUNE;
 800067c:	2306      	movs	r3, #6
 800067e:	777b      	strb	r3, [r7, #29]
  sDate.Date = 15;
 8000680:	230f      	movs	r3, #15
 8000682:	77bb      	strb	r3, [r7, #30]
  sDate.Year = 25;  // 2025 = 25
 8000684:	2319      	movs	r3, #25
 8000686:	77fb      	strb	r3, [r7, #31]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	4827      	ldr	r0, [pc, #156]	@ (8000730 <main+0x120>)
 8000692:	f004 f8a6 	bl	80047e2 <HAL_RTC_SetDate>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <main+0x90>
      Error_Handler();
 800069c:	f000 f999 	bl	80009d2 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_StatusTypeDef status;
		status=HAL_I2C_IsDeviceReady(&hi2c1, 0x23 << 1, 10, HAL_MAX_DELAY);
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	220a      	movs	r2, #10
 80006a6:	2146      	movs	r1, #70	@ 0x46
 80006a8:	4822      	ldr	r0, [pc, #136]	@ (8000734 <main+0x124>)
 80006aa:	f001 fad3 	bl	8001c54 <HAL_I2C_IsDeviceReady>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  int16_t lux = getBH1750_Lux();
 80006b4:	f7ff ff7a 	bl	80005ac <getBH1750_Lux>
 80006b8:	4603      	mov	r3, r0
 80006ba:	86bb      	strh	r3, [r7, #52]	@ 0x34
	  if (status == HAL_OK) {
 80006bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d106      	bne.n	80006d2 <main+0xc2>
	      printf("I2C-Gerät gefunden!\r\n%i",lux);
 80006c4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80006c8:	4619      	mov	r1, r3
 80006ca:	481b      	ldr	r0, [pc, #108]	@ (8000738 <main+0x128>)
 80006cc:	f008 fb2a 	bl	8008d24 <iprintf>
 80006d0:	e005      	b.n	80006de <main+0xce>
	  } else {
	      printf("I2C-Gerät nicht gefunden. Fehlercode: %d\n", status);
 80006d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80006d6:	4619      	mov	r1, r3
 80006d8:	4818      	ldr	r0, [pc, #96]	@ (800073c <main+0x12c>)
 80006da:	f008 fb23 	bl	8008d24 <iprintf>
	  }
	  HAL_Delay(1000);
 80006de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e2:	f000 fb89 	bl	8000df8 <HAL_Delay>
	  RTC_TimeTypeDef currentTime;
	  RTC_DateTypeDef currentDate;

	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	@ (8000730 <main+0x120>)
 80006f0:	f004 f819 	bl	8004726 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);  // Muss nach GetTime!
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <main+0x120>)
 80006fc:	f004 f8f5 	bl	80048ea <HAL_RTC_GetDate>

	  printf("Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
	         currentTime.Hours,
 8000700:	7a3b      	ldrb	r3, [r7, #8]
	  printf("Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000702:	4618      	mov	r0, r3
	         currentTime.Minutes,
 8000704:	7a7b      	ldrb	r3, [r7, #9]
	  printf("Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000706:	461c      	mov	r4, r3
	         currentTime.Seconds,
 8000708:	7abb      	ldrb	r3, [r7, #10]
	  printf("Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 800070a:	461d      	mov	r5, r3
	         currentDate.Date,
 800070c:	79bb      	ldrb	r3, [r7, #6]
	         currentDate.Month,
 800070e:	797a      	ldrb	r2, [r7, #5]
	         currentDate.Year);
 8000710:	79f9      	ldrb	r1, [r7, #7]
	  printf("Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000712:	9102      	str	r1, [sp, #8]
 8000714:	9201      	str	r2, [sp, #4]
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	462b      	mov	r3, r5
 800071a:	4622      	mov	r2, r4
 800071c:	4601      	mov	r1, r0
 800071e:	4808      	ldr	r0, [pc, #32]	@ (8000740 <main+0x130>)
 8000720:	f008 fb00 	bl	8008d24 <iprintf>

	  HAL_Delay(1000);  // Ausgabe alle 1s
 8000724:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000728:	f000 fb66 	bl	8000df8 <HAL_Delay>
  {
 800072c:	e7b8      	b.n	80006a0 <main+0x90>
 800072e:	bf00      	nop
 8000730:	200001d4 	.word	0x200001d4
 8000734:	20000180 	.word	0x20000180
 8000738:	08009a14 	.word	0x08009a14
 800073c:	08009a30 	.word	0x08009a30
 8000740:	08009a5c 	.word	0x08009a5c

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	@ 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	@ 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f008 fb3b 	bl	8008dce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	4a27      	ldr	r2, [pc, #156]	@ (8000810 <SystemClock_Config+0xcc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	@ 0x40
 8000778:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a21      	ldr	r2, [pc, #132]	@ (8000814 <SystemClock_Config+0xd0>)
 800078e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007a0:	2309      	movs	r3, #9
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007b8:	2319      	movs	r3, #25
 80007ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007bc:	23c0      	movs	r3, #192	@ 0xc0
 80007be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 f95b 	bl	8003a88 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d8:	f000 f8fb 	bl	80009d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2103      	movs	r1, #3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 fbbd 	bl	8003f78 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000804:	f000 f8e5 	bl	80009d2 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3750      	adds	r7, #80	@ 0x50
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_I2C1_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	@ (800086c <MX_I2C1_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000824:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x58>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000836:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000856:	f000 fd89 	bl	800136c <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 f8b7 	bl	80009d2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000180 	.word	0x20000180
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000888:	2300      	movs	r3, #0
 800088a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800088c:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <MX_RTC_Init+0xac>)
 800088e:	4a25      	ldr	r2, [pc, #148]	@ (8000924 <MX_RTC_Init+0xb0>)
 8000890:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000892:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <MX_RTC_Init+0xac>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000898:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_RTC_Init+0xac>)
 800089a:	227f      	movs	r2, #127	@ 0x7f
 800089c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_RTC_Init+0xac>)
 80008a0:	22ff      	movs	r2, #255	@ 0xff
 80008a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_RTC_Init+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_RTC_Init+0xac>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_RTC_Init+0xac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008b6:	481a      	ldr	r0, [pc, #104]	@ (8000920 <MX_RTC_Init+0xac>)
 80008b8:	f003 fe1a 	bl	80044f0 <HAL_RTC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 f886 	bl	80009d2 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2201      	movs	r2, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	480f      	ldr	r0, [pc, #60]	@ (8000920 <MX_RTC_Init+0xac>)
 80008e2:	f003 fe86 	bl	80045f2 <HAL_RTC_SetTime>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008ec:	f000 f871 	bl	80009d2 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008f0:	2301      	movs	r3, #1
 80008f2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008f4:	2301      	movs	r3, #1
 80008f6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	2201      	movs	r2, #1
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <MX_RTC_Init+0xac>)
 8000908:	f003 ff6b 	bl	80047e2 <HAL_RTC_SetDate>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000912:	f000 f85e 	bl	80009d2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200001d4 	.word	0x200001d4
 8000924:	40002800 	.word	0x40002800

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <MX_GPIO_Init+0x84>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a1d      	ldr	r2, [pc, #116]	@ (80009ac <MX_GPIO_Init+0x84>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <MX_GPIO_Init+0x84>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_GPIO_Init+0x84>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a16      	ldr	r2, [pc, #88]	@ (80009ac <MX_GPIO_Init+0x84>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_GPIO_Init+0x84>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_GPIO_Init+0x84>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <MX_GPIO_Init+0x84>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <MX_GPIO_Init+0x84>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_GPIO_Init+0x84>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <MX_GPIO_Init+0x84>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_GPIO_Init+0x84>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*) ptr, len); return len;}
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	68b8      	ldr	r0, [r7, #8]
 80009c4:	f007 fc9a 	bl	80082fc <CDC_Transmit_FS>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d6:	b672      	cpsid	i
}
 80009d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009da:	bf00      	nop
 80009dc:	e7fd      	b.n	80009da <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	@ (8000ab4 <HAL_I2C_MspInit+0x84>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12b      	bne.n	8000aaa <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a6e:	23c0      	movs	r3, #192	@ 0xc0
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a72:	2312      	movs	r3, #18
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <HAL_I2C_MspInit+0x8c>)
 8000a8a:	f000 faeb 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	@ 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400

08000ac0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0c      	ldr	r2, [pc, #48]	@ (8000b10 <HAL_RTC_MspInit+0x50>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d111      	bne.n	8000b08 <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aec:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fc0c 	bl	8004310 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000afe:	f7ff ff68 	bl	80009d2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b02:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <HAL_RTC_MspInit+0x54>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40002800 	.word	0x40002800
 8000b14:	42470e3c 	.word	0x42470e3c

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <NMI_Handler+0x4>

08000b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <MemManage_Handler+0x4>

08000b30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6e:	f000 f923 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <OTG_FS_IRQHandler+0x10>)
 8000b7e:	f001 fe61 	bl	8002844 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200016dc 	.word	0x200016dc

08000b8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	e00a      	b.n	8000bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf0      	blt.n	8000b9e <_read+0x12>
  }

  return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bee:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_isatty>:

int _isatty(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f008 f904 	bl	8008e6c <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	200001f4 	.word	0x200001f4
 8000c98:	20001f30 	.word	0x20001f30

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f008 f8c3 	bl	8008e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc8d 	bl	8000610 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000d04:	08009b34 	.word	0x08009b34
  ldr r2, =_sbss
 8000d08:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000d0c:	20001f2c 	.word	0x20001f2c

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94f 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe4a 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f967 	bl	800104a <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92f 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000004 	.word	0x20000004
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	20000008 	.word	0x20000008

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	200001f8 	.word	0x200001f8

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200001f8 	.word	0x200001f8

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000000c 	.word	0x2000000c

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e159      	b.n	8001334 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 8148 	bne.w	800132e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a2 	beq.w	800132e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b57      	ldr	r3, [pc, #348]	@ (800134c <HAL_GPIO_Init+0x2e8>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	4a56      	ldr	r2, [pc, #344]	@ (800134c <HAL_GPIO_Init+0x2e8>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fa:	4b54      	ldr	r3, [pc, #336]	@ (800134c <HAL_GPIO_Init+0x2e8>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a52      	ldr	r2, [pc, #328]	@ (8001350 <HAL_GPIO_Init+0x2ec>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a49      	ldr	r2, [pc, #292]	@ (8001354 <HAL_GPIO_Init+0x2f0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x202>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a48      	ldr	r2, [pc, #288]	@ (8001358 <HAL_GPIO_Init+0x2f4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x1fe>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a47      	ldr	r2, [pc, #284]	@ (800135c <HAL_GPIO_Init+0x2f8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x1fa>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a46      	ldr	r2, [pc, #280]	@ (8001360 <HAL_GPIO_Init+0x2fc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x1f6>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a45      	ldr	r2, [pc, #276]	@ (8001364 <HAL_GPIO_Init+0x300>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x1f2>
 8001252:	2304      	movs	r3, #4
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x204>
 8001256:	2307      	movs	r3, #7
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x204>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x204>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x204>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x204>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	@ (8001350 <HAL_GPIO_Init+0x2ec>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b38      	ldr	r3, [pc, #224]	@ (8001368 <HAL_GPIO_Init+0x304>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001368 <HAL_GPIO_Init+0x304>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <HAL_GPIO_Init+0x304>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a24      	ldr	r2, [pc, #144]	@ (8001368 <HAL_GPIO_Init+0x304>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012da:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <HAL_GPIO_Init+0x304>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001368 <HAL_GPIO_Init+0x304>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001304:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <HAL_GPIO_Init+0x304>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001328:	4a0f      	ldr	r2, [pc, #60]	@ (8001368 <HAL_GPIO_Init+0x304>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f aea2 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e12b      	b.n	80015d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fb4c 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2224      	movs	r2, #36	@ 0x24
 800139c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013d0:	f002 ff8a 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 80013d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a81      	ldr	r2, [pc, #516]	@ (80015e0 <HAL_I2C_Init+0x274>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d807      	bhi.n	80013f0 <HAL_I2C_Init+0x84>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a80      	ldr	r2, [pc, #512]	@ (80015e4 <HAL_I2C_Init+0x278>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	bf94      	ite	ls
 80013e8:	2301      	movls	r3, #1
 80013ea:	2300      	movhi	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	e006      	b.n	80013fe <HAL_I2C_Init+0x92>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a7d      	ldr	r2, [pc, #500]	@ (80015e8 <HAL_I2C_Init+0x27c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	bf94      	ite	ls
 80013f8:	2301      	movls	r3, #1
 80013fa:	2300      	movhi	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0e7      	b.n	80015d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4a78      	ldr	r2, [pc, #480]	@ (80015ec <HAL_I2C_Init+0x280>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a6a      	ldr	r2, [pc, #424]	@ (80015e0 <HAL_I2C_Init+0x274>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d802      	bhi.n	8001440 <HAL_I2C_Init+0xd4>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	e009      	b.n	8001454 <HAL_I2C_Init+0xe8>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a69      	ldr	r2, [pc, #420]	@ (80015f0 <HAL_I2C_Init+0x284>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	099b      	lsrs	r3, r3, #6
 8001452:	3301      	adds	r3, #1
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	430b      	orrs	r3, r1
 800145a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001466:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	495c      	ldr	r1, [pc, #368]	@ (80015e0 <HAL_I2C_Init+0x274>)
 8001470:	428b      	cmp	r3, r1
 8001472:	d819      	bhi.n	80014a8 <HAL_I2C_Init+0x13c>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e59      	subs	r1, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001482:	1c59      	adds	r1, r3, #1
 8001484:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001488:	400b      	ands	r3, r1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <HAL_I2C_Init+0x138>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1e59      	subs	r1, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fbb1 f3f3 	udiv	r3, r1, r3
 800149c:	3301      	adds	r3, #1
 800149e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a2:	e051      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 80014a4:	2304      	movs	r3, #4
 80014a6:	e04f      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d111      	bne.n	80014d4 <HAL_I2C_Init+0x168>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	e012      	b.n	80014fa <HAL_I2C_Init+0x18e>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	0099      	lsls	r1, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Init+0x196>
 80014fe:	2301      	movs	r3, #1
 8001500:	e022      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10e      	bne.n	8001528 <HAL_I2C_Init+0x1bc>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1e58      	subs	r0, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6859      	ldr	r1, [r3, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	440b      	add	r3, r1
 8001518:	fbb0 f3f3 	udiv	r3, r0, r3
 800151c:	3301      	adds	r3, #1
 800151e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001526:	e00f      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	0099      	lsls	r1, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	fbb0 f3f3 	udiv	r3, r0, r3
 800153e:	3301      	adds	r3, #1
 8001540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001544:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	6809      	ldr	r1, [r1, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69da      	ldr	r2, [r3, #28]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001576:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6911      	ldr	r1, [r2, #16]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68d2      	ldr	r2, [r2, #12]
 8001582:	4311      	orrs	r1, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	430b      	orrs	r3, r1
 800158a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	000186a0 	.word	0x000186a0
 80015e4:	001e847f 	.word	0x001e847f
 80015e8:	003d08ff 	.word	0x003d08ff
 80015ec:	431bde83 	.word	0x431bde83
 80015f0:	10624dd3 	.word	0x10624dd3

080015f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	461a      	mov	r2, r3
 8001600:	460b      	mov	r3, r1
 8001602:	817b      	strh	r3, [r7, #10]
 8001604:	4613      	mov	r3, r2
 8001606:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff fbea 	bl	8000de0 <HAL_GetTick>
 800160c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b20      	cmp	r3, #32
 8001618:	f040 80e0 	bne.w	80017dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2319      	movs	r3, #25
 8001622:	2201      	movs	r2, #1
 8001624:	4970      	ldr	r1, [pc, #448]	@ (80017e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fd92 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001632:	2302      	movs	r3, #2
 8001634:	e0d3      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_I2C_Master_Transmit+0x50>
 8001640:	2302      	movs	r3, #2
 8001642:	e0cc      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b01      	cmp	r3, #1
 8001658:	d007      	beq.n	800166a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001678:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2221      	movs	r2, #33	@ 0x21
 800167e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2210      	movs	r2, #16
 8001686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	893a      	ldrh	r2, [r7, #8]
 800169a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4a50      	ldr	r2, [pc, #320]	@ (80017ec <HAL_I2C_Master_Transmit+0x1f8>)
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016ac:	8979      	ldrh	r1, [r7, #10]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fbfc 	bl	8001eb0 <I2C_MasterRequestWrite>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e08d      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016d8:	e066      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	6a39      	ldr	r1, [r7, #32]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 fe50 	bl	8002384 <I2C_WaitOnTXEFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00d      	beq.n	8001706 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d107      	bne.n	8001702 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06b      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001720:	b29b      	uxth	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b04      	cmp	r3, #4
 8001742:	d11b      	bne.n	800177c <HAL_I2C_Master_Transmit+0x188>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	d017      	beq.n	800177c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	6a39      	ldr	r1, [r7, #32]
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fe47 	bl	8002414 <I2C_WaitOnBTFFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00d      	beq.n	80017a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	2b04      	cmp	r3, #4
 8001792:	d107      	bne.n	80017a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e01a      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d194      	bne.n	80016da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2220      	movs	r2, #32
 80017c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	00100002 	.word	0x00100002
 80017ec:	ffff0000 	.word	0xffff0000

080017f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	@ 0x30
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	461a      	mov	r2, r3
 80017fc:	460b      	mov	r3, r1
 80017fe:	817b      	strh	r3, [r7, #10]
 8001800:	4613      	mov	r3, r2
 8001802:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff faec 	bl	8000de0 <HAL_GetTick>
 8001808:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b20      	cmp	r3, #32
 8001814:	f040 8217 	bne.w	8001c46 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2319      	movs	r3, #25
 800181e:	2201      	movs	r2, #1
 8001820:	497c      	ldr	r1, [pc, #496]	@ (8001a14 <HAL_I2C_Master_Receive+0x224>)
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fc94 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800182e:	2302      	movs	r3, #2
 8001830:	e20a      	b.n	8001c48 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_I2C_Master_Receive+0x50>
 800183c:	2302      	movs	r3, #2
 800183e:	e203      	b.n	8001c48 <HAL_I2C_Master_Receive+0x458>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b01      	cmp	r3, #1
 8001854:	d007      	beq.n	8001866 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2222      	movs	r2, #34	@ 0x22
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2210      	movs	r2, #16
 8001882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	893a      	ldrh	r2, [r7, #8]
 8001896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001a18 <HAL_I2C_Master_Receive+0x228>)
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fb80 	bl	8001fb4 <I2C_MasterRequestRead>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e1c4      	b.n	8001c48 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d113      	bne.n	80018ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	623b      	str	r3, [r7, #32]
 80018da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e198      	b.n	8001c20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d11b      	bne.n	800192e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e178      	b.n	8001c20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001932:	2b02      	cmp	r3, #2
 8001934:	d11b      	bne.n	800196e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001944:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	e158      	b.n	8001c20 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800197c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001994:	e144      	b.n	8001c20 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199a:	2b03      	cmp	r3, #3
 800199c:	f200 80f1 	bhi.w	8001b82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d123      	bne.n	80019f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 fd79 	bl	80024a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e145      	b.n	8001c48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019ee:	e117      	b.n	8001c20 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d14e      	bne.n	8001a96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019fe:	2200      	movs	r2, #0
 8001a00:	4906      	ldr	r1, [pc, #24]	@ (8001a1c <HAL_I2C_Master_Receive+0x22c>)
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fba4 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e11a      	b.n	8001c48 <HAL_I2C_Master_Receive+0x458>
 8001a12:	bf00      	nop
 8001a14:	00100002 	.word	0x00100002
 8001a18:	ffff0000 	.word	0xffff0000
 8001a1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a94:	e0c4      	b.n	8001c20 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	496c      	ldr	r1, [pc, #432]	@ (8001c50 <HAL_I2C_Master_Receive+0x460>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fb55 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0cb      	b.n	8001c48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af8:	2200      	movs	r2, #0
 8001afa:	4955      	ldr	r1, [pc, #340]	@ (8001c50 <HAL_I2C_Master_Receive+0x460>)
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fb27 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e09d      	b.n	8001c48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b80:	e04e      	b.n	8001c20 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 fc8c 	bl	80024a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e058      	b.n	8001c48 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d124      	bne.n	8001c20 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d107      	bne.n	8001bee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f aeb6 	bne.w	8001996 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001c46:	2302      	movs	r3, #2
  }
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3728      	adds	r7, #40	@ 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	00010004 	.word	0x00010004

08001c54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	460b      	mov	r3, r1
 8001c62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff f8bc 	bl	8000de0 <HAL_GetTick>
 8001c68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	f040 8111 	bne.w	8001e9e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2319      	movs	r3, #25
 8001c82:	2201      	movs	r2, #1
 8001c84:	4988      	ldr	r1, [pc, #544]	@ (8001ea8 <HAL_I2C_IsDeviceReady+0x254>)
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa62 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c92:	2302      	movs	r3, #2
 8001c94:	e104      	b.n	8001ea0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_I2C_IsDeviceReady+0x50>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e0fd      	b.n	8001ea0 <HAL_I2C_IsDeviceReady+0x24c>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d007      	beq.n	8001cca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2224      	movs	r2, #36	@ 0x24
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a70      	ldr	r2, [pc, #448]	@ (8001eac <HAL_I2C_IsDeviceReady+0x258>)
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fa20 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00d      	beq.n	8001d32 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d24:	d103      	bne.n	8001d2e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d2c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0b6      	b.n	8001ea0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d32:	897b      	ldrh	r3, [r7, #10]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d40:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff f84d 	bl	8000de0 <HAL_GetTick>
 8001d46:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d76:	e025      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d78:	f7ff f832 	bl	8000de0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d302      	bcc.n	8001d8e <HAL_I2C_IsDeviceReady+0x13a>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d103      	bne.n	8001d96 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	22a0      	movs	r2, #160	@ 0xa0
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dce:	d005      	beq.n	8001ddc <HAL_I2C_IsDeviceReady+0x188>
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <HAL_I2C_IsDeviceReady+0x188>
 8001dd6:	7dbb      	ldrb	r3, [r7, #22]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0cd      	beq.n	8001d78 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d129      	bne.n	8001e46 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e00:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2319      	movs	r3, #25
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4921      	ldr	r1, [pc, #132]	@ (8001ea8 <HAL_I2C_IsDeviceReady+0x254>)
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f994 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e036      	b.n	8001ea0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e02c      	b.n	8001ea0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e54:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e5e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2319      	movs	r3, #25
 8001e66:	2201      	movs	r2, #1
 8001e68:	490f      	ldr	r1, [pc, #60]	@ (8001ea8 <HAL_I2C_IsDeviceReady+0x254>)
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f970 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e012      	b.n	8001ea0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f4ff af32 	bcc.w	8001cee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e9e:	2302      	movs	r3, #2
  }
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	00100002 	.word	0x00100002
 8001eac:	ffff0000 	.word	0xffff0000

08001eb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d006      	beq.n	8001eda <I2C_MasterRequestWrite+0x2a>
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d003      	beq.n	8001eda <I2C_MasterRequestWrite+0x2a>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ed8:	d108      	bne.n	8001eec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e00b      	b.n	8001f04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	2b12      	cmp	r3, #18
 8001ef2:	d107      	bne.n	8001f04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f91d 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00d      	beq.n	8001f38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f2a:	d103      	bne.n	8001f34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e035      	b.n	8001fa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f40:	d108      	bne.n	8001f54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f42:	897b      	ldrh	r3, [r7, #10]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f50:	611a      	str	r2, [r3, #16]
 8001f52:	e01b      	b.n	8001f8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f54:	897b      	ldrh	r3, [r7, #10]
 8001f56:	11db      	asrs	r3, r3, #7
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 0306 	and.w	r3, r3, #6
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f063 030f 	orn	r3, r3, #15
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	490e      	ldr	r1, [pc, #56]	@ (8001fac <I2C_MasterRequestWrite+0xfc>)
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f966 	bl	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e010      	b.n	8001fa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f82:	897b      	ldrh	r3, [r7, #10]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4907      	ldr	r1, [pc, #28]	@ (8001fb0 <I2C_MasterRequestWrite+0x100>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f956 	bl	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	00010008 	.word	0x00010008
 8001fb0:	00010002 	.word	0x00010002

08001fb4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d006      	beq.n	8001fee <I2C_MasterRequestRead+0x3a>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d003      	beq.n	8001fee <I2C_MasterRequestRead+0x3a>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fec:	d108      	bne.n	8002000 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e00b      	b.n	8002018 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	2b11      	cmp	r3, #17
 8002006:	d107      	bne.n	8002018 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f893 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800203e:	d103      	bne.n	8002048 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e079      	b.n	8002140 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002054:	d108      	bne.n	8002068 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002056:	897b      	ldrh	r3, [r7, #10]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	611a      	str	r2, [r3, #16]
 8002066:	e05f      	b.n	8002128 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002068:	897b      	ldrh	r3, [r7, #10]
 800206a:	11db      	asrs	r3, r3, #7
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f003 0306 	and.w	r3, r3, #6
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f063 030f 	orn	r3, r3, #15
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4930      	ldr	r1, [pc, #192]	@ (8002148 <I2C_MasterRequestRead+0x194>)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f8dc 	bl	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e054      	b.n	8002140 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002096:	897b      	ldrh	r3, [r7, #10]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4929      	ldr	r1, [pc, #164]	@ (800214c <I2C_MasterRequestRead+0x198>)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f8cc 	bl	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e044      	b.n	8002140 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f831 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00d      	beq.n	8002110 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002102:	d103      	bne.n	800210c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800210a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e017      	b.n	8002140 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002110:	897b      	ldrh	r3, [r7, #10]
 8002112:	11db      	asrs	r3, r3, #7
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 0306 	and.w	r3, r3, #6
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f063 030e 	orn	r3, r3, #14
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4907      	ldr	r1, [pc, #28]	@ (800214c <I2C_MasterRequestRead+0x198>)
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f888 	bl	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	00010008 	.word	0x00010008
 800214c:	00010002 	.word	0x00010002

08002150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002160:	e048      	b.n	80021f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d044      	beq.n	80021f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216a:	f7fe fe39 	bl	8000de0 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d139      	bne.n	80021f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10d      	bne.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	43da      	mvns	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	4013      	ands	r3, r2
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	e00c      	b.n	80021c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	43da      	mvns	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d116      	bne.n	80021f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e023      	b.n	800223c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10d      	bne.n	800221a <I2C_WaitOnFlagUntilTimeout+0xca>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	43da      	mvns	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4013      	ands	r3, r2
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	e00c      	b.n	8002234 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	43da      	mvns	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4013      	ands	r3, r2
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	429a      	cmp	r2, r3
 8002238:	d093      	beq.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002252:	e071      	b.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002262:	d123      	bne.n	80022ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002272:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800227c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	f043 0204 	orr.w	r2, r3, #4
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e067      	b.n	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b2:	d041      	beq.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b4:	f7fe fd94 	bl	8000de0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d302      	bcc.n	80022ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d136      	bne.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d10c      	bne.n	80022ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4013      	ands	r3, r2
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	e00b      	b.n	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	43da      	mvns	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4013      	ands	r3, r2
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d016      	beq.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	f043 0220 	orr.w	r2, r3, #32
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e021      	b.n	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	0c1b      	lsrs	r3, r3, #16
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10c      	bne.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	43da      	mvns	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4013      	ands	r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e00b      	b.n	8002374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4013      	ands	r3, r2
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf14      	ite	ne
 800236e:	2301      	movne	r3, #1
 8002370:	2300      	moveq	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	f47f af6d 	bne.w	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002390:	e034      	b.n	80023fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f8e3 	bl	800255e <I2C_IsAcknowledgeFailed>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e034      	b.n	800240c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d028      	beq.n	80023fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023aa:	f7fe fd19 	bl	8000de0 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11d      	bne.n	80023fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ca:	2b80      	cmp	r3, #128	@ 0x80
 80023cc:	d016      	beq.n	80023fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f043 0220 	orr.w	r2, r3, #32
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e007      	b.n	800240c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002406:	2b80      	cmp	r3, #128	@ 0x80
 8002408:	d1c3      	bne.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002420:	e034      	b.n	800248c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f89b 	bl	800255e <I2C_IsAcknowledgeFailed>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e034      	b.n	800249c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d028      	beq.n	800248c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243a:	f7fe fcd1 	bl	8000de0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d11d      	bne.n	800248c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d016      	beq.n	800248c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e007      	b.n	800249c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b04      	cmp	r3, #4
 8002498:	d1c3      	bne.n	8002422 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024b0:	e049      	b.n	8002546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d119      	bne.n	80024f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0210 	mvn.w	r2, #16
 80024c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e030      	b.n	8002556 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f4:	f7fe fc74 	bl	8000de0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	429a      	cmp	r2, r3
 8002502:	d302      	bcc.n	800250a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d11d      	bne.n	8002546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002514:	2b40      	cmp	r3, #64	@ 0x40
 8002516:	d016      	beq.n	8002546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f043 0220 	orr.w	r2, r3, #32
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e007      	b.n	8002556 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002550:	2b40      	cmp	r3, #64	@ 0x40
 8002552:	d1ae      	bne.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002574:	d11b      	bne.n	80025ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800257e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f043 0204 	orr.w	r2, r3, #4
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e101      	b.n	80027d2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d106      	bne.n	80025ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f005 ffcf 	bl	800858c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2203      	movs	r2, #3
 80025f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025fc:	d102      	bne.n	8002604 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fb92 	bl	8004d32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7c1a      	ldrb	r2, [r3, #16]
 8002616:	f88d 2000 	strb.w	r2, [sp]
 800261a:	3304      	adds	r3, #4
 800261c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261e:	f002 fa71 	bl	8004b04 <USB_CoreInit>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0ce      	b.n	80027d2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f002 fb8a 	bl	8004d54 <USB_SetCurrentMode>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2202      	movs	r2, #2
 800264a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0bf      	b.n	80027d2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002652:	2300      	movs	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
 8002656:	e04a      	b.n	80026ee <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3315      	adds	r3, #21
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3314      	adds	r3, #20
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	b298      	uxth	r0, r3
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	332e      	adds	r3, #46	@ 0x2e
 8002694:	4602      	mov	r2, r0
 8002696:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3318      	adds	r3, #24
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	331c      	adds	r3, #28
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	3320      	adds	r3, #32
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	3324      	adds	r3, #36	@ 0x24
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	3301      	adds	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	791b      	ldrb	r3, [r3, #4]
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3af      	bcc.n	8002658 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e044      	b.n	8002788 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	3301      	adds	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	791b      	ldrb	r3, [r3, #4]
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	429a      	cmp	r2, r3
 8002790:	d3b5      	bcc.n	80026fe <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7c1a      	ldrb	r2, [r3, #16]
 800279a:	f88d 2000 	strb.w	r2, [sp]
 800279e:	3304      	adds	r3, #4
 80027a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a2:	f002 fb23 	bl	8004dec <USB_DevInit>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e00c      	b.n	80027d2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 fb6d 	bl	8005eaa <USB_DevDisconnect>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_PCD_Start+0x1c>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e022      	b.n	800283c <HAL_PCD_Start+0x62>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f002 fa74 	bl	8004d10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f003 fb1b 	bl	8005e68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b08d      	sub	sp, #52	@ 0x34
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fbd9 	bl	8006012 <USB_GetMode>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 848c 	bne.w	8003180 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f003 fb3d 	bl	8005eec <USB_ReadInterrupts>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8482 	beq.w	800317e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fb2a 	bl	8005eec <USB_ReadInterrupts>
 8002898:	4603      	mov	r3, r0
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d107      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f002 0202 	and.w	r2, r2, #2
 80028b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 fb18 	bl	8005eec <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d161      	bne.n	800298a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0210 	bic.w	r2, r2, #16
 80028d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	3304      	adds	r3, #4
 80028f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80028fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002900:	d124      	bne.n	800294c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d035      	beq.n	800297a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002918:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800291c:	b29b      	uxth	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	6a38      	ldr	r0, [r7, #32]
 8002922:	f003 f94f 	bl	8005bc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002932:	441a      	add	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002944:	441a      	add	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	615a      	str	r2, [r3, #20]
 800294a:	e016      	b.n	800297a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002952:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002956:	d110      	bne.n	800297a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800295e:	2208      	movs	r2, #8
 8002960:	4619      	mov	r1, r3
 8002962:	6a38      	ldr	r0, [r7, #32]
 8002964:	f003 f92e 	bl	8005bc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002974:	441a      	add	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0210 	orr.w	r2, r2, #16
 8002988:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f003 faac 	bl	8005eec <USB_ReadInterrupts>
 8002994:	4603      	mov	r3, r0
 8002996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800299a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800299e:	f040 80a7 	bne.w	8002af0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 fab1 	bl	8005f12 <USB_ReadDevAllOutEpInterrupt>
 80029b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80029b2:	e099      	b.n	8002ae8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 808e 	beq.w	8002adc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 fad5 	bl	8005f7a <USB_ReadDevOutEPInterrupt>
 80029d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00c      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029e8:	461a      	mov	r2, r3
 80029ea:	2301      	movs	r3, #1
 80029ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fea3 	bl	800373c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00c      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2308      	movs	r3, #8
 8002a10:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 ff79 	bl	800390c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a30:	461a      	mov	r2, r3
 8002a32:	2310      	movs	r3, #16
 8002a34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d030      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a48:	2b80      	cmp	r3, #128	@ 0x80
 8002a4a:	d109      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a5e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	78db      	ldrb	r3, [r3, #3]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d108      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f005 fe7a 	bl	8008784 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2320      	movs	r3, #32
 8002abc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ada:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	3301      	adds	r3, #1
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f47f af62 	bne.w	80029b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 f9f9 	bl	8005eec <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b04:	f040 80db 	bne.w	8002cbe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 fa1a 	bl	8005f46 <USB_ReadDevAllInEpInterrupt>
 8002b12:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b18:	e0cd      	b.n	8002cb6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80c2 	beq.w	8002caa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 fa40 	bl	8005fb6 <USB_ReadDevInEPInterrupt>
 8002b36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d057      	beq.n	8002bf2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	2201      	movs	r2, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69f9      	ldr	r1, [r7, #28]
 8002b5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b62:	4013      	ands	r3, r2
 8002b64:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b72:	461a      	mov	r2, r3
 8002b74:	2301      	movs	r3, #1
 8002b76:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	799b      	ldrb	r3, [r3, #6]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d132      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3320      	adds	r3, #32
 8002b90:	6819      	ldr	r1, [r3, #0]
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4403      	add	r3, r0
 8002ba0:	331c      	adds	r3, #28
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4419      	add	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4403      	add	r3, r0
 8002bb4:	3320      	adds	r3, #32
 8002bb6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d113      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x3a2>
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3324      	adds	r3, #36	@ 0x24
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d108      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bde:	461a      	mov	r2, r3
 8002be0:	2101      	movs	r1, #1
 8002be2:	f003 fa47 	bl	8006074 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f005 fd4e 	bl	800868e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c24:	461a      	mov	r2, r3
 8002c26:	2310      	movs	r3, #16
 8002c28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c40:	461a      	mov	r2, r3
 8002c42:	2340      	movs	r3, #64	@ 0x40
 8002c44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d023      	beq.n	8002c98 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c52:	6a38      	ldr	r0, [r7, #32]
 8002c54:	f002 fa2e 	bl	80050b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3310      	adds	r3, #16
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	78db      	ldrb	r3, [r3, #3]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d108      	bne.n	8002c86 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2200      	movs	r2, #0
 8002c78:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f005 fd91 	bl	80087a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c92:	461a      	mov	r2, r3
 8002c94:	2302      	movs	r3, #2
 8002c96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ca2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fcbd 	bl	8003624 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	3301      	adds	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f47f af2e 	bne.w	8002b1a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 f912 	bl	8005eec <USB_ReadInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cd2:	d122      	bne.n	8002d1a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d108      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fea3 	bl	8003a48 <HAL_PCDEx_LPM_Callback>
 8002d02:	e002      	b.n	8002d0a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f005 fd2f 	bl	8008768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 f8e4 	bl	8005eec <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d2e:	d112      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f005 fceb 	bl	800871c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695a      	ldr	r2, [r3, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d54:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 f8c6 	bl	8005eec <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d6a:	f040 80b7 	bne.w	8002edc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2110      	movs	r1, #16
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f002 f993 	bl	80050b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d92:	e046      	b.n	8002e22 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002da0:	461a      	mov	r2, r3
 8002da2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002da6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db8:	0151      	lsls	r1, r2, #5
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	440a      	add	r2, r1
 8002dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002dc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dda:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dec:	0151      	lsls	r1, r2, #5
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	440a      	add	r2, r1
 8002df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002df6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dfa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e0c:	0151      	lsls	r1, r2, #5
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	440a      	add	r2, r1
 8002e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e1a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1e:	3301      	adds	r3, #1
 8002e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	791b      	ldrb	r3, [r3, #4]
 8002e26:	461a      	mov	r2, r3
 8002e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d3b2      	bcc.n	8002d94 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e3c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e40:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7bdb      	ldrb	r3, [r3, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e5a:	f043 030b 	orr.w	r3, r3, #11
 8002e5e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e70:	f043 030b 	orr.w	r3, r3, #11
 8002e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e76:	e015      	b.n	8002ea4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e8a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e8e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e9e:	f043 030b 	orr.w	r3, r3, #11
 8002ea2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002eb6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f003 f8d4 	bl	8006074 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 f803 	bl	8005eec <USB_ReadInterrupts>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef0:	d123      	bne.n	8002f3a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 f899 	bl	800602e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 f950 	bl	80051a6 <USB_GetDevSpeed>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681c      	ldr	r4, [r3, #0]
 8002f12:	f001 f9dd 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 8002f16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f001 fe54 	bl	8004bcc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f005 fbda 	bl	80086de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 ffd4 	bl	8005eec <USB_ReadInterrupts>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d10a      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f005 fbb7 	bl	80086c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f002 0208 	and.w	r2, r2, #8
 8002f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f002 ffbf 	bl	8005eec <USB_ReadInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f74:	2b80      	cmp	r3, #128	@ 0x80
 8002f76:	d123      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f84:	2301      	movs	r3, #1
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f88:	e014      	b.n	8002fb4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fb0a 	bl	80035c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	791b      	ldrb	r3, [r3, #4]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d3e4      	bcc.n	8002f8a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 ff91 	bl	8005eec <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fd4:	d13c      	bne.n	8003050 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fda:	e02b      	b.n	8003034 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3318      	adds	r3, #24
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d115      	bne.n	800302e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003002:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003004:	2b00      	cmp	r3, #0
 8003006:	da12      	bge.n	800302e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3317      	adds	r3, #23
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 faca 	bl	80035c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	3301      	adds	r3, #1
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	791b      	ldrb	r3, [r3, #4]
 8003038:	461a      	mov	r2, r3
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	4293      	cmp	r3, r2
 800303e:	d3cd      	bcc.n	8002fdc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800304e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f002 ff49 	bl	8005eec <USB_ReadInterrupts>
 800305a:	4603      	mov	r3, r0
 800305c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003060:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003064:	d156      	bne.n	8003114 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003066:	2301      	movs	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
 800306a:	e045      	b.n	80030f8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d12e      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003094:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003096:	2b00      	cmp	r3, #0
 8003098:	da2b      	bge.n	80030f2 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	0c1a      	lsrs	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80030a4:	4053      	eors	r3, r2
 80030a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d121      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ee:	6053      	str	r3, [r2, #4]
            break;
 80030f0:	e008      	b.n	8003104 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	3301      	adds	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	791b      	ldrb	r3, [r3, #4]
 80030fc:	461a      	mov	r2, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	4293      	cmp	r3, r2
 8003102:	d3b3      	bcc.n	800306c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003112:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fee7 	bl	8005eec <USB_ReadInterrupts>
 800311e:	4603      	mov	r3, r0
 8003120:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003128:	d10a      	bne.n	8003140 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f005 fb4e 	bl	80087cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800313e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f002 fed1 	bl	8005eec <USB_ReadInterrupts>
 800314a:	4603      	mov	r3, r0
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d115      	bne.n	8003180 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f005 fb3e 	bl	80087e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	e000      	b.n	8003180 <HAL_PCD_IRQHandler+0x93c>
      return;
 800317e:	bf00      	nop
    }
  }
}
 8003180:	3734      	adds	r7, #52	@ 0x34
 8003182:	46bd      	mov	sp, r7
 8003184:	bd90      	pop	{r4, r7, pc}

08003186 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_PCD_SetAddress+0x1a>
 800319c:	2302      	movs	r3, #2
 800319e:	e012      	b.n	80031c6 <HAL_PCD_SetAddress+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 fe30 	bl	8005e1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	4608      	mov	r0, r1
 80031d8:	4611      	mov	r1, r2
 80031da:	461a      	mov	r2, r3
 80031dc:	4603      	mov	r3, r0
 80031de:	70fb      	strb	r3, [r7, #3]
 80031e0:	460b      	mov	r3, r1
 80031e2:	803b      	strh	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da0f      	bge.n	8003214 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	3310      	adds	r3, #16
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	3304      	adds	r3, #4
 800320a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	705a      	strb	r2, [r3, #1]
 8003212:	e00f      	b.n	8003234 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	3304      	adds	r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003240:	883b      	ldrh	r3, [r7, #0]
 8003242:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	78ba      	ldrb	r2, [r7, #2]
 800324e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003262:	78bb      	ldrb	r3, [r7, #2]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d102      	bne.n	800326e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_PCD_EP_Open+0xae>
 8003278:	2302      	movs	r3, #2
 800327a:	e00e      	b.n	800329a <HAL_PCD_EP_Open+0xcc>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68f9      	ldr	r1, [r7, #12]
 800328a:	4618      	mov	r0, r3
 800328c:	f001 ffb0 	bl	80051f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003298:	7afb      	ldrb	r3, [r7, #11]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da0f      	bge.n	80032d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	3310      	adds	r3, #16
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	3304      	adds	r3, #4
 80032cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	705a      	strb	r2, [r3, #1]
 80032d4:	e00f      	b.n	80032f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_PCD_EP_Close+0x6e>
 800330c:	2302      	movs	r3, #2
 800330e:	e00e      	b.n	800332e <HAL_PCD_EP_Close+0x8c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	4618      	mov	r0, r3
 8003320:	f001 ffee 	bl	8005300 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	460b      	mov	r3, r1
 8003344:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	3304      	adds	r3, #4
 800335e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003378:	7afb      	ldrb	r3, [r7, #11]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	b2da      	uxtb	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	799b      	ldrb	r3, [r3, #6]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d102      	bne.n	8003392 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	799b      	ldrb	r3, [r3, #6]
 800339a:	461a      	mov	r2, r3
 800339c:	6979      	ldr	r1, [r7, #20]
 800339e:	f002 f88b 	bl	80054b8 <USB_EPStartXfer>

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 020f 	and.w	r2, r3, #15
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	460b      	mov	r3, r1
 80033ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	f003 020f 	and.w	r2, r3, #15
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	3310      	adds	r3, #16
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2201      	movs	r2, #1
 800341a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800341c:	7afb      	ldrb	r3, [r7, #11]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	b2da      	uxtb	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	799b      	ldrb	r3, [r3, #6]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d102      	bne.n	8003436 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	799b      	ldrb	r3, [r3, #6]
 800343e:	461a      	mov	r2, r3
 8003440:	6979      	ldr	r1, [r7, #20]
 8003442:	f002 f839 	bl	80054b8 <USB_EPStartXfer>

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	7912      	ldrb	r2, [r2, #4]
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e04f      	b.n	800350e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800346e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003472:	2b00      	cmp	r3, #0
 8003474:	da0f      	bge.n	8003496 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 020f 	and.w	r2, r3, #15
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	3310      	adds	r3, #16
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	3304      	adds	r3, #4
 800348c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	705a      	strb	r2, [r3, #1]
 8003494:	e00d      	b.n	80034b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_PCD_EP_SetStall+0x82>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e01d      	b.n	800350e <HAL_PCD_EP_SetStall+0xbe>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68f9      	ldr	r1, [r7, #12]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 fbc7 	bl	8005c74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7999      	ldrb	r1, [r3, #6]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034fe:	461a      	mov	r2, r3
 8003500:	f002 fdb8 	bl	8006074 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	7912      	ldrb	r2, [r2, #4]
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e042      	b.n	80035ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da0f      	bge.n	800355c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3310      	adds	r3, #16
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	3304      	adds	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	705a      	strb	r2, [r3, #1]
 800355a:	e00f      	b.n	800357c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	3304      	adds	r3, #4
 8003574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_PCD_EP_ClrStall+0x86>
 8003598:	2302      	movs	r3, #2
 800359a:	e00e      	b.n	80035ba <HAL_PCD_EP_ClrStall+0xa4>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 fbd0 	bl	8005d50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da0c      	bge.n	80035f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 020f 	and.w	r2, r3, #15
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	3310      	adds	r3, #16
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	3304      	adds	r3, #4
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e00c      	b.n	800360a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	3304      	adds	r3, #4
 8003608:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68f9      	ldr	r1, [r7, #12]
 8003610:	4618      	mov	r0, r3
 8003612:	f002 f9ef 	bl	80059f4 <USB_EPStopXfer>
 8003616:	4603      	mov	r3, r0
 8003618:	72fb      	strb	r3, [r7, #11]

  return ret;
 800361a:	7afb      	ldrb	r3, [r7, #11]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	@ 0x28
 8003628:	af02      	add	r7, sp, #8
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	3310      	adds	r3, #16
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	3304      	adds	r3, #4
 800364a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	429a      	cmp	r2, r3
 8003656:	d901      	bls.n	800365c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e06b      	b.n	8003734 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	429a      	cmp	r2, r3
 8003670:	d902      	bls.n	8003678 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3303      	adds	r3, #3
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003680:	e02a      	b.n	80036d8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	429a      	cmp	r2, r3
 8003696:	d902      	bls.n	800369e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3303      	adds	r3, #3
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68d9      	ldr	r1, [r3, #12]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	4603      	mov	r3, r0
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f002 fa44 	bl	8005b48 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	441a      	add	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	441a      	add	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d809      	bhi.n	8003702 <PCD_WriteEmptyTxFifo+0xde>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d203      	bcs.n	8003702 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1bf      	bne.n	8003682 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	429a      	cmp	r2, r3
 800370c:	d811      	bhi.n	8003732 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	2201      	movs	r2, #1
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	43db      	mvns	r3, r3
 8003728:	6939      	ldr	r1, [r7, #16]
 800372a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800372e:	4013      	ands	r3, r2
 8003730:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	333c      	adds	r3, #60	@ 0x3c
 8003754:	3304      	adds	r3, #4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	799b      	ldrb	r3, [r3, #6]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d17b      	bne.n	800386a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	4a61      	ldr	r2, [pc, #388]	@ (8003904 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	f240 80b9 	bls.w	80038f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80b3 	beq.w	80038f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379e:	461a      	mov	r2, r3
 80037a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a4:	6093      	str	r3, [r2, #8]
 80037a6:	e0a7      	b.n	80038f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037be:	461a      	mov	r2, r3
 80037c0:	2320      	movs	r3, #32
 80037c2:	6093      	str	r3, [r2, #8]
 80037c4:	e098      	b.n	80038f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 8093 	bne.w	80038f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003904 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d90f      	bls.n	80037fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f0:	461a      	mov	r2, r3
 80037f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037f6:	6093      	str	r3, [r2, #8]
 80037f8:	e07e      	b.n	80038f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	0159      	lsls	r1, r3, #5
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	440b      	add	r3, r1
 800381c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003826:	1ad2      	subs	r2, r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d114      	bne.n	800385c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003844:	461a      	mov	r2, r3
 8003846:	2101      	movs	r1, #1
 8003848:	f002 fc14 	bl	8006074 <USB_EP0_OutStart>
 800384c:	e006      	b.n	800385c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	441a      	add	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f004 fef8 	bl	8008658 <HAL_PCD_DataOutStageCallback>
 8003868:	e046      	b.n	80038f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a26      	ldr	r2, [pc, #152]	@ (8003908 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d124      	bne.n	80038bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800388e:	6093      	str	r3, [r2, #8]
 8003890:	e032      	b.n	80038f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a8:	461a      	mov	r2, r3
 80038aa:	2320      	movs	r3, #32
 80038ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f004 fecf 	bl	8008658 <HAL_PCD_DataOutStageCallback>
 80038ba:	e01d      	b.n	80038f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d114      	bne.n	80038ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038e4:	461a      	mov	r2, r3
 80038e6:	2100      	movs	r1, #0
 80038e8:	f002 fbc4 	bl	8006074 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f004 feb0 	bl	8008658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	4f54300a 	.word	0x4f54300a
 8003908:	4f54310a 	.word	0x4f54310a

0800390c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	333c      	adds	r3, #60	@ 0x3c
 8003924:	3304      	adds	r3, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a15      	ldr	r2, [pc, #84]	@ (8003994 <PCD_EP_OutSetupPacket_int+0x88>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d90e      	bls.n	8003960 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800395e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f004 fe67 	bl	8008634 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a0a      	ldr	r2, [pc, #40]	@ (8003994 <PCD_EP_OutSetupPacket_int+0x88>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d90c      	bls.n	8003988 <PCD_EP_OutSetupPacket_int+0x7c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	799b      	ldrb	r3, [r3, #6]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d108      	bne.n	8003988 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003980:	461a      	mov	r2, r3
 8003982:	2101      	movs	r1, #1
 8003984:	f002 fb76 	bl	8006074 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	4f54300a 	.word	0x4f54300a

08003998 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
 80039a4:	4613      	mov	r3, r2
 80039a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d107      	bne.n	80039c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039b6:	883b      	ldrh	r3, [r7, #0]
 80039b8:	0419      	lsls	r1, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80039c4:	e028      	b.n	8003a18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4413      	add	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e00d      	b.n	80039f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	3340      	adds	r3, #64	@ 0x40
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	3301      	adds	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d3ec      	bcc.n	80039da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a00:	883b      	ldrh	r3, [r7, #0]
 8003a02:	0418      	lsls	r0, r3, #16
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	4302      	orrs	r2, r0
 8003a10:	3340      	adds	r3, #64	@ 0x40
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003a66:	4b06      	ldr	r3, [pc, #24]	@ (8003a80 <HAL_PWR_EnableBkUpAccess+0x20>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003a72:	687b      	ldr	r3, [r7, #4]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	420e0020 	.word	0x420e0020
 8003a84:	40007000 	.word	0x40007000

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e267      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d075      	beq.n	8003b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aa6:	4b88      	ldr	r3, [pc, #544]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d00c      	beq.n	8003acc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab2:	4b85      	ldr	r3, [pc, #532]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d112      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abe:	4b82      	ldr	r3, [pc, #520]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	4b7e      	ldr	r3, [pc, #504]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05b      	beq.n	8003b90 <HAL_RCC_OscConfig+0x108>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d157      	bne.n	8003b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e242      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0x74>
 8003aee:	4b76      	ldr	r3, [pc, #472]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a75      	ldr	r2, [pc, #468]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x98>
 8003b06:	4b70      	ldr	r3, [pc, #448]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6f      	ldr	r2, [pc, #444]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6c      	ldr	r2, [pc, #432]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003b20:	4b69      	ldr	r3, [pc, #420]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a68      	ldr	r2, [pc, #416]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b66      	ldr	r3, [pc, #408]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a65      	ldr	r2, [pc, #404]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd f94e 	bl	8000de0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fd f94a 	bl	8000de0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	@ 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e207      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xc0>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd f93a 	bl	8000de0 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fd f936 	bl	8000de0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	@ 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1f3      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	4b51      	ldr	r3, [pc, #324]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0xe8>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d063      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b47      	ldr	r3, [pc, #284]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb6:	4b44      	ldr	r3, [pc, #272]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	4b41      	ldr	r3, [pc, #260]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1c7      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4937      	ldr	r1, [pc, #220]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	e03a      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf8:	4b34      	ldr	r3, [pc, #208]	@ (8003ccc <HAL_RCC_OscConfig+0x244>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd f8ef 	bl	8000de0 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fd f8eb 	bl	8000de0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1a8      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b28      	ldr	r3, [pc, #160]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4925      	ldr	r1, [pc, #148]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
 8003c38:	e015      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b24      	ldr	r3, [pc, #144]	@ (8003ccc <HAL_RCC_OscConfig+0x244>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd f8ce 	bl	8000de0 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fd f8ca 	bl	8000de0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e187      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d036      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7a:	4b15      	ldr	r3, [pc, #84]	@ (8003cd0 <HAL_RCC_OscConfig+0x248>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd f8ae 	bl	8000de0 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fd f8aa 	bl	8000de0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e167      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x200>
 8003ca6:	e01b      	b.n	8003ce0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca8:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <HAL_RCC_OscConfig+0x248>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fd f897 	bl	8000de0 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	e00e      	b.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fd f893 	bl	8000de0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d907      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e150      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	42470000 	.word	0x42470000
 8003cd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd4:	4b88      	ldr	r3, [pc, #544]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ea      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8097 	beq.w	8003e1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf2:	4b81      	ldr	r3, [pc, #516]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4b7d      	ldr	r3, [pc, #500]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	4a7c      	ldr	r2, [pc, #496]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1e:	4b77      	ldr	r3, [pc, #476]	@ (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	4b74      	ldr	r3, [pc, #464]	@ (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a73      	ldr	r2, [pc, #460]	@ (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fd f853 	bl	8000de0 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd f84f 	bl	8000de0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e10c      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	4b6a      	ldr	r3, [pc, #424]	@ (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x2ea>
 8003d64:	4b64      	ldr	r3, [pc, #400]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d68:	4a63      	ldr	r2, [pc, #396]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d70:	e01c      	b.n	8003dac <HAL_RCC_OscConfig+0x324>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x30c>
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d86:	4b5c      	ldr	r3, [pc, #368]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0x324>
 8003d94:	4b58      	ldr	r3, [pc, #352]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d98:	4a57      	ldr	r2, [pc, #348]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da0:	4b55      	ldr	r3, [pc, #340]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da4:	4a54      	ldr	r2, [pc, #336]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f023 0304 	bic.w	r3, r3, #4
 8003daa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d015      	beq.n	8003de0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fd f814 	bl	8000de0 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fd f810 	bl	8000de0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e0cb      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd2:	4b49      	ldr	r3, [pc, #292]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0ee      	beq.n	8003dbc <HAL_RCC_OscConfig+0x334>
 8003dde:	e014      	b.n	8003e0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7fc fffe 	bl	8000de0 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fc fffa 	bl	8000de0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0b5      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ee      	bne.n	8003de8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b39      	ldr	r3, [pc, #228]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	4a38      	ldr	r2, [pc, #224]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80a1 	beq.w	8003f68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e26:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d05c      	beq.n	8003eec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d141      	bne.n	8003ebe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b31      	ldr	r3, [pc, #196]	@ (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fc ffce 	bl	8000de0 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fc ffca 	bl	8000de0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e087      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	4b27      	ldr	r3, [pc, #156]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	491b      	ldr	r1, [pc, #108]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e90:	4b1b      	ldr	r3, [pc, #108]	@ (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fc ffa3 	bl	8000de0 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fc ff9f 	bl	8000de0 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e05c      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x416>
 8003ebc:	e054      	b.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebe:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fc ff8c 	bl	8000de0 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fc ff88 	bl	8000de0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e045      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x444>
 8003eea:	e03d      	b.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e038      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40007000 	.word	0x40007000
 8003f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	@ (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d028      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d121      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d11a      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cc      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b68      	ldr	r3, [pc, #416]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90c      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b65      	ldr	r3, [pc, #404]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d044      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b3f      	ldr	r3, [pc, #252]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3b      	ldr	r3, [pc, #236]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e067      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b37      	ldr	r3, [pc, #220]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4934      	ldr	r1, [pc, #208]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fc feba 	bl	8000de0 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fc feb6 	bl	8000de0 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2b      	ldr	r3, [pc, #172]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b25      	ldr	r3, [pc, #148]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d20c      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b22      	ldr	r3, [pc, #136]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b12      	ldr	r3, [pc, #72]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 f821 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	@ (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc fe1a 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	08009ad8 	.word	0x08009ad8
 800413c:	20000004 	.word	0x20000004
 8004140:	20000008 	.word	0x20000008

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b090      	sub	sp, #64	@ 0x40
 800414a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415c:	4b59      	ldr	r3, [pc, #356]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d00d      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x40>
 8004168:	2b08      	cmp	r3, #8
 800416a:	f200 80a1 	bhi.w	80042b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x34>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x3a>
 8004176:	e09b      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b53      	ldr	r3, [pc, #332]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800417a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800417c:	e09b      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417e:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004180:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004182:	e098      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004184:	4b4f      	ldr	r3, [pc, #316]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800418c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418e:	4b4d      	ldr	r3, [pc, #308]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d028      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b4a      	ldr	r3, [pc, #296]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	2200      	movs	r2, #0
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041ac:	2100      	movs	r1, #0
 80041ae:	4b47      	ldr	r3, [pc, #284]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x188>)
 80041b0:	fb03 f201 	mul.w	r2, r3, r1
 80041b4:	2300      	movs	r3, #0
 80041b6:	fb00 f303 	mul.w	r3, r0, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	4a43      	ldr	r2, [pc, #268]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x188>)
 80041be:	fba0 1202 	umull	r1, r2, r0, r2
 80041c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041c4:	460a      	mov	r2, r1
 80041c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ca:	4413      	add	r3, r2
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d0:	2200      	movs	r2, #0
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	61fa      	str	r2, [r7, #28]
 80041d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041de:	f7fc f84f 	bl	8000280 <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4613      	mov	r3, r2
 80041e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ea:	e053      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ec:	4b35      	ldr	r3, [pc, #212]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	2200      	movs	r2, #0
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	617a      	str	r2, [r7, #20]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041fe:	f04f 0b00 	mov.w	fp, #0
 8004202:	4652      	mov	r2, sl
 8004204:	465b      	mov	r3, fp
 8004206:	f04f 0000 	mov.w	r0, #0
 800420a:	f04f 0100 	mov.w	r1, #0
 800420e:	0159      	lsls	r1, r3, #5
 8004210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004214:	0150      	lsls	r0, r2, #5
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	ebb2 080a 	subs.w	r8, r2, sl
 800421e:	eb63 090b 	sbc.w	r9, r3, fp
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800422e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004232:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004236:	ebb2 0408 	subs.w	r4, r2, r8
 800423a:	eb63 0509 	sbc.w	r5, r3, r9
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	00eb      	lsls	r3, r5, #3
 8004248:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800424c:	00e2      	lsls	r2, r4, #3
 800424e:	4614      	mov	r4, r2
 8004250:	461d      	mov	r5, r3
 8004252:	eb14 030a 	adds.w	r3, r4, sl
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	eb45 030b 	adc.w	r3, r5, fp
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800426a:	4629      	mov	r1, r5
 800426c:	028b      	lsls	r3, r1, #10
 800426e:	4621      	mov	r1, r4
 8004270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004274:	4621      	mov	r1, r4
 8004276:	028a      	lsls	r2, r1, #10
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427e:	2200      	movs	r2, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	60fa      	str	r2, [r7, #12]
 8004284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004288:	f7fb fffa 	bl	8000280 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4613      	mov	r3, r2
 8004292:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004294:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	3301      	adds	r3, #1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b0:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80042b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3740      	adds	r7, #64	@ 0x40
 80042bc:	46bd      	mov	sp, r7
 80042be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800
 80042c8:	00f42400 	.word	0x00f42400
 80042cc:	017d7840 	.word	0x017d7840

080042d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d4:	4b03      	ldr	r3, [pc, #12]	@ (80042e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000004 	.word	0x20000004

080042e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042ec:	f7ff fff0 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 80042f0:	4602      	mov	r2, r0
 80042f2:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	0a9b      	lsrs	r3, r3, #10
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	4903      	ldr	r1, [pc, #12]	@ (800430c <HAL_RCC_GetPCLK1Freq+0x24>)
 80042fe:	5ccb      	ldrb	r3, [r1, r3]
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40023800 	.word	0x40023800
 800430c:	08009ae8 	.word	0x08009ae8

08004310 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004334:	2b00      	cmp	r3, #0
 8004336:	d038      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004338:	4b68      	ldr	r3, [pc, #416]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800433e:	f7fc fd4f 	bl	8000de0 <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004346:	f7fc fd4b 	bl	8000de0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0bd      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004358:	4b61      	ldr	r3, [pc, #388]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	071b      	lsls	r3, r3, #28
 8004376:	495a      	ldr	r1, [pc, #360]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800437e:	4b57      	ldr	r3, [pc, #348]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004384:	f7fc fd2c 	bl	8000de0 <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800438c:	f7fc fd28 	bl	8000de0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e09a      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439e:	4b50      	ldr	r3, [pc, #320]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8083 	beq.w	80044be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	4b48      	ldr	r3, [pc, #288]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	4a47      	ldr	r2, [pc, #284]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c8:	4b45      	ldr	r3, [pc, #276]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043d4:	4b43      	ldr	r3, [pc, #268]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a42      	ldr	r2, [pc, #264]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fc fcfe 	bl	8000de0 <HAL_GetTick>
 80043e4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fc fcfa 	bl	8000de0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e06c      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043fa:	4b3a      	ldr	r3, [pc, #232]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004406:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800440e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d02f      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	429a      	cmp	r2, r3
 8004422:	d028      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004424:	4b2e      	ldr	r3, [pc, #184]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800442e:	4b2e      	ldr	r3, [pc, #184]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004434:	4b2c      	ldr	r3, [pc, #176]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800443a:	4a29      	ldr	r2, [pc, #164]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004440:	4b27      	ldr	r3, [pc, #156]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d114      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800444c:	f7fc fcc8 	bl	8000de0 <HAL_GetTick>
 8004450:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fc fcc4 	bl	8000de0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e034      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4b1d      	ldr	r3, [pc, #116]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ee      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800447e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004482:	d10d      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004484:	4b16      	ldr	r3, [pc, #88]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004498:	4911      	ldr	r1, [pc, #68]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
 800449e:	e005      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80044a0:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a0e      	ldr	r2, [pc, #56]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80044aa:	6093      	str	r3, [r2, #8]
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b8:	4909      	ldr	r1, [pc, #36]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7d1a      	ldrb	r2, [r3, #20]
 80044ce:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80044d0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	42470068 	.word	0x42470068
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42470e40 	.word	0x42470e40
 80044ec:	424711e0 	.word	0x424711e0

080044f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e073      	b.n	80045ea <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	7f5b      	ldrb	r3, [r3, #29]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d105      	bne.n	8004518 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fad4 	bl	8000ac0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b10      	cmp	r3, #16
 800452a:	d055      	beq.n	80045d8 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	22ca      	movs	r2, #202	@ 0xca
 8004532:	625a      	str	r2, [r3, #36]	@ 0x24
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2253      	movs	r2, #83	@ 0x53
 800453a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fa49 	bl	80049d4 <RTC_EnterInitMode>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d12c      	bne.n	80045a6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800455a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800455e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6899      	ldr	r1, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68d2      	ldr	r2, [r2, #12]
 8004586:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6919      	ldr	r1, [r3, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	041a      	lsls	r2, r3, #16
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fa50 	bl	8004a42 <RTC_ExitInitMode>
 80045a2:	4603      	mov	r3, r0
 80045a4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d110      	bne.n	80045ce <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	22ff      	movs	r2, #255	@ 0xff
 80045d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80045d6:	e001      	b.n	80045dc <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045f2:	b590      	push	{r4, r7, lr}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	7f1b      	ldrb	r3, [r3, #28]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_RTC_SetTime+0x1c>
 800460a:	2302      	movs	r3, #2
 800460c:	e087      	b.n	800471e <HAL_RTC_SetTime+0x12c>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2202      	movs	r2, #2
 8004618:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d126      	bne.n	800466e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2200      	movs	r2, #0
 8004632:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fa27 	bl	8004a8c <RTC_ByteToBcd2>
 800463e:	4603      	mov	r3, r0
 8004640:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fa20 	bl	8004a8c <RTC_ByteToBcd2>
 800464c:	4603      	mov	r3, r0
 800464e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004650:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	789b      	ldrb	r3, [r3, #2]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fa18 	bl	8004a8c <RTC_ByteToBcd2>
 800465c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800465e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	78db      	ldrb	r3, [r3, #3]
 8004666:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e018      	b.n	80046a0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2200      	movs	r2, #0
 8004680:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800468e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004694:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	78db      	ldrb	r3, [r3, #3]
 800469a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	22ca      	movs	r2, #202	@ 0xca
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2253      	movs	r2, #83	@ 0x53
 80046ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f98f 	bl	80049d4 <RTC_EnterInitMode>
 80046b6:	4603      	mov	r3, r0
 80046b8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80046ba:	7cfb      	ldrb	r3, [r7, #19]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d120      	bne.n	8004702 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80046ca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80046ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f9a2 	bl	8004a42 <RTC_ExitInitMode>
 80046fe:	4603      	mov	r3, r0
 8004700:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	22ff      	movs	r2, #255	@ 0xff
 8004714:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]

  return status;
 800471c:	7cfb      	ldrb	r3, [r7, #19]
}
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}

08004726 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004758:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800475c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	0d9b      	lsrs	r3, r3, #22
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d11a      	bne.n	80047d8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f98e 	bl	8004ac8 <RTC_Bcd2ToByte>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f985 	bl	8004ac8 <RTC_Bcd2ToByte>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	789b      	ldrb	r3, [r3, #2]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f97c 	bl	8004ac8 <RTC_Bcd2ToByte>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047e2:	b590      	push	{r4, r7, lr}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	7f1b      	ldrb	r3, [r3, #28]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_RTC_SetDate+0x1c>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e071      	b.n	80048e2 <HAL_RTC_SetDate+0x100>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2202      	movs	r2, #2
 8004808:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10e      	bne.n	800482e <HAL_RTC_SetDate+0x4c>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	f023 0310 	bic.w	r3, r3, #16
 8004824:	b2db      	uxtb	r3, r3
 8004826:	330a      	adds	r3, #10
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11c      	bne.n	800486e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	78db      	ldrb	r3, [r3, #3]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f927 	bl	8004a8c <RTC_ByteToBcd2>
 800483e:	4603      	mov	r3, r0
 8004840:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f920 	bl	8004a8c <RTC_ByteToBcd2>
 800484c:	4603      	mov	r3, r0
 800484e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004850:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	789b      	ldrb	r3, [r3, #2]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f918 	bl	8004a8c <RTC_ByteToBcd2>
 800485c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800485e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	e00e      	b.n	800488c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	78db      	ldrb	r3, [r3, #3]
 8004872:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800487a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004880:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	22ca      	movs	r2, #202	@ 0xca
 8004892:	625a      	str	r2, [r3, #36]	@ 0x24
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2253      	movs	r2, #83	@ 0x53
 800489a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f899 	bl	80049d4 <RTC_EnterInitMode>
 80048a2:	4603      	mov	r3, r0
 80048a4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10c      	bne.n	80048c6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80048ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f8c0 	bl	8004a42 <RTC_ExitInitMode>
 80048c2:	4603      	mov	r3, r0
 80048c4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	22ff      	movs	r2, #255	@ 0xff
 80048d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	771a      	strb	r2, [r3, #28]

  return status;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd90      	pop	{r4, r7, pc}

080048ea <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b086      	sub	sp, #24
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004904:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004908:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	b2da      	uxtb	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	b2db      	uxtb	r3, r3
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	b2da      	uxtb	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	0b5b      	lsrs	r3, r3, #13
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	b2da      	uxtb	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11a      	bne.n	800497e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	78db      	ldrb	r3, [r3, #3]
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f8bb 	bl	8004ac8 <RTC_Bcd2ToByte>
 8004952:	4603      	mov	r3, r0
 8004954:	461a      	mov	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f8b2 	bl	8004ac8 <RTC_Bcd2ToByte>
 8004964:	4603      	mov	r3, r0
 8004966:	461a      	mov	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	789b      	ldrb	r3, [r3, #2]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 f8a9 	bl	8004ac8 <RTC_Bcd2ToByte>
 8004976:	4603      	mov	r3, r0
 8004978:	461a      	mov	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0d      	ldr	r2, [pc, #52]	@ (80049d0 <HAL_RTC_WaitForSynchro+0x48>)
 800499a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800499c:	f7fc fa20 	bl	8000de0 <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049a2:	e009      	b.n	80049b8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049a4:	f7fc fa1c 	bl	8000de0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049b2:	d901      	bls.n	80049b8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e007      	b.n	80049c8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ee      	beq.n	80049a4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	00013f5f 	.word	0x00013f5f

080049d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d122      	bne.n	8004a38 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a00:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a02:	f7fc f9ed 	bl	8000de0 <HAL_GetTick>
 8004a06:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a08:	e00c      	b.n	8004a24 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a0a:	f7fc f9e9 	bl	8000de0 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a18:	d904      	bls.n	8004a24 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <RTC_EnterInitMode+0x64>
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d1e8      	bne.n	8004a0a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a5c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ff8b 	bl	8004988 <HAL_RTC_WaitForSynchro>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004a9a:	e005      	b.n	8004aa8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	3b0a      	subs	r3, #10
 8004aa6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	2b09      	cmp	r3, #9
 8004aac:	d8f6      	bhi.n	8004a9c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	b2db      	uxtb	r3, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	4413      	add	r3, r2
 8004af6:	b2db      	uxtb	r3, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b04:	b084      	sub	sp, #16
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	f107 001c 	add.w	r0, r7, #28
 8004b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d123      	bne.n	8004b66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004b32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d105      	bne.n	8004b5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f001 fae8 	bl	8006130 <USB_CoreReset>
 8004b60:	4603      	mov	r3, r0
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	e01b      	b.n	8004b9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f001 fadc 	bl	8006130 <USB_CoreReset>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b90:	e005      	b.n	8004b9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b9e:	7fbb      	ldrb	r3, [r7, #30]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d10b      	bne.n	8004bbc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f043 0206 	orr.w	r2, r3, #6
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f043 0220 	orr.w	r2, r3, #32
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bc8:	b004      	add	sp, #16
 8004bca:	4770      	bx	lr

08004bcc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d165      	bne.n	8004cac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4a41      	ldr	r2, [pc, #260]	@ (8004ce8 <USB_SetTurnaroundTime+0x11c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d906      	bls.n	8004bf6 <USB_SetTurnaroundTime+0x2a>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4a40      	ldr	r2, [pc, #256]	@ (8004cec <USB_SetTurnaroundTime+0x120>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d202      	bcs.n	8004bf6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bf0:	230f      	movs	r3, #15
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e062      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cec <USB_SetTurnaroundTime+0x120>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d306      	bcc.n	8004c0c <USB_SetTurnaroundTime+0x40>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4a3b      	ldr	r2, [pc, #236]	@ (8004cf0 <USB_SetTurnaroundTime+0x124>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d202      	bcs.n	8004c0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c06:	230e      	movs	r3, #14
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e057      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4a38      	ldr	r2, [pc, #224]	@ (8004cf0 <USB_SetTurnaroundTime+0x124>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d306      	bcc.n	8004c22 <USB_SetTurnaroundTime+0x56>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a37      	ldr	r2, [pc, #220]	@ (8004cf4 <USB_SetTurnaroundTime+0x128>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d202      	bcs.n	8004c22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c1c:	230d      	movs	r3, #13
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e04c      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4a33      	ldr	r2, [pc, #204]	@ (8004cf4 <USB_SetTurnaroundTime+0x128>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d306      	bcc.n	8004c38 <USB_SetTurnaroundTime+0x6c>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4a32      	ldr	r2, [pc, #200]	@ (8004cf8 <USB_SetTurnaroundTime+0x12c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d802      	bhi.n	8004c38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c32:	230c      	movs	r3, #12
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	e041      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf8 <USB_SetTurnaroundTime+0x12c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d906      	bls.n	8004c4e <USB_SetTurnaroundTime+0x82>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4a2e      	ldr	r2, [pc, #184]	@ (8004cfc <USB_SetTurnaroundTime+0x130>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d802      	bhi.n	8004c4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c48:	230b      	movs	r3, #11
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e036      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4a2a      	ldr	r2, [pc, #168]	@ (8004cfc <USB_SetTurnaroundTime+0x130>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d906      	bls.n	8004c64 <USB_SetTurnaroundTime+0x98>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4a29      	ldr	r2, [pc, #164]	@ (8004d00 <USB_SetTurnaroundTime+0x134>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d802      	bhi.n	8004c64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c5e:	230a      	movs	r3, #10
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e02b      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4a26      	ldr	r2, [pc, #152]	@ (8004d00 <USB_SetTurnaroundTime+0x134>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d906      	bls.n	8004c7a <USB_SetTurnaroundTime+0xae>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4a25      	ldr	r2, [pc, #148]	@ (8004d04 <USB_SetTurnaroundTime+0x138>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d202      	bcs.n	8004c7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c74:	2309      	movs	r3, #9
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e020      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4a21      	ldr	r2, [pc, #132]	@ (8004d04 <USB_SetTurnaroundTime+0x138>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d306      	bcc.n	8004c90 <USB_SetTurnaroundTime+0xc4>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4a20      	ldr	r2, [pc, #128]	@ (8004d08 <USB_SetTurnaroundTime+0x13c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d802      	bhi.n	8004c90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c8a:	2308      	movs	r3, #8
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e015      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4a1d      	ldr	r2, [pc, #116]	@ (8004d08 <USB_SetTurnaroundTime+0x13c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d906      	bls.n	8004ca6 <USB_SetTurnaroundTime+0xda>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d0c <USB_SetTurnaroundTime+0x140>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d202      	bcs.n	8004ca6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ca0:	2307      	movs	r3, #7
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e00a      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ca6:	2306      	movs	r3, #6
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e007      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004cb2:	2309      	movs	r3, #9
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e001      	b.n	8004cbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004cb8:	2309      	movs	r3, #9
 8004cba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	029b      	lsls	r3, r3, #10
 8004cd0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	00d8acbf 	.word	0x00d8acbf
 8004cec:	00e4e1c0 	.word	0x00e4e1c0
 8004cf0:	00f42400 	.word	0x00f42400
 8004cf4:	01067380 	.word	0x01067380
 8004cf8:	011a499f 	.word	0x011a499f
 8004cfc:	01312cff 	.word	0x01312cff
 8004d00:	014ca43f 	.word	0x014ca43f
 8004d04:	016e3600 	.word	0x016e3600
 8004d08:	01a6ab1f 	.word	0x01a6ab1f
 8004d0c:	01e84800 	.word	0x01e84800

08004d10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f043 0201 	orr.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 0201 	bic.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d115      	bne.n	8004da2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d82:	200a      	movs	r0, #10
 8004d84:	f7fc f838 	bl	8000df8 <HAL_Delay>
      ms += 10U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	330a      	adds	r3, #10
 8004d8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 f93f 	bl	8006012 <USB_GetMode>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d01e      	beq.n	8004dd8 <USB_SetCurrentMode+0x84>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d9e:	d9f0      	bls.n	8004d82 <USB_SetCurrentMode+0x2e>
 8004da0:	e01a      	b.n	8004dd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d115      	bne.n	8004dd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004db4:	200a      	movs	r0, #10
 8004db6:	f7fc f81f 	bl	8000df8 <HAL_Delay>
      ms += 10U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	330a      	adds	r3, #10
 8004dbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f001 f926 	bl	8006012 <USB_GetMode>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <USB_SetCurrentMode+0x84>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2bc7      	cmp	r3, #199	@ 0xc7
 8004dd0:	d9f0      	bls.n	8004db4 <USB_SetCurrentMode+0x60>
 8004dd2:	e001      	b.n	8004dd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e005      	b.n	8004de4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2bc8      	cmp	r3, #200	@ 0xc8
 8004ddc:	d101      	bne.n	8004de2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dec:	b084      	sub	sp, #16
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e009      	b.n	8004e20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	3340      	adds	r3, #64	@ 0x40
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	2200      	movs	r2, #0
 8004e18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b0e      	cmp	r3, #14
 8004e24:	d9f2      	bls.n	8004e0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11c      	bne.n	8004e68 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e3c:	f043 0302 	orr.w	r3, r3, #2
 8004e40:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e66:	e00b      	b.n	8004e80 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e86:	461a      	mov	r2, r3
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10d      	bne.n	8004eb0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f968 	bl	8005174 <USB_SetDevSpeed>
 8004ea4:	e008      	b.n	8004eb8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f963 	bl	8005174 <USB_SetDevSpeed>
 8004eae:	e003      	b.n	8004eb8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004eb0:	2103      	movs	r1, #3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f95e 	bl	8005174 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004eb8:	2110      	movs	r1, #16
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8fa 	bl	80050b4 <USB_FlushTxFifo>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f924 	bl	8005118 <USB_FlushRxFifo>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eec:	461a      	mov	r2, r3
 8004eee:	2300      	movs	r3, #0
 8004ef0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2300      	movs	r3, #0
 8004efc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e043      	b.n	8004f8c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f1a:	d118      	bne.n	8004f4e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e013      	b.n	8004f60 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f44:	461a      	mov	r2, r3
 8004f46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	e008      	b.n	8004f60 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f90:	461a      	mov	r2, r3
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d3b5      	bcc.n	8004f04 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	e043      	b.n	8005026 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fb4:	d118      	bne.n	8004fe8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e013      	b.n	8004ffa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e008      	b.n	8004ffa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005006:	461a      	mov	r2, r3
 8005008:	2300      	movs	r3, #0
 800500a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005018:	461a      	mov	r2, r3
 800501a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800501e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	3301      	adds	r3, #1
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800502a:	461a      	mov	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4293      	cmp	r3, r2
 8005030:	d3b5      	bcc.n	8004f9e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005044:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005052:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005054:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f043 0210 	orr.w	r2, r3, #16
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	4b10      	ldr	r3, [pc, #64]	@ (80050b0 <USB_DevInit+0x2c4>)
 800506e:	4313      	orrs	r3, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005074:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f043 0208 	orr.w	r2, r3, #8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005088:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800508c:	2b01      	cmp	r3, #1
 800508e:	d107      	bne.n	80050a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005098:	f043 0304 	orr.w	r3, r3, #4
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050ac:	b004      	add	sp, #16
 80050ae:	4770      	bx	lr
 80050b0:	803c3800 	.word	0x803c3800

080050b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3301      	adds	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ce:	d901      	bls.n	80050d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e01b      	b.n	800510c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	daf2      	bge.n	80050c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	019b      	lsls	r3, r3, #6
 80050e4:	f043 0220 	orr.w	r2, r3, #32
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3301      	adds	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050f8:	d901      	bls.n	80050fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e006      	b.n	800510c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b20      	cmp	r3, #32
 8005108:	d0f0      	beq.n	80050ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3301      	adds	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005130:	d901      	bls.n	8005136 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e018      	b.n	8005168 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	daf2      	bge.n	8005124 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2210      	movs	r2, #16
 8005146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005154:	d901      	bls.n	800515a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e006      	b.n	8005168 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b10      	cmp	r3, #16
 8005164:	d0f0      	beq.n	8005148 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	68f9      	ldr	r1, [r7, #12]
 8005190:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b087      	sub	sp, #28
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0306 	and.w	r3, r3, #6
 80051be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d102      	bne.n	80051cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80051c6:	2300      	movs	r3, #0
 80051c8:	75fb      	strb	r3, [r7, #23]
 80051ca:	e00a      	b.n	80051e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d002      	beq.n	80051d8 <USB_GetDevSpeed+0x32>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b06      	cmp	r3, #6
 80051d6:	d102      	bne.n	80051de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80051d8:	2302      	movs	r3, #2
 80051da:	75fb      	strb	r3, [r7, #23]
 80051dc:	e001      	b.n	80051e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80051de:	230f      	movs	r3, #15
 80051e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	371c      	adds	r7, #28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d13a      	bne.n	8005282 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	2101      	movs	r1, #1
 800521e:	fa01 f303 	lsl.w	r3, r1, r3
 8005222:	b29b      	uxth	r3, r3
 8005224:	68f9      	ldr	r1, [r7, #12]
 8005226:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800522a:	4313      	orrs	r3, r2
 800522c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d155      	bne.n	80052f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	791b      	ldrb	r3, [r3, #4]
 800525e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005260:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	059b      	lsls	r3, r3, #22
 8005266:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005268:	4313      	orrs	r3, r2
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	e036      	b.n	80052f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	2101      	movs	r1, #1
 8005294:	fa01 f303 	lsl.w	r3, r1, r3
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d11a      	bne.n	80052f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052d6:	430b      	orrs	r3, r1
 80052d8:	4313      	orrs	r3, r2
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d161      	bne.n	80053e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800532e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005332:	d11f      	bne.n	8005374 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800534e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005352:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800536e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005372:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800537a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	2101      	movs	r1, #1
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	b29b      	uxth	r3, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005394:	4013      	ands	r3, r2
 8005396:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	2101      	movs	r1, #1
 80053aa:	fa01 f303 	lsl.w	r3, r1, r3
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	43db      	mvns	r3, r3
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053b8:	4013      	ands	r3, r2
 80053ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	0159      	lsls	r1, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	440b      	add	r3, r1
 80053d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d6:	4619      	mov	r1, r3
 80053d8:	4b35      	ldr	r3, [pc, #212]	@ (80054b0 <USB_DeactivateEndpoint+0x1b0>)
 80053da:	4013      	ands	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]
 80053de:	e060      	b.n	80054a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053f6:	d11f      	bne.n	8005438 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	440a      	add	r2, r1
 800540e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005412:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005416:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	0151      	lsls	r1, r2, #5
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	440a      	add	r2, r1
 800542e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005432:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005436:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	2101      	movs	r1, #1
 800544a:	fa01 f303 	lsl.w	r3, r1, r3
 800544e:	041b      	lsls	r3, r3, #16
 8005450:	43db      	mvns	r3, r3
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005458:	4013      	ands	r3, r2
 800545a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	2101      	movs	r1, #1
 800546e:	fa01 f303 	lsl.w	r3, r1, r3
 8005472:	041b      	lsls	r3, r3, #16
 8005474:	43db      	mvns	r3, r3
 8005476:	68f9      	ldr	r1, [r7, #12]
 8005478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800547c:	4013      	ands	r3, r2
 800547e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	0159      	lsls	r1, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	440b      	add	r3, r1
 8005496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549a:	4619      	mov	r1, r3
 800549c:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <USB_DeactivateEndpoint+0x1b4>)
 800549e:	4013      	ands	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	ec337800 	.word	0xec337800
 80054b4:	eff37800 	.word	0xeff37800

080054b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	@ 0x28
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	4613      	mov	r3, r2
 80054c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	785b      	ldrb	r3, [r3, #1]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	f040 817f 	bne.w	80057d8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d132      	bne.n	8005548 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005500:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005504:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005520:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005540:	0cdb      	lsrs	r3, r3, #19
 8005542:	04db      	lsls	r3, r3, #19
 8005544:	6113      	str	r3, [r2, #16]
 8005546:	e097      	b.n	8005678 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005562:	0cdb      	lsrs	r3, r3, #19
 8005564:	04db      	lsls	r3, r3, #19
 8005566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005582:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005586:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800558a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d11a      	bne.n	80055c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055c4:	6113      	str	r3, [r2, #16]
 80055c6:	e044      	b.n	8005652 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	4413      	add	r3, r2
 80055d2:	1e5a      	subs	r2, r3, #1
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	8afb      	ldrh	r3, [r7, #22]
 80055ee:	04d9      	lsls	r1, r3, #19
 80055f0:	4ba4      	ldr	r3, [pc, #656]	@ (8005884 <USB_EPStartXfer+0x3cc>)
 80055f2:	400b      	ands	r3, r1
 80055f4:	69b9      	ldr	r1, [r7, #24]
 80055f6:	0148      	lsls	r0, r1, #5
 80055f8:	69f9      	ldr	r1, [r7, #28]
 80055fa:	4401      	add	r1, r0
 80055fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005600:	4313      	orrs	r3, r2
 8005602:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	791b      	ldrb	r3, [r3, #4]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d122      	bne.n	8005652 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005626:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800562a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	8afb      	ldrh	r3, [r7, #22]
 800563c:	075b      	lsls	r3, r3, #29
 800563e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005642:	69b9      	ldr	r1, [r7, #24]
 8005644:	0148      	lsls	r0, r1, #5
 8005646:	69f9      	ldr	r1, [r7, #28]
 8005648:	4401      	add	r1, r0
 800564a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800564e:	4313      	orrs	r3, r2
 8005650:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005668:	69b9      	ldr	r1, [r7, #24]
 800566a:	0148      	lsls	r0, r1, #5
 800566c:	69f9      	ldr	r1, [r7, #28]
 800566e:	4401      	add	r1, r0
 8005670:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005674:	4313      	orrs	r3, r2
 8005676:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d14b      	bne.n	8005716 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005692:	461a      	mov	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	791b      	ldrb	r3, [r3, #4]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d128      	bne.n	80056f4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d110      	bne.n	80056d4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e00f      	b.n	80056f4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800570e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	e166      	b.n	80059e4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005730:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005734:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	791b      	ldrb	r3, [r3, #4]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d015      	beq.n	800576a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 814e 	beq.w	80059e4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800574e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	2101      	movs	r1, #1
 800575a:	fa01 f303 	lsl.w	r3, r1, r3
 800575e:	69f9      	ldr	r1, [r7, #28]
 8005760:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005764:	4313      	orrs	r3, r2
 8005766:	634b      	str	r3, [r1, #52]	@ 0x34
 8005768:	e13c      	b.n	80059e4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d110      	bne.n	800579c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005794:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e00f      	b.n	80057bc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	68d9      	ldr	r1, [r3, #12]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	781a      	ldrb	r2, [r3, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	b298      	uxth	r0, r3
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	4603      	mov	r3, r0
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f9b9 	bl	8005b48 <USB_WritePacket>
 80057d6:	e105      	b.n	80059e4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f2:	0cdb      	lsrs	r3, r3, #19
 80057f4:	04db      	lsls	r3, r3, #19
 80057f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005812:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005816:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800581a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d132      	bne.n	8005888 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	0148      	lsls	r0, r1, #5
 8005854:	69f9      	ldr	r1, [r7, #28]
 8005856:	4401      	add	r1, r0
 8005858:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800585c:	4313      	orrs	r3, r2
 800585e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800587a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800587e:	6113      	str	r3, [r2, #16]
 8005880:	e062      	b.n	8005948 <USB_EPStartXfer+0x490>
 8005882:	bf00      	nop
 8005884:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d123      	bne.n	80058d8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a6:	69b9      	ldr	r1, [r7, #24]
 80058a8:	0148      	lsls	r0, r1, #5
 80058aa:	69f9      	ldr	r1, [r7, #28]
 80058ac:	4401      	add	r1, r0
 80058ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058b2:	4313      	orrs	r3, r2
 80058b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	0151      	lsls	r1, r2, #5
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	440a      	add	r2, r1
 80058cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058d4:	6113      	str	r3, [r2, #16]
 80058d6:	e037      	b.n	8005948 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4413      	add	r3, r2
 80058e2:	1e5a      	subs	r2, r3, #1
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	8afa      	ldrh	r2, [r7, #22]
 80058f4:	fb03 f202 	mul.w	r2, r3, r2
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	8afb      	ldrh	r3, [r7, #22]
 800590c:	04d9      	lsls	r1, r3, #19
 800590e:	4b38      	ldr	r3, [pc, #224]	@ (80059f0 <USB_EPStartXfer+0x538>)
 8005910:	400b      	ands	r3, r1
 8005912:	69b9      	ldr	r1, [r7, #24]
 8005914:	0148      	lsls	r0, r1, #5
 8005916:	69f9      	ldr	r1, [r7, #28]
 8005918:	4401      	add	r1, r0
 800591a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800591e:	4313      	orrs	r3, r2
 8005920:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005938:	69b9      	ldr	r1, [r7, #24]
 800593a:	0148      	lsls	r0, r1, #5
 800593c:	69f9      	ldr	r1, [r7, #28]
 800593e:	4401      	add	r1, r0
 8005940:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005944:	4313      	orrs	r3, r2
 8005946:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10d      	bne.n	800596a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	68d9      	ldr	r1, [r3, #12]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005966:	460a      	mov	r2, r1
 8005968:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	791b      	ldrb	r3, [r3, #4]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d128      	bne.n	80059c4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d110      	bne.n	80059a4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	0151      	lsls	r1, r2, #5
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	440a      	add	r2, r1
 8005998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800599c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e00f      	b.n	80059c4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80059e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	1ff80000 	.word	0x1ff80000

080059f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d14a      	bne.n	8005aa8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a2a:	f040 8086 	bne.w	8005b3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	7812      	ldrb	r2, [r2, #0]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	7812      	ldrb	r2, [r2, #0]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d902      	bls.n	8005a8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
          break;
 8005a8a:	e056      	b.n	8005b3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aa4:	d0e7      	beq.n	8005a76 <USB_EPStopXfer+0x82>
 8005aa6:	e048      	b.n	8005b3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005abc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ac0:	d13b      	bne.n	8005b3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	7812      	ldrb	r2, [r2, #0]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ae0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ae4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d902      	bls.n	8005b20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b1e:	e00c      	b.n	8005b3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b38:	d0e7      	beq.n	8005b0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b089      	sub	sp, #36	@ 0x24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4611      	mov	r1, r2
 8005b54:	461a      	mov	r2, r3
 8005b56:	460b      	mov	r3, r1
 8005b58:	71fb      	strb	r3, [r7, #7]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d123      	bne.n	8005bb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b6e:	88bb      	ldrh	r3, [r7, #4]
 8005b70:	3303      	adds	r3, #3
 8005b72:	089b      	lsrs	r3, r3, #2
 8005b74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b76:	2300      	movs	r3, #0
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	e018      	b.n	8005bae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	031a      	lsls	r2, r3, #12
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b88:	461a      	mov	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	3301      	adds	r3, #1
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d3e2      	bcc.n	8005b7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3724      	adds	r7, #36	@ 0x24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b08b      	sub	sp, #44	@ 0x2c
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	089b      	lsrs	r3, r3, #2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	623b      	str	r3, [r7, #32]
 8005bee:	e014      	b.n	8005c1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	3301      	adds	r3, #1
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	3301      	adds	r3, #1
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	3301      	adds	r3, #1
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	3301      	adds	r3, #1
 8005c18:	623b      	str	r3, [r7, #32]
 8005c1a:	6a3a      	ldr	r2, [r7, #32]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d3e6      	bcc.n	8005bf0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c22:	8bfb      	ldrh	r3, [r7, #30]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01e      	beq.n	8005c66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c32:	461a      	mov	r2, r3
 8005c34:	f107 0310 	add.w	r3, r7, #16
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	701a      	strb	r2, [r3, #0]
      i++;
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	3301      	adds	r3, #1
 8005c52:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	3301      	adds	r3, #1
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c5a:	8bfb      	ldrh	r3, [r7, #30]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c60:	8bfb      	ldrh	r3, [r7, #30]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1ea      	bne.n	8005c3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	372c      	adds	r7, #44	@ 0x2c
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	785b      	ldrb	r3, [r3, #1]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d12c      	bne.n	8005cea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	db12      	blt.n	8005cc8 <USB_EPSetStall+0x54>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00f      	beq.n	8005cc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	e02b      	b.n	8005d42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	db12      	blt.n	8005d22 <USB_EPSetStall+0xae>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00f      	beq.n	8005d22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d128      	bne.n	8005dbe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d003      	beq.n	8005d9c <USB_EPClearStall+0x4c>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	791b      	ldrb	r3, [r3, #4]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d138      	bne.n	8005e0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e027      	b.n	8005e0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ddc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	791b      	ldrb	r3, [r3, #4]
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d003      	beq.n	8005dee <USB_EPClearStall+0x9e>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	791b      	ldrb	r3, [r3, #4]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d10f      	bne.n	8005e0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005e3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005e50:	68f9      	ldr	r1, [r7, #12]
 8005e52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e56:	4313      	orrs	r3, r2
 8005e58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e82:	f023 0303 	bic.w	r3, r3, #3
 8005e86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e96:	f023 0302 	bic.w	r3, r3, #2
 8005e9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ec4:	f023 0303 	bic.w	r3, r3, #3
 8005ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ed8:	f043 0302 	orr.w	r3, r3, #2
 8005edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f04:	68fb      	ldr	r3, [r7, #12]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	4013      	ands	r3, r2
 8005f34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	0c1b      	lsrs	r3, r3, #16
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	4013      	ands	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	b29b      	uxth	r3, r3
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b087      	sub	sp, #28
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	01db      	lsls	r3, r3, #7
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4013      	ands	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006004:	68bb      	ldr	r3, [r7, #8]
}
 8006006:	4618      	mov	r0, r3
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0301 	and.w	r3, r3, #1
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006048:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800604c:	f023 0307 	bic.w	r3, r3, #7
 8006050:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006064:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	460b      	mov	r3, r1
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	333c      	adds	r3, #60	@ 0x3c
 800608a:	3304      	adds	r3, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4a26      	ldr	r2, [pc, #152]	@ (800612c <USB_EP0_OutStart+0xb8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d90a      	bls.n	80060ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060a8:	d101      	bne.n	80060ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e037      	b.n	800611e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b4:	461a      	mov	r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060dc:	f043 0318 	orr.w	r3, r3, #24
 80060e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80060f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80060f6:	7afb      	ldrb	r3, [r7, #11]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d10f      	bne.n	800611c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006116:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800611a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	4f54300a 	.word	0x4f54300a

08006130 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006148:	d901      	bls.n	800614e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e022      	b.n	8006194 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	daf2      	bge.n	800613c <USB_CoreReset+0xc>

  count = 10U;
 8006156:	230a      	movs	r3, #10
 8006158:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800615a:	e002      	b.n	8006162 <USB_CoreReset+0x32>
  {
    count--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b01      	subs	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f9      	bne.n	800615c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f043 0201 	orr.w	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006180:	d901      	bls.n	8006186 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e006      	b.n	8006194 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b01      	cmp	r3, #1
 8006190:	d0f0      	beq.n	8006174 <USB_CoreReset+0x44>

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80061b0:	f002 fcb2 	bl	8008b18 <USBD_static_malloc>
 80061b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	32b0      	adds	r2, #176	@ 0xb0
 80061c6:	2100      	movs	r1, #0
 80061c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80061cc:	2302      	movs	r3, #2
 80061ce:	e0d4      	b.n	800637a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80061d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80061d4:	2100      	movs	r1, #0
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f002 fdf9 	bl	8008dce <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	32b0      	adds	r2, #176	@ 0xb0
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	32b0      	adds	r2, #176	@ 0xb0
 80061f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	7c1b      	ldrb	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d138      	bne.n	800627a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006208:	4b5e      	ldr	r3, [pc, #376]	@ (8006384 <USBD_CDC_Init+0x1e4>)
 800620a:	7819      	ldrb	r1, [r3, #0]
 800620c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006210:	2202      	movs	r2, #2
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f002 fb5d 	bl	80088d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006218:	4b5a      	ldr	r3, [pc, #360]	@ (8006384 <USBD_CDC_Init+0x1e4>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	f003 020f 	and.w	r2, r3, #15
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	3323      	adds	r3, #35	@ 0x23
 800622e:	2201      	movs	r2, #1
 8006230:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006232:	4b55      	ldr	r3, [pc, #340]	@ (8006388 <USBD_CDC_Init+0x1e8>)
 8006234:	7819      	ldrb	r1, [r3, #0]
 8006236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800623a:	2202      	movs	r2, #2
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f002 fb48 	bl	80088d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006242:	4b51      	ldr	r3, [pc, #324]	@ (8006388 <USBD_CDC_Init+0x1e8>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	f003 020f 	and.w	r2, r3, #15
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800625e:	4b4b      	ldr	r3, [pc, #300]	@ (800638c <USBD_CDC_Init+0x1ec>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	f003 020f 	and.w	r2, r3, #15
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	331c      	adds	r3, #28
 8006274:	2210      	movs	r2, #16
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e035      	b.n	80062e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800627a:	4b42      	ldr	r3, [pc, #264]	@ (8006384 <USBD_CDC_Init+0x1e4>)
 800627c:	7819      	ldrb	r1, [r3, #0]
 800627e:	2340      	movs	r3, #64	@ 0x40
 8006280:	2202      	movs	r2, #2
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f002 fb25 	bl	80088d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006288:	4b3e      	ldr	r3, [pc, #248]	@ (8006384 <USBD_CDC_Init+0x1e4>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	3323      	adds	r3, #35	@ 0x23
 800629e:	2201      	movs	r2, #1
 80062a0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062a2:	4b39      	ldr	r3, [pc, #228]	@ (8006388 <USBD_CDC_Init+0x1e8>)
 80062a4:	7819      	ldrb	r1, [r3, #0]
 80062a6:	2340      	movs	r3, #64	@ 0x40
 80062a8:	2202      	movs	r2, #2
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f002 fb11 	bl	80088d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062b0:	4b35      	ldr	r3, [pc, #212]	@ (8006388 <USBD_CDC_Init+0x1e8>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	f003 020f 	and.w	r2, r3, #15
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80062cc:	4b2f      	ldr	r3, [pc, #188]	@ (800638c <USBD_CDC_Init+0x1ec>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 020f 	and.w	r2, r3, #15
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	331c      	adds	r3, #28
 80062e2:	2210      	movs	r2, #16
 80062e4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062e6:	4b29      	ldr	r3, [pc, #164]	@ (800638c <USBD_CDC_Init+0x1ec>)
 80062e8:	7819      	ldrb	r1, [r3, #0]
 80062ea:	2308      	movs	r3, #8
 80062ec:	2203      	movs	r2, #3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f002 faef 	bl	80088d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80062f4:	4b25      	ldr	r3, [pc, #148]	@ (800638c <USBD_CDC_Init+0x1ec>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	3323      	adds	r3, #35	@ 0x23
 800630a:	2201      	movs	r2, #1
 800630c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	33b0      	adds	r3, #176	@ 0xb0
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006344:	2302      	movs	r3, #2
 8006346:	e018      	b.n	800637a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7c1b      	ldrb	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006350:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <USBD_CDC_Init+0x1e8>)
 8006352:	7819      	ldrb	r1, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800635a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f002 fba6 	bl	8008ab0 <USBD_LL_PrepareReceive>
 8006364:	e008      	b.n	8006378 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006366:	4b08      	ldr	r3, [pc, #32]	@ (8006388 <USBD_CDC_Init+0x1e8>)
 8006368:	7819      	ldrb	r1, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006370:	2340      	movs	r3, #64	@ 0x40
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f002 fb9c 	bl	8008ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000097 	.word	0x20000097
 8006388:	20000098 	.word	0x20000098
 800638c:	20000099 	.word	0x20000099

08006390 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800639c:	4b3a      	ldr	r3, [pc, #232]	@ (8006488 <USBD_CDC_DeInit+0xf8>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f002 fabb 	bl	800891e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80063a8:	4b37      	ldr	r3, [pc, #220]	@ (8006488 <USBD_CDC_DeInit+0xf8>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	f003 020f 	and.w	r2, r3, #15
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	440b      	add	r3, r1
 80063bc:	3323      	adds	r3, #35	@ 0x23
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80063c2:	4b32      	ldr	r3, [pc, #200]	@ (800648c <USBD_CDC_DeInit+0xfc>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f002 faa8 	bl	800891e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80063ce:	4b2f      	ldr	r3, [pc, #188]	@ (800648c <USBD_CDC_DeInit+0xfc>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f003 020f 	and.w	r2, r3, #15
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80063ea:	4b29      	ldr	r3, [pc, #164]	@ (8006490 <USBD_CDC_DeInit+0x100>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f002 fa94 	bl	800891e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80063f6:	4b26      	ldr	r3, [pc, #152]	@ (8006490 <USBD_CDC_DeInit+0x100>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f003 020f 	and.w	r2, r3, #15
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	3323      	adds	r3, #35	@ 0x23
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006410:	4b1f      	ldr	r3, [pc, #124]	@ (8006490 <USBD_CDC_DeInit+0x100>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	331c      	adds	r3, #28
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	32b0      	adds	r2, #176	@ 0xb0
 8006434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01f      	beq.n	800647c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	33b0      	adds	r3, #176	@ 0xb0
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	32b0      	adds	r2, #176	@ 0xb0
 800645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645e:	4618      	mov	r0, r3
 8006460:	f002 fb68 	bl	8008b34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	32b0      	adds	r2, #176	@ 0xb0
 800646e:	2100      	movs	r1, #0
 8006470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000097 	.word	0x20000097
 800648c:	20000098 	.word	0x20000098
 8006490:	20000099 	.word	0x20000099

08006494 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	32b0      	adds	r2, #176	@ 0xb0
 80064a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e0bf      	b.n	8006644 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d050      	beq.n	8006572 <USBD_CDC_Setup+0xde>
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	f040 80af 	bne.w	8006634 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	88db      	ldrh	r3, [r3, #6]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d03a      	beq.n	8006554 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	b25b      	sxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	da1b      	bge.n	8006520 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	33b0      	adds	r3, #176	@ 0xb0
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80064fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	88d2      	ldrh	r2, [r2, #6]
 8006504:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	88db      	ldrh	r3, [r3, #6]
 800650a:	2b07      	cmp	r3, #7
 800650c:	bf28      	it	cs
 800650e:	2307      	movcs	r3, #7
 8006510:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	89fa      	ldrh	r2, [r7, #14]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 fda9 	bl	8008070 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800651e:	e090      	b.n	8006642 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	785a      	ldrb	r2, [r3, #1]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	88db      	ldrh	r3, [r3, #6]
 800652e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006530:	d803      	bhi.n	800653a <USBD_CDC_Setup+0xa6>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	88db      	ldrh	r3, [r3, #6]
 8006536:	b2da      	uxtb	r2, r3
 8006538:	e000      	b.n	800653c <USBD_CDC_Setup+0xa8>
 800653a:	2240      	movs	r2, #64	@ 0x40
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006542:	6939      	ldr	r1, [r7, #16]
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800654a:	461a      	mov	r2, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 fdbe 	bl	80080ce <USBD_CtlPrepareRx>
      break;
 8006552:	e076      	b.n	8006642 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	33b0      	adds	r3, #176	@ 0xb0
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	7850      	ldrb	r0, [r2, #1]
 800656a:	2200      	movs	r2, #0
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	4798      	blx	r3
      break;
 8006570:	e067      	b.n	8006642 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	785b      	ldrb	r3, [r3, #1]
 8006576:	2b0b      	cmp	r3, #11
 8006578:	d851      	bhi.n	800661e <USBD_CDC_Setup+0x18a>
 800657a:	a201      	add	r2, pc, #4	@ (adr r2, 8006580 <USBD_CDC_Setup+0xec>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	080065b1 	.word	0x080065b1
 8006584:	0800662d 	.word	0x0800662d
 8006588:	0800661f 	.word	0x0800661f
 800658c:	0800661f 	.word	0x0800661f
 8006590:	0800661f 	.word	0x0800661f
 8006594:	0800661f 	.word	0x0800661f
 8006598:	0800661f 	.word	0x0800661f
 800659c:	0800661f 	.word	0x0800661f
 80065a0:	0800661f 	.word	0x0800661f
 80065a4:	0800661f 	.word	0x0800661f
 80065a8:	080065db 	.word	0x080065db
 80065ac:	08006605 	.word	0x08006605
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d107      	bne.n	80065cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065bc:	f107 030a 	add.w	r3, r7, #10
 80065c0:	2202      	movs	r2, #2
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 fd53 	bl	8008070 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065ca:	e032      	b.n	8006632 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fcd1 	bl	8007f76 <USBD_CtlError>
            ret = USBD_FAIL;
 80065d4:	2303      	movs	r3, #3
 80065d6:	75fb      	strb	r3, [r7, #23]
          break;
 80065d8:	e02b      	b.n	8006632 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d107      	bne.n	80065f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80065e6:	f107 030d 	add.w	r3, r7, #13
 80065ea:	2201      	movs	r2, #1
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fd3e 	bl	8008070 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065f4:	e01d      	b.n	8006632 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fcbc 	bl	8007f76 <USBD_CtlError>
            ret = USBD_FAIL;
 80065fe:	2303      	movs	r3, #3
 8006600:	75fb      	strb	r3, [r7, #23]
          break;
 8006602:	e016      	b.n	8006632 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b03      	cmp	r3, #3
 800660e:	d00f      	beq.n	8006630 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 fcaf 	bl	8007f76 <USBD_CtlError>
            ret = USBD_FAIL;
 8006618:	2303      	movs	r3, #3
 800661a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800661c:	e008      	b.n	8006630 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fca8 	bl	8007f76 <USBD_CtlError>
          ret = USBD_FAIL;
 8006626:	2303      	movs	r3, #3
 8006628:	75fb      	strb	r3, [r7, #23]
          break;
 800662a:	e002      	b.n	8006632 <USBD_CDC_Setup+0x19e>
          break;
 800662c:	bf00      	nop
 800662e:	e008      	b.n	8006642 <USBD_CDC_Setup+0x1ae>
          break;
 8006630:	bf00      	nop
      }
      break;
 8006632:	e006      	b.n	8006642 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 fc9d 	bl	8007f76 <USBD_CtlError>
      ret = USBD_FAIL;
 800663c:	2303      	movs	r3, #3
 800663e:	75fb      	strb	r3, [r7, #23]
      break;
 8006640:	bf00      	nop
  }

  return (uint8_t)ret;
 8006642:	7dfb      	ldrb	r3, [r7, #23]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800665e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	32b0      	adds	r2, #176	@ 0xb0
 800666a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006672:	2303      	movs	r3, #3
 8006674:	e065      	b.n	8006742 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	32b0      	adds	r2, #176	@ 0xb0
 8006680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006684:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	f003 020f 	and.w	r2, r3, #15
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3314      	adds	r3, #20
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d02f      	beq.n	8006700 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	f003 020f 	and.w	r2, r3, #15
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	3314      	adds	r3, #20
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	f003 010f 	and.w	r1, r3, #15
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	460b      	mov	r3, r1
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	440b      	add	r3, r1
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4403      	add	r3, r0
 80066c8:	331c      	adds	r3, #28
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d112      	bne.n	8006700 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	f003 020f 	and.w	r2, r3, #15
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	3314      	adds	r3, #20
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066f2:	78f9      	ldrb	r1, [r7, #3]
 80066f4:	2300      	movs	r3, #0
 80066f6:	2200      	movs	r2, #0
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f002 f9b8 	bl	8008a6e <USBD_LL_Transmit>
 80066fe:	e01f      	b.n	8006740 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	33b0      	adds	r3, #176	@ 0xb0
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d010      	beq.n	8006740 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	33b0      	adds	r3, #176	@ 0xb0
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	32b0      	adds	r2, #176	@ 0xb0
 8006760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006764:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	32b0      	adds	r2, #176	@ 0xb0
 8006770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006778:	2303      	movs	r3, #3
 800677a:	e01a      	b.n	80067b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f002 f9b6 	bl	8008af2 <USBD_LL_GetRxDataSize>
 8006786:	4602      	mov	r2, r0
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	33b0      	adds	r3, #176	@ 0xb0
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80067ac:	4611      	mov	r1, r2
 80067ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	32b0      	adds	r2, #176	@ 0xb0
 80067cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067d8:	2303      	movs	r3, #3
 80067da:	e024      	b.n	8006826 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	33b0      	adds	r3, #176	@ 0xb0
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d019      	beq.n	8006824 <USBD_CDC_EP0_RxReady+0x6a>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80067f6:	2bff      	cmp	r3, #255	@ 0xff
 80067f8:	d014      	beq.n	8006824 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	33b0      	adds	r3, #176	@ 0xb0
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006812:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800681a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	22ff      	movs	r2, #255	@ 0xff
 8006820:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006838:	2182      	movs	r1, #130	@ 0x82
 800683a:	4818      	ldr	r0, [pc, #96]	@ (800689c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800683c:	f000 fd62 	bl	8007304 <USBD_GetEpDesc>
 8006840:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006842:	2101      	movs	r1, #1
 8006844:	4815      	ldr	r0, [pc, #84]	@ (800689c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006846:	f000 fd5d 	bl	8007304 <USBD_GetEpDesc>
 800684a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800684c:	2181      	movs	r1, #129	@ 0x81
 800684e:	4813      	ldr	r0, [pc, #76]	@ (800689c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006850:	f000 fd58 	bl	8007304 <USBD_GetEpDesc>
 8006854:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2210      	movs	r2, #16
 8006860:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2200      	movs	r2, #0
 800686c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006870:	711a      	strb	r2, [r3, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d006      	beq.n	800688a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006884:	711a      	strb	r2, [r3, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2243      	movs	r2, #67	@ 0x43
 800688e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006890:	4b02      	ldr	r3, [pc, #8]	@ (800689c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000054 	.word	0x20000054

080068a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068a8:	2182      	movs	r1, #130	@ 0x82
 80068aa:	4818      	ldr	r0, [pc, #96]	@ (800690c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068ac:	f000 fd2a 	bl	8007304 <USBD_GetEpDesc>
 80068b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068b2:	2101      	movs	r1, #1
 80068b4:	4815      	ldr	r0, [pc, #84]	@ (800690c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068b6:	f000 fd25 	bl	8007304 <USBD_GetEpDesc>
 80068ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068bc:	2181      	movs	r1, #129	@ 0x81
 80068be:	4813      	ldr	r0, [pc, #76]	@ (800690c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068c0:	f000 fd20 	bl	8007304 <USBD_GetEpDesc>
 80068c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2210      	movs	r2, #16
 80068d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d006      	beq.n	80068e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2200      	movs	r2, #0
 80068dc:	711a      	strb	r2, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f042 0202 	orr.w	r2, r2, #2
 80068e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	711a      	strb	r2, [r3, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f042 0202 	orr.w	r2, r2, #2
 80068f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2243      	movs	r2, #67	@ 0x43
 80068fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006900:	4b02      	ldr	r3, [pc, #8]	@ (800690c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000054 	.word	0x20000054

08006910 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006918:	2182      	movs	r1, #130	@ 0x82
 800691a:	4818      	ldr	r0, [pc, #96]	@ (800697c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800691c:	f000 fcf2 	bl	8007304 <USBD_GetEpDesc>
 8006920:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006922:	2101      	movs	r1, #1
 8006924:	4815      	ldr	r0, [pc, #84]	@ (800697c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006926:	f000 fced 	bl	8007304 <USBD_GetEpDesc>
 800692a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800692c:	2181      	movs	r1, #129	@ 0x81
 800692e:	4813      	ldr	r0, [pc, #76]	@ (800697c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006930:	f000 fce8 	bl	8007304 <USBD_GetEpDesc>
 8006934:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2210      	movs	r2, #16
 8006940:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d006      	beq.n	8006956 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2200      	movs	r2, #0
 800694c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006950:	711a      	strb	r2, [r3, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d006      	beq.n	800696a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006964:	711a      	strb	r2, [r3, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2243      	movs	r2, #67	@ 0x43
 800696e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006970:	4b02      	ldr	r3, [pc, #8]	@ (800697c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000054 	.word	0x20000054

08006980 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	220a      	movs	r2, #10
 800698c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800698e:	4b03      	ldr	r3, [pc, #12]	@ (800699c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20000010 	.word	0x20000010

080069a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e009      	b.n	80069c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	33b0      	adds	r3, #176	@ 0xb0
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	32b0      	adds	r2, #176	@ 0xb0
 80069ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e008      	b.n	8006a0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	32b0      	adds	r2, #176	@ 0xb0
 8006a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e004      	b.n	8006a46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	32b0      	adds	r2, #176	@ 0xb0
 8006a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e025      	b.n	8006ac6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d11f      	bne.n	8006ac4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006a8c:	4b10      	ldr	r3, [pc, #64]	@ (8006ad0 <USBD_CDC_TransmitPacket+0x7c>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f003 020f 	and.w	r2, r3, #15
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4403      	add	r3, r0
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006aaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ad0 <USBD_CDC_TransmitPacket+0x7c>)
 8006aac:	7819      	ldrb	r1, [r3, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 ffd7 	bl	8008a6e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000097 	.word	0x20000097

08006ad4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	32b0      	adds	r2, #176	@ 0xb0
 8006ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	32b0      	adds	r2, #176	@ 0xb0
 8006af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e018      	b.n	8006b34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	7c1b      	ldrb	r3, [r3, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <USBD_CDC_ReceivePacket+0x68>)
 8006b0c:	7819      	ldrb	r1, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 ffc9 	bl	8008ab0 <USBD_LL_PrepareReceive>
 8006b1e:	e008      	b.n	8006b32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b20:	4b06      	ldr	r3, [pc, #24]	@ (8006b3c <USBD_CDC_ReceivePacket+0x68>)
 8006b22:	7819      	ldrb	r1, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b2a:	2340      	movs	r3, #64	@ 0x40
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 ffbf 	bl	8008ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20000098 	.word	0x20000098

08006b40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e01f      	b.n	8006b98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	79fa      	ldrb	r2, [r7, #7]
 8006b8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 fe39 	bl	8008804 <USBD_LL_Init>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e025      	b.n	8006c04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	32ae      	adds	r2, #174	@ 0xae
 8006bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00f      	beq.n	8006bf4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	32ae      	adds	r2, #174	@ 0xae
 8006bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be4:	f107 020e 	add.w	r2, r7, #14
 8006be8:	4610      	mov	r0, r2
 8006bea:	4798      	blx	r3
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 fe41 	bl	800889c <USBD_LL_Start>
 8006c1a:	4603      	mov	r3, r0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d009      	beq.n	8006c68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
 8006c64:	4603      	mov	r3, r0
 8006c66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f001 f922 	bl	8007f02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006ccc:	461a      	mov	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006cda:	f003 031f 	and.w	r3, r3, #31
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d01a      	beq.n	8006d18 <USBD_LL_SetupStage+0x72>
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d822      	bhi.n	8006d2c <USBD_LL_SetupStage+0x86>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <USBD_LL_SetupStage+0x4a>
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d00a      	beq.n	8006d04 <USBD_LL_SetupStage+0x5e>
 8006cee:	e01d      	b.n	8006d2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fb77 	bl	80073ec <USBD_StdDevReq>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	73fb      	strb	r3, [r7, #15]
      break;
 8006d02:	e020      	b.n	8006d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fbdf 	bl	80074d0 <USBD_StdItfReq>
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]
      break;
 8006d16:	e016      	b.n	8006d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fc41 	bl	80075a8 <USBD_StdEPReq>
 8006d26:	4603      	mov	r3, r0
 8006d28:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2a:	e00c      	b.n	8006d46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fe0e 	bl	800895c <USBD_LL_StallEP>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]
      break;
 8006d44:	bf00      	nop
  }

  return ret;
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006d62:	7afb      	ldrb	r3, [r7, #11]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d177      	bne.n	8006e58 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006d6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	f040 80a1 	bne.w	8006ebe <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	8992      	ldrh	r2, [r2, #12]
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d91c      	bls.n	8006dc2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	8992      	ldrh	r2, [r2, #12]
 8006d90:	1a9a      	subs	r2, r3, r2
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	8992      	ldrh	r2, [r2, #12]
 8006d9e:	441a      	add	r2, r3
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	6919      	ldr	r1, [r3, #16]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	899b      	ldrh	r3, [r3, #12]
 8006dac:	461a      	mov	r2, r3
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bf38      	it	cc
 8006db6:	4613      	movcc	r3, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f001 f9a8 	bl	8008110 <USBD_CtlContinueRx>
 8006dc0:	e07d      	b.n	8006ebe <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d014      	beq.n	8006dfa <USBD_LL_DataOutStage+0xaa>
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d81d      	bhi.n	8006e10 <USBD_LL_DataOutStage+0xc0>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <USBD_LL_DataOutStage+0x8e>
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d003      	beq.n	8006de4 <USBD_LL_DataOutStage+0x94>
 8006ddc:	e018      	b.n	8006e10 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	75bb      	strb	r3, [r7, #22]
            break;
 8006de2:	e018      	b.n	8006e16 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	4619      	mov	r1, r3
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fa6e 	bl	80072d0 <USBD_CoreFindIF>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75bb      	strb	r3, [r7, #22]
            break;
 8006df8:	e00d      	b.n	8006e16 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	4619      	mov	r1, r3
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 fa70 	bl	80072ea <USBD_CoreFindEP>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75bb      	strb	r3, [r7, #22]
            break;
 8006e0e:	e002      	b.n	8006e16 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	75bb      	strb	r3, [r7, #22]
            break;
 8006e14:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e16:	7dbb      	ldrb	r3, [r7, #22]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d119      	bne.n	8006e50 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d113      	bne.n	8006e50 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e28:	7dba      	ldrb	r2, [r7, #22]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	32ae      	adds	r2, #174	@ 0xae
 8006e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006e38:	7dba      	ldrb	r2, [r7, #22]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e40:	7dba      	ldrb	r2, [r7, #22]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	32ae      	adds	r2, #174	@ 0xae
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f001 f96e 	bl	8008132 <USBD_CtlSendStatus>
 8006e56:	e032      	b.n	8006ebe <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	4619      	mov	r1, r3
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fa41 	bl	80072ea <USBD_CoreFindEP>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e6c:	7dbb      	ldrb	r3, [r7, #22]
 8006e6e:	2bff      	cmp	r3, #255	@ 0xff
 8006e70:	d025      	beq.n	8006ebe <USBD_LL_DataOutStage+0x16e>
 8006e72:	7dbb      	ldrb	r3, [r7, #22]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d122      	bne.n	8006ebe <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d117      	bne.n	8006eb4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006e84:	7dba      	ldrb	r2, [r7, #22]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	32ae      	adds	r2, #174	@ 0xae
 8006e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00f      	beq.n	8006eb4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006e94:	7dba      	ldrb	r2, [r7, #22]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006e9c:	7dba      	ldrb	r2, [r7, #22]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	32ae      	adds	r2, #174	@ 0xae
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	7afa      	ldrb	r2, [r7, #11]
 8006eaa:	4611      	mov	r1, r2
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	4798      	blx	r3
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	e000      	b.n	8006ec0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d178      	bne.n	8006fce <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3314      	adds	r3, #20
 8006ee0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d163      	bne.n	8006fb4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	8992      	ldrh	r2, [r2, #12]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d91c      	bls.n	8006f32 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	8992      	ldrh	r2, [r2, #12]
 8006f00:	1a9a      	subs	r2, r3, r2
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	8992      	ldrh	r2, [r2, #12]
 8006f0e:	441a      	add	r2, r3
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	6919      	ldr	r1, [r3, #16]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f001 f8c4 	bl	80080ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f24:	2300      	movs	r3, #0
 8006f26:	2200      	movs	r2, #0
 8006f28:	2100      	movs	r1, #0
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f001 fdc0 	bl	8008ab0 <USBD_LL_PrepareReceive>
 8006f30:	e040      	b.n	8006fb4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	899b      	ldrh	r3, [r3, #12]
 8006f36:	461a      	mov	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d11c      	bne.n	8006f7a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d316      	bcc.n	8006f7a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d20f      	bcs.n	8006f7a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f001 f8a4 	bl	80080ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2100      	movs	r1, #0
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f001 fd9c 	bl	8008ab0 <USBD_LL_PrepareReceive>
 8006f78:	e01c      	b.n	8006fb4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d10f      	bne.n	8006fa6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d009      	beq.n	8006fa6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fa6:	2180      	movs	r1, #128	@ 0x80
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f001 fcd7 	bl	800895c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f001 f8d2 	bl	8008158 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d03a      	beq.n	8007034 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7ff fe30 	bl	8006c24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006fcc:	e032      	b.n	8007034 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f986 	bl	80072ea <USBD_CoreFindEP>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	2bff      	cmp	r3, #255	@ 0xff
 8006fe6:	d025      	beq.n	8007034 <USBD_LL_DataInStage+0x16c>
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d122      	bne.n	8007034 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d11c      	bne.n	8007034 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ffa:	7dfa      	ldrb	r2, [r7, #23]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	32ae      	adds	r2, #174	@ 0xae
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d014      	beq.n	8007034 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800700a:	7dfa      	ldrb	r2, [r7, #23]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007012:	7dfa      	ldrb	r2, [r7, #23]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	32ae      	adds	r2, #174	@ 0xae
 8007018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	7afa      	ldrb	r2, [r7, #11]
 8007020:	4611      	mov	r1, r2
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	4798      	blx	r3
 8007026:	4603      	mov	r3, r0
 8007028:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800702a:	7dbb      	ldrb	r3, [r7, #22]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007030:	7dbb      	ldrb	r3, [r7, #22]
 8007032:	e000      	b.n	8007036 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d014      	beq.n	80070a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6852      	ldr	r2, [r2, #4]
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	4611      	mov	r1, r2
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070a0:	2303      	movs	r3, #3
 80070a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070a4:	2340      	movs	r3, #64	@ 0x40
 80070a6:	2200      	movs	r2, #0
 80070a8:	2100      	movs	r1, #0
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 fc11 	bl	80088d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2240      	movs	r2, #64	@ 0x40
 80070bc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070c0:	2340      	movs	r3, #64	@ 0x40
 80070c2:	2200      	movs	r2, #0
 80070c4:	2180      	movs	r1, #128	@ 0x80
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 fc03 	bl	80088d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2240      	movs	r2, #64	@ 0x40
 80070d8:	841a      	strh	r2, [r3, #32]

  return ret;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	78fa      	ldrb	r2, [r7, #3]
 80070f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b04      	cmp	r3, #4
 8007116:	d006      	beq.n	8007126 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800711e:	b2da      	uxtb	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2204      	movs	r2, #4
 800712a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b04      	cmp	r3, #4
 800714e:	d106      	bne.n	800715e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007156:	b2da      	uxtb	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b03      	cmp	r3, #3
 800717e:	d110      	bne.n	80071a2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	32ae      	adds	r2, #174	@ 0xae
 80071c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e01c      	b.n	8007208 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d115      	bne.n	8007206 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	32ae      	adds	r2, #174	@ 0xae
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	32ae      	adds	r2, #174	@ 0xae
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	4611      	mov	r1, r2
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32ae      	adds	r2, #174	@ 0xae
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	e01c      	b.n	800726c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b03      	cmp	r3, #3
 800723c:	d115      	bne.n	800726a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	32ae      	adds	r2, #174	@ 0xae
 8007248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	32ae      	adds	r2, #174	@ 0xae
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	78fa      	ldrb	r2, [r7, #3]
 8007264:	4611      	mov	r1, r2
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00e      	beq.n	80072c6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6852      	ldr	r2, [r2, #4]
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	4611      	mov	r1, r2
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	4798      	blx	r3
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80072c2:	2303      	movs	r3, #3
 80072c4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	885b      	ldrh	r3, [r3, #2]
 8007320:	b29b      	uxth	r3, r3
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	7812      	ldrb	r2, [r2, #0]
 8007326:	4293      	cmp	r3, r2
 8007328:	d91f      	bls.n	800736a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007330:	e013      	b.n	800735a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007332:	f107 030a 	add.w	r3, r7, #10
 8007336:	4619      	mov	r1, r3
 8007338:	6978      	ldr	r0, [r7, #20]
 800733a:	f000 f81b 	bl	8007374 <USBD_GetNextDesc>
 800733e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	2b05      	cmp	r3, #5
 8007346:	d108      	bne.n	800735a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	789b      	ldrb	r3, [r3, #2]
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	429a      	cmp	r2, r3
 8007354:	d008      	beq.n	8007368 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	885b      	ldrh	r3, [r3, #2]
 800735e:	b29a      	uxth	r2, r3
 8007360:	897b      	ldrh	r3, [r7, #10]
 8007362:	429a      	cmp	r2, r3
 8007364:	d8e5      	bhi.n	8007332 <USBD_GetEpDesc+0x2e>
 8007366:	e000      	b.n	800736a <USBD_GetEpDesc+0x66>
          break;
 8007368:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800736a:	693b      	ldr	r3, [r7, #16]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	4413      	add	r3, r2
 800738c:	b29a      	uxth	r2, r3
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4413      	add	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	3301      	adds	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80073ce:	021b      	lsls	r3, r3, #8
 80073d0:	b21a      	sxth	r2, r3
 80073d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	b21b      	sxth	r3, r3
 80073da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073dc:	89fb      	ldrh	r3, [r7, #14]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007402:	2b40      	cmp	r3, #64	@ 0x40
 8007404:	d005      	beq.n	8007412 <USBD_StdDevReq+0x26>
 8007406:	2b40      	cmp	r3, #64	@ 0x40
 8007408:	d857      	bhi.n	80074ba <USBD_StdDevReq+0xce>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00f      	beq.n	800742e <USBD_StdDevReq+0x42>
 800740e:	2b20      	cmp	r3, #32
 8007410:	d153      	bne.n	80074ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	32ae      	adds	r2, #174	@ 0xae
 800741c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
      break;
 800742c:	e04a      	b.n	80074c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	2b09      	cmp	r3, #9
 8007434:	d83b      	bhi.n	80074ae <USBD_StdDevReq+0xc2>
 8007436:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <USBD_StdDevReq+0x50>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007491 	.word	0x08007491
 8007440:	080074a5 	.word	0x080074a5
 8007444:	080074af 	.word	0x080074af
 8007448:	0800749b 	.word	0x0800749b
 800744c:	080074af 	.word	0x080074af
 8007450:	0800746f 	.word	0x0800746f
 8007454:	08007465 	.word	0x08007465
 8007458:	080074af 	.word	0x080074af
 800745c:	08007487 	.word	0x08007487
 8007460:	08007479 	.word	0x08007479
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa3e 	bl	80078e8 <USBD_GetDescriptor>
          break;
 800746c:	e024      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fba3 	bl	8007bbc <USBD_SetAddress>
          break;
 8007476:	e01f      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fbe2 	bl	8007c44 <USBD_SetConfig>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
          break;
 8007484:	e018      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc85 	bl	8007d98 <USBD_GetConfig>
          break;
 800748e:	e013      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fcb6 	bl	8007e04 <USBD_GetStatus>
          break;
 8007498:	e00e      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fce5 	bl	8007e6c <USBD_SetFeature>
          break;
 80074a2:	e009      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fd09 	bl	8007ebe <USBD_ClrFeature>
          break;
 80074ac:	e004      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fd60 	bl	8007f76 <USBD_CtlError>
          break;
 80074b6:	bf00      	nop
      }
      break;
 80074b8:	e004      	b.n	80074c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fd5a 	bl	8007f76 <USBD_CtlError>
      break;
 80074c2:	bf00      	nop
  }

  return ret;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074e6:	2b40      	cmp	r3, #64	@ 0x40
 80074e8:	d005      	beq.n	80074f6 <USBD_StdItfReq+0x26>
 80074ea:	2b40      	cmp	r3, #64	@ 0x40
 80074ec:	d852      	bhi.n	8007594 <USBD_StdItfReq+0xc4>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <USBD_StdItfReq+0x26>
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d14e      	bne.n	8007594 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	2b02      	cmp	r3, #2
 8007502:	d840      	bhi.n	8007586 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	889b      	ldrh	r3, [r3, #4]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b01      	cmp	r3, #1
 800750c:	d836      	bhi.n	800757c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	889b      	ldrh	r3, [r3, #4]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff feda 	bl	80072d0 <USBD_CoreFindIF>
 800751c:	4603      	mov	r3, r0
 800751e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	2bff      	cmp	r3, #255	@ 0xff
 8007524:	d01d      	beq.n	8007562 <USBD_StdItfReq+0x92>
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d11a      	bne.n	8007562 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800752c:	7bba      	ldrb	r2, [r7, #14]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32ae      	adds	r2, #174	@ 0xae
 8007532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00f      	beq.n	800755c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800753c:	7bba      	ldrb	r2, [r7, #14]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007544:	7bba      	ldrb	r2, [r7, #14]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	32ae      	adds	r2, #174	@ 0xae
 800754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
 8007556:	4603      	mov	r3, r0
 8007558:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800755a:	e004      	b.n	8007566 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007560:	e001      	b.n	8007566 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007562:	2303      	movs	r3, #3
 8007564:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	88db      	ldrh	r3, [r3, #6]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d110      	bne.n	8007590 <USBD_StdItfReq+0xc0>
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10d      	bne.n	8007590 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fddc 	bl	8008132 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800757a:	e009      	b.n	8007590 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fcf9 	bl	8007f76 <USBD_CtlError>
          break;
 8007584:	e004      	b.n	8007590 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fcf4 	bl	8007f76 <USBD_CtlError>
          break;
 800758e:	e000      	b.n	8007592 <USBD_StdItfReq+0xc2>
          break;
 8007590:	bf00      	nop
      }
      break;
 8007592:	e004      	b.n	800759e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fced 	bl	8007f76 <USBD_CtlError>
      break;
 800759c:	bf00      	nop
  }

  return ret;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	889b      	ldrh	r3, [r3, #4]
 80075ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075c4:	2b40      	cmp	r3, #64	@ 0x40
 80075c6:	d007      	beq.n	80075d8 <USBD_StdEPReq+0x30>
 80075c8:	2b40      	cmp	r3, #64	@ 0x40
 80075ca:	f200 8181 	bhi.w	80078d0 <USBD_StdEPReq+0x328>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d02a      	beq.n	8007628 <USBD_StdEPReq+0x80>
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	f040 817c 	bne.w	80078d0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff fe84 	bl	80072ea <USBD_CoreFindEP>
 80075e2:	4603      	mov	r3, r0
 80075e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075e6:	7b7b      	ldrb	r3, [r7, #13]
 80075e8:	2bff      	cmp	r3, #255	@ 0xff
 80075ea:	f000 8176 	beq.w	80078da <USBD_StdEPReq+0x332>
 80075ee:	7b7b      	ldrb	r3, [r7, #13]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f040 8172 	bne.w	80078da <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80075f6:	7b7a      	ldrb	r2, [r7, #13]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80075fe:	7b7a      	ldrb	r2, [r7, #13]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	32ae      	adds	r2, #174	@ 0xae
 8007604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 8165 	beq.w	80078da <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007610:	7b7a      	ldrb	r2, [r7, #13]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	32ae      	adds	r2, #174	@ 0xae
 8007616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
 8007622:	4603      	mov	r3, r0
 8007624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007626:	e158      	b.n	80078da <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d008      	beq.n	8007642 <USBD_StdEPReq+0x9a>
 8007630:	2b03      	cmp	r3, #3
 8007632:	f300 8147 	bgt.w	80078c4 <USBD_StdEPReq+0x31c>
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 809b 	beq.w	8007772 <USBD_StdEPReq+0x1ca>
 800763c:	2b01      	cmp	r3, #1
 800763e:	d03c      	beq.n	80076ba <USBD_StdEPReq+0x112>
 8007640:	e140      	b.n	80078c4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d002      	beq.n	8007654 <USBD_StdEPReq+0xac>
 800764e:	2b03      	cmp	r3, #3
 8007650:	d016      	beq.n	8007680 <USBD_StdEPReq+0xd8>
 8007652:	e02c      	b.n	80076ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <USBD_StdEPReq+0xce>
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b80      	cmp	r3, #128	@ 0x80
 800765e:	d00a      	beq.n	8007676 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f979 	bl	800895c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800766a:	2180      	movs	r1, #128	@ 0x80
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f975 	bl	800895c <USBD_LL_StallEP>
 8007672:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007674:	e020      	b.n	80076b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc7c 	bl	8007f76 <USBD_CtlError>
              break;
 800767e:	e01b      	b.n	80076b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	885b      	ldrh	r3, [r3, #2]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10e      	bne.n	80076a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <USBD_StdEPReq+0xfe>
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	2b80      	cmp	r3, #128	@ 0x80
 8007692:	d008      	beq.n	80076a6 <USBD_StdEPReq+0xfe>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	88db      	ldrh	r3, [r3, #6]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 f95b 	bl	800895c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fd43 	bl	8008132 <USBD_CtlSendStatus>

              break;
 80076ac:	e004      	b.n	80076b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fc60 	bl	8007f76 <USBD_CtlError>
              break;
 80076b6:	bf00      	nop
          }
          break;
 80076b8:	e109      	b.n	80078ce <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d002      	beq.n	80076cc <USBD_StdEPReq+0x124>
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d016      	beq.n	80076f8 <USBD_StdEPReq+0x150>
 80076ca:	e04b      	b.n	8007764 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00d      	beq.n	80076ee <USBD_StdEPReq+0x146>
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b80      	cmp	r3, #128	@ 0x80
 80076d6:	d00a      	beq.n	80076ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 f93d 	bl	800895c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076e2:	2180      	movs	r1, #128	@ 0x80
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f939 	bl	800895c <USBD_LL_StallEP>
 80076ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076ec:	e040      	b.n	8007770 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc40 	bl	8007f76 <USBD_CtlError>
              break;
 80076f6:	e03b      	b.n	8007770 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	885b      	ldrh	r3, [r3, #2]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d136      	bne.n	800776e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 f943 	bl	800899a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fd0c 	bl	8008132 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fde3 	bl	80072ea <USBD_CoreFindEP>
 8007724:	4603      	mov	r3, r0
 8007726:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007728:	7b7b      	ldrb	r3, [r7, #13]
 800772a:	2bff      	cmp	r3, #255	@ 0xff
 800772c:	d01f      	beq.n	800776e <USBD_StdEPReq+0x1c6>
 800772e:	7b7b      	ldrb	r3, [r7, #13]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11c      	bne.n	800776e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007734:	7b7a      	ldrb	r2, [r7, #13]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800773c:	7b7a      	ldrb	r2, [r7, #13]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	32ae      	adds	r2, #174	@ 0xae
 8007742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d010      	beq.n	800776e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800774c:	7b7a      	ldrb	r2, [r7, #13]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	32ae      	adds	r2, #174	@ 0xae
 8007752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007762:	e004      	b.n	800776e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fc05 	bl	8007f76 <USBD_CtlError>
              break;
 800776c:	e000      	b.n	8007770 <USBD_StdEPReq+0x1c8>
              break;
 800776e:	bf00      	nop
          }
          break;
 8007770:	e0ad      	b.n	80078ce <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d002      	beq.n	8007784 <USBD_StdEPReq+0x1dc>
 800777e:	2b03      	cmp	r3, #3
 8007780:	d033      	beq.n	80077ea <USBD_StdEPReq+0x242>
 8007782:	e099      	b.n	80078b8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d007      	beq.n	800779a <USBD_StdEPReq+0x1f2>
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	2b80      	cmp	r3, #128	@ 0x80
 800778e:	d004      	beq.n	800779a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fbef 	bl	8007f76 <USBD_CtlError>
                break;
 8007798:	e093      	b.n	80078c2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	da0b      	bge.n	80077ba <USBD_StdEPReq+0x212>
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	3310      	adds	r3, #16
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	4413      	add	r3, r2
 80077b6:	3304      	adds	r3, #4
 80077b8:	e00b      	b.n	80077d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	4413      	add	r3, r2
 80077d0:	3304      	adds	r3, #4
 80077d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2200      	movs	r2, #0
 80077d8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	330e      	adds	r3, #14
 80077de:	2202      	movs	r2, #2
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fc44 	bl	8008070 <USBD_CtlSendData>
              break;
 80077e8:	e06b      	b.n	80078c2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da11      	bge.n	8007816 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	3323      	adds	r3, #35	@ 0x23
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d117      	bne.n	800783c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fbb1 	bl	8007f76 <USBD_CtlError>
                  break;
 8007814:	e055      	b.n	80078c2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	f003 020f 	and.w	r2, r3, #15
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	440b      	add	r3, r1
 8007828:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d104      	bne.n	800783c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb9e 	bl	8007f76 <USBD_CtlError>
                  break;
 800783a:	e042      	b.n	80078c2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800783c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	da0b      	bge.n	800785c <USBD_StdEPReq+0x2b4>
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	3310      	adds	r3, #16
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	3304      	adds	r3, #4
 800785a:	e00b      	b.n	8007874 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4413      	add	r3, r2
 8007872:	3304      	adds	r3, #4
 8007874:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <USBD_StdEPReq+0x2da>
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b80      	cmp	r3, #128	@ 0x80
 8007880:	d103      	bne.n	800788a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2200      	movs	r2, #0
 8007886:	739a      	strb	r2, [r3, #14]
 8007888:	e00e      	b.n	80078a8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 f8a2 	bl	80089d8 <USBD_LL_IsStallEP>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2201      	movs	r2, #1
 800789e:	739a      	strb	r2, [r3, #14]
 80078a0:	e002      	b.n	80078a8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	330e      	adds	r3, #14
 80078ac:	2202      	movs	r2, #2
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fbdd 	bl	8008070 <USBD_CtlSendData>
              break;
 80078b6:	e004      	b.n	80078c2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fb5b 	bl	8007f76 <USBD_CtlError>
              break;
 80078c0:	bf00      	nop
          }
          break;
 80078c2:	e004      	b.n	80078ce <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fb55 	bl	8007f76 <USBD_CtlError>
          break;
 80078cc:	bf00      	nop
      }
      break;
 80078ce:	e005      	b.n	80078dc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fb4f 	bl	8007f76 <USBD_CtlError>
      break;
 80078d8:	e000      	b.n	80078dc <USBD_StdEPReq+0x334>
      break;
 80078da:	bf00      	nop
  }

  return ret;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	885b      	ldrh	r3, [r3, #2]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	2b06      	cmp	r3, #6
 800790a:	f200 8128 	bhi.w	8007b5e <USBD_GetDescriptor+0x276>
 800790e:	a201      	add	r2, pc, #4	@ (adr r2, 8007914 <USBD_GetDescriptor+0x2c>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	08007931 	.word	0x08007931
 8007918:	08007949 	.word	0x08007949
 800791c:	08007989 	.word	0x08007989
 8007920:	08007b5f 	.word	0x08007b5f
 8007924:	08007b5f 	.word	0x08007b5f
 8007928:	08007aff 	.word	0x08007aff
 800792c:	08007b2b 	.word	0x08007b2b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	7c12      	ldrb	r2, [r2, #16]
 800793c:	f107 0108 	add.w	r1, r7, #8
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
 8007944:	60f8      	str	r0, [r7, #12]
      break;
 8007946:	e112      	b.n	8007b6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7c1b      	ldrb	r3, [r3, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10d      	bne.n	800796c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007958:	f107 0208 	add.w	r2, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	2202      	movs	r2, #2
 8007968:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800796a:	e100      	b.n	8007b6e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	f107 0208 	add.w	r2, r7, #8
 8007978:	4610      	mov	r0, r2
 800797a:	4798      	blx	r3
 800797c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	2202      	movs	r2, #2
 8007984:	701a      	strb	r2, [r3, #0]
      break;
 8007986:	e0f2      	b.n	8007b6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	885b      	ldrh	r3, [r3, #2]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b05      	cmp	r3, #5
 8007990:	f200 80ac 	bhi.w	8007aec <USBD_GetDescriptor+0x204>
 8007994:	a201      	add	r2, pc, #4	@ (adr r2, 800799c <USBD_GetDescriptor+0xb4>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079b5 	.word	0x080079b5
 80079a0:	080079e9 	.word	0x080079e9
 80079a4:	08007a1d 	.word	0x08007a1d
 80079a8:	08007a51 	.word	0x08007a51
 80079ac:	08007a85 	.word	0x08007a85
 80079b0:	08007ab9 	.word	0x08007ab9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00b      	beq.n	80079d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	7c12      	ldrb	r2, [r2, #16]
 80079cc:	f107 0108 	add.w	r1, r7, #8
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
 80079d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079d6:	e091      	b.n	8007afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 facb 	bl	8007f76 <USBD_CtlError>
            err++;
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	3301      	adds	r3, #1
 80079e4:	72fb      	strb	r3, [r7, #11]
          break;
 80079e6:	e089      	b.n	8007afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	7c12      	ldrb	r2, [r2, #16]
 8007a00:	f107 0108 	add.w	r1, r7, #8
 8007a04:	4610      	mov	r0, r2
 8007a06:	4798      	blx	r3
 8007a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a0a:	e077      	b.n	8007afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fab1 	bl	8007f76 <USBD_CtlError>
            err++;
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	3301      	adds	r3, #1
 8007a18:	72fb      	strb	r3, [r7, #11]
          break;
 8007a1a:	e06f      	b.n	8007afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	7c12      	ldrb	r2, [r2, #16]
 8007a34:	f107 0108 	add.w	r1, r7, #8
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4798      	blx	r3
 8007a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a3e:	e05d      	b.n	8007afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa97 	bl	8007f76 <USBD_CtlError>
            err++;
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a4e:	e055      	b.n	8007afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	7c12      	ldrb	r2, [r2, #16]
 8007a68:	f107 0108 	add.w	r1, r7, #8
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4798      	blx	r3
 8007a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a72:	e043      	b.n	8007afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa7d 	bl	8007f76 <USBD_CtlError>
            err++;
 8007a7c:	7afb      	ldrb	r3, [r7, #11]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	72fb      	strb	r3, [r7, #11]
          break;
 8007a82:	e03b      	b.n	8007afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00b      	beq.n	8007aa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	7c12      	ldrb	r2, [r2, #16]
 8007a9c:	f107 0108 	add.w	r1, r7, #8
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
 8007aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa6:	e029      	b.n	8007afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa63 	bl	8007f76 <USBD_CtlError>
            err++;
 8007ab0:	7afb      	ldrb	r3, [r7, #11]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ab6:	e021      	b.n	8007afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	7c12      	ldrb	r2, [r2, #16]
 8007ad0:	f107 0108 	add.w	r1, r7, #8
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ada:	e00f      	b.n	8007afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa49 	bl	8007f76 <USBD_CtlError>
            err++;
 8007ae4:	7afb      	ldrb	r3, [r7, #11]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aea:	e007      	b.n	8007afc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa41 	bl	8007f76 <USBD_CtlError>
          err++;
 8007af4:	7afb      	ldrb	r3, [r7, #11]
 8007af6:	3301      	adds	r3, #1
 8007af8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007afa:	bf00      	nop
      }
      break;
 8007afc:	e037      	b.n	8007b6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	7c1b      	ldrb	r3, [r3, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d109      	bne.n	8007b1a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b0e:	f107 0208 	add.w	r2, r7, #8
 8007b12:	4610      	mov	r0, r2
 8007b14:	4798      	blx	r3
 8007b16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b18:	e029      	b.n	8007b6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fa2a 	bl	8007f76 <USBD_CtlError>
        err++;
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	3301      	adds	r3, #1
 8007b26:	72fb      	strb	r3, [r7, #11]
      break;
 8007b28:	e021      	b.n	8007b6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7c1b      	ldrb	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10d      	bne.n	8007b4e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3a:	f107 0208 	add.w	r2, r7, #8
 8007b3e:	4610      	mov	r0, r2
 8007b40:	4798      	blx	r3
 8007b42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	2207      	movs	r2, #7
 8007b4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b4c:	e00f      	b.n	8007b6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fa10 	bl	8007f76 <USBD_CtlError>
        err++;
 8007b56:	7afb      	ldrb	r3, [r7, #11]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b5c:	e007      	b.n	8007b6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fa08 	bl	8007f76 <USBD_CtlError>
      err++;
 8007b66:	7afb      	ldrb	r3, [r7, #11]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b6c:	bf00      	nop
  }

  if (err != 0U)
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d11e      	bne.n	8007bb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	88db      	ldrh	r3, [r3, #6]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d016      	beq.n	8007baa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b7c:	893b      	ldrh	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00e      	beq.n	8007ba0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	88da      	ldrh	r2, [r3, #6]
 8007b86:	893b      	ldrh	r3, [r7, #8]
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	bf28      	it	cs
 8007b8c:	4613      	movcs	r3, r2
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b92:	893b      	ldrh	r3, [r7, #8]
 8007b94:	461a      	mov	r2, r3
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa69 	bl	8008070 <USBD_CtlSendData>
 8007b9e:	e009      	b.n	8007bb4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f9e7 	bl	8007f76 <USBD_CtlError>
 8007ba8:	e004      	b.n	8007bb4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fac1 	bl	8008132 <USBD_CtlSendStatus>
 8007bb0:	e000      	b.n	8007bb4 <USBD_GetDescriptor+0x2cc>
    return;
 8007bb2:	bf00      	nop
  }
}
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop

08007bbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	889b      	ldrh	r3, [r3, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d131      	bne.n	8007c32 <USBD_SetAddress+0x76>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	88db      	ldrh	r3, [r3, #6]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d12d      	bne.n	8007c32 <USBD_SetAddress+0x76>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	885b      	ldrh	r3, [r3, #2]
 8007bda:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bdc:	d829      	bhi.n	8007c32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	885b      	ldrh	r3, [r3, #2]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007be8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d104      	bne.n	8007c00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f9bc 	bl	8007f76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfe:	e01d      	b.n	8007c3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	7bfa      	ldrb	r2, [r7, #15]
 8007c04:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 ff0f 	bl	8008a30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa8d 	bl	8008132 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d004      	beq.n	8007c28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2202      	movs	r2, #2
 8007c22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c26:	e009      	b.n	8007c3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c30:	e004      	b.n	8007c3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f99e 	bl	8007f76 <USBD_CtlError>
  }
}
 8007c3a:	bf00      	nop
 8007c3c:	bf00      	nop
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	885b      	ldrh	r3, [r3, #2]
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	4b4e      	ldr	r3, [pc, #312]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007c5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d905      	bls.n	8007c70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f985 	bl	8007f76 <USBD_CtlError>
    return USBD_FAIL;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e08c      	b.n	8007d8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d002      	beq.n	8007c82 <USBD_SetConfig+0x3e>
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d029      	beq.n	8007cd4 <USBD_SetConfig+0x90>
 8007c80:	e075      	b.n	8007d6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c82:	4b44      	ldr	r3, [pc, #272]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d020      	beq.n	8007ccc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007c8a:	4b42      	ldr	r3, [pc, #264]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c94:	4b3f      	ldr	r3, [pc, #252]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fe ffcd 	bl	8006c3a <USBD_SetClassConfig>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f962 	bl	8007f76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cba:	e065      	b.n	8007d88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fa38 	bl	8008132 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007cca:	e05d      	b.n	8007d88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fa30 	bl	8008132 <USBD_CtlSendStatus>
      break;
 8007cd2:	e059      	b.n	8007d88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d112      	bne.n	8007d02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cee:	4b29      	ldr	r3, [pc, #164]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7fe ffbc 	bl	8006c72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa19 	bl	8008132 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d00:	e042      	b.n	8007d88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d02:	4b24      	ldr	r3, [pc, #144]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d02a      	beq.n	8007d66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7fe ffaa 	bl	8006c72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d28:	4b1a      	ldr	r3, [pc, #104]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fe ff83 	bl	8006c3a <USBD_SetClassConfig>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00f      	beq.n	8007d5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f918 	bl	8007f76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7fe ff8f 	bl	8006c72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d5c:	e014      	b.n	8007d88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f9e7 	bl	8008132 <USBD_CtlSendStatus>
      break;
 8007d64:	e010      	b.n	8007d88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f9e3 	bl	8008132 <USBD_CtlSendStatus>
      break;
 8007d6c:	e00c      	b.n	8007d88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f900 	bl	8007f76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d76:	4b07      	ldr	r3, [pc, #28]	@ (8007d94 <USBD_SetConfig+0x150>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fe ff78 	bl	8006c72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d82:	2303      	movs	r3, #3
 8007d84:	73fb      	strb	r3, [r7, #15]
      break;
 8007d86:	bf00      	nop
  }

  return ret;
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	200001fc 	.word	0x200001fc

08007d98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	88db      	ldrh	r3, [r3, #6]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d004      	beq.n	8007db4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f8e2 	bl	8007f76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007db2:	e023      	b.n	8007dfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	dc02      	bgt.n	8007dc6 <USBD_GetConfig+0x2e>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dc03      	bgt.n	8007dcc <USBD_GetConfig+0x34>
 8007dc4:	e015      	b.n	8007df2 <USBD_GetConfig+0x5a>
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d00b      	beq.n	8007de2 <USBD_GetConfig+0x4a>
 8007dca:	e012      	b.n	8007df2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f948 	bl	8008070 <USBD_CtlSendData>
        break;
 8007de0:	e00c      	b.n	8007dfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3304      	adds	r3, #4
 8007de6:	2201      	movs	r2, #1
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f940 	bl	8008070 <USBD_CtlSendData>
        break;
 8007df0:	e004      	b.n	8007dfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f8be 	bl	8007f76 <USBD_CtlError>
        break;
 8007dfa:	bf00      	nop
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d81e      	bhi.n	8007e5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	88db      	ldrh	r3, [r3, #6]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d004      	beq.n	8007e2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f8a5 	bl	8007f76 <USBD_CtlError>
        break;
 8007e2c:	e01a      	b.n	8007e64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f043 0202 	orr.w	r2, r3, #2
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	2202      	movs	r2, #2
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f90c 	bl	8008070 <USBD_CtlSendData>
      break;
 8007e58:	e004      	b.n	8007e64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f88a 	bl	8007f76 <USBD_CtlError>
      break;
 8007e62:	bf00      	nop
  }
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d107      	bne.n	8007e8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f953 	bl	8008132 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007e8c:	e013      	b.n	8007eb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	885b      	ldrh	r3, [r3, #2]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d10b      	bne.n	8007eae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	889b      	ldrh	r3, [r3, #4]
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f943 	bl	8008132 <USBD_CtlSendStatus>
}
 8007eac:	e003      	b.n	8007eb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f860 	bl	8007f76 <USBD_CtlError>
}
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d80b      	bhi.n	8007eee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d10c      	bne.n	8007ef8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f923 	bl	8008132 <USBD_CtlSendStatus>
      }
      break;
 8007eec:	e004      	b.n	8007ef8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f840 	bl	8007f76 <USBD_CtlError>
      break;
 8007ef6:	e000      	b.n	8007efa <USBD_ClrFeature+0x3c>
      break;
 8007ef8:	bf00      	nop
  }
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	781a      	ldrb	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	781a      	ldrb	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7ff fa3d 	bl	80073ac <SWAPBYTE>
 8007f32:	4603      	mov	r3, r0
 8007f34:	461a      	mov	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3301      	adds	r3, #1
 8007f44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7ff fa30 	bl	80073ac <SWAPBYTE>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f7ff fa23 	bl	80073ac <SWAPBYTE>
 8007f66:	4603      	mov	r3, r0
 8007f68:	461a      	mov	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	80da      	strh	r2, [r3, #6]
}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f80:	2180      	movs	r1, #128	@ 0x80
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fcea 	bl	800895c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f88:	2100      	movs	r1, #0
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fce6 	bl	800895c <USBD_LL_StallEP>
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d042      	beq.n	8008034 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007fb2:	6938      	ldr	r0, [r7, #16]
 8007fb4:	f000 f842 	bl	800803c <USBD_GetLen>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	3301      	adds	r3, #1
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fc2:	d808      	bhi.n	8007fd6 <USBD_GetString+0x3e>
 8007fc4:	6938      	ldr	r0, [r7, #16]
 8007fc6:	f000 f839 	bl	800803c <USBD_GetLen>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	3301      	adds	r3, #1
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	e001      	b.n	8007fda <USBD_GetString+0x42>
 8007fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	7812      	ldrb	r2, [r2, #0]
 8007fe8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	3301      	adds	r3, #1
 8007fee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	2203      	movs	r2, #3
 8007ff8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008000:	e013      	b.n	800802a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	4413      	add	r3, r2
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	7812      	ldrb	r2, [r2, #0]
 800800c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3301      	adds	r3, #1
 8008012:	613b      	str	r3, [r7, #16]
    idx++;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	3301      	adds	r3, #1
 8008018:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	4413      	add	r3, r2
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
    idx++;
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	3301      	adds	r3, #1
 8008028:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e7      	bne.n	8008002 <USBD_GetString+0x6a>
 8008032:	e000      	b.n	8008036 <USBD_GetString+0x9e>
    return;
 8008034:	bf00      	nop
  }
}
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800804c:	e005      	b.n	800805a <USBD_GetLen+0x1e>
  {
    len++;
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	3301      	adds	r3, #1
 8008052:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	3301      	adds	r3, #1
 8008058:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f5      	bne.n	800804e <USBD_GetLen+0x12>
  }

  return len;
 8008062:	7bfb      	ldrb	r3, [r7, #15]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2202      	movs	r2, #2
 8008080:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	2100      	movs	r1, #0
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fce6 	bl	8008a6e <USBD_LL_Transmit>

  return USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	2100      	movs	r1, #0
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 fcd5 	bl	8008a6e <USBD_LL_Transmit>

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2203      	movs	r2, #3
 80080de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	2100      	movs	r1, #0
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fcd5 	bl	8008ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	2100      	movs	r1, #0
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fcc4 	bl	8008ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2204      	movs	r2, #4
 800813e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008142:	2300      	movs	r3, #0
 8008144:	2200      	movs	r2, #0
 8008146:	2100      	movs	r1, #0
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fc90 	bl	8008a6e <USBD_LL_Transmit>

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2205      	movs	r2, #5
 8008164:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008168:	2300      	movs	r3, #0
 800816a:	2200      	movs	r2, #0
 800816c:	2100      	movs	r1, #0
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fc9e 	bl	8008ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008184:	2200      	movs	r2, #0
 8008186:	4912      	ldr	r1, [pc, #72]	@ (80081d0 <MX_USB_DEVICE_Init+0x50>)
 8008188:	4812      	ldr	r0, [pc, #72]	@ (80081d4 <MX_USB_DEVICE_Init+0x54>)
 800818a:	f7fe fcd9 	bl	8006b40 <USBD_Init>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008194:	f7f8 fc1d 	bl	80009d2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008198:	490f      	ldr	r1, [pc, #60]	@ (80081d8 <MX_USB_DEVICE_Init+0x58>)
 800819a:	480e      	ldr	r0, [pc, #56]	@ (80081d4 <MX_USB_DEVICE_Init+0x54>)
 800819c:	f7fe fd00 	bl	8006ba0 <USBD_RegisterClass>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081a6:	f7f8 fc14 	bl	80009d2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081aa:	490c      	ldr	r1, [pc, #48]	@ (80081dc <MX_USB_DEVICE_Init+0x5c>)
 80081ac:	4809      	ldr	r0, [pc, #36]	@ (80081d4 <MX_USB_DEVICE_Init+0x54>)
 80081ae:	f7fe fbf7 	bl	80069a0 <USBD_CDC_RegisterInterface>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081b8:	f7f8 fc0b 	bl	80009d2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081bc:	4805      	ldr	r0, [pc, #20]	@ (80081d4 <MX_USB_DEVICE_Init+0x54>)
 80081be:	f7fe fd25 	bl	8006c0c <USBD_Start>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081c8:	f7f8 fc03 	bl	80009d2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081cc:	bf00      	nop
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	200000b0 	.word	0x200000b0
 80081d4:	20000200 	.word	0x20000200
 80081d8:	2000001c 	.word	0x2000001c
 80081dc:	2000009c 	.word	0x2000009c

080081e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081e4:	2200      	movs	r2, #0
 80081e6:	4905      	ldr	r1, [pc, #20]	@ (80081fc <CDC_Init_FS+0x1c>)
 80081e8:	4805      	ldr	r0, [pc, #20]	@ (8008200 <CDC_Init_FS+0x20>)
 80081ea:	f7fe fbf3 	bl	80069d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081ee:	4905      	ldr	r1, [pc, #20]	@ (8008204 <CDC_Init_FS+0x24>)
 80081f0:	4803      	ldr	r0, [pc, #12]	@ (8008200 <CDC_Init_FS+0x20>)
 80081f2:	f7fe fc11 	bl	8006a18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000cdc 	.word	0x20000cdc
 8008200:	20000200 	.word	0x20000200
 8008204:	200004dc 	.word	0x200004dc

08008208 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800820c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800820e:	4618      	mov	r0, r3
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
 8008224:	4613      	mov	r3, r2
 8008226:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b23      	cmp	r3, #35	@ 0x23
 800822c:	d84a      	bhi.n	80082c4 <CDC_Control_FS+0xac>
 800822e:	a201      	add	r2, pc, #4	@ (adr r2, 8008234 <CDC_Control_FS+0x1c>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	080082c5 	.word	0x080082c5
 8008238:	080082c5 	.word	0x080082c5
 800823c:	080082c5 	.word	0x080082c5
 8008240:	080082c5 	.word	0x080082c5
 8008244:	080082c5 	.word	0x080082c5
 8008248:	080082c5 	.word	0x080082c5
 800824c:	080082c5 	.word	0x080082c5
 8008250:	080082c5 	.word	0x080082c5
 8008254:	080082c5 	.word	0x080082c5
 8008258:	080082c5 	.word	0x080082c5
 800825c:	080082c5 	.word	0x080082c5
 8008260:	080082c5 	.word	0x080082c5
 8008264:	080082c5 	.word	0x080082c5
 8008268:	080082c5 	.word	0x080082c5
 800826c:	080082c5 	.word	0x080082c5
 8008270:	080082c5 	.word	0x080082c5
 8008274:	080082c5 	.word	0x080082c5
 8008278:	080082c5 	.word	0x080082c5
 800827c:	080082c5 	.word	0x080082c5
 8008280:	080082c5 	.word	0x080082c5
 8008284:	080082c5 	.word	0x080082c5
 8008288:	080082c5 	.word	0x080082c5
 800828c:	080082c5 	.word	0x080082c5
 8008290:	080082c5 	.word	0x080082c5
 8008294:	080082c5 	.word	0x080082c5
 8008298:	080082c5 	.word	0x080082c5
 800829c:	080082c5 	.word	0x080082c5
 80082a0:	080082c5 	.word	0x080082c5
 80082a4:	080082c5 	.word	0x080082c5
 80082a8:	080082c5 	.word	0x080082c5
 80082ac:	080082c5 	.word	0x080082c5
 80082b0:	080082c5 	.word	0x080082c5
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082c5 	.word	0x080082c5
 80082bc:	080082c5 	.word	0x080082c5
 80082c0:	080082c5 	.word	0x080082c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082c4:	bf00      	nop
  }

  return (USBD_OK);
 80082c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	4805      	ldr	r0, [pc, #20]	@ (80082f8 <CDC_Receive_FS+0x24>)
 80082e2:	f7fe fb99 	bl	8006a18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082e6:	4804      	ldr	r0, [pc, #16]	@ (80082f8 <CDC_Receive_FS+0x24>)
 80082e8:	f7fe fbf4 	bl	8006ad4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20000200 	.word	0x20000200

080082fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800830c:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <CDC_Transmit_FS+0x48>)
 800830e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008312:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800831e:	2301      	movs	r3, #1
 8008320:	e00b      	b.n	800833a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008322:	887b      	ldrh	r3, [r7, #2]
 8008324:	461a      	mov	r2, r3
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4806      	ldr	r0, [pc, #24]	@ (8008344 <CDC_Transmit_FS+0x48>)
 800832a:	f7fe fb53 	bl	80069d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800832e:	4805      	ldr	r0, [pc, #20]	@ (8008344 <CDC_Transmit_FS+0x48>)
 8008330:	f7fe fb90 	bl	8006a54 <USBD_CDC_TransmitPacket>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000200 	.word	0x20000200

08008348 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800835a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800835e:	4618      	mov	r0, r3
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	6039      	str	r1, [r7, #0]
 8008376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2212      	movs	r2, #18
 800837c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800837e:	4b03      	ldr	r3, [pc, #12]	@ (800838c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	200000cc 	.word	0x200000cc

08008390 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2204      	movs	r2, #4
 80083a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083a2:	4b03      	ldr	r3, [pc, #12]	@ (80083b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	200000e0 	.word	0x200000e0

080083b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4907      	ldr	r1, [pc, #28]	@ (80083e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083ca:	4808      	ldr	r0, [pc, #32]	@ (80083ec <USBD_FS_ProductStrDescriptor+0x38>)
 80083cc:	f7ff fde4 	bl	8007f98 <USBD_GetString>
 80083d0:	e004      	b.n	80083dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	4904      	ldr	r1, [pc, #16]	@ (80083e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083d6:	4805      	ldr	r0, [pc, #20]	@ (80083ec <USBD_FS_ProductStrDescriptor+0x38>)
 80083d8:	f7ff fdde 	bl	8007f98 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083dc:	4b02      	ldr	r3, [pc, #8]	@ (80083e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200014dc 	.word	0x200014dc
 80083ec:	08009a90 	.word	0x08009a90

080083f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	4904      	ldr	r1, [pc, #16]	@ (8008410 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008400:	4804      	ldr	r0, [pc, #16]	@ (8008414 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008402:	f7ff fdc9 	bl	8007f98 <USBD_GetString>
  return USBD_StrDesc;
 8008406:	4b02      	ldr	r3, [pc, #8]	@ (8008410 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	200014dc 	.word	0x200014dc
 8008414:	08009aa8 	.word	0x08009aa8

08008418 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	221a      	movs	r2, #26
 8008428:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800842a:	f000 f843 	bl	80084b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800842e:	4b02      	ldr	r3, [pc, #8]	@ (8008438 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	200000e4 	.word	0x200000e4

0800843c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	4907      	ldr	r1, [pc, #28]	@ (8008470 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008452:	4808      	ldr	r0, [pc, #32]	@ (8008474 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008454:	f7ff fda0 	bl	8007f98 <USBD_GetString>
 8008458:	e004      	b.n	8008464 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	4904      	ldr	r1, [pc, #16]	@ (8008470 <USBD_FS_ConfigStrDescriptor+0x34>)
 800845e:	4805      	ldr	r0, [pc, #20]	@ (8008474 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008460:	f7ff fd9a 	bl	8007f98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008464:	4b02      	ldr	r3, [pc, #8]	@ (8008470 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	200014dc 	.word	0x200014dc
 8008474:	08009abc 	.word	0x08009abc

08008478 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	6039      	str	r1, [r7, #0]
 8008482:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d105      	bne.n	8008496 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4907      	ldr	r1, [pc, #28]	@ (80084ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800848e:	4808      	ldr	r0, [pc, #32]	@ (80084b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008490:	f7ff fd82 	bl	8007f98 <USBD_GetString>
 8008494:	e004      	b.n	80084a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	4904      	ldr	r1, [pc, #16]	@ (80084ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800849a:	4805      	ldr	r0, [pc, #20]	@ (80084b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800849c:	f7ff fd7c 	bl	8007f98 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084a0:	4b02      	ldr	r3, [pc, #8]	@ (80084ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	200014dc 	.word	0x200014dc
 80084b0:	08009ac8 	.word	0x08009ac8

080084b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084ba:	4b0f      	ldr	r3, [pc, #60]	@ (80084f8 <Get_SerialNum+0x44>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084c0:	4b0e      	ldr	r3, [pc, #56]	@ (80084fc <Get_SerialNum+0x48>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008500 <Get_SerialNum+0x4c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4413      	add	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084da:	2208      	movs	r2, #8
 80084dc:	4909      	ldr	r1, [pc, #36]	@ (8008504 <Get_SerialNum+0x50>)
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 f814 	bl	800850c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084e4:	2204      	movs	r2, #4
 80084e6:	4908      	ldr	r1, [pc, #32]	@ (8008508 <Get_SerialNum+0x54>)
 80084e8:	68b8      	ldr	r0, [r7, #8]
 80084ea:	f000 f80f 	bl	800850c <IntToUnicode>
  }
}
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	1fff7a10 	.word	0x1fff7a10
 80084fc:	1fff7a14 	.word	0x1fff7a14
 8008500:	1fff7a18 	.word	0x1fff7a18
 8008504:	200000e6 	.word	0x200000e6
 8008508:	200000f6 	.word	0x200000f6

0800850c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800851e:	2300      	movs	r3, #0
 8008520:	75fb      	strb	r3, [r7, #23]
 8008522:	e027      	b.n	8008574 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	0f1b      	lsrs	r3, r3, #28
 8008528:	2b09      	cmp	r3, #9
 800852a:	d80b      	bhi.n	8008544 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	0f1b      	lsrs	r3, r3, #28
 8008530:	b2da      	uxtb	r2, r3
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	4619      	mov	r1, r3
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	440b      	add	r3, r1
 800853c:	3230      	adds	r2, #48	@ 0x30
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]
 8008542:	e00a      	b.n	800855a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	0f1b      	lsrs	r3, r3, #28
 8008548:	b2da      	uxtb	r2, r3
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	4619      	mov	r1, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	440b      	add	r3, r1
 8008554:	3237      	adds	r2, #55	@ 0x37
 8008556:	b2d2      	uxtb	r2, r2
 8008558:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	011b      	lsls	r3, r3, #4
 800855e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	3301      	adds	r3, #1
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	2200      	movs	r2, #0
 800856c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	3301      	adds	r3, #1
 8008572:	75fb      	strb	r3, [r7, #23]
 8008574:	7dfa      	ldrb	r2, [r7, #23]
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	429a      	cmp	r2, r3
 800857a:	d3d3      	bcc.n	8008524 <IntToUnicode+0x18>
  }
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
	...

0800858c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	@ 0x28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008594:	f107 0314 	add.w	r3, r7, #20
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	609a      	str	r2, [r3, #8]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085ac:	d13a      	bne.n	8008624 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	4b1e      	ldr	r3, [pc, #120]	@ (800862c <HAL_PCD_MspInit+0xa0>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b6:	4a1d      	ldr	r2, [pc, #116]	@ (800862c <HAL_PCD_MspInit+0xa0>)
 80085b8:	f043 0301 	orr.w	r3, r3, #1
 80085bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80085be:	4b1b      	ldr	r3, [pc, #108]	@ (800862c <HAL_PCD_MspInit+0xa0>)
 80085c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80085ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80085ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085d0:	2302      	movs	r3, #2
 80085d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085d8:	2303      	movs	r3, #3
 80085da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085dc:	230a      	movs	r3, #10
 80085de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085e0:	f107 0314 	add.w	r3, r7, #20
 80085e4:	4619      	mov	r1, r3
 80085e6:	4812      	ldr	r0, [pc, #72]	@ (8008630 <HAL_PCD_MspInit+0xa4>)
 80085e8:	f7f8 fd3c 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085ec:	4b0f      	ldr	r3, [pc, #60]	@ (800862c <HAL_PCD_MspInit+0xa0>)
 80085ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f0:	4a0e      	ldr	r2, [pc, #56]	@ (800862c <HAL_PCD_MspInit+0xa0>)
 80085f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085f6:	6353      	str	r3, [r2, #52]	@ 0x34
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	4b0b      	ldr	r3, [pc, #44]	@ (800862c <HAL_PCD_MspInit+0xa0>)
 80085fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008600:	4a0a      	ldr	r2, [pc, #40]	@ (800862c <HAL_PCD_MspInit+0xa0>)
 8008602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008606:	6453      	str	r3, [r2, #68]	@ 0x44
 8008608:	4b08      	ldr	r3, [pc, #32]	@ (800862c <HAL_PCD_MspInit+0xa0>)
 800860a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008614:	2200      	movs	r2, #0
 8008616:	2100      	movs	r1, #0
 8008618:	2043      	movs	r0, #67	@ 0x43
 800861a:	f7f8 fcec 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800861e:	2043      	movs	r0, #67	@ 0x43
 8008620:	f7f8 fd05 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008624:	bf00      	nop
 8008626:	3728      	adds	r7, #40	@ 0x28
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40023800 	.word	0x40023800
 8008630:	40020000 	.word	0x40020000

08008634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f7fe fb2b 	bl	8006ca6 <USBD_LL_SetupStage>
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	440b      	add	r3, r1
 8008678:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	4619      	mov	r1, r3
 8008682:	f7fe fb65 	bl	8006d50 <USBD_LL_DataOutStage>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	3320      	adds	r3, #32
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	4619      	mov	r1, r3
 80086b6:	f7fe fc07 	bl	8006ec8 <USBD_LL_DataInStage>
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fd4b 	bl	800716c <USBD_LL_SOF>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	79db      	ldrb	r3, [r3, #7]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d001      	beq.n	80086f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086f2:	f7f8 f96e 	bl	80009d2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086fc:	7bfa      	ldrb	r2, [r7, #15]
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fcef 	bl	80070e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe fc96 	bl	800703e <USBD_LL_Reset>
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fcea 	bl	8007104 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008742:	f043 0301 	orr.w	r3, r3, #1
 8008746:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	7adb      	ldrb	r3, [r3, #11]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008750:	4b04      	ldr	r3, [pc, #16]	@ (8008764 <HAL_PCD_SuspendCallback+0x48>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	4a03      	ldr	r2, [pc, #12]	@ (8008764 <HAL_PCD_SuspendCallback+0x48>)
 8008756:	f043 0306 	orr.w	r3, r3, #6
 800875a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	e000ed00 	.word	0xe000ed00

08008768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fce0 	bl	800713c <USBD_LL_Resume>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008796:	78fa      	ldrb	r2, [r7, #3]
 8008798:	4611      	mov	r1, r2
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fd38 	bl	8007210 <USBD_LL_IsoOUTIncomplete>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087ba:	78fa      	ldrb	r2, [r7, #3]
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fcf4 	bl	80071ac <USBD_LL_IsoINIncomplete>
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe fd4a 	bl	8007274 <USBD_LL_DevConnected>
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fd47 	bl	800728a <USBD_LL_DevDisconnected>
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d13c      	bne.n	800888e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008814:	4a20      	ldr	r2, [pc, #128]	@ (8008898 <USBD_LL_Init+0x94>)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a1e      	ldr	r2, [pc, #120]	@ (8008898 <USBD_LL_Init+0x94>)
 8008820:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008824:	4b1c      	ldr	r3, [pc, #112]	@ (8008898 <USBD_LL_Init+0x94>)
 8008826:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800882a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800882c:	4b1a      	ldr	r3, [pc, #104]	@ (8008898 <USBD_LL_Init+0x94>)
 800882e:	2204      	movs	r2, #4
 8008830:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008832:	4b19      	ldr	r3, [pc, #100]	@ (8008898 <USBD_LL_Init+0x94>)
 8008834:	2202      	movs	r2, #2
 8008836:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008838:	4b17      	ldr	r3, [pc, #92]	@ (8008898 <USBD_LL_Init+0x94>)
 800883a:	2200      	movs	r2, #0
 800883c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800883e:	4b16      	ldr	r3, [pc, #88]	@ (8008898 <USBD_LL_Init+0x94>)
 8008840:	2202      	movs	r2, #2
 8008842:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008844:	4b14      	ldr	r3, [pc, #80]	@ (8008898 <USBD_LL_Init+0x94>)
 8008846:	2200      	movs	r2, #0
 8008848:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800884a:	4b13      	ldr	r3, [pc, #76]	@ (8008898 <USBD_LL_Init+0x94>)
 800884c:	2200      	movs	r2, #0
 800884e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008850:	4b11      	ldr	r3, [pc, #68]	@ (8008898 <USBD_LL_Init+0x94>)
 8008852:	2200      	movs	r2, #0
 8008854:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008856:	4b10      	ldr	r3, [pc, #64]	@ (8008898 <USBD_LL_Init+0x94>)
 8008858:	2200      	movs	r2, #0
 800885a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800885c:	4b0e      	ldr	r3, [pc, #56]	@ (8008898 <USBD_LL_Init+0x94>)
 800885e:	2200      	movs	r2, #0
 8008860:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008862:	480d      	ldr	r0, [pc, #52]	@ (8008898 <USBD_LL_Init+0x94>)
 8008864:	f7f9 feaa 	bl	80025bc <HAL_PCD_Init>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800886e:	f7f8 f8b0 	bl	80009d2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008872:	2180      	movs	r1, #128	@ 0x80
 8008874:	4808      	ldr	r0, [pc, #32]	@ (8008898 <USBD_LL_Init+0x94>)
 8008876:	f7fb f8d6 	bl	8003a26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800887a:	2240      	movs	r2, #64	@ 0x40
 800887c:	2100      	movs	r1, #0
 800887e:	4806      	ldr	r0, [pc, #24]	@ (8008898 <USBD_LL_Init+0x94>)
 8008880:	f7fb f88a 	bl	8003998 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008884:	2280      	movs	r2, #128	@ 0x80
 8008886:	2101      	movs	r1, #1
 8008888:	4803      	ldr	r0, [pc, #12]	@ (8008898 <USBD_LL_Init+0x94>)
 800888a:	f7fb f885 	bl	8003998 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	200016dc 	.word	0x200016dc

0800889c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7f9 ff91 	bl	80027da <HAL_PCD_Start>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f942 	bl	8008b48 <USBD_Get_USB_Status>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	461a      	mov	r2, r3
 80088e0:	4603      	mov	r3, r0
 80088e2:	70fb      	strb	r3, [r7, #3]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70bb      	strb	r3, [r7, #2]
 80088e8:	4613      	mov	r3, r2
 80088ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80088fa:	78bb      	ldrb	r3, [r7, #2]
 80088fc:	883a      	ldrh	r2, [r7, #0]
 80088fe:	78f9      	ldrb	r1, [r7, #3]
 8008900:	f7fa fc65 	bl	80031ce <HAL_PCD_EP_Open>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 f91c 	bl	8008b48 <USBD_Get_USB_Status>
 8008910:	4603      	mov	r3, r0
 8008912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008914:	7bbb      	ldrb	r3, [r7, #14]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	4611      	mov	r1, r2
 800893c:	4618      	mov	r0, r3
 800893e:	f7fa fcb0 	bl	80032a2 <HAL_PCD_EP_Close>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f8fd 	bl	8008b48 <USBD_Get_USB_Status>
 800894e:	4603      	mov	r3, r0
 8008950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008952:	7bbb      	ldrb	r3, [r7, #14]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7fa fd68 	bl	8003450 <HAL_PCD_EP_SetStall>
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 f8de 	bl	8008b48 <USBD_Get_USB_Status>
 800898c:	4603      	mov	r3, r0
 800898e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008990:	7bbb      	ldrb	r3, [r7, #14]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089b4:	78fa      	ldrb	r2, [r7, #3]
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fa fdac 	bl	8003516 <HAL_PCD_EP_ClrStall>
 80089be:	4603      	mov	r3, r0
 80089c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 f8bf 	bl	8008b48 <USBD_Get_USB_Status>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	da0b      	bge.n	8008a0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089fa:	68f9      	ldr	r1, [r7, #12]
 80089fc:	4613      	mov	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	3316      	adds	r3, #22
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	e00b      	b.n	8008a24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a12:	68f9      	ldr	r1, [r7, #12]
 8008a14:	4613      	mov	r3, r2
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	4413      	add	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008a22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fa fb99 	bl	8003186 <HAL_PCD_SetAddress>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f874 	bl	8008b48 <USBD_Get_USB_Status>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b086      	sub	sp, #24
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a8c:	7af9      	ldrb	r1, [r7, #11]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	f7fa fca3 	bl	80033dc <HAL_PCD_EP_Transmit>
 8008a96:	4603      	mov	r3, r0
 8008a98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 f853 	bl	8008b48 <USBD_Get_USB_Status>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	460b      	mov	r3, r1
 8008abe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ace:	7af9      	ldrb	r1, [r7, #11]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	f7fa fc2f 	bl	8003336 <HAL_PCD_EP_Receive>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f832 	bl	8008b48 <USBD_Get_USB_Status>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ae8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b04:	78fa      	ldrb	r2, [r7, #3]
 8008b06:	4611      	mov	r1, r2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fa fc4f 	bl	80033ac <HAL_PCD_EP_GetRxCount>
 8008b0e:	4603      	mov	r3, r0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b20:	4b03      	ldr	r3, [pc, #12]	@ (8008b30 <USBD_static_malloc+0x18>)
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20001bc0 	.word	0x20001bc0

08008b34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]

}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d817      	bhi.n	8008b8c <USBD_Get_USB_Status+0x44>
 8008b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b64 <USBD_Get_USB_Status+0x1c>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b75 	.word	0x08008b75
 8008b68:	08008b7b 	.word	0x08008b7b
 8008b6c:	08008b81 	.word	0x08008b81
 8008b70:	08008b87 	.word	0x08008b87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
    break;
 8008b78:	e00b      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7e:	e008      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b80:	2301      	movs	r3, #1
 8008b82:	73fb      	strb	r3, [r7, #15]
    break;
 8008b84:	e005      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b86:	2303      	movs	r3, #3
 8008b88:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8a:	e002      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b90:	bf00      	nop
  }
  return usb_status;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <std>:
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8008baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bae:	6083      	str	r3, [r0, #8]
 8008bb0:	8181      	strh	r1, [r0, #12]
 8008bb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bb4:	81c2      	strh	r2, [r0, #14]
 8008bb6:	6183      	str	r3, [r0, #24]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	2208      	movs	r2, #8
 8008bbc:	305c      	adds	r0, #92	@ 0x5c
 8008bbe:	f000 f906 	bl	8008dce <memset>
 8008bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf8 <std+0x58>)
 8008bc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bfc <std+0x5c>)
 8008bc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bca:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <std+0x60>)
 8008bcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bce:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <std+0x64>)
 8008bd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c08 <std+0x68>)
 8008bd4:	6224      	str	r4, [r4, #32]
 8008bd6:	429c      	cmp	r4, r3
 8008bd8:	d006      	beq.n	8008be8 <std+0x48>
 8008bda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008bde:	4294      	cmp	r4, r2
 8008be0:	d002      	beq.n	8008be8 <std+0x48>
 8008be2:	33d0      	adds	r3, #208	@ 0xd0
 8008be4:	429c      	cmp	r4, r3
 8008be6:	d105      	bne.n	8008bf4 <std+0x54>
 8008be8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf0:	f000 b966 	b.w	8008ec0 <__retarget_lock_init_recursive>
 8008bf4:	bd10      	pop	{r4, pc}
 8008bf6:	bf00      	nop
 8008bf8:	08008d49 	.word	0x08008d49
 8008bfc:	08008d6b 	.word	0x08008d6b
 8008c00:	08008da3 	.word	0x08008da3
 8008c04:	08008dc7 	.word	0x08008dc7
 8008c08:	20001de0 	.word	0x20001de0

08008c0c <stdio_exit_handler>:
 8008c0c:	4a02      	ldr	r2, [pc, #8]	@ (8008c18 <stdio_exit_handler+0xc>)
 8008c0e:	4903      	ldr	r1, [pc, #12]	@ (8008c1c <stdio_exit_handler+0x10>)
 8008c10:	4803      	ldr	r0, [pc, #12]	@ (8008c20 <stdio_exit_handler+0x14>)
 8008c12:	f000 b869 	b.w	8008ce8 <_fwalk_sglue>
 8008c16:	bf00      	nop
 8008c18:	20000100 	.word	0x20000100
 8008c1c:	0800975d 	.word	0x0800975d
 8008c20:	20000110 	.word	0x20000110

08008c24 <cleanup_stdio>:
 8008c24:	6841      	ldr	r1, [r0, #4]
 8008c26:	4b0c      	ldr	r3, [pc, #48]	@ (8008c58 <cleanup_stdio+0x34>)
 8008c28:	4299      	cmp	r1, r3
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	d001      	beq.n	8008c34 <cleanup_stdio+0x10>
 8008c30:	f000 fd94 	bl	800975c <_fflush_r>
 8008c34:	68a1      	ldr	r1, [r4, #8]
 8008c36:	4b09      	ldr	r3, [pc, #36]	@ (8008c5c <cleanup_stdio+0x38>)
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d002      	beq.n	8008c42 <cleanup_stdio+0x1e>
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fd8d 	bl	800975c <_fflush_r>
 8008c42:	68e1      	ldr	r1, [r4, #12]
 8008c44:	4b06      	ldr	r3, [pc, #24]	@ (8008c60 <cleanup_stdio+0x3c>)
 8008c46:	4299      	cmp	r1, r3
 8008c48:	d004      	beq.n	8008c54 <cleanup_stdio+0x30>
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c50:	f000 bd84 	b.w	800975c <_fflush_r>
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	bf00      	nop
 8008c58:	20001de0 	.word	0x20001de0
 8008c5c:	20001e48 	.word	0x20001e48
 8008c60:	20001eb0 	.word	0x20001eb0

08008c64 <global_stdio_init.part.0>:
 8008c64:	b510      	push	{r4, lr}
 8008c66:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <global_stdio_init.part.0+0x30>)
 8008c68:	4c0b      	ldr	r4, [pc, #44]	@ (8008c98 <global_stdio_init.part.0+0x34>)
 8008c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008c9c <global_stdio_init.part.0+0x38>)
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	2200      	movs	r2, #0
 8008c72:	2104      	movs	r1, #4
 8008c74:	f7ff ff94 	bl	8008ba0 <std>
 8008c78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	2109      	movs	r1, #9
 8008c80:	f7ff ff8e 	bl	8008ba0 <std>
 8008c84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c88:	2202      	movs	r2, #2
 8008c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c8e:	2112      	movs	r1, #18
 8008c90:	f7ff bf86 	b.w	8008ba0 <std>
 8008c94:	20001f18 	.word	0x20001f18
 8008c98:	20001de0 	.word	0x20001de0
 8008c9c:	08008c0d 	.word	0x08008c0d

08008ca0 <__sfp_lock_acquire>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	@ (8008ca8 <__sfp_lock_acquire+0x8>)
 8008ca2:	f000 b90e 	b.w	8008ec2 <__retarget_lock_acquire_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	20001f21 	.word	0x20001f21

08008cac <__sfp_lock_release>:
 8008cac:	4801      	ldr	r0, [pc, #4]	@ (8008cb4 <__sfp_lock_release+0x8>)
 8008cae:	f000 b909 	b.w	8008ec4 <__retarget_lock_release_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	20001f21 	.word	0x20001f21

08008cb8 <__sinit>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fff0 	bl	8008ca0 <__sfp_lock_acquire>
 8008cc0:	6a23      	ldr	r3, [r4, #32]
 8008cc2:	b11b      	cbz	r3, 8008ccc <__sinit+0x14>
 8008cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc8:	f7ff bff0 	b.w	8008cac <__sfp_lock_release>
 8008ccc:	4b04      	ldr	r3, [pc, #16]	@ (8008ce0 <__sinit+0x28>)
 8008cce:	6223      	str	r3, [r4, #32]
 8008cd0:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <__sinit+0x2c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1f5      	bne.n	8008cc4 <__sinit+0xc>
 8008cd8:	f7ff ffc4 	bl	8008c64 <global_stdio_init.part.0>
 8008cdc:	e7f2      	b.n	8008cc4 <__sinit+0xc>
 8008cde:	bf00      	nop
 8008ce0:	08008c25 	.word	0x08008c25
 8008ce4:	20001f18 	.word	0x20001f18

08008ce8 <_fwalk_sglue>:
 8008ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cec:	4607      	mov	r7, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8008cfc:	d505      	bpl.n	8008d0a <_fwalk_sglue+0x22>
 8008cfe:	6824      	ldr	r4, [r4, #0]
 8008d00:	2c00      	cmp	r4, #0
 8008d02:	d1f7      	bne.n	8008cf4 <_fwalk_sglue+0xc>
 8008d04:	4630      	mov	r0, r6
 8008d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d907      	bls.n	8008d20 <_fwalk_sglue+0x38>
 8008d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d14:	3301      	adds	r3, #1
 8008d16:	d003      	beq.n	8008d20 <_fwalk_sglue+0x38>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	47c0      	blx	r8
 8008d1e:	4306      	orrs	r6, r0
 8008d20:	3568      	adds	r5, #104	@ 0x68
 8008d22:	e7e9      	b.n	8008cf8 <_fwalk_sglue+0x10>

08008d24 <iprintf>:
 8008d24:	b40f      	push	{r0, r1, r2, r3}
 8008d26:	b507      	push	{r0, r1, r2, lr}
 8008d28:	4906      	ldr	r1, [pc, #24]	@ (8008d44 <iprintf+0x20>)
 8008d2a:	ab04      	add	r3, sp, #16
 8008d2c:	6808      	ldr	r0, [r1, #0]
 8008d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d32:	6881      	ldr	r1, [r0, #8]
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	f000 f9e9 	bl	800910c <_vfiprintf_r>
 8008d3a:	b003      	add	sp, #12
 8008d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d40:	b004      	add	sp, #16
 8008d42:	4770      	bx	lr
 8008d44:	2000010c 	.word	0x2000010c

08008d48 <__sread>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d50:	f000 f868 	bl	8008e24 <_read_r>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	bfab      	itete	ge
 8008d58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d5c:	181b      	addge	r3, r3, r0
 8008d5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d62:	bfac      	ite	ge
 8008d64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d66:	81a3      	strhlt	r3, [r4, #12]
 8008d68:	bd10      	pop	{r4, pc}

08008d6a <__swrite>:
 8008d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6e:	461f      	mov	r7, r3
 8008d70:	898b      	ldrh	r3, [r1, #12]
 8008d72:	05db      	lsls	r3, r3, #23
 8008d74:	4605      	mov	r5, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	4616      	mov	r6, r2
 8008d7a:	d505      	bpl.n	8008d88 <__swrite+0x1e>
 8008d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d80:	2302      	movs	r3, #2
 8008d82:	2200      	movs	r2, #0
 8008d84:	f000 f83c 	bl	8008e00 <_lseek_r>
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d92:	81a3      	strh	r3, [r4, #12]
 8008d94:	4632      	mov	r2, r6
 8008d96:	463b      	mov	r3, r7
 8008d98:	4628      	mov	r0, r5
 8008d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9e:	f000 b853 	b.w	8008e48 <_write_r>

08008da2 <__sseek>:
 8008da2:	b510      	push	{r4, lr}
 8008da4:	460c      	mov	r4, r1
 8008da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008daa:	f000 f829 	bl	8008e00 <_lseek_r>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	bf15      	itete	ne
 8008db4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008db6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008dba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008dbe:	81a3      	strheq	r3, [r4, #12]
 8008dc0:	bf18      	it	ne
 8008dc2:	81a3      	strhne	r3, [r4, #12]
 8008dc4:	bd10      	pop	{r4, pc}

08008dc6 <__sclose>:
 8008dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dca:	f000 b809 	b.w	8008de0 <_close_r>

08008dce <memset>:
 8008dce:	4402      	add	r2, r0
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d100      	bne.n	8008dd8 <memset+0xa>
 8008dd6:	4770      	bx	lr
 8008dd8:	f803 1b01 	strb.w	r1, [r3], #1
 8008ddc:	e7f9      	b.n	8008dd2 <memset+0x4>
	...

08008de0 <_close_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d06      	ldr	r5, [pc, #24]	@ (8008dfc <_close_r+0x1c>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	602b      	str	r3, [r5, #0]
 8008dec:	f7f7 feeb 	bl	8000bc6 <_close>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_close_r+0x1a>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_close_r+0x1a>
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	20001f1c 	.word	0x20001f1c

08008e00 <_lseek_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d07      	ldr	r5, [pc, #28]	@ (8008e20 <_lseek_r+0x20>)
 8008e04:	4604      	mov	r4, r0
 8008e06:	4608      	mov	r0, r1
 8008e08:	4611      	mov	r1, r2
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	602a      	str	r2, [r5, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f7f7 ff00 	bl	8000c14 <_lseek>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_lseek_r+0x1e>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_lseek_r+0x1e>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	20001f1c 	.word	0x20001f1c

08008e24 <_read_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d07      	ldr	r5, [pc, #28]	@ (8008e44 <_read_r+0x20>)
 8008e28:	4604      	mov	r4, r0
 8008e2a:	4608      	mov	r0, r1
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	2200      	movs	r2, #0
 8008e30:	602a      	str	r2, [r5, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f7f7 feaa 	bl	8000b8c <_read>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_read_r+0x1e>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_read_r+0x1e>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	20001f1c 	.word	0x20001f1c

08008e48 <_write_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	@ (8008e68 <_write_r+0x20>)
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	4608      	mov	r0, r1
 8008e50:	4611      	mov	r1, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	602a      	str	r2, [r5, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f7f7 fdaa 	bl	80009b0 <_write>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_write_r+0x1e>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_write_r+0x1e>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20001f1c 	.word	0x20001f1c

08008e6c <__errno>:
 8008e6c:	4b01      	ldr	r3, [pc, #4]	@ (8008e74 <__errno+0x8>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	2000010c 	.word	0x2000010c

08008e78 <__libc_init_array>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8008eb0 <__libc_init_array+0x38>)
 8008e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8008eb4 <__libc_init_array+0x3c>)
 8008e7e:	1b64      	subs	r4, r4, r5
 8008e80:	10a4      	asrs	r4, r4, #2
 8008e82:	2600      	movs	r6, #0
 8008e84:	42a6      	cmp	r6, r4
 8008e86:	d109      	bne.n	8008e9c <__libc_init_array+0x24>
 8008e88:	4d0b      	ldr	r5, [pc, #44]	@ (8008eb8 <__libc_init_array+0x40>)
 8008e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8008ebc <__libc_init_array+0x44>)
 8008e8c:	f000 fdb6 	bl	80099fc <_init>
 8008e90:	1b64      	subs	r4, r4, r5
 8008e92:	10a4      	asrs	r4, r4, #2
 8008e94:	2600      	movs	r6, #0
 8008e96:	42a6      	cmp	r6, r4
 8008e98:	d105      	bne.n	8008ea6 <__libc_init_array+0x2e>
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea0:	4798      	blx	r3
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7ee      	b.n	8008e84 <__libc_init_array+0xc>
 8008ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eaa:	4798      	blx	r3
 8008eac:	3601      	adds	r6, #1
 8008eae:	e7f2      	b.n	8008e96 <__libc_init_array+0x1e>
 8008eb0:	08009b2c 	.word	0x08009b2c
 8008eb4:	08009b2c 	.word	0x08009b2c
 8008eb8:	08009b2c 	.word	0x08009b2c
 8008ebc:	08009b30 	.word	0x08009b30

08008ec0 <__retarget_lock_init_recursive>:
 8008ec0:	4770      	bx	lr

08008ec2 <__retarget_lock_acquire_recursive>:
 8008ec2:	4770      	bx	lr

08008ec4 <__retarget_lock_release_recursive>:
 8008ec4:	4770      	bx	lr
	...

08008ec8 <_free_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4605      	mov	r5, r0
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	d041      	beq.n	8008f54 <_free_r+0x8c>
 8008ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed4:	1f0c      	subs	r4, r1, #4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bfb8      	it	lt
 8008eda:	18e4      	addlt	r4, r4, r3
 8008edc:	f000 f8e0 	bl	80090a0 <__malloc_lock>
 8008ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f58 <_free_r+0x90>)
 8008ee2:	6813      	ldr	r3, [r2, #0]
 8008ee4:	b933      	cbnz	r3, 8008ef4 <_free_r+0x2c>
 8008ee6:	6063      	str	r3, [r4, #4]
 8008ee8:	6014      	str	r4, [r2, #0]
 8008eea:	4628      	mov	r0, r5
 8008eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ef0:	f000 b8dc 	b.w	80090ac <__malloc_unlock>
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	d908      	bls.n	8008f0a <_free_r+0x42>
 8008ef8:	6820      	ldr	r0, [r4, #0]
 8008efa:	1821      	adds	r1, r4, r0
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf01      	itttt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	1809      	addeq	r1, r1, r0
 8008f06:	6021      	streq	r1, [r4, #0]
 8008f08:	e7ed      	b.n	8008ee6 <_free_r+0x1e>
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	b10b      	cbz	r3, 8008f14 <_free_r+0x4c>
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	d9fa      	bls.n	8008f0a <_free_r+0x42>
 8008f14:	6811      	ldr	r1, [r2, #0]
 8008f16:	1850      	adds	r0, r2, r1
 8008f18:	42a0      	cmp	r0, r4
 8008f1a:	d10b      	bne.n	8008f34 <_free_r+0x6c>
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	4401      	add	r1, r0
 8008f20:	1850      	adds	r0, r2, r1
 8008f22:	4283      	cmp	r3, r0
 8008f24:	6011      	str	r1, [r2, #0]
 8008f26:	d1e0      	bne.n	8008eea <_free_r+0x22>
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	6053      	str	r3, [r2, #4]
 8008f2e:	4408      	add	r0, r1
 8008f30:	6010      	str	r0, [r2, #0]
 8008f32:	e7da      	b.n	8008eea <_free_r+0x22>
 8008f34:	d902      	bls.n	8008f3c <_free_r+0x74>
 8008f36:	230c      	movs	r3, #12
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	e7d6      	b.n	8008eea <_free_r+0x22>
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	1821      	adds	r1, r4, r0
 8008f40:	428b      	cmp	r3, r1
 8008f42:	bf04      	itt	eq
 8008f44:	6819      	ldreq	r1, [r3, #0]
 8008f46:	685b      	ldreq	r3, [r3, #4]
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	bf04      	itt	eq
 8008f4c:	1809      	addeq	r1, r1, r0
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	6054      	str	r4, [r2, #4]
 8008f52:	e7ca      	b.n	8008eea <_free_r+0x22>
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
 8008f56:	bf00      	nop
 8008f58:	20001f28 	.word	0x20001f28

08008f5c <sbrk_aligned>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008f9c <sbrk_aligned+0x40>)
 8008f60:	460c      	mov	r4, r1
 8008f62:	6831      	ldr	r1, [r6, #0]
 8008f64:	4605      	mov	r5, r0
 8008f66:	b911      	cbnz	r1, 8008f6e <sbrk_aligned+0x12>
 8008f68:	f000 fcb4 	bl	80098d4 <_sbrk_r>
 8008f6c:	6030      	str	r0, [r6, #0]
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 fcaf 	bl	80098d4 <_sbrk_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d103      	bne.n	8008f82 <sbrk_aligned+0x26>
 8008f7a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f7e:	4620      	mov	r0, r4
 8008f80:	bd70      	pop	{r4, r5, r6, pc}
 8008f82:	1cc4      	adds	r4, r0, #3
 8008f84:	f024 0403 	bic.w	r4, r4, #3
 8008f88:	42a0      	cmp	r0, r4
 8008f8a:	d0f8      	beq.n	8008f7e <sbrk_aligned+0x22>
 8008f8c:	1a21      	subs	r1, r4, r0
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 fca0 	bl	80098d4 <_sbrk_r>
 8008f94:	3001      	adds	r0, #1
 8008f96:	d1f2      	bne.n	8008f7e <sbrk_aligned+0x22>
 8008f98:	e7ef      	b.n	8008f7a <sbrk_aligned+0x1e>
 8008f9a:	bf00      	nop
 8008f9c:	20001f24 	.word	0x20001f24

08008fa0 <_malloc_r>:
 8008fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	1ccd      	adds	r5, r1, #3
 8008fa6:	f025 0503 	bic.w	r5, r5, #3
 8008faa:	3508      	adds	r5, #8
 8008fac:	2d0c      	cmp	r5, #12
 8008fae:	bf38      	it	cc
 8008fb0:	250c      	movcc	r5, #12
 8008fb2:	2d00      	cmp	r5, #0
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	db01      	blt.n	8008fbc <_malloc_r+0x1c>
 8008fb8:	42a9      	cmp	r1, r5
 8008fba:	d904      	bls.n	8008fc6 <_malloc_r+0x26>
 8008fbc:	230c      	movs	r3, #12
 8008fbe:	6033      	str	r3, [r6, #0]
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800909c <_malloc_r+0xfc>
 8008fca:	f000 f869 	bl	80090a0 <__malloc_lock>
 8008fce:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd2:	461c      	mov	r4, r3
 8008fd4:	bb44      	cbnz	r4, 8009028 <_malloc_r+0x88>
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff ffbf 	bl	8008f5c <sbrk_aligned>
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	d158      	bne.n	8009096 <_malloc_r+0xf6>
 8008fe4:	f8d8 4000 	ldr.w	r4, [r8]
 8008fe8:	4627      	mov	r7, r4
 8008fea:	2f00      	cmp	r7, #0
 8008fec:	d143      	bne.n	8009076 <_malloc_r+0xd6>
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	d04b      	beq.n	800908a <_malloc_r+0xea>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	eb04 0903 	add.w	r9, r4, r3
 8008ffc:	f000 fc6a 	bl	80098d4 <_sbrk_r>
 8009000:	4581      	cmp	r9, r0
 8009002:	d142      	bne.n	800908a <_malloc_r+0xea>
 8009004:	6821      	ldr	r1, [r4, #0]
 8009006:	1a6d      	subs	r5, r5, r1
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ffa6 	bl	8008f5c <sbrk_aligned>
 8009010:	3001      	adds	r0, #1
 8009012:	d03a      	beq.n	800908a <_malloc_r+0xea>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	442b      	add	r3, r5
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	f8d8 3000 	ldr.w	r3, [r8]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	bb62      	cbnz	r2, 800907c <_malloc_r+0xdc>
 8009022:	f8c8 7000 	str.w	r7, [r8]
 8009026:	e00f      	b.n	8009048 <_malloc_r+0xa8>
 8009028:	6822      	ldr	r2, [r4, #0]
 800902a:	1b52      	subs	r2, r2, r5
 800902c:	d420      	bmi.n	8009070 <_malloc_r+0xd0>
 800902e:	2a0b      	cmp	r2, #11
 8009030:	d917      	bls.n	8009062 <_malloc_r+0xc2>
 8009032:	1961      	adds	r1, r4, r5
 8009034:	42a3      	cmp	r3, r4
 8009036:	6025      	str	r5, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	6059      	strne	r1, [r3, #4]
 800903c:	6863      	ldr	r3, [r4, #4]
 800903e:	bf08      	it	eq
 8009040:	f8c8 1000 	streq.w	r1, [r8]
 8009044:	5162      	str	r2, [r4, r5]
 8009046:	604b      	str	r3, [r1, #4]
 8009048:	4630      	mov	r0, r6
 800904a:	f000 f82f 	bl	80090ac <__malloc_unlock>
 800904e:	f104 000b 	add.w	r0, r4, #11
 8009052:	1d23      	adds	r3, r4, #4
 8009054:	f020 0007 	bic.w	r0, r0, #7
 8009058:	1ac2      	subs	r2, r0, r3
 800905a:	bf1c      	itt	ne
 800905c:	1a1b      	subne	r3, r3, r0
 800905e:	50a3      	strne	r3, [r4, r2]
 8009060:	e7af      	b.n	8008fc2 <_malloc_r+0x22>
 8009062:	6862      	ldr	r2, [r4, #4]
 8009064:	42a3      	cmp	r3, r4
 8009066:	bf0c      	ite	eq
 8009068:	f8c8 2000 	streq.w	r2, [r8]
 800906c:	605a      	strne	r2, [r3, #4]
 800906e:	e7eb      	b.n	8009048 <_malloc_r+0xa8>
 8009070:	4623      	mov	r3, r4
 8009072:	6864      	ldr	r4, [r4, #4]
 8009074:	e7ae      	b.n	8008fd4 <_malloc_r+0x34>
 8009076:	463c      	mov	r4, r7
 8009078:	687f      	ldr	r7, [r7, #4]
 800907a:	e7b6      	b.n	8008fea <_malloc_r+0x4a>
 800907c:	461a      	mov	r2, r3
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	42a3      	cmp	r3, r4
 8009082:	d1fb      	bne.n	800907c <_malloc_r+0xdc>
 8009084:	2300      	movs	r3, #0
 8009086:	6053      	str	r3, [r2, #4]
 8009088:	e7de      	b.n	8009048 <_malloc_r+0xa8>
 800908a:	230c      	movs	r3, #12
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	4630      	mov	r0, r6
 8009090:	f000 f80c 	bl	80090ac <__malloc_unlock>
 8009094:	e794      	b.n	8008fc0 <_malloc_r+0x20>
 8009096:	6005      	str	r5, [r0, #0]
 8009098:	e7d6      	b.n	8009048 <_malloc_r+0xa8>
 800909a:	bf00      	nop
 800909c:	20001f28 	.word	0x20001f28

080090a0 <__malloc_lock>:
 80090a0:	4801      	ldr	r0, [pc, #4]	@ (80090a8 <__malloc_lock+0x8>)
 80090a2:	f7ff bf0e 	b.w	8008ec2 <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	20001f20 	.word	0x20001f20

080090ac <__malloc_unlock>:
 80090ac:	4801      	ldr	r0, [pc, #4]	@ (80090b4 <__malloc_unlock+0x8>)
 80090ae:	f7ff bf09 	b.w	8008ec4 <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	20001f20 	.word	0x20001f20

080090b8 <__sfputc_r>:
 80090b8:	6893      	ldr	r3, [r2, #8]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	b410      	push	{r4}
 80090c0:	6093      	str	r3, [r2, #8]
 80090c2:	da08      	bge.n	80090d6 <__sfputc_r+0x1e>
 80090c4:	6994      	ldr	r4, [r2, #24]
 80090c6:	42a3      	cmp	r3, r4
 80090c8:	db01      	blt.n	80090ce <__sfputc_r+0x16>
 80090ca:	290a      	cmp	r1, #10
 80090cc:	d103      	bne.n	80090d6 <__sfputc_r+0x1e>
 80090ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090d2:	f000 bb6b 	b.w	80097ac <__swbuf_r>
 80090d6:	6813      	ldr	r3, [r2, #0]
 80090d8:	1c58      	adds	r0, r3, #1
 80090da:	6010      	str	r0, [r2, #0]
 80090dc:	7019      	strb	r1, [r3, #0]
 80090de:	4608      	mov	r0, r1
 80090e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <__sfputs_r>:
 80090e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e8:	4606      	mov	r6, r0
 80090ea:	460f      	mov	r7, r1
 80090ec:	4614      	mov	r4, r2
 80090ee:	18d5      	adds	r5, r2, r3
 80090f0:	42ac      	cmp	r4, r5
 80090f2:	d101      	bne.n	80090f8 <__sfputs_r+0x12>
 80090f4:	2000      	movs	r0, #0
 80090f6:	e007      	b.n	8009108 <__sfputs_r+0x22>
 80090f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fc:	463a      	mov	r2, r7
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ffda 	bl	80090b8 <__sfputc_r>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d1f3      	bne.n	80090f0 <__sfputs_r+0xa>
 8009108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800910c <_vfiprintf_r>:
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	460d      	mov	r5, r1
 8009112:	b09d      	sub	sp, #116	@ 0x74
 8009114:	4614      	mov	r4, r2
 8009116:	4698      	mov	r8, r3
 8009118:	4606      	mov	r6, r0
 800911a:	b118      	cbz	r0, 8009124 <_vfiprintf_r+0x18>
 800911c:	6a03      	ldr	r3, [r0, #32]
 800911e:	b90b      	cbnz	r3, 8009124 <_vfiprintf_r+0x18>
 8009120:	f7ff fdca 	bl	8008cb8 <__sinit>
 8009124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009126:	07d9      	lsls	r1, r3, #31
 8009128:	d405      	bmi.n	8009136 <_vfiprintf_r+0x2a>
 800912a:	89ab      	ldrh	r3, [r5, #12]
 800912c:	059a      	lsls	r2, r3, #22
 800912e:	d402      	bmi.n	8009136 <_vfiprintf_r+0x2a>
 8009130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009132:	f7ff fec6 	bl	8008ec2 <__retarget_lock_acquire_recursive>
 8009136:	89ab      	ldrh	r3, [r5, #12]
 8009138:	071b      	lsls	r3, r3, #28
 800913a:	d501      	bpl.n	8009140 <_vfiprintf_r+0x34>
 800913c:	692b      	ldr	r3, [r5, #16]
 800913e:	b99b      	cbnz	r3, 8009168 <_vfiprintf_r+0x5c>
 8009140:	4629      	mov	r1, r5
 8009142:	4630      	mov	r0, r6
 8009144:	f000 fb70 	bl	8009828 <__swsetup_r>
 8009148:	b170      	cbz	r0, 8009168 <_vfiprintf_r+0x5c>
 800914a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800914c:	07dc      	lsls	r4, r3, #31
 800914e:	d504      	bpl.n	800915a <_vfiprintf_r+0x4e>
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	b01d      	add	sp, #116	@ 0x74
 8009156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	0598      	lsls	r0, r3, #22
 800915e:	d4f7      	bmi.n	8009150 <_vfiprintf_r+0x44>
 8009160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009162:	f7ff feaf 	bl	8008ec4 <__retarget_lock_release_recursive>
 8009166:	e7f3      	b.n	8009150 <_vfiprintf_r+0x44>
 8009168:	2300      	movs	r3, #0
 800916a:	9309      	str	r3, [sp, #36]	@ 0x24
 800916c:	2320      	movs	r3, #32
 800916e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009172:	f8cd 800c 	str.w	r8, [sp, #12]
 8009176:	2330      	movs	r3, #48	@ 0x30
 8009178:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009328 <_vfiprintf_r+0x21c>
 800917c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009180:	f04f 0901 	mov.w	r9, #1
 8009184:	4623      	mov	r3, r4
 8009186:	469a      	mov	sl, r3
 8009188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800918c:	b10a      	cbz	r2, 8009192 <_vfiprintf_r+0x86>
 800918e:	2a25      	cmp	r2, #37	@ 0x25
 8009190:	d1f9      	bne.n	8009186 <_vfiprintf_r+0x7a>
 8009192:	ebba 0b04 	subs.w	fp, sl, r4
 8009196:	d00b      	beq.n	80091b0 <_vfiprintf_r+0xa4>
 8009198:	465b      	mov	r3, fp
 800919a:	4622      	mov	r2, r4
 800919c:	4629      	mov	r1, r5
 800919e:	4630      	mov	r0, r6
 80091a0:	f7ff ffa1 	bl	80090e6 <__sfputs_r>
 80091a4:	3001      	adds	r0, #1
 80091a6:	f000 80a7 	beq.w	80092f8 <_vfiprintf_r+0x1ec>
 80091aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091ac:	445a      	add	r2, fp
 80091ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80091b0:	f89a 3000 	ldrb.w	r3, [sl]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 809f 	beq.w	80092f8 <_vfiprintf_r+0x1ec>
 80091ba:	2300      	movs	r3, #0
 80091bc:	f04f 32ff 	mov.w	r2, #4294967295
 80091c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091c4:	f10a 0a01 	add.w	sl, sl, #1
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	9307      	str	r3, [sp, #28]
 80091cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80091d2:	4654      	mov	r4, sl
 80091d4:	2205      	movs	r2, #5
 80091d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091da:	4853      	ldr	r0, [pc, #332]	@ (8009328 <_vfiprintf_r+0x21c>)
 80091dc:	f7f7 f800 	bl	80001e0 <memchr>
 80091e0:	9a04      	ldr	r2, [sp, #16]
 80091e2:	b9d8      	cbnz	r0, 800921c <_vfiprintf_r+0x110>
 80091e4:	06d1      	lsls	r1, r2, #27
 80091e6:	bf44      	itt	mi
 80091e8:	2320      	movmi	r3, #32
 80091ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ee:	0713      	lsls	r3, r2, #28
 80091f0:	bf44      	itt	mi
 80091f2:	232b      	movmi	r3, #43	@ 0x2b
 80091f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f8:	f89a 3000 	ldrb.w	r3, [sl]
 80091fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80091fe:	d015      	beq.n	800922c <_vfiprintf_r+0x120>
 8009200:	9a07      	ldr	r2, [sp, #28]
 8009202:	4654      	mov	r4, sl
 8009204:	2000      	movs	r0, #0
 8009206:	f04f 0c0a 	mov.w	ip, #10
 800920a:	4621      	mov	r1, r4
 800920c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009210:	3b30      	subs	r3, #48	@ 0x30
 8009212:	2b09      	cmp	r3, #9
 8009214:	d94b      	bls.n	80092ae <_vfiprintf_r+0x1a2>
 8009216:	b1b0      	cbz	r0, 8009246 <_vfiprintf_r+0x13a>
 8009218:	9207      	str	r2, [sp, #28]
 800921a:	e014      	b.n	8009246 <_vfiprintf_r+0x13a>
 800921c:	eba0 0308 	sub.w	r3, r0, r8
 8009220:	fa09 f303 	lsl.w	r3, r9, r3
 8009224:	4313      	orrs	r3, r2
 8009226:	9304      	str	r3, [sp, #16]
 8009228:	46a2      	mov	sl, r4
 800922a:	e7d2      	b.n	80091d2 <_vfiprintf_r+0xc6>
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	1d19      	adds	r1, r3, #4
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	9103      	str	r1, [sp, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	bfbb      	ittet	lt
 8009238:	425b      	neglt	r3, r3
 800923a:	f042 0202 	orrlt.w	r2, r2, #2
 800923e:	9307      	strge	r3, [sp, #28]
 8009240:	9307      	strlt	r3, [sp, #28]
 8009242:	bfb8      	it	lt
 8009244:	9204      	strlt	r2, [sp, #16]
 8009246:	7823      	ldrb	r3, [r4, #0]
 8009248:	2b2e      	cmp	r3, #46	@ 0x2e
 800924a:	d10a      	bne.n	8009262 <_vfiprintf_r+0x156>
 800924c:	7863      	ldrb	r3, [r4, #1]
 800924e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009250:	d132      	bne.n	80092b8 <_vfiprintf_r+0x1ac>
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	1d1a      	adds	r2, r3, #4
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	9203      	str	r2, [sp, #12]
 800925a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800925e:	3402      	adds	r4, #2
 8009260:	9305      	str	r3, [sp, #20]
 8009262:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009338 <_vfiprintf_r+0x22c>
 8009266:	7821      	ldrb	r1, [r4, #0]
 8009268:	2203      	movs	r2, #3
 800926a:	4650      	mov	r0, sl
 800926c:	f7f6 ffb8 	bl	80001e0 <memchr>
 8009270:	b138      	cbz	r0, 8009282 <_vfiprintf_r+0x176>
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	eba0 000a 	sub.w	r0, r0, sl
 8009278:	2240      	movs	r2, #64	@ 0x40
 800927a:	4082      	lsls	r2, r0
 800927c:	4313      	orrs	r3, r2
 800927e:	3401      	adds	r4, #1
 8009280:	9304      	str	r3, [sp, #16]
 8009282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009286:	4829      	ldr	r0, [pc, #164]	@ (800932c <_vfiprintf_r+0x220>)
 8009288:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800928c:	2206      	movs	r2, #6
 800928e:	f7f6 ffa7 	bl	80001e0 <memchr>
 8009292:	2800      	cmp	r0, #0
 8009294:	d03f      	beq.n	8009316 <_vfiprintf_r+0x20a>
 8009296:	4b26      	ldr	r3, [pc, #152]	@ (8009330 <_vfiprintf_r+0x224>)
 8009298:	bb1b      	cbnz	r3, 80092e2 <_vfiprintf_r+0x1d6>
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	3307      	adds	r3, #7
 800929e:	f023 0307 	bic.w	r3, r3, #7
 80092a2:	3308      	adds	r3, #8
 80092a4:	9303      	str	r3, [sp, #12]
 80092a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a8:	443b      	add	r3, r7
 80092aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ac:	e76a      	b.n	8009184 <_vfiprintf_r+0x78>
 80092ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80092b2:	460c      	mov	r4, r1
 80092b4:	2001      	movs	r0, #1
 80092b6:	e7a8      	b.n	800920a <_vfiprintf_r+0xfe>
 80092b8:	2300      	movs	r3, #0
 80092ba:	3401      	adds	r4, #1
 80092bc:	9305      	str	r3, [sp, #20]
 80092be:	4619      	mov	r1, r3
 80092c0:	f04f 0c0a 	mov.w	ip, #10
 80092c4:	4620      	mov	r0, r4
 80092c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ca:	3a30      	subs	r2, #48	@ 0x30
 80092cc:	2a09      	cmp	r2, #9
 80092ce:	d903      	bls.n	80092d8 <_vfiprintf_r+0x1cc>
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d0c6      	beq.n	8009262 <_vfiprintf_r+0x156>
 80092d4:	9105      	str	r1, [sp, #20]
 80092d6:	e7c4      	b.n	8009262 <_vfiprintf_r+0x156>
 80092d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80092dc:	4604      	mov	r4, r0
 80092de:	2301      	movs	r3, #1
 80092e0:	e7f0      	b.n	80092c4 <_vfiprintf_r+0x1b8>
 80092e2:	ab03      	add	r3, sp, #12
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	462a      	mov	r2, r5
 80092e8:	4b12      	ldr	r3, [pc, #72]	@ (8009334 <_vfiprintf_r+0x228>)
 80092ea:	a904      	add	r1, sp, #16
 80092ec:	4630      	mov	r0, r6
 80092ee:	f3af 8000 	nop.w
 80092f2:	4607      	mov	r7, r0
 80092f4:	1c78      	adds	r0, r7, #1
 80092f6:	d1d6      	bne.n	80092a6 <_vfiprintf_r+0x19a>
 80092f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092fa:	07d9      	lsls	r1, r3, #31
 80092fc:	d405      	bmi.n	800930a <_vfiprintf_r+0x1fe>
 80092fe:	89ab      	ldrh	r3, [r5, #12]
 8009300:	059a      	lsls	r2, r3, #22
 8009302:	d402      	bmi.n	800930a <_vfiprintf_r+0x1fe>
 8009304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009306:	f7ff fddd 	bl	8008ec4 <__retarget_lock_release_recursive>
 800930a:	89ab      	ldrh	r3, [r5, #12]
 800930c:	065b      	lsls	r3, r3, #25
 800930e:	f53f af1f 	bmi.w	8009150 <_vfiprintf_r+0x44>
 8009312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009314:	e71e      	b.n	8009154 <_vfiprintf_r+0x48>
 8009316:	ab03      	add	r3, sp, #12
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	462a      	mov	r2, r5
 800931c:	4b05      	ldr	r3, [pc, #20]	@ (8009334 <_vfiprintf_r+0x228>)
 800931e:	a904      	add	r1, sp, #16
 8009320:	4630      	mov	r0, r6
 8009322:	f000 f879 	bl	8009418 <_printf_i>
 8009326:	e7e4      	b.n	80092f2 <_vfiprintf_r+0x1e6>
 8009328:	08009af0 	.word	0x08009af0
 800932c:	08009afa 	.word	0x08009afa
 8009330:	00000000 	.word	0x00000000
 8009334:	080090e7 	.word	0x080090e7
 8009338:	08009af6 	.word	0x08009af6

0800933c <_printf_common>:
 800933c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009340:	4616      	mov	r6, r2
 8009342:	4698      	mov	r8, r3
 8009344:	688a      	ldr	r2, [r1, #8]
 8009346:	690b      	ldr	r3, [r1, #16]
 8009348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800934c:	4293      	cmp	r3, r2
 800934e:	bfb8      	it	lt
 8009350:	4613      	movlt	r3, r2
 8009352:	6033      	str	r3, [r6, #0]
 8009354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009358:	4607      	mov	r7, r0
 800935a:	460c      	mov	r4, r1
 800935c:	b10a      	cbz	r2, 8009362 <_printf_common+0x26>
 800935e:	3301      	adds	r3, #1
 8009360:	6033      	str	r3, [r6, #0]
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	0699      	lsls	r1, r3, #26
 8009366:	bf42      	ittt	mi
 8009368:	6833      	ldrmi	r3, [r6, #0]
 800936a:	3302      	addmi	r3, #2
 800936c:	6033      	strmi	r3, [r6, #0]
 800936e:	6825      	ldr	r5, [r4, #0]
 8009370:	f015 0506 	ands.w	r5, r5, #6
 8009374:	d106      	bne.n	8009384 <_printf_common+0x48>
 8009376:	f104 0a19 	add.w	sl, r4, #25
 800937a:	68e3      	ldr	r3, [r4, #12]
 800937c:	6832      	ldr	r2, [r6, #0]
 800937e:	1a9b      	subs	r3, r3, r2
 8009380:	42ab      	cmp	r3, r5
 8009382:	dc26      	bgt.n	80093d2 <_printf_common+0x96>
 8009384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009388:	6822      	ldr	r2, [r4, #0]
 800938a:	3b00      	subs	r3, #0
 800938c:	bf18      	it	ne
 800938e:	2301      	movne	r3, #1
 8009390:	0692      	lsls	r2, r2, #26
 8009392:	d42b      	bmi.n	80093ec <_printf_common+0xb0>
 8009394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009398:	4641      	mov	r1, r8
 800939a:	4638      	mov	r0, r7
 800939c:	47c8      	blx	r9
 800939e:	3001      	adds	r0, #1
 80093a0:	d01e      	beq.n	80093e0 <_printf_common+0xa4>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	6922      	ldr	r2, [r4, #16]
 80093a6:	f003 0306 	and.w	r3, r3, #6
 80093aa:	2b04      	cmp	r3, #4
 80093ac:	bf02      	ittt	eq
 80093ae:	68e5      	ldreq	r5, [r4, #12]
 80093b0:	6833      	ldreq	r3, [r6, #0]
 80093b2:	1aed      	subeq	r5, r5, r3
 80093b4:	68a3      	ldr	r3, [r4, #8]
 80093b6:	bf0c      	ite	eq
 80093b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093bc:	2500      	movne	r5, #0
 80093be:	4293      	cmp	r3, r2
 80093c0:	bfc4      	itt	gt
 80093c2:	1a9b      	subgt	r3, r3, r2
 80093c4:	18ed      	addgt	r5, r5, r3
 80093c6:	2600      	movs	r6, #0
 80093c8:	341a      	adds	r4, #26
 80093ca:	42b5      	cmp	r5, r6
 80093cc:	d11a      	bne.n	8009404 <_printf_common+0xc8>
 80093ce:	2000      	movs	r0, #0
 80093d0:	e008      	b.n	80093e4 <_printf_common+0xa8>
 80093d2:	2301      	movs	r3, #1
 80093d4:	4652      	mov	r2, sl
 80093d6:	4641      	mov	r1, r8
 80093d8:	4638      	mov	r0, r7
 80093da:	47c8      	blx	r9
 80093dc:	3001      	adds	r0, #1
 80093de:	d103      	bne.n	80093e8 <_printf_common+0xac>
 80093e0:	f04f 30ff 	mov.w	r0, #4294967295
 80093e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e8:	3501      	adds	r5, #1
 80093ea:	e7c6      	b.n	800937a <_printf_common+0x3e>
 80093ec:	18e1      	adds	r1, r4, r3
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	2030      	movs	r0, #48	@ 0x30
 80093f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093f6:	4422      	add	r2, r4
 80093f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009400:	3302      	adds	r3, #2
 8009402:	e7c7      	b.n	8009394 <_printf_common+0x58>
 8009404:	2301      	movs	r3, #1
 8009406:	4622      	mov	r2, r4
 8009408:	4641      	mov	r1, r8
 800940a:	4638      	mov	r0, r7
 800940c:	47c8      	blx	r9
 800940e:	3001      	adds	r0, #1
 8009410:	d0e6      	beq.n	80093e0 <_printf_common+0xa4>
 8009412:	3601      	adds	r6, #1
 8009414:	e7d9      	b.n	80093ca <_printf_common+0x8e>
	...

08009418 <_printf_i>:
 8009418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800941c:	7e0f      	ldrb	r7, [r1, #24]
 800941e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009420:	2f78      	cmp	r7, #120	@ 0x78
 8009422:	4691      	mov	r9, r2
 8009424:	4680      	mov	r8, r0
 8009426:	460c      	mov	r4, r1
 8009428:	469a      	mov	sl, r3
 800942a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800942e:	d807      	bhi.n	8009440 <_printf_i+0x28>
 8009430:	2f62      	cmp	r7, #98	@ 0x62
 8009432:	d80a      	bhi.n	800944a <_printf_i+0x32>
 8009434:	2f00      	cmp	r7, #0
 8009436:	f000 80d1 	beq.w	80095dc <_printf_i+0x1c4>
 800943a:	2f58      	cmp	r7, #88	@ 0x58
 800943c:	f000 80b8 	beq.w	80095b0 <_printf_i+0x198>
 8009440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009448:	e03a      	b.n	80094c0 <_printf_i+0xa8>
 800944a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800944e:	2b15      	cmp	r3, #21
 8009450:	d8f6      	bhi.n	8009440 <_printf_i+0x28>
 8009452:	a101      	add	r1, pc, #4	@ (adr r1, 8009458 <_printf_i+0x40>)
 8009454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009458:	080094b1 	.word	0x080094b1
 800945c:	080094c5 	.word	0x080094c5
 8009460:	08009441 	.word	0x08009441
 8009464:	08009441 	.word	0x08009441
 8009468:	08009441 	.word	0x08009441
 800946c:	08009441 	.word	0x08009441
 8009470:	080094c5 	.word	0x080094c5
 8009474:	08009441 	.word	0x08009441
 8009478:	08009441 	.word	0x08009441
 800947c:	08009441 	.word	0x08009441
 8009480:	08009441 	.word	0x08009441
 8009484:	080095c3 	.word	0x080095c3
 8009488:	080094ef 	.word	0x080094ef
 800948c:	0800957d 	.word	0x0800957d
 8009490:	08009441 	.word	0x08009441
 8009494:	08009441 	.word	0x08009441
 8009498:	080095e5 	.word	0x080095e5
 800949c:	08009441 	.word	0x08009441
 80094a0:	080094ef 	.word	0x080094ef
 80094a4:	08009441 	.word	0x08009441
 80094a8:	08009441 	.word	0x08009441
 80094ac:	08009585 	.word	0x08009585
 80094b0:	6833      	ldr	r3, [r6, #0]
 80094b2:	1d1a      	adds	r2, r3, #4
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6032      	str	r2, [r6, #0]
 80094b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094c0:	2301      	movs	r3, #1
 80094c2:	e09c      	b.n	80095fe <_printf_i+0x1e6>
 80094c4:	6833      	ldr	r3, [r6, #0]
 80094c6:	6820      	ldr	r0, [r4, #0]
 80094c8:	1d19      	adds	r1, r3, #4
 80094ca:	6031      	str	r1, [r6, #0]
 80094cc:	0606      	lsls	r6, r0, #24
 80094ce:	d501      	bpl.n	80094d4 <_printf_i+0xbc>
 80094d0:	681d      	ldr	r5, [r3, #0]
 80094d2:	e003      	b.n	80094dc <_printf_i+0xc4>
 80094d4:	0645      	lsls	r5, r0, #25
 80094d6:	d5fb      	bpl.n	80094d0 <_printf_i+0xb8>
 80094d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094dc:	2d00      	cmp	r5, #0
 80094de:	da03      	bge.n	80094e8 <_printf_i+0xd0>
 80094e0:	232d      	movs	r3, #45	@ 0x2d
 80094e2:	426d      	negs	r5, r5
 80094e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094e8:	4858      	ldr	r0, [pc, #352]	@ (800964c <_printf_i+0x234>)
 80094ea:	230a      	movs	r3, #10
 80094ec:	e011      	b.n	8009512 <_printf_i+0xfa>
 80094ee:	6821      	ldr	r1, [r4, #0]
 80094f0:	6833      	ldr	r3, [r6, #0]
 80094f2:	0608      	lsls	r0, r1, #24
 80094f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80094f8:	d402      	bmi.n	8009500 <_printf_i+0xe8>
 80094fa:	0649      	lsls	r1, r1, #25
 80094fc:	bf48      	it	mi
 80094fe:	b2ad      	uxthmi	r5, r5
 8009500:	2f6f      	cmp	r7, #111	@ 0x6f
 8009502:	4852      	ldr	r0, [pc, #328]	@ (800964c <_printf_i+0x234>)
 8009504:	6033      	str	r3, [r6, #0]
 8009506:	bf14      	ite	ne
 8009508:	230a      	movne	r3, #10
 800950a:	2308      	moveq	r3, #8
 800950c:	2100      	movs	r1, #0
 800950e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009512:	6866      	ldr	r6, [r4, #4]
 8009514:	60a6      	str	r6, [r4, #8]
 8009516:	2e00      	cmp	r6, #0
 8009518:	db05      	blt.n	8009526 <_printf_i+0x10e>
 800951a:	6821      	ldr	r1, [r4, #0]
 800951c:	432e      	orrs	r6, r5
 800951e:	f021 0104 	bic.w	r1, r1, #4
 8009522:	6021      	str	r1, [r4, #0]
 8009524:	d04b      	beq.n	80095be <_printf_i+0x1a6>
 8009526:	4616      	mov	r6, r2
 8009528:	fbb5 f1f3 	udiv	r1, r5, r3
 800952c:	fb03 5711 	mls	r7, r3, r1, r5
 8009530:	5dc7      	ldrb	r7, [r0, r7]
 8009532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009536:	462f      	mov	r7, r5
 8009538:	42bb      	cmp	r3, r7
 800953a:	460d      	mov	r5, r1
 800953c:	d9f4      	bls.n	8009528 <_printf_i+0x110>
 800953e:	2b08      	cmp	r3, #8
 8009540:	d10b      	bne.n	800955a <_printf_i+0x142>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	07df      	lsls	r7, r3, #31
 8009546:	d508      	bpl.n	800955a <_printf_i+0x142>
 8009548:	6923      	ldr	r3, [r4, #16]
 800954a:	6861      	ldr	r1, [r4, #4]
 800954c:	4299      	cmp	r1, r3
 800954e:	bfde      	ittt	le
 8009550:	2330      	movle	r3, #48	@ 0x30
 8009552:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009556:	f106 36ff 	addle.w	r6, r6, #4294967295
 800955a:	1b92      	subs	r2, r2, r6
 800955c:	6122      	str	r2, [r4, #16]
 800955e:	f8cd a000 	str.w	sl, [sp]
 8009562:	464b      	mov	r3, r9
 8009564:	aa03      	add	r2, sp, #12
 8009566:	4621      	mov	r1, r4
 8009568:	4640      	mov	r0, r8
 800956a:	f7ff fee7 	bl	800933c <_printf_common>
 800956e:	3001      	adds	r0, #1
 8009570:	d14a      	bne.n	8009608 <_printf_i+0x1f0>
 8009572:	f04f 30ff 	mov.w	r0, #4294967295
 8009576:	b004      	add	sp, #16
 8009578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	f043 0320 	orr.w	r3, r3, #32
 8009582:	6023      	str	r3, [r4, #0]
 8009584:	4832      	ldr	r0, [pc, #200]	@ (8009650 <_printf_i+0x238>)
 8009586:	2778      	movs	r7, #120	@ 0x78
 8009588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	6831      	ldr	r1, [r6, #0]
 8009590:	061f      	lsls	r7, r3, #24
 8009592:	f851 5b04 	ldr.w	r5, [r1], #4
 8009596:	d402      	bmi.n	800959e <_printf_i+0x186>
 8009598:	065f      	lsls	r7, r3, #25
 800959a:	bf48      	it	mi
 800959c:	b2ad      	uxthmi	r5, r5
 800959e:	6031      	str	r1, [r6, #0]
 80095a0:	07d9      	lsls	r1, r3, #31
 80095a2:	bf44      	itt	mi
 80095a4:	f043 0320 	orrmi.w	r3, r3, #32
 80095a8:	6023      	strmi	r3, [r4, #0]
 80095aa:	b11d      	cbz	r5, 80095b4 <_printf_i+0x19c>
 80095ac:	2310      	movs	r3, #16
 80095ae:	e7ad      	b.n	800950c <_printf_i+0xf4>
 80095b0:	4826      	ldr	r0, [pc, #152]	@ (800964c <_printf_i+0x234>)
 80095b2:	e7e9      	b.n	8009588 <_printf_i+0x170>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	f023 0320 	bic.w	r3, r3, #32
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	e7f6      	b.n	80095ac <_printf_i+0x194>
 80095be:	4616      	mov	r6, r2
 80095c0:	e7bd      	b.n	800953e <_printf_i+0x126>
 80095c2:	6833      	ldr	r3, [r6, #0]
 80095c4:	6825      	ldr	r5, [r4, #0]
 80095c6:	6961      	ldr	r1, [r4, #20]
 80095c8:	1d18      	adds	r0, r3, #4
 80095ca:	6030      	str	r0, [r6, #0]
 80095cc:	062e      	lsls	r6, r5, #24
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	d501      	bpl.n	80095d6 <_printf_i+0x1be>
 80095d2:	6019      	str	r1, [r3, #0]
 80095d4:	e002      	b.n	80095dc <_printf_i+0x1c4>
 80095d6:	0668      	lsls	r0, r5, #25
 80095d8:	d5fb      	bpl.n	80095d2 <_printf_i+0x1ba>
 80095da:	8019      	strh	r1, [r3, #0]
 80095dc:	2300      	movs	r3, #0
 80095de:	6123      	str	r3, [r4, #16]
 80095e0:	4616      	mov	r6, r2
 80095e2:	e7bc      	b.n	800955e <_printf_i+0x146>
 80095e4:	6833      	ldr	r3, [r6, #0]
 80095e6:	1d1a      	adds	r2, r3, #4
 80095e8:	6032      	str	r2, [r6, #0]
 80095ea:	681e      	ldr	r6, [r3, #0]
 80095ec:	6862      	ldr	r2, [r4, #4]
 80095ee:	2100      	movs	r1, #0
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7f6 fdf5 	bl	80001e0 <memchr>
 80095f6:	b108      	cbz	r0, 80095fc <_printf_i+0x1e4>
 80095f8:	1b80      	subs	r0, r0, r6
 80095fa:	6060      	str	r0, [r4, #4]
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	6123      	str	r3, [r4, #16]
 8009600:	2300      	movs	r3, #0
 8009602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009606:	e7aa      	b.n	800955e <_printf_i+0x146>
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	4632      	mov	r2, r6
 800960c:	4649      	mov	r1, r9
 800960e:	4640      	mov	r0, r8
 8009610:	47d0      	blx	sl
 8009612:	3001      	adds	r0, #1
 8009614:	d0ad      	beq.n	8009572 <_printf_i+0x15a>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	079b      	lsls	r3, r3, #30
 800961a:	d413      	bmi.n	8009644 <_printf_i+0x22c>
 800961c:	68e0      	ldr	r0, [r4, #12]
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	4298      	cmp	r0, r3
 8009622:	bfb8      	it	lt
 8009624:	4618      	movlt	r0, r3
 8009626:	e7a6      	b.n	8009576 <_printf_i+0x15e>
 8009628:	2301      	movs	r3, #1
 800962a:	4632      	mov	r2, r6
 800962c:	4649      	mov	r1, r9
 800962e:	4640      	mov	r0, r8
 8009630:	47d0      	blx	sl
 8009632:	3001      	adds	r0, #1
 8009634:	d09d      	beq.n	8009572 <_printf_i+0x15a>
 8009636:	3501      	adds	r5, #1
 8009638:	68e3      	ldr	r3, [r4, #12]
 800963a:	9903      	ldr	r1, [sp, #12]
 800963c:	1a5b      	subs	r3, r3, r1
 800963e:	42ab      	cmp	r3, r5
 8009640:	dcf2      	bgt.n	8009628 <_printf_i+0x210>
 8009642:	e7eb      	b.n	800961c <_printf_i+0x204>
 8009644:	2500      	movs	r5, #0
 8009646:	f104 0619 	add.w	r6, r4, #25
 800964a:	e7f5      	b.n	8009638 <_printf_i+0x220>
 800964c:	08009b01 	.word	0x08009b01
 8009650:	08009b12 	.word	0x08009b12

08009654 <__sflush_r>:
 8009654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965c:	0716      	lsls	r6, r2, #28
 800965e:	4605      	mov	r5, r0
 8009660:	460c      	mov	r4, r1
 8009662:	d454      	bmi.n	800970e <__sflush_r+0xba>
 8009664:	684b      	ldr	r3, [r1, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	dc02      	bgt.n	8009670 <__sflush_r+0x1c>
 800966a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800966c:	2b00      	cmp	r3, #0
 800966e:	dd48      	ble.n	8009702 <__sflush_r+0xae>
 8009670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009672:	2e00      	cmp	r6, #0
 8009674:	d045      	beq.n	8009702 <__sflush_r+0xae>
 8009676:	2300      	movs	r3, #0
 8009678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800967c:	682f      	ldr	r7, [r5, #0]
 800967e:	6a21      	ldr	r1, [r4, #32]
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	d030      	beq.n	80096e6 <__sflush_r+0x92>
 8009684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	0759      	lsls	r1, r3, #29
 800968a:	d505      	bpl.n	8009698 <__sflush_r+0x44>
 800968c:	6863      	ldr	r3, [r4, #4]
 800968e:	1ad2      	subs	r2, r2, r3
 8009690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009692:	b10b      	cbz	r3, 8009698 <__sflush_r+0x44>
 8009694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009696:	1ad2      	subs	r2, r2, r3
 8009698:	2300      	movs	r3, #0
 800969a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800969c:	6a21      	ldr	r1, [r4, #32]
 800969e:	4628      	mov	r0, r5
 80096a0:	47b0      	blx	r6
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	d106      	bne.n	80096b6 <__sflush_r+0x62>
 80096a8:	6829      	ldr	r1, [r5, #0]
 80096aa:	291d      	cmp	r1, #29
 80096ac:	d82b      	bhi.n	8009706 <__sflush_r+0xb2>
 80096ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009758 <__sflush_r+0x104>)
 80096b0:	40ca      	lsrs	r2, r1
 80096b2:	07d6      	lsls	r6, r2, #31
 80096b4:	d527      	bpl.n	8009706 <__sflush_r+0xb2>
 80096b6:	2200      	movs	r2, #0
 80096b8:	6062      	str	r2, [r4, #4]
 80096ba:	04d9      	lsls	r1, r3, #19
 80096bc:	6922      	ldr	r2, [r4, #16]
 80096be:	6022      	str	r2, [r4, #0]
 80096c0:	d504      	bpl.n	80096cc <__sflush_r+0x78>
 80096c2:	1c42      	adds	r2, r0, #1
 80096c4:	d101      	bne.n	80096ca <__sflush_r+0x76>
 80096c6:	682b      	ldr	r3, [r5, #0]
 80096c8:	b903      	cbnz	r3, 80096cc <__sflush_r+0x78>
 80096ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80096cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096ce:	602f      	str	r7, [r5, #0]
 80096d0:	b1b9      	cbz	r1, 8009702 <__sflush_r+0xae>
 80096d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096d6:	4299      	cmp	r1, r3
 80096d8:	d002      	beq.n	80096e0 <__sflush_r+0x8c>
 80096da:	4628      	mov	r0, r5
 80096dc:	f7ff fbf4 	bl	8008ec8 <_free_r>
 80096e0:	2300      	movs	r3, #0
 80096e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80096e4:	e00d      	b.n	8009702 <__sflush_r+0xae>
 80096e6:	2301      	movs	r3, #1
 80096e8:	4628      	mov	r0, r5
 80096ea:	47b0      	blx	r6
 80096ec:	4602      	mov	r2, r0
 80096ee:	1c50      	adds	r0, r2, #1
 80096f0:	d1c9      	bne.n	8009686 <__sflush_r+0x32>
 80096f2:	682b      	ldr	r3, [r5, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0c6      	beq.n	8009686 <__sflush_r+0x32>
 80096f8:	2b1d      	cmp	r3, #29
 80096fa:	d001      	beq.n	8009700 <__sflush_r+0xac>
 80096fc:	2b16      	cmp	r3, #22
 80096fe:	d11e      	bne.n	800973e <__sflush_r+0xea>
 8009700:	602f      	str	r7, [r5, #0]
 8009702:	2000      	movs	r0, #0
 8009704:	e022      	b.n	800974c <__sflush_r+0xf8>
 8009706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800970a:	b21b      	sxth	r3, r3
 800970c:	e01b      	b.n	8009746 <__sflush_r+0xf2>
 800970e:	690f      	ldr	r7, [r1, #16]
 8009710:	2f00      	cmp	r7, #0
 8009712:	d0f6      	beq.n	8009702 <__sflush_r+0xae>
 8009714:	0793      	lsls	r3, r2, #30
 8009716:	680e      	ldr	r6, [r1, #0]
 8009718:	bf08      	it	eq
 800971a:	694b      	ldreq	r3, [r1, #20]
 800971c:	600f      	str	r7, [r1, #0]
 800971e:	bf18      	it	ne
 8009720:	2300      	movne	r3, #0
 8009722:	eba6 0807 	sub.w	r8, r6, r7
 8009726:	608b      	str	r3, [r1, #8]
 8009728:	f1b8 0f00 	cmp.w	r8, #0
 800972c:	dde9      	ble.n	8009702 <__sflush_r+0xae>
 800972e:	6a21      	ldr	r1, [r4, #32]
 8009730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009732:	4643      	mov	r3, r8
 8009734:	463a      	mov	r2, r7
 8009736:	4628      	mov	r0, r5
 8009738:	47b0      	blx	r6
 800973a:	2800      	cmp	r0, #0
 800973c:	dc08      	bgt.n	8009750 <__sflush_r+0xfc>
 800973e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009750:	4407      	add	r7, r0
 8009752:	eba8 0800 	sub.w	r8, r8, r0
 8009756:	e7e7      	b.n	8009728 <__sflush_r+0xd4>
 8009758:	20400001 	.word	0x20400001

0800975c <_fflush_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	690b      	ldr	r3, [r1, #16]
 8009760:	4605      	mov	r5, r0
 8009762:	460c      	mov	r4, r1
 8009764:	b913      	cbnz	r3, 800976c <_fflush_r+0x10>
 8009766:	2500      	movs	r5, #0
 8009768:	4628      	mov	r0, r5
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	b118      	cbz	r0, 8009776 <_fflush_r+0x1a>
 800976e:	6a03      	ldr	r3, [r0, #32]
 8009770:	b90b      	cbnz	r3, 8009776 <_fflush_r+0x1a>
 8009772:	f7ff faa1 	bl	8008cb8 <__sinit>
 8009776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0f3      	beq.n	8009766 <_fflush_r+0xa>
 800977e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009780:	07d0      	lsls	r0, r2, #31
 8009782:	d404      	bmi.n	800978e <_fflush_r+0x32>
 8009784:	0599      	lsls	r1, r3, #22
 8009786:	d402      	bmi.n	800978e <_fflush_r+0x32>
 8009788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800978a:	f7ff fb9a 	bl	8008ec2 <__retarget_lock_acquire_recursive>
 800978e:	4628      	mov	r0, r5
 8009790:	4621      	mov	r1, r4
 8009792:	f7ff ff5f 	bl	8009654 <__sflush_r>
 8009796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009798:	07da      	lsls	r2, r3, #31
 800979a:	4605      	mov	r5, r0
 800979c:	d4e4      	bmi.n	8009768 <_fflush_r+0xc>
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	059b      	lsls	r3, r3, #22
 80097a2:	d4e1      	bmi.n	8009768 <_fflush_r+0xc>
 80097a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097a6:	f7ff fb8d 	bl	8008ec4 <__retarget_lock_release_recursive>
 80097aa:	e7dd      	b.n	8009768 <_fflush_r+0xc>

080097ac <__swbuf_r>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	460e      	mov	r6, r1
 80097b0:	4614      	mov	r4, r2
 80097b2:	4605      	mov	r5, r0
 80097b4:	b118      	cbz	r0, 80097be <__swbuf_r+0x12>
 80097b6:	6a03      	ldr	r3, [r0, #32]
 80097b8:	b90b      	cbnz	r3, 80097be <__swbuf_r+0x12>
 80097ba:	f7ff fa7d 	bl	8008cb8 <__sinit>
 80097be:	69a3      	ldr	r3, [r4, #24]
 80097c0:	60a3      	str	r3, [r4, #8]
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	071a      	lsls	r2, r3, #28
 80097c6:	d501      	bpl.n	80097cc <__swbuf_r+0x20>
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	b943      	cbnz	r3, 80097de <__swbuf_r+0x32>
 80097cc:	4621      	mov	r1, r4
 80097ce:	4628      	mov	r0, r5
 80097d0:	f000 f82a 	bl	8009828 <__swsetup_r>
 80097d4:	b118      	cbz	r0, 80097de <__swbuf_r+0x32>
 80097d6:	f04f 37ff 	mov.w	r7, #4294967295
 80097da:	4638      	mov	r0, r7
 80097dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	6922      	ldr	r2, [r4, #16]
 80097e2:	1a98      	subs	r0, r3, r2
 80097e4:	6963      	ldr	r3, [r4, #20]
 80097e6:	b2f6      	uxtb	r6, r6
 80097e8:	4283      	cmp	r3, r0
 80097ea:	4637      	mov	r7, r6
 80097ec:	dc05      	bgt.n	80097fa <__swbuf_r+0x4e>
 80097ee:	4621      	mov	r1, r4
 80097f0:	4628      	mov	r0, r5
 80097f2:	f7ff ffb3 	bl	800975c <_fflush_r>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d1ed      	bne.n	80097d6 <__swbuf_r+0x2a>
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	60a3      	str	r3, [r4, #8]
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	6022      	str	r2, [r4, #0]
 8009806:	701e      	strb	r6, [r3, #0]
 8009808:	6962      	ldr	r2, [r4, #20]
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	429a      	cmp	r2, r3
 800980e:	d004      	beq.n	800981a <__swbuf_r+0x6e>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	07db      	lsls	r3, r3, #31
 8009814:	d5e1      	bpl.n	80097da <__swbuf_r+0x2e>
 8009816:	2e0a      	cmp	r6, #10
 8009818:	d1df      	bne.n	80097da <__swbuf_r+0x2e>
 800981a:	4621      	mov	r1, r4
 800981c:	4628      	mov	r0, r5
 800981e:	f7ff ff9d 	bl	800975c <_fflush_r>
 8009822:	2800      	cmp	r0, #0
 8009824:	d0d9      	beq.n	80097da <__swbuf_r+0x2e>
 8009826:	e7d6      	b.n	80097d6 <__swbuf_r+0x2a>

08009828 <__swsetup_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4b29      	ldr	r3, [pc, #164]	@ (80098d0 <__swsetup_r+0xa8>)
 800982c:	4605      	mov	r5, r0
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	460c      	mov	r4, r1
 8009832:	b118      	cbz	r0, 800983c <__swsetup_r+0x14>
 8009834:	6a03      	ldr	r3, [r0, #32]
 8009836:	b90b      	cbnz	r3, 800983c <__swsetup_r+0x14>
 8009838:	f7ff fa3e 	bl	8008cb8 <__sinit>
 800983c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009840:	0719      	lsls	r1, r3, #28
 8009842:	d422      	bmi.n	800988a <__swsetup_r+0x62>
 8009844:	06da      	lsls	r2, r3, #27
 8009846:	d407      	bmi.n	8009858 <__swsetup_r+0x30>
 8009848:	2209      	movs	r2, #9
 800984a:	602a      	str	r2, [r5, #0]
 800984c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009850:	81a3      	strh	r3, [r4, #12]
 8009852:	f04f 30ff 	mov.w	r0, #4294967295
 8009856:	e033      	b.n	80098c0 <__swsetup_r+0x98>
 8009858:	0758      	lsls	r0, r3, #29
 800985a:	d512      	bpl.n	8009882 <__swsetup_r+0x5a>
 800985c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800985e:	b141      	cbz	r1, 8009872 <__swsetup_r+0x4a>
 8009860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009864:	4299      	cmp	r1, r3
 8009866:	d002      	beq.n	800986e <__swsetup_r+0x46>
 8009868:	4628      	mov	r0, r5
 800986a:	f7ff fb2d 	bl	8008ec8 <_free_r>
 800986e:	2300      	movs	r3, #0
 8009870:	6363      	str	r3, [r4, #52]	@ 0x34
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009878:	81a3      	strh	r3, [r4, #12]
 800987a:	2300      	movs	r3, #0
 800987c:	6063      	str	r3, [r4, #4]
 800987e:	6923      	ldr	r3, [r4, #16]
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	f043 0308 	orr.w	r3, r3, #8
 8009888:	81a3      	strh	r3, [r4, #12]
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	b94b      	cbnz	r3, 80098a2 <__swsetup_r+0x7a>
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009898:	d003      	beq.n	80098a2 <__swsetup_r+0x7a>
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f000 f84f 	bl	8009940 <__smakebuf_r>
 80098a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a6:	f013 0201 	ands.w	r2, r3, #1
 80098aa:	d00a      	beq.n	80098c2 <__swsetup_r+0x9a>
 80098ac:	2200      	movs	r2, #0
 80098ae:	60a2      	str	r2, [r4, #8]
 80098b0:	6962      	ldr	r2, [r4, #20]
 80098b2:	4252      	negs	r2, r2
 80098b4:	61a2      	str	r2, [r4, #24]
 80098b6:	6922      	ldr	r2, [r4, #16]
 80098b8:	b942      	cbnz	r2, 80098cc <__swsetup_r+0xa4>
 80098ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098be:	d1c5      	bne.n	800984c <__swsetup_r+0x24>
 80098c0:	bd38      	pop	{r3, r4, r5, pc}
 80098c2:	0799      	lsls	r1, r3, #30
 80098c4:	bf58      	it	pl
 80098c6:	6962      	ldrpl	r2, [r4, #20]
 80098c8:	60a2      	str	r2, [r4, #8]
 80098ca:	e7f4      	b.n	80098b6 <__swsetup_r+0x8e>
 80098cc:	2000      	movs	r0, #0
 80098ce:	e7f7      	b.n	80098c0 <__swsetup_r+0x98>
 80098d0:	2000010c 	.word	0x2000010c

080098d4 <_sbrk_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d06      	ldr	r5, [pc, #24]	@ (80098f0 <_sbrk_r+0x1c>)
 80098d8:	2300      	movs	r3, #0
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	f7f7 f9a6 	bl	8000c30 <_sbrk>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d102      	bne.n	80098ee <_sbrk_r+0x1a>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b103      	cbz	r3, 80098ee <_sbrk_r+0x1a>
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	20001f1c 	.word	0x20001f1c

080098f4 <__swhatbuf_r>:
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	460c      	mov	r4, r1
 80098f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fc:	2900      	cmp	r1, #0
 80098fe:	b096      	sub	sp, #88	@ 0x58
 8009900:	4615      	mov	r5, r2
 8009902:	461e      	mov	r6, r3
 8009904:	da0d      	bge.n	8009922 <__swhatbuf_r+0x2e>
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800990c:	f04f 0100 	mov.w	r1, #0
 8009910:	bf14      	ite	ne
 8009912:	2340      	movne	r3, #64	@ 0x40
 8009914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009918:	2000      	movs	r0, #0
 800991a:	6031      	str	r1, [r6, #0]
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	b016      	add	sp, #88	@ 0x58
 8009920:	bd70      	pop	{r4, r5, r6, pc}
 8009922:	466a      	mov	r2, sp
 8009924:	f000 f848 	bl	80099b8 <_fstat_r>
 8009928:	2800      	cmp	r0, #0
 800992a:	dbec      	blt.n	8009906 <__swhatbuf_r+0x12>
 800992c:	9901      	ldr	r1, [sp, #4]
 800992e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009936:	4259      	negs	r1, r3
 8009938:	4159      	adcs	r1, r3
 800993a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800993e:	e7eb      	b.n	8009918 <__swhatbuf_r+0x24>

08009940 <__smakebuf_r>:
 8009940:	898b      	ldrh	r3, [r1, #12]
 8009942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009944:	079d      	lsls	r5, r3, #30
 8009946:	4606      	mov	r6, r0
 8009948:	460c      	mov	r4, r1
 800994a:	d507      	bpl.n	800995c <__smakebuf_r+0x1c>
 800994c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	6123      	str	r3, [r4, #16]
 8009954:	2301      	movs	r3, #1
 8009956:	6163      	str	r3, [r4, #20]
 8009958:	b003      	add	sp, #12
 800995a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800995c:	ab01      	add	r3, sp, #4
 800995e:	466a      	mov	r2, sp
 8009960:	f7ff ffc8 	bl	80098f4 <__swhatbuf_r>
 8009964:	9f00      	ldr	r7, [sp, #0]
 8009966:	4605      	mov	r5, r0
 8009968:	4639      	mov	r1, r7
 800996a:	4630      	mov	r0, r6
 800996c:	f7ff fb18 	bl	8008fa0 <_malloc_r>
 8009970:	b948      	cbnz	r0, 8009986 <__smakebuf_r+0x46>
 8009972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009976:	059a      	lsls	r2, r3, #22
 8009978:	d4ee      	bmi.n	8009958 <__smakebuf_r+0x18>
 800997a:	f023 0303 	bic.w	r3, r3, #3
 800997e:	f043 0302 	orr.w	r3, r3, #2
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	e7e2      	b.n	800994c <__smakebuf_r+0xc>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	6020      	str	r0, [r4, #0]
 800998a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	9b01      	ldr	r3, [sp, #4]
 8009992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009996:	b15b      	cbz	r3, 80099b0 <__smakebuf_r+0x70>
 8009998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800999c:	4630      	mov	r0, r6
 800999e:	f000 f81d 	bl	80099dc <_isatty_r>
 80099a2:	b128      	cbz	r0, 80099b0 <__smakebuf_r+0x70>
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	f023 0303 	bic.w	r3, r3, #3
 80099aa:	f043 0301 	orr.w	r3, r3, #1
 80099ae:	81a3      	strh	r3, [r4, #12]
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	431d      	orrs	r5, r3
 80099b4:	81a5      	strh	r5, [r4, #12]
 80099b6:	e7cf      	b.n	8009958 <__smakebuf_r+0x18>

080099b8 <_fstat_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d07      	ldr	r5, [pc, #28]	@ (80099d8 <_fstat_r+0x20>)
 80099bc:	2300      	movs	r3, #0
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	4611      	mov	r1, r2
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	f7f7 f90a 	bl	8000bde <_fstat>
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	d102      	bne.n	80099d4 <_fstat_r+0x1c>
 80099ce:	682b      	ldr	r3, [r5, #0]
 80099d0:	b103      	cbz	r3, 80099d4 <_fstat_r+0x1c>
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	bd38      	pop	{r3, r4, r5, pc}
 80099d6:	bf00      	nop
 80099d8:	20001f1c 	.word	0x20001f1c

080099dc <_isatty_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4d06      	ldr	r5, [pc, #24]	@ (80099f8 <_isatty_r+0x1c>)
 80099e0:	2300      	movs	r3, #0
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	602b      	str	r3, [r5, #0]
 80099e8:	f7f7 f909 	bl	8000bfe <_isatty>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	d102      	bne.n	80099f6 <_isatty_r+0x1a>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	b103      	cbz	r3, 80099f6 <_isatty_r+0x1a>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	20001f1c 	.word	0x20001f1c

080099fc <_init>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	bf00      	nop
 8009a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a02:	bc08      	pop	{r3}
 8009a04:	469e      	mov	lr, r3
 8009a06:	4770      	bx	lr

08009a08 <_fini>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	bf00      	nop
 8009a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0e:	bc08      	pop	{r3}
 8009a10:	469e      	mov	lr, r3
 8009a12:	4770      	bx	lr
