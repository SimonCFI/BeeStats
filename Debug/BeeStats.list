
BeeStats.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008250  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080083f0  080083f0  000093f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084c8  080084c8  0000a158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080084c8  080084c8  000094c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084d0  080084d0  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084d0  080084d0  000094d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084d4  080084d4  000094d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080084d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da8  20000158  08008630  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f00  08008630  0000af00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c1a  00000000  00000000  0000a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302b  00000000  00000000  0001ada2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0001ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b35  00000000  00000000  0001ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001929a  00000000  00000000  0001f7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014074  00000000  00000000  00038a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bad4  00000000  00000000  0004caf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d85c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004484  00000000  00000000  000d860c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000dca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083d8 	.word	0x080083d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	080083d8 	.word	0x080083d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fa89 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f827 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8bb 	bl	8000734 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005be:	f000 f88b 	bl	80006d8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80005c2:	f006 fa6d 	bl	8006aa0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_StatusTypeDef status;
	status=HAL_I2C_IsDeviceReady(&hi2c1, 0x23 << 1, 10, HAL_MAX_DELAY);
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	220a      	movs	r2, #10
 80005cc:	2146      	movs	r1, #70	@ 0x46
 80005ce:	480b      	ldr	r0, [pc, #44]	@ (80005fc <main+0x50>)
 80005d0:	f000 feea 	bl	80013a8 <HAL_I2C_IsDeviceReady>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (status == HAL_OK) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d103      	bne.n	80005e6 <main+0x3a>
	      printf("I2C-Gerät gefunden!\n");
 80005de:	4808      	ldr	r0, [pc, #32]	@ (8000600 <main+0x54>)
 80005e0:	f007 f898 	bl	8007714 <puts>
 80005e4:	e004      	b.n	80005f0 <main+0x44>
	  } else {
	      printf("I2C-Gerät nicht gefunden. Fehlercode: %d\n", status);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <main+0x58>)
 80005ec:	f007 f82a 	bl	8007644 <iprintf>
	  }
	  HAL_Delay(1000);
 80005f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f4:	f000 fada 	bl	8000bac <HAL_Delay>
	  if (status == HAL_OK) {
 80005f8:	e7ee      	b.n	80005d8 <main+0x2c>
 80005fa:	bf00      	nop
 80005fc:	20000174 	.word	0x20000174
 8000600:	080083f0 	.word	0x080083f0
 8000604:	08008408 	.word	0x08008408

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f007 f95c 	bl	80078d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a26      	ldr	r2, [pc, #152]	@ (80006d0 <SystemClock_Config+0xc8>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <SystemClock_Config+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000678:	2319      	movs	r3, #25
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800067c:	23c0      	movs	r3, #192	@ 0xc0
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fa85 	bl	8002b9c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f8a1 	bl	80007de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2103      	movs	r1, #3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fce7 	bl	800308c <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c4:	f000 f88b 	bl	80007de <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	@ 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	@ (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f000 fd03 	bl	8001120 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f85d 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000174 	.word	0x20000174
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_GPIO_Init+0x84>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a1d      	ldr	r2, [pc, #116]	@ (80007b8 <MX_GPIO_Init+0x84>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_GPIO_Init+0x84>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_GPIO_Init+0x84>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a16      	ldr	r2, [pc, #88]	@ (80007b8 <MX_GPIO_Init+0x84>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_GPIO_Init+0x84>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <MX_GPIO_Init+0x84>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0f      	ldr	r2, [pc, #60]	@ (80007b8 <MX_GPIO_Init+0x84>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <MX_GPIO_Init+0x84>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_GPIO_Init+0x84>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <MX_GPIO_Init+0x84>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_GPIO_Init+0x84>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*) ptr, len); return len;}
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	68b8      	ldr	r0, [r7, #8]
 80007d0:	f006 fa24 	bl	8006c1c <CDC_Transmit_FS>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e2:	b672      	cpsid	i
}
 80007e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e6:	bf00      	nop
 80007e8:	e7fd      	b.n	80007e6 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000800:	6453      	str	r3, [r2, #68]	@ 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	@ 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <HAL_I2C_MspInit+0x84>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d12b      	bne.n	80008b6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800087a:	23c0      	movs	r3, #192	@ 0xc0
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087e:	2312      	movs	r3, #18
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088a:	2304      	movs	r3, #4
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <HAL_I2C_MspInit+0x8c>)
 8000896:	f000 fabf 	bl	8000e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	@ 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40005400 	.word	0x40005400
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <NMI_Handler+0x4>

080008d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <MemManage_Handler+0x4>

080008e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000922:	f000 f923 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000930:	4802      	ldr	r0, [pc, #8]	@ (800093c <OTG_FS_IRQHandler+0x10>)
 8000932:	f001 f825 	bl	8001980 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200016b0 	.word	0x200016b0

08000940 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e00a      	b.n	8000968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000952:	f3af 8000 	nop.w
 8000956:	4601      	mov	r1, r0
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	60ba      	str	r2, [r7, #8]
 800095e:	b2ca      	uxtb	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbf0      	blt.n	8000952 <_read+0x12>
  }

  return len;
 8000970:	687b      	ldr	r3, [r7, #4]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_close>:
  }
  return len;
}

int _close(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a2:	605a      	str	r2, [r3, #4]
  return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_isatty>:

int _isatty(int file)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ec:	4a14      	ldr	r2, [pc, #80]	@ (8000a40 <_sbrk+0x5c>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <_sbrk+0x60>)
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <_sbrk+0x64>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <_sbrk+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a14:	f006 ffac 	bl	8007970 <__errno>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <_sbrk+0x64>)
 8000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20020000 	.word	0x20020000
 8000a44:	00000400 	.word	0x00000400
 8000a48:	200001c8 	.word	0x200001c8
 8000a4c:	20001f00 	.word	0x20001f00

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a78:	f7ff ffea 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	@ (8000ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f006 ff6b 	bl	800797c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd81 	bl	80005ac <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000ab8:	080084d8 	.word	0x080084d8
  ldr r2, =_sbss
 8000abc:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000ac0:	20001f00 	.word	0x20001f00

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	@ (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f94f 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fe76 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f967 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f92f 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	200001cc 	.word	0x200001cc

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200001cc 	.word	0x200001cc

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff ffee 	bl	8000b94 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffde 	bl	8000b94 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	@ (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	@ (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff29 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff3e 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff31 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffa2 	bl	8000d50 <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e159      	b.n	80010e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8148 	bne.w	80010e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d017      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80a2 	beq.w	80010e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b57      	ldr	r3, [pc, #348]	@ (8001100 <HAL_GPIO_Init+0x2e8>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a56      	ldr	r2, [pc, #344]	@ (8001100 <HAL_GPIO_Init+0x2e8>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b54      	ldr	r3, [pc, #336]	@ (8001100 <HAL_GPIO_Init+0x2e8>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a52      	ldr	r2, [pc, #328]	@ (8001104 <HAL_GPIO_Init+0x2ec>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a49      	ldr	r2, [pc, #292]	@ (8001108 <HAL_GPIO_Init+0x2f0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d019      	beq.n	800101a <HAL_GPIO_Init+0x202>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a48      	ldr	r2, [pc, #288]	@ (800110c <HAL_GPIO_Init+0x2f4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0x1fe>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a47      	ldr	r2, [pc, #284]	@ (8001110 <HAL_GPIO_Init+0x2f8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00d      	beq.n	8001012 <HAL_GPIO_Init+0x1fa>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a46      	ldr	r2, [pc, #280]	@ (8001114 <HAL_GPIO_Init+0x2fc>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d007      	beq.n	800100e <HAL_GPIO_Init+0x1f6>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a45      	ldr	r2, [pc, #276]	@ (8001118 <HAL_GPIO_Init+0x300>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_GPIO_Init+0x1f2>
 8001006:	2304      	movs	r3, #4
 8001008:	e008      	b.n	800101c <HAL_GPIO_Init+0x204>
 800100a:	2307      	movs	r3, #7
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x204>
 800100e:	2303      	movs	r3, #3
 8001010:	e004      	b.n	800101c <HAL_GPIO_Init+0x204>
 8001012:	2302      	movs	r3, #2
 8001014:	e002      	b.n	800101c <HAL_GPIO_Init+0x204>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x204>
 800101a:	2300      	movs	r3, #0
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	f002 0203 	and.w	r2, r2, #3
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	4093      	lsls	r3, r2
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800102c:	4935      	ldr	r1, [pc, #212]	@ (8001104 <HAL_GPIO_Init+0x2ec>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103a:	4b38      	ldr	r3, [pc, #224]	@ (800111c <HAL_GPIO_Init+0x304>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105e:	4a2f      	ldr	r2, [pc, #188]	@ (800111c <HAL_GPIO_Init+0x304>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001064:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <HAL_GPIO_Init+0x304>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001088:	4a24      	ldr	r2, [pc, #144]	@ (800111c <HAL_GPIO_Init+0x304>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108e:	4b23      	ldr	r3, [pc, #140]	@ (800111c <HAL_GPIO_Init+0x304>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b2:	4a1a      	ldr	r2, [pc, #104]	@ (800111c <HAL_GPIO_Init+0x304>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_GPIO_Init+0x304>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010dc:	4a0f      	ldr	r2, [pc, #60]	@ (800111c <HAL_GPIO_Init+0x304>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3301      	adds	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	f67f aea2 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3724      	adds	r7, #36	@ 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40013800 	.word	0x40013800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40021000 	.word	0x40021000
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e12b      	b.n	800138a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fb78 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2224      	movs	r2, #36	@ 0x24
 8001150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001184:	f002 f93a 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8001188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a81      	ldr	r2, [pc, #516]	@ (8001394 <HAL_I2C_Init+0x274>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d807      	bhi.n	80011a4 <HAL_I2C_Init+0x84>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4a80      	ldr	r2, [pc, #512]	@ (8001398 <HAL_I2C_Init+0x278>)
 8001198:	4293      	cmp	r3, r2
 800119a:	bf94      	ite	ls
 800119c:	2301      	movls	r3, #1
 800119e:	2300      	movhi	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	e006      	b.n	80011b2 <HAL_I2C_Init+0x92>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4a7d      	ldr	r2, [pc, #500]	@ (800139c <HAL_I2C_Init+0x27c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	bf94      	ite	ls
 80011ac:	2301      	movls	r3, #1
 80011ae:	2300      	movhi	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e0e7      	b.n	800138a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4a78      	ldr	r2, [pc, #480]	@ (80013a0 <HAL_I2C_Init+0x280>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9b      	lsrs	r3, r3, #18
 80011c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001394 <HAL_I2C_Init+0x274>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d802      	bhi.n	80011f4 <HAL_I2C_Init+0xd4>
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3301      	adds	r3, #1
 80011f2:	e009      	b.n	8001208 <HAL_I2C_Init+0xe8>
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	4a69      	ldr	r2, [pc, #420]	@ (80013a4 <HAL_I2C_Init+0x284>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	099b      	lsrs	r3, r3, #6
 8001206:	3301      	adds	r3, #1
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	430b      	orrs	r3, r1
 800120e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800121a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	495c      	ldr	r1, [pc, #368]	@ (8001394 <HAL_I2C_Init+0x274>)
 8001224:	428b      	cmp	r3, r1
 8001226:	d819      	bhi.n	800125c <HAL_I2C_Init+0x13c>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1e59      	subs	r1, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fbb1 f3f3 	udiv	r3, r1, r3
 8001236:	1c59      	adds	r1, r3, #1
 8001238:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800123c:	400b      	ands	r3, r1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00a      	beq.n	8001258 <HAL_I2C_Init+0x138>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1e59      	subs	r1, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001250:	3301      	adds	r3, #1
 8001252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001256:	e051      	b.n	80012fc <HAL_I2C_Init+0x1dc>
 8001258:	2304      	movs	r3, #4
 800125a:	e04f      	b.n	80012fc <HAL_I2C_Init+0x1dc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d111      	bne.n	8001288 <HAL_I2C_Init+0x168>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1e58      	subs	r0, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6859      	ldr	r1, [r3, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	440b      	add	r3, r1
 8001272:	fbb0 f3f3 	udiv	r3, r0, r3
 8001276:	3301      	adds	r3, #1
 8001278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	e012      	b.n	80012ae <HAL_I2C_Init+0x18e>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1e58      	subs	r0, r3, #1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	0099      	lsls	r1, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	fbb0 f3f3 	udiv	r3, r0, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_Init+0x196>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e022      	b.n	80012fc <HAL_I2C_Init+0x1dc>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10e      	bne.n	80012dc <HAL_I2C_Init+0x1bc>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1e58      	subs	r0, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6859      	ldr	r1, [r3, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	440b      	add	r3, r1
 80012cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012da:	e00f      	b.n	80012fc <HAL_I2C_Init+0x1dc>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1e58      	subs	r0, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6859      	ldr	r1, [r3, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	0099      	lsls	r1, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f2:	3301      	adds	r3, #1
 80012f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	6809      	ldr	r1, [r1, #0]
 8001300:	4313      	orrs	r3, r2
 8001302:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800132a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6911      	ldr	r1, [r2, #16]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68d2      	ldr	r2, [r2, #12]
 8001336:	4311      	orrs	r1, r2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	430b      	orrs	r3, r1
 800133e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0201 	orr.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2220      	movs	r2, #32
 8001376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	000186a0 	.word	0x000186a0
 8001398:	001e847f 	.word	0x001e847f
 800139c:	003d08ff 	.word	0x003d08ff
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	10624dd3 	.word	0x10624dd3

080013a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	460b      	mov	r3, r1
 80013b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff fbec 	bl	8000b94 <HAL_GetTick>
 80013bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b20      	cmp	r3, #32
 80013cc:	f040 8111 	bne.w	80015f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2319      	movs	r3, #25
 80013d6:	2201      	movs	r2, #1
 80013d8:	4988      	ldr	r1, [pc, #544]	@ (80015fc <HAL_I2C_IsDeviceReady+0x254>)
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f912 	bl	8001604 <I2C_WaitOnFlagUntilTimeout>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80013e6:	2302      	movs	r3, #2
 80013e8:	e104      	b.n	80015f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_I2C_IsDeviceReady+0x50>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e0fd      	b.n	80015f4 <HAL_I2C_IsDeviceReady+0x24c>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b01      	cmp	r3, #1
 800140c:	d007      	beq.n	800141e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800142c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2224      	movs	r2, #36	@ 0x24
 8001432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2200      	movs	r2, #0
 800143a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a70      	ldr	r2, [pc, #448]	@ (8001600 <HAL_I2C_IsDeviceReady+0x258>)
 8001440:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001450:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 f8d0 	bl	8001604 <I2C_WaitOnFlagUntilTimeout>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00d      	beq.n	8001486 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001478:	d103      	bne.n	8001482 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001480:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0b6      	b.n	80015f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001486:	897b      	ldrh	r3, [r7, #10]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001494:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff fb7d 	bl	8000b94 <HAL_GetTick>
 800149a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	bf0c      	ite	eq
 80014aa:	2301      	moveq	r3, #1
 80014ac:	2300      	movne	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c0:	bf0c      	ite	eq
 80014c2:	2301      	moveq	r3, #1
 80014c4:	2300      	movne	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80014ca:	e025      	b.n	8001518 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014cc:	f7ff fb62 	bl	8000b94 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d302      	bcc.n	80014e2 <HAL_I2C_IsDeviceReady+0x13a>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d103      	bne.n	80014ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	22a0      	movs	r2, #160	@ 0xa0
 80014e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2ba0      	cmp	r3, #160	@ 0xa0
 8001522:	d005      	beq.n	8001530 <HAL_I2C_IsDeviceReady+0x188>
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <HAL_I2C_IsDeviceReady+0x188>
 800152a:	7dbb      	ldrb	r3, [r7, #22]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0cd      	beq.n	80014cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2220      	movs	r2, #32
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b02      	cmp	r3, #2
 8001544:	d129      	bne.n	800159a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001554:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2319      	movs	r3, #25
 8001572:	2201      	movs	r2, #1
 8001574:	4921      	ldr	r1, [pc, #132]	@ (80015fc <HAL_I2C_IsDeviceReady+0x254>)
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f844 	bl	8001604 <I2C_WaitOnFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e036      	b.n	80015f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2220      	movs	r2, #32
 800158a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e02c      	b.n	80015f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80015b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2319      	movs	r3, #25
 80015ba:	2201      	movs	r2, #1
 80015bc:	490f      	ldr	r1, [pc, #60]	@ (80015fc <HAL_I2C_IsDeviceReady+0x254>)
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 f820 	bl	8001604 <I2C_WaitOnFlagUntilTimeout>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e012      	b.n	80015f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	3301      	adds	r3, #1
 80015d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f4ff af32 	bcc.w	8001442 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80015f2:	2302      	movs	r3, #2
  }
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	00100002 	.word	0x00100002
 8001600:	ffff0000 	.word	0xffff0000

08001604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001614:	e048      	b.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d044      	beq.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800161e:	f7ff fab9 	bl	8000b94 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d302      	bcc.n	8001634 <I2C_WaitOnFlagUntilTimeout+0x30>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d139      	bne.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	0c1b      	lsrs	r3, r3, #16
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d10d      	bne.n	800165a <I2C_WaitOnFlagUntilTimeout+0x56>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	43da      	mvns	r2, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	4013      	ands	r3, r2
 800164a:	b29b      	uxth	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	e00c      	b.n	8001674 <I2C_WaitOnFlagUntilTimeout+0x70>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	43da      	mvns	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	4013      	ands	r3, r2
 8001666:	b29b      	uxth	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	429a      	cmp	r2, r3
 8001678:	d116      	bne.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	f043 0220 	orr.w	r2, r3, #32
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e023      	b.n	80016f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	0c1b      	lsrs	r3, r3, #16
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d10d      	bne.n	80016ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	43da      	mvns	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4013      	ands	r3, r2
 80016be:	b29b      	uxth	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	e00c      	b.n	80016e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	43da      	mvns	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	4013      	ands	r3, r2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d093      	beq.n	8001616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e101      	b.n	800190e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d106      	bne.n	800172a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f005 fbc1 	bl	8006eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001738:	d102      	bne.n	8001740 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f001 ff84 	bl	8003652 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7c1a      	ldrb	r2, [r3, #16]
 8001752:	f88d 2000 	strb.w	r2, [sp]
 8001756:	3304      	adds	r3, #4
 8001758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800175a:	f001 fe63 	bl	8003424 <USB_CoreInit>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0ce      	b.n	800190e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f001 ff7c 	bl	8003674 <USB_SetCurrentMode>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0bf      	b.n	800190e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	e04a      	b.n	800182a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3315      	adds	r3, #21
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3314      	adds	r3, #20
 80017b8:	7bfa      	ldrb	r2, [r7, #15]
 80017ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	b298      	uxth	r0, r3
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	332e      	adds	r3, #46	@ 0x2e
 80017d0:	4602      	mov	r2, r0
 80017d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3318      	adds	r3, #24
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	331c      	adds	r3, #28
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	3320      	adds	r3, #32
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	3324      	adds	r3, #36	@ 0x24
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	3301      	adds	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	429a      	cmp	r2, r3
 8001832:	d3af      	bcc.n	8001794 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e044      	b.n	80018c4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	3301      	adds	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	791b      	ldrb	r3, [r3, #4]
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d3b5      	bcc.n	800183a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7c1a      	ldrb	r2, [r3, #16]
 80018d6:	f88d 2000 	strb.w	r2, [sp]
 80018da:	3304      	adds	r3, #4
 80018dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018de:	f001 ff15 	bl	800370c <USB_DevInit>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e00c      	b.n	800190e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 ff5f 	bl	80047ca <USB_DevDisconnect>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_PCD_Start+0x1c>
 800192e:	2302      	movs	r3, #2
 8001930:	e022      	b.n	8001978 <HAL_PCD_Start+0x62>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001952:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fe66 	bl	8003630 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f002 ff0d 	bl	8004788 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b08d      	sub	sp, #52	@ 0x34
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f002 ffcb 	bl	8004932 <USB_GetMode>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 848c 	bne.w	80022bc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ff2f 	bl	800480c <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8482 	beq.w	80022ba <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 ff1c 	bl	800480c <USB_ReadInterrupts>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f002 0202 	and.w	r2, r2, #2
 80019ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 ff0a 	bl	800480c <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b10      	cmp	r3, #16
 8001a00:	d161      	bne.n	8001ac6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0210 	bic.w	r2, r2, #16
 8001a10:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f003 020f 	and.w	r2, r3, #15
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3304      	adds	r3, #4
 8001a30:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001a38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a3c:	d124      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d035      	beq.n	8001ab6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6a38      	ldr	r0, [r7, #32]
 8001a5e:	f002 fd41 	bl	80044e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a6e:	441a      	add	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a80:	441a      	add	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	615a      	str	r2, [r3, #20]
 8001a86:	e016      	b.n	8001ab6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001a8e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001a92:	d110      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6a38      	ldr	r0, [r7, #32]
 8001aa0:	f002 fd20 	bl	80044e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab0:	441a      	add	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699a      	ldr	r2, [r3, #24]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0210 	orr.w	r2, r2, #16
 8001ac4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 fe9e 	bl	800480c <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ad6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001ada:	f040 80a7 	bne.w	8001c2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fea3 	bl	8004832 <USB_ReadDevAllOutEpInterrupt>
 8001aec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001aee:	e099      	b.n	8001c24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 808e 	beq.w	8001c18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fec7 	bl	800489a <USB_ReadDevOutEPInterrupt>
 8001b0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00c      	beq.n	8001b32 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b24:	461a      	mov	r2, r3
 8001b26:	2301      	movs	r3, #1
 8001b28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fea3 	bl	8002878 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00c      	beq.n	8001b56 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 ff79 	bl	8002a48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2310      	movs	r3, #16
 8001b70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d030      	beq.n	8001bde <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b84:	2b80      	cmp	r3, #128	@ 0x80
 8001b86:	d109      	bne.n	8001b9c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b9a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	78db      	ldrb	r3, [r3, #3]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f005 fa6c 	bl	80070a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2302      	movs	r3, #2
 8001bdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c10:	461a      	mov	r2, r3
 8001c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f47f af62 	bne.w	8001af0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fdeb 	bl	800480c <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c40:	f040 80db 	bne.w	8001dfa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 fe0c 	bl	8004866 <USB_ReadDevAllInEpInterrupt>
 8001c4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001c54:	e0cd      	b.n	8001df2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80c2 	beq.w	8001de6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fe32 	bl	80048d6 <USB_ReadDevInEPInterrupt>
 8001c72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d057      	beq.n	8001d2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	2201      	movs	r2, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69f9      	ldr	r1, [r7, #28]
 8001c9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cae:	461a      	mov	r2, r3
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	799b      	ldrb	r3, [r3, #6]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d132      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3320      	adds	r3, #32
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4403      	add	r3, r0
 8001cdc:	331c      	adds	r3, #28
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4419      	add	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4403      	add	r3, r0
 8001cf0:	3320      	adds	r3, #32
 8001cf2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d113      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x3a2>
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	3324      	adds	r3, #36	@ 0x24
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d108      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	f002 fe39 	bl	8004994 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f005 f940 	bl	8006fae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d44:	461a      	mov	r2, r3
 8001d46:	2308      	movs	r3, #8
 8001d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d60:	461a      	mov	r2, r3
 8001d62:	2310      	movs	r3, #16
 8001d64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2340      	movs	r3, #64	@ 0x40
 8001d80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d023      	beq.n	8001dd4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d8e:	6a38      	ldr	r0, [r7, #32]
 8001d90:	f001 fe20 	bl	80039d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	3310      	adds	r3, #16
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	78db      	ldrb	r3, [r3, #3]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d108      	bne.n	8001dc2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2200      	movs	r2, #0
 8001db4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f005 f983 	bl	80070c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001dde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fcbd 	bl	8002760 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	3301      	adds	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f47f af2e 	bne.w	8001c56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fd04 	bl	800480c <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e0e:	d122      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d108      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e36:	2100      	movs	r1, #0
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fea3 	bl	8002b84 <HAL_PCDEx_LPM_Callback>
 8001e3e:	e002      	b.n	8001e46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f005 f921 	bl	8007088 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 fcd6 	bl	800480c <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e6a:	d112      	bne.n	8001e92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d102      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f005 f8dd 	bl	800703c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001e90:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 fcb8 	bl	800480c <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ea6:	f040 80b7 	bne.w	8002018 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 fd85 	bl	80039d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ece:	e046      	b.n	8001f5e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001edc:	461a      	mov	r2, r3
 8001ede:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ee2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ef4:	0151      	lsls	r1, r2, #5
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	440a      	add	r2, r1
 8001efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001efe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f10:	461a      	mov	r2, r3
 8001f12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f16:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f28:	0151      	lsls	r1, r2, #5
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	440a      	add	r2, r1
 8001f2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f48:	0151      	lsls	r1, r2, #5
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	440a      	add	r2, r1
 8001f4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f56:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	791b      	ldrb	r3, [r3, #4]
 8001f62:	461a      	mov	r2, r3
 8001f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d3b2      	bcc.n	8001ed0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f78:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001f7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7bdb      	ldrb	r3, [r3, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f96:	f043 030b 	orr.w	r3, r3, #11
 8001f9a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fac:	f043 030b 	orr.w	r3, r3, #11
 8001fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb2:	e015      	b.n	8001fe0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fc6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001fca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fda:	f043 030b 	orr.w	r3, r3, #11
 8001fde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001ff2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002002:	461a      	mov	r2, r3
 8002004:	f002 fcc6 	bl	8004994 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fbf5 	bl	800480c <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800202c:	d123      	bne.n	8002076 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f002 fc8b 	bl	800494e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f001 fd42 	bl	8003ac6 <USB_GetDevSpeed>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681c      	ldr	r4, [r3, #0]
 800204e:	f001 f9c9 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8002052:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002058:	461a      	mov	r2, r3
 800205a:	4620      	mov	r0, r4
 800205c:	f001 fa46 	bl	80034ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f004 ffcc 	bl	8006ffe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002074:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fbc6 	bl	800480c <USB_ReadInterrupts>
 8002080:	4603      	mov	r3, r0
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d10a      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f004 ffa9 	bl	8006fe2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f002 0208 	and.w	r2, r2, #8
 800209e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 fbb1 	bl	800480c <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b0:	2b80      	cmp	r3, #128	@ 0x80
 80020b2:	d123      	bne.n	80020fc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020c0:	2301      	movs	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c4:	e014      	b.n	80020f0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d105      	bne.n	80020ea <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fb0a 	bl	80026fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	791b      	ldrb	r3, [r3, #4]
 80020f4:	461a      	mov	r2, r3
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d3e4      	bcc.n	80020c6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fb83 	bl	800480c <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002110:	d13c      	bne.n	800218c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002112:	2301      	movs	r3, #1
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
 8002116:	e02b      	b.n	8002170 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3318      	adds	r3, #24
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d115      	bne.n	800216a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800213e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002140:	2b00      	cmp	r3, #0
 8002142:	da12      	bge.n	800216a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3317      	adds	r3, #23
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 faca 	bl	80026fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216c:	3301      	adds	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	791b      	ldrb	r3, [r3, #4]
 8002174:	461a      	mov	r2, r3
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	4293      	cmp	r3, r2
 800217a:	d3cd      	bcc.n	8002118 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800218a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 fb3b 	bl	800480c <USB_ReadInterrupts>
 8002196:	4603      	mov	r3, r0
 8002198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800219c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021a0:	d156      	bne.n	8002250 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021a2:	2301      	movs	r3, #1
 80021a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a6:	e045      	b.n	8002234 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d12e      	bne.n	800222e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da2b      	bge.n	800222e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	0c1a      	lsrs	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80021e0:	4053      	eors	r3, r2
 80021e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d121      	bne.n	800222e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800222a:	6053      	str	r3, [r2, #4]
            break;
 800222c:	e008      	b.n	8002240 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	3301      	adds	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	791b      	ldrb	r3, [r3, #4]
 8002238:	461a      	mov	r2, r3
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	4293      	cmp	r3, r2
 800223e:	d3b3      	bcc.n	80021a8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800224e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fad9 	bl	800480c <USB_ReadInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002264:	d10a      	bne.n	800227c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f004 ff40 	bl	80070ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800227a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fac3 	bl	800480c <USB_ReadInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b04      	cmp	r3, #4
 800228e:	d115      	bne.n	80022bc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f004 ff30 	bl	8007108 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	e000      	b.n	80022bc <HAL_PCD_IRQHandler+0x93c>
      return;
 80022ba:	bf00      	nop
    }
  }
}
 80022bc:	3734      	adds	r7, #52	@ 0x34
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}

080022c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_PCD_SetAddress+0x1a>
 80022d8:	2302      	movs	r3, #2
 80022da:	e012      	b.n	8002302 <HAL_PCD_SetAddress+0x40>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fa22 	bl	800473c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	4608      	mov	r0, r1
 8002314:	4611      	mov	r1, r2
 8002316:	461a      	mov	r2, r3
 8002318:	4603      	mov	r3, r0
 800231a:	70fb      	strb	r3, [r7, #3]
 800231c:	460b      	mov	r3, r1
 800231e:	803b      	strh	r3, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800232c:	2b00      	cmp	r3, #0
 800232e:	da0f      	bge.n	8002350 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	f003 020f 	and.w	r2, r3, #15
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3310      	adds	r3, #16
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	705a      	strb	r2, [r3, #1]
 800234e:	e00f      	b.n	8002370 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 020f 	and.w	r2, r3, #15
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	3304      	adds	r3, #4
 8002368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	b2da      	uxtb	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800237c:	883b      	ldrh	r3, [r7, #0]
 800237e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	78ba      	ldrb	r2, [r7, #2]
 800238a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800239e:	78bb      	ldrb	r3, [r7, #2]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d102      	bne.n	80023aa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_PCD_EP_Open+0xae>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e00e      	b.n	80023d6 <HAL_PCD_EP_Open+0xcc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68f9      	ldr	r1, [r7, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 fba2 	bl	8003b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80023d4:	7afb      	ldrb	r3, [r7, #11]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	da0f      	bge.n	8002412 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	3310      	adds	r3, #16
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	705a      	strb	r2, [r3, #1]
 8002410:	e00f      	b.n	8002432 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	f003 020f 	and.w	r2, r3, #15
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	3304      	adds	r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	b2da      	uxtb	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_PCD_EP_Close+0x6e>
 8002448:	2302      	movs	r3, #2
 800244a:	e00e      	b.n	800246a <HAL_PCD_EP_Close+0x8c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68f9      	ldr	r1, [r7, #12]
 800245a:	4618      	mov	r0, r3
 800245c:	f001 fbe0 	bl	8003c20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	460b      	mov	r3, r1
 8002480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002482:	7afb      	ldrb	r3, [r7, #11]
 8002484:	f003 020f 	and.w	r2, r3, #15
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	3304      	adds	r3, #4
 800249a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2200      	movs	r2, #0
 80024ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	799b      	ldrb	r3, [r3, #6]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d102      	bne.n	80024ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	799b      	ldrb	r3, [r3, #6]
 80024d6:	461a      	mov	r2, r3
 80024d8:	6979      	ldr	r1, [r7, #20]
 80024da:	f001 fc7d 	bl	8003dd8 <USB_EPStartXfer>

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	f003 020f 	and.w	r2, r3, #15
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	460b      	mov	r3, r1
 8002526:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002528:	7afb      	ldrb	r3, [r7, #11]
 800252a:	f003 020f 	and.w	r2, r3, #15
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	3310      	adds	r3, #16
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	3304      	adds	r3, #4
 800253e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2201      	movs	r2, #1
 8002556:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	b2da      	uxtb	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	799b      	ldrb	r3, [r3, #6]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d102      	bne.n	8002572 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	799b      	ldrb	r3, [r3, #6]
 800257a:	461a      	mov	r2, r3
 800257c:	6979      	ldr	r1, [r7, #20]
 800257e:	f001 fc2b 	bl	8003dd8 <USB_EPStartXfer>

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	7912      	ldrb	r2, [r2, #4]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e04f      	b.n	800264a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da0f      	bge.n	80025d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	f003 020f 	and.w	r2, r3, #15
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	3310      	adds	r3, #16
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	3304      	adds	r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	705a      	strb	r2, [r3, #1]
 80025d0:	e00d      	b.n	80025ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	3304      	adds	r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_PCD_EP_SetStall+0x82>
 800260a:	2302      	movs	r3, #2
 800260c:	e01d      	b.n	800264a <HAL_PCD_EP_SetStall+0xbe>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	4618      	mov	r0, r3
 800261e:	f001 ffb9 	bl	8004594 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7999      	ldrb	r1, [r3, #6]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800263a:	461a      	mov	r2, r3
 800263c:	f002 f9aa 	bl	8004994 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	7912      	ldrb	r2, [r2, #4]
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e042      	b.n	80026f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002674:	2b00      	cmp	r3, #0
 8002676:	da0f      	bge.n	8002698 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 020f 	and.w	r2, r3, #15
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	3310      	adds	r3, #16
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	3304      	adds	r3, #4
 800268e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	705a      	strb	r2, [r3, #1]
 8002696:	e00f      	b.n	80026b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	f003 020f 	and.w	r2, r3, #15
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_PCD_EP_ClrStall+0x86>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e00e      	b.n	80026f6 <HAL_PCD_EP_ClrStall+0xa4>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 ffc2 	bl	8004670 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800270a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800270e:	2b00      	cmp	r3, #0
 8002710:	da0c      	bge.n	800272c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	3310      	adds	r3, #16
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	3304      	adds	r3, #4
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	e00c      	b.n	8002746 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	3304      	adds	r3, #4
 8002744:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	4618      	mov	r0, r3
 800274e:	f001 fde1 	bl	8004314 <USB_EPStopXfer>
 8002752:	4603      	mov	r3, r0
 8002754:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002756:	7afb      	ldrb	r3, [r7, #11]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	@ 0x28
 8002764:	af02      	add	r7, sp, #8
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	3310      	adds	r3, #16
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	3304      	adds	r3, #4
 8002786:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d901      	bls.n	8002798 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e06b      	b.n	8002870 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d902      	bls.n	80027b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	3303      	adds	r3, #3
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027bc:	e02a      	b.n	8002814 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d902      	bls.n	80027da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3303      	adds	r3, #3
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4603      	mov	r3, r0
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f001 fe36 	bl	8004468 <USB_WritePacket>

    ep->xfer_buff  += len;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	441a      	add	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	441a      	add	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	429a      	cmp	r2, r3
 8002828:	d809      	bhi.n	800283e <PCD_WriteEmptyTxFifo+0xde>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002832:	429a      	cmp	r2, r3
 8002834:	d203      	bcs.n	800283e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1bf      	bne.n	80027be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	429a      	cmp	r2, r3
 8002848:	d811      	bhi.n	800286e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2201      	movs	r2, #1
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800285e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	43db      	mvns	r3, r3
 8002864:	6939      	ldr	r1, [r7, #16]
 8002866:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800286a:	4013      	ands	r3, r2
 800286c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	333c      	adds	r3, #60	@ 0x3c
 8002890:	3304      	adds	r3, #4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	799b      	ldrb	r3, [r3, #6]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d17b      	bne.n	80029a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	4a61      	ldr	r2, [pc, #388]	@ (8002a40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	f240 80b9 	bls.w	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80b3 	beq.w	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028da:	461a      	mov	r2, r3
 80028dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028e0:	6093      	str	r3, [r2, #8]
 80028e2:	e0a7      	b.n	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fa:	461a      	mov	r2, r3
 80028fc:	2320      	movs	r3, #32
 80028fe:	6093      	str	r3, [r2, #8]
 8002900:	e098      	b.n	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 8093 	bne.w	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	4a4b      	ldr	r2, [pc, #300]	@ (8002a40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d90f      	bls.n	8002936 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800292c:	461a      	mov	r2, r3
 800292e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002932:	6093      	str	r3, [r2, #8]
 8002934:	e07e      	b.n	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	3304      	adds	r3, #4
 800294a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1a      	ldr	r2, [r3, #32]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	0159      	lsls	r1, r3, #5
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	440b      	add	r3, r1
 8002958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	1ad2      	subs	r2, r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d114      	bne.n	8002998 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002980:	461a      	mov	r2, r3
 8002982:	2101      	movs	r1, #1
 8002984:	f002 f806 	bl	8004994 <USB_EP0_OutStart>
 8002988:	e006      	b.n	8002998 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	441a      	add	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f004 faea 	bl	8006f78 <HAL_PCD_DataOutStageCallback>
 80029a4:	e046      	b.n	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4a26      	ldr	r2, [pc, #152]	@ (8002a44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d124      	bne.n	80029f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029c4:	461a      	mov	r2, r3
 80029c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029ca:	6093      	str	r3, [r2, #8]
 80029cc:	e032      	b.n	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029e4:	461a      	mov	r2, r3
 80029e6:	2320      	movs	r3, #32
 80029e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	4619      	mov	r1, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f004 fac1 	bl	8006f78 <HAL_PCD_DataOutStageCallback>
 80029f6:	e01d      	b.n	8002a34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d114      	bne.n	8002a28 <PCD_EP_OutXfrComplete_int+0x1b0>
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a20:	461a      	mov	r2, r3
 8002a22:	2100      	movs	r1, #0
 8002a24:	f001 ffb6 	bl	8004994 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f004 faa2 	bl	8006f78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	4f54300a 	.word	0x4f54300a
 8002a44:	4f54310a 	.word	0x4f54310a

08002a48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	333c      	adds	r3, #60	@ 0x3c
 8002a60:	3304      	adds	r3, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d90e      	bls.n	8002a9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a94:	461a      	mov	r2, r3
 8002a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f004 fa59 	bl	8006f54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d90c      	bls.n	8002ac4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	799b      	ldrb	r3, [r3, #6]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d108      	bne.n	8002ac4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002abc:	461a      	mov	r2, r3
 8002abe:	2101      	movs	r1, #1
 8002ac0:	f001 ff68 	bl	8004994 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	4f54300a 	.word	0x4f54300a

08002ad4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d107      	bne.n	8002b02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002af2:	883b      	ldrh	r3, [r7, #0]
 8002af4:	0419      	lsls	r1, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b00:	e028      	b.n	8002b54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e00d      	b.n	8002b32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	3340      	adds	r3, #64	@ 0x40
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4413      	add	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d3ec      	bcc.n	8002b16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b3c:	883b      	ldrh	r3, [r7, #0]
 8002b3e:	0418      	lsls	r0, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	4302      	orrs	r2, r0
 8002b4c:	3340      	adds	r3, #64	@ 0x40
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e267      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d075      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bba:	4b88      	ldr	r3, [pc, #544]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d00c      	beq.n	8002be0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc6:	4b85      	ldr	r3, [pc, #532]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d112      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd2:	4b82      	ldr	r3, [pc, #520]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d05b      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x108>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d157      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e242      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c00:	d106      	bne.n	8002c10 <HAL_RCC_OscConfig+0x74>
 8002c02:	4b76      	ldr	r3, [pc, #472]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a75      	ldr	r2, [pc, #468]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xb0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x98>
 8002c1a:	4b70      	ldr	r3, [pc, #448]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a6f      	ldr	r2, [pc, #444]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b6d      	ldr	r3, [pc, #436]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a6c      	ldr	r2, [pc, #432]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xb0>
 8002c34:	4b69      	ldr	r3, [pc, #420]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a68      	ldr	r2, [pc, #416]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b66      	ldr	r3, [pc, #408]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a65      	ldr	r2, [pc, #404]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fd ff9e 	bl	8000b94 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fd ff9a 	bl	8000b94 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	@ 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e207      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xc0>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fd ff8a 	bl	8000b94 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fd ff86 	bl	8000b94 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	@ 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1f3      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b51      	ldr	r3, [pc, #324]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0xe8>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d063      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cbe:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d11c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cca:	4b44      	ldr	r3, [pc, #272]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b41      	ldr	r3, [pc, #260]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x152>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1c7      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b3b      	ldr	r3, [pc, #236]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4937      	ldr	r1, [pc, #220]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e03a      	b.n	8002d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <HAL_RCC_OscConfig+0x244>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fd ff3f 	bl	8000b94 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fd ff3b 	bl	8000b94 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1a8      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b28      	ldr	r3, [pc, #160]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4925      	ldr	r1, [pc, #148]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b24      	ldr	r3, [pc, #144]	@ (8002de0 <HAL_RCC_OscConfig+0x244>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fd ff1e 	bl	8000b94 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fd ff1a 	bl	8000b94 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e187      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d036      	beq.n	8002df4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4b15      	ldr	r3, [pc, #84]	@ (8002de4 <HAL_RCC_OscConfig+0x248>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fd fefe 	bl	8000b94 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9c:	f7fd fefa 	bl	8000b94 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e167      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_OscConfig+0x240>)
 8002db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x200>
 8002dba:	e01b      	b.n	8002df4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dbc:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_RCC_OscConfig+0x248>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc2:	f7fd fee7 	bl	8000b94 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	e00e      	b.n	8002de8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fd fee3 	bl	8000b94 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d907      	bls.n	8002de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e150      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	42470000 	.word	0x42470000
 8002de4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de8:	4b88      	ldr	r3, [pc, #544]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ea      	bne.n	8002dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8097 	beq.w	8002f30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e06:	4b81      	ldr	r3, [pc, #516]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10f      	bne.n	8002e32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	4b7d      	ldr	r3, [pc, #500]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e22:	4b7a      	ldr	r3, [pc, #488]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e32:	4b77      	ldr	r3, [pc, #476]	@ (8003010 <HAL_RCC_OscConfig+0x474>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d118      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3e:	4b74      	ldr	r3, [pc, #464]	@ (8003010 <HAL_RCC_OscConfig+0x474>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a73      	ldr	r2, [pc, #460]	@ (8003010 <HAL_RCC_OscConfig+0x474>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4a:	f7fd fea3 	bl	8000b94 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7fd fe9f 	bl	8000b94 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e10c      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b6a      	ldr	r3, [pc, #424]	@ (8003010 <HAL_RCC_OscConfig+0x474>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x2ea>
 8002e78:	4b64      	ldr	r3, [pc, #400]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	4a63      	ldr	r2, [pc, #396]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e84:	e01c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x324>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x30c>
 8002e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	4a5e      	ldr	r2, [pc, #376]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002e94:	f043 0304 	orr.w	r3, r3, #4
 8002e98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x324>
 8002ea8:	4b58      	ldr	r3, [pc, #352]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eac:	4a57      	ldr	r2, [pc, #348]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb4:	4b55      	ldr	r3, [pc, #340]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb8:	4a54      	ldr	r2, [pc, #336]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002eba:	f023 0304 	bic.w	r3, r3, #4
 8002ebe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d015      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fd fe64 	bl	8000b94 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7fd fe60 	bl	8000b94 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0cb      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	4b49      	ldr	r3, [pc, #292]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0ee      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x334>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef4:	f7fd fe4e 	bl	8000b94 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fd fe4a 	bl	8000b94 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0b5      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f12:	4b3e      	ldr	r3, [pc, #248]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ee      	bne.n	8002efc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f24:	4b39      	ldr	r3, [pc, #228]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	4a38      	ldr	r2, [pc, #224]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80a1 	beq.w	800307c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f3a:	4b34      	ldr	r3, [pc, #208]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d05c      	beq.n	8003000 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d141      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b31      	ldr	r3, [pc, #196]	@ (8003014 <HAL_RCC_OscConfig+0x478>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fd fe1e 	bl	8000b94 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fd fe1a 	bl	8000b94 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e087      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	4b27      	ldr	r3, [pc, #156]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	019b      	lsls	r3, r3, #6
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	3b01      	subs	r3, #1
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	491b      	ldr	r1, [pc, #108]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8003014 <HAL_RCC_OscConfig+0x478>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7fd fdf3 	bl	8000b94 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7fd fdef 	bl	8000b94 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e05c      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc4:	4b11      	ldr	r3, [pc, #68]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x416>
 8002fd0:	e054      	b.n	800307c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <HAL_RCC_OscConfig+0x478>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fd fddc 	bl	8000b94 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fd fdd8 	bl	8000b94 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e045      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_RCC_OscConfig+0x470>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x444>
 8002ffe:	e03d      	b.n	800307c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e038      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
 800300c:	40023800 	.word	0x40023800
 8003010:	40007000 	.word	0x40007000
 8003014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003018:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x4ec>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d028      	beq.n	8003078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d121      	bne.n	8003078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d11a      	bne.n	8003078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003048:	4013      	ands	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800304e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003050:	4293      	cmp	r3, r2
 8003052:	d111      	bne.n	8003078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	3b01      	subs	r3, #1
 8003062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d107      	bne.n	8003078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800

0800308c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0cc      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b68      	ldr	r3, [pc, #416]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d90c      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b65      	ldr	r3, [pc, #404]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a58      	ldr	r2, [pc, #352]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a52      	ldr	r2, [pc, #328]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d044      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d119      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d003      	beq.n	800314a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003146:	2b03      	cmp	r3, #3
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e067      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b37      	ldr	r3, [pc, #220]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4934      	ldr	r1, [pc, #208]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fd fd0a 	bl	8000b94 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fd fd06 	bl	8000b94 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e04f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b25      	ldr	r3, [pc, #148]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d20c      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fe:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f821 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	490a      	ldr	r1, [pc, #40]	@ (800324c <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	@ (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd fc6a 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023c00 	.word	0x40023c00
 8003248:	40023800 	.word	0x40023800
 800324c:	0800847c 	.word	0x0800847c
 8003250:	20000000 	.word	0x20000000
 8003254:	20000004 	.word	0x20000004

08003258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800325c:	b090      	sub	sp, #64	@ 0x40
 800325e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003270:	4b59      	ldr	r3, [pc, #356]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d00d      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x40>
 800327c:	2b08      	cmp	r3, #8
 800327e:	f200 80a1 	bhi.w	80033c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x34>
 8003286:	2b04      	cmp	r3, #4
 8003288:	d003      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0x3a>
 800328a:	e09b      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800328c:	4b53      	ldr	r3, [pc, #332]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x184>)
 800328e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003290:	e09b      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003292:	4b53      	ldr	r3, [pc, #332]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003294:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003296:	e098      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003298:	4b4f      	ldr	r3, [pc, #316]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032a2:	4b4d      	ldr	r3, [pc, #308]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d028      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ae:	4b4a      	ldr	r3, [pc, #296]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	099b      	lsrs	r3, r3, #6
 80032b4:	2200      	movs	r2, #0
 80032b6:	623b      	str	r3, [r7, #32]
 80032b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032c0:	2100      	movs	r1, #0
 80032c2:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032c4:	fb03 f201 	mul.w	r2, r3, r1
 80032c8:	2300      	movs	r3, #0
 80032ca:	fb00 f303 	mul.w	r3, r0, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	4a43      	ldr	r2, [pc, #268]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d2:	fba0 1202 	umull	r1, r2, r0, r2
 80032d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d8:	460a      	mov	r2, r1
 80032da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032de:	4413      	add	r3, r2
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e4:	2200      	movs	r2, #0
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	61fa      	str	r2, [r7, #28]
 80032ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032f2:	f7fc ffc5 	bl	8000280 <__aeabi_uldivmod>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4613      	mov	r3, r2
 80032fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032fe:	e053      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003300:	4b35      	ldr	r3, [pc, #212]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	099b      	lsrs	r3, r3, #6
 8003306:	2200      	movs	r2, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	617a      	str	r2, [r7, #20]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003312:	f04f 0b00 	mov.w	fp, #0
 8003316:	4652      	mov	r2, sl
 8003318:	465b      	mov	r3, fp
 800331a:	f04f 0000 	mov.w	r0, #0
 800331e:	f04f 0100 	mov.w	r1, #0
 8003322:	0159      	lsls	r1, r3, #5
 8003324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003328:	0150      	lsls	r0, r2, #5
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	ebb2 080a 	subs.w	r8, r2, sl
 8003332:	eb63 090b 	sbc.w	r9, r3, fp
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003342:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003346:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800334a:	ebb2 0408 	subs.w	r4, r2, r8
 800334e:	eb63 0509 	sbc.w	r5, r3, r9
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	00eb      	lsls	r3, r5, #3
 800335c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003360:	00e2      	lsls	r2, r4, #3
 8003362:	4614      	mov	r4, r2
 8003364:	461d      	mov	r5, r3
 8003366:	eb14 030a 	adds.w	r3, r4, sl
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	eb45 030b 	adc.w	r3, r5, fp
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800337e:	4629      	mov	r1, r5
 8003380:	028b      	lsls	r3, r1, #10
 8003382:	4621      	mov	r1, r4
 8003384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003388:	4621      	mov	r1, r4
 800338a:	028a      	lsls	r2, r1, #10
 800338c:	4610      	mov	r0, r2
 800338e:	4619      	mov	r1, r3
 8003390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003392:	2200      	movs	r2, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	60fa      	str	r2, [r7, #12]
 8003398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800339c:	f7fc ff70 	bl	8000280 <__aeabi_uldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4613      	mov	r3, r2
 80033a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	0c1b      	lsrs	r3, r3, #16
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	3301      	adds	r3, #1
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033c2:	e002      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c4:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x184>)
 80033c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3740      	adds	r7, #64	@ 0x40
 80033d0:	46bd      	mov	sp, r7
 80033d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	00f42400 	.word	0x00f42400
 80033e0:	017d7840 	.word	0x017d7840

080033e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e8:	4b03      	ldr	r3, [pc, #12]	@ (80033f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000000 	.word	0x20000000

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003400:	f7ff fff0 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0a9b      	lsrs	r3, r3, #10
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	@ (8003420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	0800848c 	.word	0x0800848c

08003424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003424:	b084      	sub	sp, #16
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	f107 001c 	add.w	r0, r7, #28
 8003432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003436:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800343a:	2b01      	cmp	r3, #1
 800343c:	d123      	bne.n	8003486 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003442:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003466:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f001 fae8 	bl	8004a50 <USB_CoreReset>
 8003480:	4603      	mov	r3, r0
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	e01b      	b.n	80034be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f001 fadc 	bl	8004a50 <USB_CoreReset>
 8003498:	4603      	mov	r3, r0
 800349a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800349c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80034b0:	e005      	b.n	80034be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034be:	7fbb      	ldrb	r3, [r7, #30]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10b      	bne.n	80034dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f043 0206 	orr.w	r2, r3, #6
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034e8:	b004      	add	sp, #16
 80034ea:	4770      	bx	lr

080034ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	4613      	mov	r3, r2
 80034f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d165      	bne.n	80035cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4a41      	ldr	r2, [pc, #260]	@ (8003608 <USB_SetTurnaroundTime+0x11c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d906      	bls.n	8003516 <USB_SetTurnaroundTime+0x2a>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4a40      	ldr	r2, [pc, #256]	@ (800360c <USB_SetTurnaroundTime+0x120>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d202      	bcs.n	8003516 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003510:	230f      	movs	r3, #15
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e062      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4a3c      	ldr	r2, [pc, #240]	@ (800360c <USB_SetTurnaroundTime+0x120>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d306      	bcc.n	800352c <USB_SetTurnaroundTime+0x40>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4a3b      	ldr	r2, [pc, #236]	@ (8003610 <USB_SetTurnaroundTime+0x124>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d202      	bcs.n	800352c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003526:	230e      	movs	r3, #14
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e057      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4a38      	ldr	r2, [pc, #224]	@ (8003610 <USB_SetTurnaroundTime+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d306      	bcc.n	8003542 <USB_SetTurnaroundTime+0x56>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4a37      	ldr	r2, [pc, #220]	@ (8003614 <USB_SetTurnaroundTime+0x128>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d202      	bcs.n	8003542 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800353c:	230d      	movs	r3, #13
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e04c      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4a33      	ldr	r2, [pc, #204]	@ (8003614 <USB_SetTurnaroundTime+0x128>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d306      	bcc.n	8003558 <USB_SetTurnaroundTime+0x6c>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4a32      	ldr	r2, [pc, #200]	@ (8003618 <USB_SetTurnaroundTime+0x12c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d802      	bhi.n	8003558 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003552:	230c      	movs	r3, #12
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e041      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4a2f      	ldr	r2, [pc, #188]	@ (8003618 <USB_SetTurnaroundTime+0x12c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d906      	bls.n	800356e <USB_SetTurnaroundTime+0x82>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4a2e      	ldr	r2, [pc, #184]	@ (800361c <USB_SetTurnaroundTime+0x130>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d802      	bhi.n	800356e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003568:	230b      	movs	r3, #11
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e036      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4a2a      	ldr	r2, [pc, #168]	@ (800361c <USB_SetTurnaroundTime+0x130>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d906      	bls.n	8003584 <USB_SetTurnaroundTime+0x98>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4a29      	ldr	r2, [pc, #164]	@ (8003620 <USB_SetTurnaroundTime+0x134>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d802      	bhi.n	8003584 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800357e:	230a      	movs	r3, #10
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	e02b      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4a26      	ldr	r2, [pc, #152]	@ (8003620 <USB_SetTurnaroundTime+0x134>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d906      	bls.n	800359a <USB_SetTurnaroundTime+0xae>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4a25      	ldr	r2, [pc, #148]	@ (8003624 <USB_SetTurnaroundTime+0x138>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d202      	bcs.n	800359a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003594:	2309      	movs	r3, #9
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e020      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4a21      	ldr	r2, [pc, #132]	@ (8003624 <USB_SetTurnaroundTime+0x138>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d306      	bcc.n	80035b0 <USB_SetTurnaroundTime+0xc4>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4a20      	ldr	r2, [pc, #128]	@ (8003628 <USB_SetTurnaroundTime+0x13c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d802      	bhi.n	80035b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035aa:	2308      	movs	r3, #8
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	e015      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003628 <USB_SetTurnaroundTime+0x13c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d906      	bls.n	80035c6 <USB_SetTurnaroundTime+0xda>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <USB_SetTurnaroundTime+0x140>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d202      	bcs.n	80035c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035c0:	2307      	movs	r3, #7
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e00a      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80035c6:	2306      	movs	r3, #6
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	e007      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80035d2:	2309      	movs	r3, #9
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	e001      	b.n	80035dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035d8:	2309      	movs	r3, #9
 80035da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	029b      	lsls	r3, r3, #10
 80035f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	00d8acbf 	.word	0x00d8acbf
 800360c:	00e4e1c0 	.word	0x00e4e1c0
 8003610:	00f42400 	.word	0x00f42400
 8003614:	01067380 	.word	0x01067380
 8003618:	011a499f 	.word	0x011a499f
 800361c:	01312cff 	.word	0x01312cff
 8003620:	014ca43f 	.word	0x014ca43f
 8003624:	016e3600 	.word	0x016e3600
 8003628:	01a6ab1f 	.word	0x01a6ab1f
 800362c:	01e84800 	.word	0x01e84800

08003630 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f043 0201 	orr.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f023 0201 	bic.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d115      	bne.n	80036c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80036a2:	200a      	movs	r0, #10
 80036a4:	f7fd fa82 	bl	8000bac <HAL_Delay>
      ms += 10U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	330a      	adds	r3, #10
 80036ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f001 f93f 	bl	8004932 <USB_GetMode>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d01e      	beq.n	80036f8 <USB_SetCurrentMode+0x84>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80036be:	d9f0      	bls.n	80036a2 <USB_SetCurrentMode+0x2e>
 80036c0:	e01a      	b.n	80036f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d115      	bne.n	80036f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80036d4:	200a      	movs	r0, #10
 80036d6:	f7fd fa69 	bl	8000bac <HAL_Delay>
      ms += 10U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	330a      	adds	r3, #10
 80036de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f001 f926 	bl	8004932 <USB_GetMode>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <USB_SetCurrentMode+0x84>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80036f0:	d9f0      	bls.n	80036d4 <USB_SetCurrentMode+0x60>
 80036f2:	e001      	b.n	80036f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e005      	b.n	8003704 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80036fc:	d101      	bne.n	8003702 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800370c:	b084      	sub	sp, #16
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800371a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	e009      	b.n	8003740 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	3340      	adds	r3, #64	@ 0x40
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	2200      	movs	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	3301      	adds	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0e      	cmp	r3, #14
 8003744:	d9f2      	bls.n	800372c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003746:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11c      	bne.n	8003788 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800375c:	f043 0302 	orr.w	r3, r3, #2
 8003760:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	639a      	str	r2, [r3, #56]	@ 0x38
 8003786:	e00b      	b.n	80037a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003798:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80037a6:	461a      	mov	r2, r3
 80037a8:	2300      	movs	r3, #0
 80037aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d10d      	bne.n	80037d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d104      	bne.n	80037c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037bc:	2100      	movs	r1, #0
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f968 	bl	8003a94 <USB_SetDevSpeed>
 80037c4:	e008      	b.n	80037d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037c6:	2101      	movs	r1, #1
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f963 	bl	8003a94 <USB_SetDevSpeed>
 80037ce:	e003      	b.n	80037d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037d0:	2103      	movs	r1, #3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f95e 	bl	8003a94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037d8:	2110      	movs	r1, #16
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8fa 	bl	80039d4 <USB_FlushTxFifo>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f924 	bl	8003a38 <USB_FlushRxFifo>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003800:	461a      	mov	r2, r3
 8003802:	2300      	movs	r3, #0
 8003804:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380c:	461a      	mov	r2, r3
 800380e:	2300      	movs	r3, #0
 8003810:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003818:	461a      	mov	r2, r3
 800381a:	2300      	movs	r3, #0
 800381c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e043      	b.n	80038ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800383a:	d118      	bne.n	800386e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800384e:	461a      	mov	r2, r3
 8003850:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e013      	b.n	8003880 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003864:	461a      	mov	r2, r3
 8003866:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	e008      	b.n	8003880 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800387a:	461a      	mov	r2, r3
 800387c:	2300      	movs	r3, #0
 800387e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800388c:	461a      	mov	r2, r3
 800388e:	2300      	movs	r3, #0
 8003890:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800389e:	461a      	mov	r2, r3
 80038a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	3301      	adds	r3, #1
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038b0:	461a      	mov	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d3b5      	bcc.n	8003824 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e043      	b.n	8003946 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038d4:	d118      	bne.n	8003908 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e8:	461a      	mov	r2, r3
 80038ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e013      	b.n	800391a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e008      	b.n	800391a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003914:	461a      	mov	r2, r3
 8003916:	2300      	movs	r3, #0
 8003918:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003926:	461a      	mov	r2, r3
 8003928:	2300      	movs	r3, #0
 800392a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003938:	461a      	mov	r2, r3
 800393a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800393e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	3301      	adds	r3, #1
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800394a:	461a      	mov	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4293      	cmp	r3, r2
 8003950:	d3b5      	bcc.n	80038be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003964:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003972:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003974:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f043 0210 	orr.w	r2, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	4b10      	ldr	r3, [pc, #64]	@ (80039d0 <USB_DevInit+0x2c4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003994:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f043 0208 	orr.w	r2, r3, #8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039cc:	b004      	add	sp, #16
 80039ce:	4770      	bx	lr
 80039d0:	803c3800 	.word	0x803c3800

080039d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3301      	adds	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039ee:	d901      	bls.n	80039f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e01b      	b.n	8003a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	daf2      	bge.n	80039e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	019b      	lsls	r3, r3, #6
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a18:	d901      	bls.n	8003a1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e006      	b.n	8003a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d0f0      	beq.n	8003a0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a50:	d901      	bls.n	8003a56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e018      	b.n	8003a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	daf2      	bge.n	8003a44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2210      	movs	r2, #16
 8003a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a74:	d901      	bls.n	8003a7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e006      	b.n	8003a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d0f0      	beq.n	8003a68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0306 	and.w	r3, r3, #6
 8003ade:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
 8003aea:	e00a      	b.n	8003b02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d002      	beq.n	8003af8 <USB_GetDevSpeed+0x32>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d102      	bne.n	8003afe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003af8:	2302      	movs	r3, #2
 8003afa:	75fb      	strb	r3, [r7, #23]
 8003afc:	e001      	b.n	8003b02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003afe:	230f      	movs	r3, #15
 8003b00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d13a      	bne.n	8003ba2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	68f9      	ldr	r1, [r7, #12]
 8003b46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d155      	bne.n	8003c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	791b      	ldrb	r3, [r3, #4]
 8003b7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	059b      	lsls	r3, r3, #22
 8003b86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	e036      	b.n	8003c10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	041b      	lsls	r3, r3, #16
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11a      	bne.n	8003c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	791b      	ldrb	r3, [r3, #4]
 8003bf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	785b      	ldrb	r3, [r3, #1]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d161      	bne.n	8003d00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c52:	d11f      	bne.n	8003c94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	0151      	lsls	r1, r2, #5
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	440a      	add	r2, r1
 8003c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	0159      	lsls	r1, r3, #5
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	440b      	add	r3, r1
 8003cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4b35      	ldr	r3, [pc, #212]	@ (8003dd0 <USB_DeactivateEndpoint+0x1b0>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
 8003cfe:	e060      	b.n	8003dc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d16:	d11f      	bne.n	8003d58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	0151      	lsls	r1, r2, #5
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	43db      	mvns	r3, r3
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d78:	4013      	ands	r3, r2
 8003d7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	43db      	mvns	r3, r3
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	0159      	lsls	r1, r3, #5
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	440b      	add	r3, r1
 8003db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <USB_DeactivateEndpoint+0x1b4>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	ec337800 	.word	0xec337800
 8003dd4:	eff37800 	.word	0xeff37800

08003dd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	@ 0x28
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 817f 	bne.w	80040f8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d132      	bne.n	8003e68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003e20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e60:	0cdb      	lsrs	r3, r3, #19
 8003e62:	04db      	lsls	r3, r3, #19
 8003e64:	6113      	str	r3, [r2, #16]
 8003e66:	e097      	b.n	8003f98 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e82:	0cdb      	lsrs	r3, r3, #19
 8003e84:	04db      	lsls	r3, r3, #19
 8003e86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ea2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003ea6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003eaa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11a      	bne.n	8003ee8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d903      	bls.n	8003ec6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ee0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ee4:	6113      	str	r3, [r2, #16]
 8003ee6:	e044      	b.n	8003f72 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	8afb      	ldrh	r3, [r7, #22]
 8003f0e:	04d9      	lsls	r1, r3, #19
 8003f10:	4ba4      	ldr	r3, [pc, #656]	@ (80041a4 <USB_EPStartXfer+0x3cc>)
 8003f12:	400b      	ands	r3, r1
 8003f14:	69b9      	ldr	r1, [r7, #24]
 8003f16:	0148      	lsls	r0, r1, #5
 8003f18:	69f9      	ldr	r1, [r7, #28]
 8003f1a:	4401      	add	r1, r0
 8003f1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f20:	4313      	orrs	r3, r2
 8003f22:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	791b      	ldrb	r3, [r3, #4]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d122      	bne.n	8003f72 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	0151      	lsls	r1, r2, #5
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	440a      	add	r2, r1
 8003f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f46:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003f4a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	8afb      	ldrh	r3, [r7, #22]
 8003f5c:	075b      	lsls	r3, r3, #29
 8003f5e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003f62:	69b9      	ldr	r1, [r7, #24]
 8003f64:	0148      	lsls	r0, r1, #5
 8003f66:	69f9      	ldr	r1, [r7, #28]
 8003f68:	4401      	add	r1, r0
 8003f6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f88:	69b9      	ldr	r1, [r7, #24]
 8003f8a:	0148      	lsls	r0, r1, #5
 8003f8c:	69f9      	ldr	r1, [r7, #28]
 8003f8e:	4401      	add	r1, r0
 8003f90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f94:	4313      	orrs	r3, r2
 8003f96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d14b      	bne.n	8004036 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	791b      	ldrb	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d128      	bne.n	8004014 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d110      	bne.n	8003ff4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e00f      	b.n	8004014 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004012:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	0151      	lsls	r1, r2, #5
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	440a      	add	r2, r1
 800402a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800402e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e166      	b.n	8004304 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	440a      	add	r2, r1
 800404c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004050:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004054:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	791b      	ldrb	r3, [r3, #4]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d015      	beq.n	800408a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 814e 	beq.w	8004304 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	2101      	movs	r1, #1
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	69f9      	ldr	r1, [r7, #28]
 8004080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004084:	4313      	orrs	r3, r2
 8004086:	634b      	str	r3, [r1, #52]	@ 0x34
 8004088:	e13c      	b.n	8004304 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d110      	bne.n	80040bc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e00f      	b.n	80040dc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	68d9      	ldr	r1, [r3, #12]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781a      	ldrb	r2, [r3, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	b298      	uxth	r0, r3
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	4603      	mov	r3, r0
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f9b9 	bl	8004468 <USB_WritePacket>
 80040f6:	e105      	b.n	8004304 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	440a      	add	r2, r1
 800410e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004112:	0cdb      	lsrs	r3, r3, #19
 8004114:	04db      	lsls	r3, r3, #19
 8004116:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	440a      	add	r2, r1
 800412e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004132:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004136:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800413a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d132      	bne.n	80041a8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004170:	69b9      	ldr	r1, [r7, #24]
 8004172:	0148      	lsls	r0, r1, #5
 8004174:	69f9      	ldr	r1, [r7, #28]
 8004176:	4401      	add	r1, r0
 8004178:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800417c:	4313      	orrs	r3, r2
 800417e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	0151      	lsls	r1, r2, #5
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	440a      	add	r2, r1
 8004196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800419a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800419e:	6113      	str	r3, [r2, #16]
 80041a0:	e062      	b.n	8004268 <USB_EPStartXfer+0x490>
 80041a2:	bf00      	nop
 80041a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d123      	bne.n	80041f8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c6:	69b9      	ldr	r1, [r7, #24]
 80041c8:	0148      	lsls	r0, r1, #5
 80041ca:	69f9      	ldr	r1, [r7, #28]
 80041cc:	4401      	add	r1, r0
 80041ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80041d2:	4313      	orrs	r3, r2
 80041d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041f4:	6113      	str	r3, [r2, #16]
 80041f6:	e037      	b.n	8004268 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4413      	add	r3, r2
 8004202:	1e5a      	subs	r2, r3, #1
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	8afa      	ldrh	r2, [r7, #22]
 8004214:	fb03 f202 	mul.w	r2, r3, r2
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	8afb      	ldrh	r3, [r7, #22]
 800422c:	04d9      	lsls	r1, r3, #19
 800422e:	4b38      	ldr	r3, [pc, #224]	@ (8004310 <USB_EPStartXfer+0x538>)
 8004230:	400b      	ands	r3, r1
 8004232:	69b9      	ldr	r1, [r7, #24]
 8004234:	0148      	lsls	r0, r1, #5
 8004236:	69f9      	ldr	r1, [r7, #28]
 8004238:	4401      	add	r1, r0
 800423a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	0148      	lsls	r0, r1, #5
 800425c:	69f9      	ldr	r1, [r7, #28]
 800425e:	4401      	add	r1, r0
 8004260:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10d      	bne.n	800428a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	68d9      	ldr	r1, [r3, #12]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004286:	460a      	mov	r2, r1
 8004288:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	791b      	ldrb	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d128      	bne.n	80042e4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d110      	bne.n	80042c4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e00f      	b.n	80042e4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	0151      	lsls	r1, r2, #5
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	440a      	add	r2, r1
 80042da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	0151      	lsls	r1, r2, #5
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	440a      	add	r2, r1
 80042fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	1ff80000 	.word	0x1ff80000

08004314 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d14a      	bne.n	80043c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800434a:	f040 8086 	bne.w	800445a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	0151      	lsls	r1, r2, #5
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	440a      	add	r2, r1
 8004368:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800436c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004370:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004390:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004394:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d902      	bls.n	80043ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
          break;
 80043aa:	e056      	b.n	800445a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043c4:	d0e7      	beq.n	8004396 <USB_EPStopXfer+0x82>
 80043c6:	e048      	b.n	800445a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043e0:	d13b      	bne.n	800445a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	0151      	lsls	r1, r2, #5
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	440a      	add	r2, r1
 80043fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004400:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004404:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004424:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004428:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3301      	adds	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004436:	4293      	cmp	r3, r2
 8004438:	d902      	bls.n	8004440 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
          break;
 800443e:	e00c      	b.n	800445a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004458:	d0e7      	beq.n	800442a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800445a:	7dfb      	ldrb	r3, [r7, #23]
}
 800445c:	4618      	mov	r0, r3
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	@ 0x24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	460b      	mov	r3, r1
 8004478:	71fb      	strb	r3, [r7, #7]
 800447a:	4613      	mov	r3, r2
 800447c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004486:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d123      	bne.n	80044d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800448e:	88bb      	ldrh	r3, [r7, #4]
 8004490:	3303      	adds	r3, #3
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e018      	b.n	80044ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	031a      	lsls	r2, r3, #12
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044a8:	461a      	mov	r2, r3
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	3301      	adds	r3, #1
 80044b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3301      	adds	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	3301      	adds	r3, #1
 80044c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3301      	adds	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d3e2      	bcc.n	800449c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3724      	adds	r7, #36	@ 0x24
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b08b      	sub	sp, #44	@ 0x2c
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	089b      	lsrs	r3, r3, #2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	623b      	str	r3, [r7, #32]
 800450e:	e014      	b.n	800453a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	601a      	str	r2, [r3, #0]
    pDest++;
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	3301      	adds	r3, #1
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	3301      	adds	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	3301      	adds	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	3301      	adds	r3, #1
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	3301      	adds	r3, #1
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	6a3a      	ldr	r2, [r7, #32]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	429a      	cmp	r2, r3
 8004540:	d3e6      	bcc.n	8004510 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004542:	8bfb      	ldrh	r3, [r7, #30]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01e      	beq.n	8004586 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004552:	461a      	mov	r2, r3
 8004554:	f107 0310 	add.w	r3, r7, #16
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	b2da      	uxtb	r2, r3
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	701a      	strb	r2, [r3, #0]
      i++;
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	3301      	adds	r3, #1
 8004572:	623b      	str	r3, [r7, #32]
      pDest++;
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	3301      	adds	r3, #1
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800457a:	8bfb      	ldrh	r3, [r7, #30]
 800457c:	3b01      	subs	r3, #1
 800457e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004580:	8bfb      	ldrh	r3, [r7, #30]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ea      	bne.n	800455c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004588:	4618      	mov	r0, r3
 800458a:	372c      	adds	r7, #44	@ 0x2c
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d12c      	bne.n	800460a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	db12      	blt.n	80045e8 <USB_EPSetStall+0x54>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00f      	beq.n	80045e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	0151      	lsls	r1, r2, #5
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	440a      	add	r2, r1
 80045de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004602:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	e02b      	b.n	8004662 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	db12      	blt.n	8004642 <USB_EPSetStall+0xae>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00f      	beq.n	8004642 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	440a      	add	r2, r1
 8004638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800463c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004640:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800465c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004660:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d128      	bne.n	80046de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	791b      	ldrb	r3, [r3, #4]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d003      	beq.n	80046bc <USB_EPClearStall+0x4c>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d138      	bne.n	800472e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e027      	b.n	800472e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	791b      	ldrb	r3, [r3, #4]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d003      	beq.n	800470e <USB_EPClearStall+0x9e>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	791b      	ldrb	r3, [r3, #4]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d10f      	bne.n	800472e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	440a      	add	r2, r1
 8004724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800472c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800475a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800475e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004770:	68f9      	ldr	r1, [r7, #12]
 8004772:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b6:	f023 0302 	bic.w	r3, r3, #2
 80047ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047e4:	f023 0303 	bic.w	r3, r3, #3
 80047e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047f8:	f043 0302 	orr.w	r3, r3, #2
 80047fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4013      	ands	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004824:	68fb      	ldr	r3, [r7, #12]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	0c1b      	lsrs	r3, r3, #16
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	4013      	ands	r3, r2
 8004888:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	b29b      	uxth	r3, r3
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048c8:	68bb      	ldr	r3, [r7, #8]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b087      	sub	sp, #28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	fa22 f303 	lsr.w	r3, r2, r3
 8004906:	01db      	lsls	r3, r3, #7
 8004908:	b2db      	uxtb	r3, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4013      	ands	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004924:	68bb      	ldr	r3, [r7, #8]
}
 8004926:	4618      	mov	r0, r3
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0301 	and.w	r3, r3, #1
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004968:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800496c:	f023 0307 	bic.w	r3, r3, #7
 8004970:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004984:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	460b      	mov	r3, r1
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	333c      	adds	r3, #60	@ 0x3c
 80049aa:	3304      	adds	r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4a26      	ldr	r2, [pc, #152]	@ (8004a4c <USB_EP0_OutStart+0xb8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d90a      	bls.n	80049ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049c8:	d101      	bne.n	80049ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e037      	b.n	8004a3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d4:	461a      	mov	r2, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049fc:	f043 0318 	orr.w	r3, r3, #24
 8004a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a10:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004a14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10f      	bne.n	8004a3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a36:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	4f54300a 	.word	0x4f54300a

08004a50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a68:	d901      	bls.n	8004a6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e022      	b.n	8004ab4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	daf2      	bge.n	8004a5c <USB_CoreReset+0xc>

  count = 10U;
 8004a76:	230a      	movs	r3, #10
 8004a78:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004a7a:	e002      	b.n	8004a82 <USB_CoreReset+0x32>
  {
    count--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f9      	bne.n	8004a7c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f043 0201 	orr.w	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aa0:	d901      	bls.n	8004aa6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e006      	b.n	8004ab4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d0f0      	beq.n	8004a94 <USB_CoreReset+0x44>

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004acc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004ad0:	f002 fcb2 	bl	8007438 <USBD_static_malloc>
 8004ad4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	32b0      	adds	r2, #176	@ 0xb0
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004aec:	2302      	movs	r3, #2
 8004aee:	e0d4      	b.n	8004c9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004af0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004af4:	2100      	movs	r1, #0
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f002 feec 	bl	80078d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	32b0      	adds	r2, #176	@ 0xb0
 8004b06:	68f9      	ldr	r1, [r7, #12]
 8004b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	32b0      	adds	r2, #176	@ 0xb0
 8004b16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	7c1b      	ldrb	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d138      	bne.n	8004b9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b28:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca4 <USBD_CDC_Init+0x1e4>)
 8004b2a:	7819      	ldrb	r1, [r3, #0]
 8004b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b30:	2202      	movs	r2, #2
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f002 fb5d 	bl	80071f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b38:	4b5a      	ldr	r3, [pc, #360]	@ (8004ca4 <USBD_CDC_Init+0x1e4>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3323      	adds	r3, #35	@ 0x23
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b52:	4b55      	ldr	r3, [pc, #340]	@ (8004ca8 <USBD_CDC_Init+0x1e8>)
 8004b54:	7819      	ldrb	r1, [r3, #0]
 8004b56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f002 fb48 	bl	80071f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b62:	4b51      	ldr	r3, [pc, #324]	@ (8004ca8 <USBD_CDC_Init+0x1e8>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	f003 020f 	and.w	r2, r3, #15
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8004cac <USBD_CDC_Init+0x1ec>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	f003 020f 	and.w	r2, r3, #15
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	331c      	adds	r3, #28
 8004b94:	2210      	movs	r2, #16
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e035      	b.n	8004c06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b9a:	4b42      	ldr	r3, [pc, #264]	@ (8004ca4 <USBD_CDC_Init+0x1e4>)
 8004b9c:	7819      	ldrb	r1, [r3, #0]
 8004b9e:	2340      	movs	r3, #64	@ 0x40
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f002 fb25 	bl	80071f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca4 <USBD_CDC_Init+0x1e4>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f003 020f 	and.w	r2, r3, #15
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	3323      	adds	r3, #35	@ 0x23
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bc2:	4b39      	ldr	r3, [pc, #228]	@ (8004ca8 <USBD_CDC_Init+0x1e8>)
 8004bc4:	7819      	ldrb	r1, [r3, #0]
 8004bc6:	2340      	movs	r3, #64	@ 0x40
 8004bc8:	2202      	movs	r2, #2
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f002 fb11 	bl	80071f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004bd0:	4b35      	ldr	r3, [pc, #212]	@ (8004ca8 <USBD_CDC_Init+0x1e8>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f003 020f 	and.w	r2, r3, #15
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004bec:	4b2f      	ldr	r3, [pc, #188]	@ (8004cac <USBD_CDC_Init+0x1ec>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f003 020f 	and.w	r2, r3, #15
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	331c      	adds	r3, #28
 8004c02:	2210      	movs	r2, #16
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c06:	4b29      	ldr	r3, [pc, #164]	@ (8004cac <USBD_CDC_Init+0x1ec>)
 8004c08:	7819      	ldrb	r1, [r3, #0]
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f002 faef 	bl	80071f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004c14:	4b25      	ldr	r3, [pc, #148]	@ (8004cac <USBD_CDC_Init+0x1ec>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	f003 020f 	and.w	r2, r3, #15
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	3323      	adds	r3, #35	@ 0x23
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	33b0      	adds	r3, #176	@ 0xb0
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004c64:	2302      	movs	r3, #2
 8004c66:	e018      	b.n	8004c9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	7c1b      	ldrb	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c70:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <USBD_CDC_Init+0x1e8>)
 8004c72:	7819      	ldrb	r1, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f002 fba6 	bl	80073d0 <USBD_LL_PrepareReceive>
 8004c84:	e008      	b.n	8004c98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c86:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <USBD_CDC_Init+0x1e8>)
 8004c88:	7819      	ldrb	r1, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c90:	2340      	movs	r3, #64	@ 0x40
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f002 fb9c 	bl	80073d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000093 	.word	0x20000093
 8004ca8:	20000094 	.word	0x20000094
 8004cac:	20000095 	.word	0x20000095

08004cb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8004da8 <USBD_CDC_DeInit+0xf8>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f002 fabb 	bl	800723e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004cc8:	4b37      	ldr	r3, [pc, #220]	@ (8004da8 <USBD_CDC_DeInit+0xf8>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	f003 020f 	and.w	r2, r3, #15
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	3323      	adds	r3, #35	@ 0x23
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004ce2:	4b32      	ldr	r3, [pc, #200]	@ (8004dac <USBD_CDC_DeInit+0xfc>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f002 faa8 	bl	800723e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004cee:	4b2f      	ldr	r3, [pc, #188]	@ (8004dac <USBD_CDC_DeInit+0xfc>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	f003 020f 	and.w	r2, r3, #15
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004d0a:	4b29      	ldr	r3, [pc, #164]	@ (8004db0 <USBD_CDC_DeInit+0x100>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f002 fa94 	bl	800723e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004d16:	4b26      	ldr	r3, [pc, #152]	@ (8004db0 <USBD_CDC_DeInit+0x100>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	f003 020f 	and.w	r2, r3, #15
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	3323      	adds	r3, #35	@ 0x23
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004d30:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <USBD_CDC_DeInit+0x100>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	f003 020f 	and.w	r2, r3, #15
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	331c      	adds	r3, #28
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	32b0      	adds	r2, #176	@ 0xb0
 8004d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01f      	beq.n	8004d9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	33b0      	adds	r3, #176	@ 0xb0
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	32b0      	adds	r2, #176	@ 0xb0
 8004d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f002 fb68 	bl	8007454 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	32b0      	adds	r2, #176	@ 0xb0
 8004d8e:	2100      	movs	r1, #0
 8004d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000093 	.word	0x20000093
 8004dac:	20000094 	.word	0x20000094
 8004db0:	20000095 	.word	0x20000095

08004db4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	32b0      	adds	r2, #176	@ 0xb0
 8004dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e0bf      	b.n	8004f64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d050      	beq.n	8004e92 <USBD_CDC_Setup+0xde>
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	f040 80af 	bne.w	8004f54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	88db      	ldrh	r3, [r3, #6]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d03a      	beq.n	8004e74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da1b      	bge.n	8004e40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	33b0      	adds	r3, #176	@ 0xb0
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004e1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	88d2      	ldrh	r2, [r2, #6]
 8004e24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	88db      	ldrh	r3, [r3, #6]
 8004e2a:	2b07      	cmp	r3, #7
 8004e2c:	bf28      	it	cs
 8004e2e:	2307      	movcs	r3, #7
 8004e30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	89fa      	ldrh	r2, [r7, #14]
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 fda9 	bl	8006990 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004e3e:	e090      	b.n	8004f62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	785a      	ldrb	r2, [r3, #1]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	88db      	ldrh	r3, [r3, #6]
 8004e4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e50:	d803      	bhi.n	8004e5a <USBD_CDC_Setup+0xa6>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	88db      	ldrh	r3, [r3, #6]
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	e000      	b.n	8004e5c <USBD_CDC_Setup+0xa8>
 8004e5a:	2240      	movs	r2, #64	@ 0x40
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004e62:	6939      	ldr	r1, [r7, #16]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 fdbe 	bl	80069ee <USBD_CtlPrepareRx>
      break;
 8004e72:	e076      	b.n	8004f62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	33b0      	adds	r3, #176	@ 0xb0
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	7850      	ldrb	r0, [r2, #1]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	4798      	blx	r3
      break;
 8004e90:	e067      	b.n	8004f62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	2b0b      	cmp	r3, #11
 8004e98:	d851      	bhi.n	8004f3e <USBD_CDC_Setup+0x18a>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <USBD_CDC_Setup+0xec>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ed1 	.word	0x08004ed1
 8004ea4:	08004f4d 	.word	0x08004f4d
 8004ea8:	08004f3f 	.word	0x08004f3f
 8004eac:	08004f3f 	.word	0x08004f3f
 8004eb0:	08004f3f 	.word	0x08004f3f
 8004eb4:	08004f3f 	.word	0x08004f3f
 8004eb8:	08004f3f 	.word	0x08004f3f
 8004ebc:	08004f3f 	.word	0x08004f3f
 8004ec0:	08004f3f 	.word	0x08004f3f
 8004ec4:	08004f3f 	.word	0x08004f3f
 8004ec8:	08004efb 	.word	0x08004efb
 8004ecc:	08004f25 	.word	0x08004f25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d107      	bne.n	8004eec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004edc:	f107 030a 	add.w	r3, r7, #10
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 fd53 	bl	8006990 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004eea:	e032      	b.n	8004f52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004eec:	6839      	ldr	r1, [r7, #0]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f001 fcd1 	bl	8006896 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	75fb      	strb	r3, [r7, #23]
          break;
 8004ef8:	e02b      	b.n	8004f52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d107      	bne.n	8004f16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f06:	f107 030d 	add.w	r3, r7, #13
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 fd3e 	bl	8006990 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f14:	e01d      	b.n	8004f52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f001 fcbc 	bl	8006896 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	75fb      	strb	r3, [r7, #23]
          break;
 8004f22:	e016      	b.n	8004f52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d00f      	beq.n	8004f50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 fcaf 	bl	8006896 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f3c:	e008      	b.n	8004f50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 fca8 	bl	8006896 <USBD_CtlError>
          ret = USBD_FAIL;
 8004f46:	2303      	movs	r3, #3
 8004f48:	75fb      	strb	r3, [r7, #23]
          break;
 8004f4a:	e002      	b.n	8004f52 <USBD_CDC_Setup+0x19e>
          break;
 8004f4c:	bf00      	nop
 8004f4e:	e008      	b.n	8004f62 <USBD_CDC_Setup+0x1ae>
          break;
 8004f50:	bf00      	nop
      }
      break;
 8004f52:	e006      	b.n	8004f62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 fc9d 	bl	8006896 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f60:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004f7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	32b0      	adds	r2, #176	@ 0xb0
 8004f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e065      	b.n	8005062 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	32b0      	adds	r2, #176	@ 0xb0
 8004fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3314      	adds	r3, #20
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02f      	beq.n	8005020 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	f003 020f 	and.w	r2, r3, #15
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	f003 010f 	and.w	r1, r3, #15
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4403      	add	r3, r0
 8004fe8:	331c      	adds	r3, #28
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d112      	bne.n	8005020 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	f003 020f 	and.w	r2, r3, #15
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	3314      	adds	r3, #20
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005012:	78f9      	ldrb	r1, [r7, #3]
 8005014:	2300      	movs	r3, #0
 8005016:	2200      	movs	r2, #0
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f002 f9b8 	bl	800738e <USBD_LL_Transmit>
 800501e:	e01f      	b.n	8005060 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	33b0      	adds	r3, #176	@ 0xb0
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	33b0      	adds	r3, #176	@ 0xb0
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	32b0      	adds	r2, #176	@ 0xb0
 8005080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005084:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	32b0      	adds	r2, #176	@ 0xb0
 8005090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005098:	2303      	movs	r3, #3
 800509a:	e01a      	b.n	80050d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f002 f9b6 	bl	8007412 <USBD_LL_GetRxDataSize>
 80050a6:	4602      	mov	r2, r0
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	33b0      	adds	r3, #176	@ 0xb0
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80050cc:	4611      	mov	r1, r2
 80050ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	32b0      	adds	r2, #176	@ 0xb0
 80050ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e024      	b.n	8005146 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	33b0      	adds	r3, #176	@ 0xb0
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d019      	beq.n	8005144 <USBD_CDC_EP0_RxReady+0x6a>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005116:	2bff      	cmp	r3, #255	@ 0xff
 8005118:	d014      	beq.n	8005144 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	33b0      	adds	r3, #176	@ 0xb0
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005132:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800513a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	22ff      	movs	r2, #255	@ 0xff
 8005140:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005158:	2182      	movs	r1, #130	@ 0x82
 800515a:	4818      	ldr	r0, [pc, #96]	@ (80051bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800515c:	f000 fd62 	bl	8005c24 <USBD_GetEpDesc>
 8005160:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005162:	2101      	movs	r1, #1
 8005164:	4815      	ldr	r0, [pc, #84]	@ (80051bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005166:	f000 fd5d 	bl	8005c24 <USBD_GetEpDesc>
 800516a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800516c:	2181      	movs	r1, #129	@ 0x81
 800516e:	4813      	ldr	r0, [pc, #76]	@ (80051bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005170:	f000 fd58 	bl	8005c24 <USBD_GetEpDesc>
 8005174:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2210      	movs	r2, #16
 8005180:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2200      	movs	r2, #0
 800518c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005190:	711a      	strb	r2, [r3, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d006      	beq.n	80051aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051a4:	711a      	strb	r2, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2243      	movs	r2, #67	@ 0x43
 80051ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051b0:	4b02      	ldr	r3, [pc, #8]	@ (80051bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000050 	.word	0x20000050

080051c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051c8:	2182      	movs	r1, #130	@ 0x82
 80051ca:	4818      	ldr	r0, [pc, #96]	@ (800522c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051cc:	f000 fd2a 	bl	8005c24 <USBD_GetEpDesc>
 80051d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051d2:	2101      	movs	r1, #1
 80051d4:	4815      	ldr	r0, [pc, #84]	@ (800522c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051d6:	f000 fd25 	bl	8005c24 <USBD_GetEpDesc>
 80051da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051dc:	2181      	movs	r1, #129	@ 0x81
 80051de:	4813      	ldr	r0, [pc, #76]	@ (800522c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051e0:	f000 fd20 	bl	8005c24 <USBD_GetEpDesc>
 80051e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2210      	movs	r2, #16
 80051f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d006      	beq.n	8005206 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2200      	movs	r2, #0
 80051fc:	711a      	strb	r2, [r3, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f042 0202 	orr.w	r2, r2, #2
 8005204:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	711a      	strb	r2, [r3, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f042 0202 	orr.w	r2, r2, #2
 8005218:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2243      	movs	r2, #67	@ 0x43
 800521e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005220:	4b02      	ldr	r3, [pc, #8]	@ (800522c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000050 	.word	0x20000050

08005230 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005238:	2182      	movs	r1, #130	@ 0x82
 800523a:	4818      	ldr	r0, [pc, #96]	@ (800529c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800523c:	f000 fcf2 	bl	8005c24 <USBD_GetEpDesc>
 8005240:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005242:	2101      	movs	r1, #1
 8005244:	4815      	ldr	r0, [pc, #84]	@ (800529c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005246:	f000 fced 	bl	8005c24 <USBD_GetEpDesc>
 800524a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800524c:	2181      	movs	r1, #129	@ 0x81
 800524e:	4813      	ldr	r0, [pc, #76]	@ (800529c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005250:	f000 fce8 	bl	8005c24 <USBD_GetEpDesc>
 8005254:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2210      	movs	r2, #16
 8005260:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d006      	beq.n	8005276 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2200      	movs	r2, #0
 800526c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005270:	711a      	strb	r2, [r3, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d006      	beq.n	800528a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005284:	711a      	strb	r2, [r3, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2243      	movs	r2, #67	@ 0x43
 800528e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005290:	4b02      	ldr	r3, [pc, #8]	@ (800529c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000050 	.word	0x20000050

080052a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	220a      	movs	r2, #10
 80052ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80052ae:	4b03      	ldr	r3, [pc, #12]	@ (80052bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	2000000c 	.word	0x2000000c

080052c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e009      	b.n	80052e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	33b0      	adds	r3, #176	@ 0xb0
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	32b0      	adds	r2, #176	@ 0xb0
 800530a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800530e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005316:	2303      	movs	r3, #3
 8005318:	e008      	b.n	800532c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	32b0      	adds	r2, #176	@ 0xb0
 800534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005350:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005358:	2303      	movs	r3, #3
 800535a:	e004      	b.n	8005366 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
	...

08005374 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	32b0      	adds	r2, #176	@ 0xb0
 8005386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800538c:	2301      	movs	r3, #1
 800538e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005396:	2303      	movs	r3, #3
 8005398:	e025      	b.n	80053e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d11f      	bne.n	80053e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80053ac:	4b10      	ldr	r3, [pc, #64]	@ (80053f0 <USBD_CDC_TransmitPacket+0x7c>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	f003 020f 	and.w	r2, r3, #15
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4403      	add	r3, r0
 80053c6:	3314      	adds	r3, #20
 80053c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80053ca:	4b09      	ldr	r3, [pc, #36]	@ (80053f0 <USBD_CDC_TransmitPacket+0x7c>)
 80053cc:	7819      	ldrb	r1, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f001 ffd7 	bl	800738e <USBD_LL_Transmit>

    ret = USBD_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000093 	.word	0x20000093

080053f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	32b0      	adds	r2, #176	@ 0xb0
 8005406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	32b0      	adds	r2, #176	@ 0xb0
 8005416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800541e:	2303      	movs	r3, #3
 8005420:	e018      	b.n	8005454 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7c1b      	ldrb	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800542a:	4b0c      	ldr	r3, [pc, #48]	@ (800545c <USBD_CDC_ReceivePacket+0x68>)
 800542c:	7819      	ldrb	r1, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 ffc9 	bl	80073d0 <USBD_LL_PrepareReceive>
 800543e:	e008      	b.n	8005452 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005440:	4b06      	ldr	r3, [pc, #24]	@ (800545c <USBD_CDC_ReceivePacket+0x68>)
 8005442:	7819      	ldrb	r1, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800544a:	2340      	movs	r3, #64	@ 0x40
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f001 ffbf 	bl	80073d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20000094 	.word	0x20000094

08005460 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005474:	2303      	movs	r3, #3
 8005476:	e01f      	b.n	80054b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	79fa      	ldrb	r2, [r7, #7]
 80054aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f001 fe39 	bl	8007124 <USBD_LL_Init>
 80054b2:	4603      	mov	r3, r0
 80054b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e025      	b.n	8005524 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	32ae      	adds	r2, #174	@ 0xae
 80054ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00f      	beq.n	8005514 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	32ae      	adds	r2, #174	@ 0xae
 80054fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	f107 020e 	add.w	r2, r7, #14
 8005508:	4610      	mov	r0, r2
 800550a:	4798      	blx	r3
 800550c:	4602      	mov	r2, r0
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fe41 	bl	80071bc <USBD_LL_Start>
 800553a:	4603      	mov	r3, r0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800554c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	78fa      	ldrb	r2, [r7, #3]
 800557e:	4611      	mov	r1, r2
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	4611      	mov	r1, r2
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80055b8:	2303      	movs	r3, #3
 80055ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 f922 	bl	8006822 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80055ec:	461a      	mov	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d01a      	beq.n	8005638 <USBD_LL_SetupStage+0x72>
 8005602:	2b02      	cmp	r3, #2
 8005604:	d822      	bhi.n	800564c <USBD_LL_SetupStage+0x86>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <USBD_LL_SetupStage+0x4a>
 800560a:	2b01      	cmp	r3, #1
 800560c:	d00a      	beq.n	8005624 <USBD_LL_SetupStage+0x5e>
 800560e:	e01d      	b.n	800564c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fb77 	bl	8005d0c <USBD_StdDevReq>
 800561e:	4603      	mov	r3, r0
 8005620:	73fb      	strb	r3, [r7, #15]
      break;
 8005622:	e020      	b.n	8005666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fbdf 	bl	8005df0 <USBD_StdItfReq>
 8005632:	4603      	mov	r3, r0
 8005634:	73fb      	strb	r3, [r7, #15]
      break;
 8005636:	e016      	b.n	8005666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fc41 	bl	8005ec8 <USBD_StdEPReq>
 8005646:	4603      	mov	r3, r0
 8005648:	73fb      	strb	r3, [r7, #15]
      break;
 800564a:	e00c      	b.n	8005666 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005652:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005656:	b2db      	uxtb	r3, r3
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f001 fe0e 	bl	800727c <USBD_LL_StallEP>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
      break;
 8005664:	bf00      	nop
  }

  return ret;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	460b      	mov	r3, r1
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d177      	bne.n	8005778 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800568e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005696:	2b03      	cmp	r3, #3
 8005698:	f040 80a1 	bne.w	80057de <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	8992      	ldrh	r2, [r2, #12]
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d91c      	bls.n	80056e2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	8992      	ldrh	r2, [r2, #12]
 80056b0:	1a9a      	subs	r2, r3, r2
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	8992      	ldrh	r2, [r2, #12]
 80056be:	441a      	add	r2, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6919      	ldr	r1, [r3, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	899b      	ldrh	r3, [r3, #12]
 80056cc:	461a      	mov	r2, r3
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	4293      	cmp	r3, r2
 80056d4:	bf38      	it	cc
 80056d6:	4613      	movcc	r3, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f001 f9a8 	bl	8006a30 <USBD_CtlContinueRx>
 80056e0:	e07d      	b.n	80057de <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d014      	beq.n	800571a <USBD_LL_DataOutStage+0xaa>
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d81d      	bhi.n	8005730 <USBD_LL_DataOutStage+0xc0>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <USBD_LL_DataOutStage+0x8e>
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d003      	beq.n	8005704 <USBD_LL_DataOutStage+0x94>
 80056fc:	e018      	b.n	8005730 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	75bb      	strb	r3, [r7, #22]
            break;
 8005702:	e018      	b.n	8005736 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4619      	mov	r1, r3
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fa6e 	bl	8005bf0 <USBD_CoreFindIF>
 8005714:	4603      	mov	r3, r0
 8005716:	75bb      	strb	r3, [r7, #22]
            break;
 8005718:	e00d      	b.n	8005736 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4619      	mov	r1, r3
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fa70 	bl	8005c0a <USBD_CoreFindEP>
 800572a:	4603      	mov	r3, r0
 800572c:	75bb      	strb	r3, [r7, #22]
            break;
 800572e:	e002      	b.n	8005736 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	75bb      	strb	r3, [r7, #22]
            break;
 8005734:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005736:	7dbb      	ldrb	r3, [r7, #22]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d119      	bne.n	8005770 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b03      	cmp	r3, #3
 8005746:	d113      	bne.n	8005770 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005748:	7dba      	ldrb	r2, [r7, #22]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	32ae      	adds	r2, #174	@ 0xae
 800574e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00b      	beq.n	8005770 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005758:	7dba      	ldrb	r2, [r7, #22]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005760:	7dba      	ldrb	r2, [r7, #22]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	32ae      	adds	r2, #174	@ 0xae
 8005766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f001 f96e 	bl	8006a52 <USBD_CtlSendStatus>
 8005776:	e032      	b.n	80057de <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005778:	7afb      	ldrb	r3, [r7, #11]
 800577a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800577e:	b2db      	uxtb	r3, r3
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fa41 	bl	8005c0a <USBD_CoreFindEP>
 8005788:	4603      	mov	r3, r0
 800578a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800578c:	7dbb      	ldrb	r3, [r7, #22]
 800578e:	2bff      	cmp	r3, #255	@ 0xff
 8005790:	d025      	beq.n	80057de <USBD_LL_DataOutStage+0x16e>
 8005792:	7dbb      	ldrb	r3, [r7, #22]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d122      	bne.n	80057de <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d117      	bne.n	80057d4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80057a4:	7dba      	ldrb	r2, [r7, #22]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	32ae      	adds	r2, #174	@ 0xae
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00f      	beq.n	80057d4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80057b4:	7dba      	ldrb	r2, [r7, #22]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80057bc:	7dba      	ldrb	r2, [r7, #22]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	32ae      	adds	r2, #174	@ 0xae
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	7afa      	ldrb	r2, [r7, #11]
 80057ca:	4611      	mov	r1, r2
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	4798      	blx	r3
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	e000      	b.n	80057e0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	460b      	mov	r3, r1
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80057f6:	7afb      	ldrb	r3, [r7, #11]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d178      	bne.n	80058ee <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3314      	adds	r3, #20
 8005800:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005808:	2b02      	cmp	r3, #2
 800580a:	d163      	bne.n	80058d4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	8992      	ldrh	r2, [r2, #12]
 8005814:	4293      	cmp	r3, r2
 8005816:	d91c      	bls.n	8005852 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	8992      	ldrh	r2, [r2, #12]
 8005820:	1a9a      	subs	r2, r3, r2
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	8992      	ldrh	r2, [r2, #12]
 800582e:	441a      	add	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6919      	ldr	r1, [r3, #16]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	461a      	mov	r2, r3
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f001 f8c4 	bl	80069cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005844:	2300      	movs	r3, #0
 8005846:	2200      	movs	r2, #0
 8005848:	2100      	movs	r1, #0
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f001 fdc0 	bl	80073d0 <USBD_LL_PrepareReceive>
 8005850:	e040      	b.n	80058d4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	899b      	ldrh	r3, [r3, #12]
 8005856:	461a      	mov	r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d11c      	bne.n	800589a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005868:	4293      	cmp	r3, r2
 800586a:	d316      	bcc.n	800589a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005876:	429a      	cmp	r2, r3
 8005878:	d20f      	bcs.n	800589a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800587a:	2200      	movs	r2, #0
 800587c:	2100      	movs	r1, #0
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f001 f8a4 	bl	80069cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800588c:	2300      	movs	r3, #0
 800588e:	2200      	movs	r2, #0
 8005890:	2100      	movs	r1, #0
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f001 fd9c 	bl	80073d0 <USBD_LL_PrepareReceive>
 8005898:	e01c      	b.n	80058d4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d10f      	bne.n	80058c6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058c6:	2180      	movs	r1, #128	@ 0x80
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f001 fcd7 	bl	800727c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f001 f8d2 	bl	8006a78 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d03a      	beq.n	8005954 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff fe30 	bl	8005544 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80058ec:	e032      	b.n	8005954 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	4619      	mov	r1, r3
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f986 	bl	8005c0a <USBD_CoreFindEP>
 80058fe:	4603      	mov	r3, r0
 8005900:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	2bff      	cmp	r3, #255	@ 0xff
 8005906:	d025      	beq.n	8005954 <USBD_LL_DataInStage+0x16c>
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d122      	bne.n	8005954 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b03      	cmp	r3, #3
 8005918:	d11c      	bne.n	8005954 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800591a:	7dfa      	ldrb	r2, [r7, #23]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	32ae      	adds	r2, #174	@ 0xae
 8005920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d014      	beq.n	8005954 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800592a:	7dfa      	ldrb	r2, [r7, #23]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005932:	7dfa      	ldrb	r2, [r7, #23]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	32ae      	adds	r2, #174	@ 0xae
 8005938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	7afa      	ldrb	r2, [r7, #11]
 8005940:	4611      	mov	r1, r2
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	4798      	blx	r3
 8005946:	4603      	mov	r3, r0
 8005948:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800594a:	7dbb      	ldrb	r3, [r7, #22]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005950:	7dbb      	ldrb	r3, [r7, #22]
 8005952:	e000      	b.n	8005956 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d014      	beq.n	80059c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00e      	beq.n	80059c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6852      	ldr	r2, [r2, #4]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	4611      	mov	r1, r2
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	4798      	blx	r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80059c0:	2303      	movs	r3, #3
 80059c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059c4:	2340      	movs	r3, #64	@ 0x40
 80059c6:	2200      	movs	r2, #0
 80059c8:	2100      	movs	r1, #0
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 fc11 	bl	80071f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2240      	movs	r2, #64	@ 0x40
 80059dc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059e0:	2340      	movs	r3, #64	@ 0x40
 80059e2:	2200      	movs	r2, #0
 80059e4:	2180      	movs	r1, #128	@ 0x80
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 fc03 	bl	80071f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2240      	movs	r2, #64	@ 0x40
 80059f8:	841a      	strh	r2, [r3, #32]

  return ret;
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d006      	beq.n	8005a46 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d106      	bne.n	8005a7e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d110      	bne.n	8005ac2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00b      	beq.n	8005ac2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	32ae      	adds	r2, #174	@ 0xae
 8005ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e01c      	b.n	8005b28 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d115      	bne.n	8005b26 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	32ae      	adds	r2, #174	@ 0xae
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	32ae      	adds	r2, #174	@ 0xae
 8005b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	4611      	mov	r1, r2
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	32ae      	adds	r2, #174	@ 0xae
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e01c      	b.n	8005b8c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d115      	bne.n	8005b8a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	32ae      	adds	r2, #174	@ 0xae
 8005b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	32ae      	adds	r2, #174	@ 0xae
 8005b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	4611      	mov	r1, r2
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6852      	ldr	r2, [r2, #4]
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005be2:	2303      	movs	r3, #3
 8005be4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	885b      	ldrh	r3, [r3, #2]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	7812      	ldrb	r2, [r2, #0]
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d91f      	bls.n	8005c8a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c50:	e013      	b.n	8005c7a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c52:	f107 030a 	add.w	r3, r7, #10
 8005c56:	4619      	mov	r1, r3
 8005c58:	6978      	ldr	r0, [r7, #20]
 8005c5a:	f000 f81b 	bl	8005c94 <USBD_GetNextDesc>
 8005c5e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b05      	cmp	r3, #5
 8005c66:	d108      	bne.n	8005c7a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	789b      	ldrb	r3, [r3, #2]
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d008      	beq.n	8005c88 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	885b      	ldrh	r3, [r3, #2]
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	897b      	ldrh	r3, [r7, #10]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d8e5      	bhi.n	8005c52 <USBD_GetEpDesc+0x2e>
 8005c86:	e000      	b.n	8005c8a <USBD_GetEpDesc+0x66>
          break;
 8005c88:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c8a:	693b      	ldr	r3, [r7, #16]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	4413      	add	r3, r2
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005cea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	b21a      	sxth	r2, r3
 8005cf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	b21b      	sxth	r3, r3
 8005cfa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005cfc:	89fb      	ldrh	r3, [r7, #14]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d22:	2b40      	cmp	r3, #64	@ 0x40
 8005d24:	d005      	beq.n	8005d32 <USBD_StdDevReq+0x26>
 8005d26:	2b40      	cmp	r3, #64	@ 0x40
 8005d28:	d857      	bhi.n	8005dda <USBD_StdDevReq+0xce>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00f      	beq.n	8005d4e <USBD_StdDevReq+0x42>
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d153      	bne.n	8005dda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	32ae      	adds	r2, #174	@ 0xae
 8005d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	4798      	blx	r3
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e04a      	b.n	8005de4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d83b      	bhi.n	8005dce <USBD_StdDevReq+0xc2>
 8005d56:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <USBD_StdDevReq+0x50>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005db1 	.word	0x08005db1
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08005dcf 	.word	0x08005dcf
 8005d68:	08005dbb 	.word	0x08005dbb
 8005d6c:	08005dcf 	.word	0x08005dcf
 8005d70:	08005d8f 	.word	0x08005d8f
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005dcf 	.word	0x08005dcf
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	08005d99 	.word	0x08005d99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa3e 	bl	8006208 <USBD_GetDescriptor>
          break;
 8005d8c:	e024      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fba3 	bl	80064dc <USBD_SetAddress>
          break;
 8005d96:	e01f      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fbe2 	bl	8006564 <USBD_SetConfig>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
          break;
 8005da4:	e018      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fc85 	bl	80066b8 <USBD_GetConfig>
          break;
 8005dae:	e013      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fcb6 	bl	8006724 <USBD_GetStatus>
          break;
 8005db8:	e00e      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fce5 	bl	800678c <USBD_SetFeature>
          break;
 8005dc2:	e009      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fd09 	bl	80067de <USBD_ClrFeature>
          break;
 8005dcc:	e004      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fd60 	bl	8006896 <USBD_CtlError>
          break;
 8005dd6:	bf00      	nop
      }
      break;
 8005dd8:	e004      	b.n	8005de4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fd5a 	bl	8006896 <USBD_CtlError>
      break;
 8005de2:	bf00      	nop
  }

  return ret;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop

08005df0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	d005      	beq.n	8005e16 <USBD_StdItfReq+0x26>
 8005e0a:	2b40      	cmp	r3, #64	@ 0x40
 8005e0c:	d852      	bhi.n	8005eb4 <USBD_StdItfReq+0xc4>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <USBD_StdItfReq+0x26>
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d14e      	bne.n	8005eb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d840      	bhi.n	8005ea6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	889b      	ldrh	r3, [r3, #4]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d836      	bhi.n	8005e9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	889b      	ldrh	r3, [r3, #4]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff feda 	bl	8005bf0 <USBD_CoreFindIF>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2bff      	cmp	r3, #255	@ 0xff
 8005e44:	d01d      	beq.n	8005e82 <USBD_StdItfReq+0x92>
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d11a      	bne.n	8005e82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e4c:	7bba      	ldrb	r2, [r7, #14]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	32ae      	adds	r2, #174	@ 0xae
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00f      	beq.n	8005e7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005e5c:	7bba      	ldrb	r2, [r7, #14]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e64:	7bba      	ldrb	r2, [r7, #14]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	32ae      	adds	r2, #174	@ 0xae
 8005e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e7a:	e004      	b.n	8005e86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e80:	e001      	b.n	8005e86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e82:	2303      	movs	r3, #3
 8005e84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	88db      	ldrh	r3, [r3, #6]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d110      	bne.n	8005eb0 <USBD_StdItfReq+0xc0>
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10d      	bne.n	8005eb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fddc 	bl	8006a52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e9a:	e009      	b.n	8005eb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fcf9 	bl	8006896 <USBD_CtlError>
          break;
 8005ea4:	e004      	b.n	8005eb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fcf4 	bl	8006896 <USBD_CtlError>
          break;
 8005eae:	e000      	b.n	8005eb2 <USBD_StdItfReq+0xc2>
          break;
 8005eb0:	bf00      	nop
      }
      break;
 8005eb2:	e004      	b.n	8005ebe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fced 	bl	8006896 <USBD_CtlError>
      break;
 8005ebc:	bf00      	nop
  }

  return ret;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	889b      	ldrh	r3, [r3, #4]
 8005eda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	d007      	beq.n	8005ef8 <USBD_StdEPReq+0x30>
 8005ee8:	2b40      	cmp	r3, #64	@ 0x40
 8005eea:	f200 8181 	bhi.w	80061f0 <USBD_StdEPReq+0x328>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d02a      	beq.n	8005f48 <USBD_StdEPReq+0x80>
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	f040 817c 	bne.w	80061f0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff fe84 	bl	8005c0a <USBD_CoreFindEP>
 8005f02:	4603      	mov	r3, r0
 8005f04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f06:	7b7b      	ldrb	r3, [r7, #13]
 8005f08:	2bff      	cmp	r3, #255	@ 0xff
 8005f0a:	f000 8176 	beq.w	80061fa <USBD_StdEPReq+0x332>
 8005f0e:	7b7b      	ldrb	r3, [r7, #13]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f040 8172 	bne.w	80061fa <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005f16:	7b7a      	ldrb	r2, [r7, #13]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f1e:	7b7a      	ldrb	r2, [r7, #13]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	32ae      	adds	r2, #174	@ 0xae
 8005f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8165 	beq.w	80061fa <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f30:	7b7a      	ldrb	r2, [r7, #13]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	32ae      	adds	r2, #174	@ 0xae
 8005f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f46:	e158      	b.n	80061fa <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d008      	beq.n	8005f62 <USBD_StdEPReq+0x9a>
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	f300 8147 	bgt.w	80061e4 <USBD_StdEPReq+0x31c>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 809b 	beq.w	8006092 <USBD_StdEPReq+0x1ca>
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d03c      	beq.n	8005fda <USBD_StdEPReq+0x112>
 8005f60:	e140      	b.n	80061e4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d002      	beq.n	8005f74 <USBD_StdEPReq+0xac>
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d016      	beq.n	8005fa0 <USBD_StdEPReq+0xd8>
 8005f72:	e02c      	b.n	8005fce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <USBD_StdEPReq+0xce>
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b80      	cmp	r3, #128	@ 0x80
 8005f7e:	d00a      	beq.n	8005f96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 f979 	bl	800727c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f8a:	2180      	movs	r1, #128	@ 0x80
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 f975 	bl	800727c <USBD_LL_StallEP>
 8005f92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f94:	e020      	b.n	8005fd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fc7c 	bl	8006896 <USBD_CtlError>
              break;
 8005f9e:	e01b      	b.n	8005fd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	885b      	ldrh	r3, [r3, #2]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10e      	bne.n	8005fc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005fa8:	7bbb      	ldrb	r3, [r7, #14]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00b      	beq.n	8005fc6 <USBD_StdEPReq+0xfe>
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	2b80      	cmp	r3, #128	@ 0x80
 8005fb2:	d008      	beq.n	8005fc6 <USBD_StdEPReq+0xfe>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	88db      	ldrh	r3, [r3, #6]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 f95b 	bl	800727c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fd43 	bl	8006a52 <USBD_CtlSendStatus>

              break;
 8005fcc:	e004      	b.n	8005fd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fc60 	bl	8006896 <USBD_CtlError>
              break;
 8005fd6:	bf00      	nop
          }
          break;
 8005fd8:	e109      	b.n	80061ee <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d002      	beq.n	8005fec <USBD_StdEPReq+0x124>
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d016      	beq.n	8006018 <USBD_StdEPReq+0x150>
 8005fea:	e04b      	b.n	8006084 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00d      	beq.n	800600e <USBD_StdEPReq+0x146>
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	2b80      	cmp	r3, #128	@ 0x80
 8005ff6:	d00a      	beq.n	800600e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 f93d 	bl	800727c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006002:	2180      	movs	r1, #128	@ 0x80
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f939 	bl	800727c <USBD_LL_StallEP>
 800600a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800600c:	e040      	b.n	8006090 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fc40 	bl	8006896 <USBD_CtlError>
              break;
 8006016:	e03b      	b.n	8006090 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	885b      	ldrh	r3, [r3, #2]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d136      	bne.n	800608e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006020:	7bbb      	ldrb	r3, [r7, #14]
 8006022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f943 	bl	80072ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fd0c 	bl	8006a52 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff fde3 	bl	8005c0a <USBD_CoreFindEP>
 8006044:	4603      	mov	r3, r0
 8006046:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006048:	7b7b      	ldrb	r3, [r7, #13]
 800604a:	2bff      	cmp	r3, #255	@ 0xff
 800604c:	d01f      	beq.n	800608e <USBD_StdEPReq+0x1c6>
 800604e:	7b7b      	ldrb	r3, [r7, #13]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11c      	bne.n	800608e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006054:	7b7a      	ldrb	r2, [r7, #13]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800605c:	7b7a      	ldrb	r2, [r7, #13]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	32ae      	adds	r2, #174	@ 0xae
 8006062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d010      	beq.n	800608e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800606c:	7b7a      	ldrb	r2, [r7, #13]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	32ae      	adds	r2, #174	@ 0xae
 8006072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006082:	e004      	b.n	800608e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fc05 	bl	8006896 <USBD_CtlError>
              break;
 800608c:	e000      	b.n	8006090 <USBD_StdEPReq+0x1c8>
              break;
 800608e:	bf00      	nop
          }
          break;
 8006090:	e0ad      	b.n	80061ee <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d002      	beq.n	80060a4 <USBD_StdEPReq+0x1dc>
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d033      	beq.n	800610a <USBD_StdEPReq+0x242>
 80060a2:	e099      	b.n	80061d8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <USBD_StdEPReq+0x1f2>
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	2b80      	cmp	r3, #128	@ 0x80
 80060ae:	d004      	beq.n	80060ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fbef 	bl	8006896 <USBD_CtlError>
                break;
 80060b8:	e093      	b.n	80061e2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da0b      	bge.n	80060da <USBD_StdEPReq+0x212>
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	3310      	adds	r3, #16
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4413      	add	r3, r2
 80060d6:	3304      	adds	r3, #4
 80060d8:	e00b      	b.n	80060f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	4413      	add	r3, r2
 80060f0:	3304      	adds	r3, #4
 80060f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2200      	movs	r2, #0
 80060f8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	330e      	adds	r3, #14
 80060fe:	2202      	movs	r2, #2
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fc44 	bl	8006990 <USBD_CtlSendData>
              break;
 8006108:	e06b      	b.n	80061e2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800610a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800610e:	2b00      	cmp	r3, #0
 8006110:	da11      	bge.n	8006136 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	3323      	adds	r3, #35	@ 0x23
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d117      	bne.n	800615c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fbb1 	bl	8006896 <USBD_CtlError>
                  break;
 8006134:	e055      	b.n	80061e2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006136:	7bbb      	ldrb	r3, [r7, #14]
 8006138:	f003 020f 	and.w	r2, r3, #15
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d104      	bne.n	800615c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fb9e 	bl	8006896 <USBD_CtlError>
                  break;
 800615a:	e042      	b.n	80061e2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800615c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006160:	2b00      	cmp	r3, #0
 8006162:	da0b      	bge.n	800617c <USBD_StdEPReq+0x2b4>
 8006164:	7bbb      	ldrb	r3, [r7, #14]
 8006166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	3310      	adds	r3, #16
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	3304      	adds	r3, #4
 800617a:	e00b      	b.n	8006194 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4413      	add	r3, r2
 8006192:	3304      	adds	r3, #4
 8006194:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <USBD_StdEPReq+0x2da>
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	2b80      	cmp	r3, #128	@ 0x80
 80061a0:	d103      	bne.n	80061aa <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	739a      	strb	r2, [r3, #14]
 80061a8:	e00e      	b.n	80061c8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 f8a2 	bl	80072f8 <USBD_LL_IsStallEP>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2201      	movs	r2, #1
 80061be:	739a      	strb	r2, [r3, #14]
 80061c0:	e002      	b.n	80061c8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	330e      	adds	r3, #14
 80061cc:	2202      	movs	r2, #2
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fbdd 	bl	8006990 <USBD_CtlSendData>
              break;
 80061d6:	e004      	b.n	80061e2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fb5b 	bl	8006896 <USBD_CtlError>
              break;
 80061e0:	bf00      	nop
          }
          break;
 80061e2:	e004      	b.n	80061ee <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fb55 	bl	8006896 <USBD_CtlError>
          break;
 80061ec:	bf00      	nop
      }
      break;
 80061ee:	e005      	b.n	80061fc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fb4f 	bl	8006896 <USBD_CtlError>
      break;
 80061f8:	e000      	b.n	80061fc <USBD_StdEPReq+0x334>
      break;
 80061fa:	bf00      	nop
  }

  return ret;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	885b      	ldrh	r3, [r3, #2]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	2b06      	cmp	r3, #6
 800622a:	f200 8128 	bhi.w	800647e <USBD_GetDescriptor+0x276>
 800622e:	a201      	add	r2, pc, #4	@ (adr r2, 8006234 <USBD_GetDescriptor+0x2c>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006251 	.word	0x08006251
 8006238:	08006269 	.word	0x08006269
 800623c:	080062a9 	.word	0x080062a9
 8006240:	0800647f 	.word	0x0800647f
 8006244:	0800647f 	.word	0x0800647f
 8006248:	0800641f 	.word	0x0800641f
 800624c:	0800644b 	.word	0x0800644b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	7c12      	ldrb	r2, [r2, #16]
 800625c:	f107 0108 	add.w	r1, r7, #8
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
 8006264:	60f8      	str	r0, [r7, #12]
      break;
 8006266:	e112      	b.n	800648e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7c1b      	ldrb	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10d      	bne.n	800628c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006278:	f107 0208 	add.w	r2, r7, #8
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	2202      	movs	r2, #2
 8006288:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800628a:	e100      	b.n	800648e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006294:	f107 0208 	add.w	r2, r7, #8
 8006298:	4610      	mov	r0, r2
 800629a:	4798      	blx	r3
 800629c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3301      	adds	r3, #1
 80062a2:	2202      	movs	r2, #2
 80062a4:	701a      	strb	r2, [r3, #0]
      break;
 80062a6:	e0f2      	b.n	800648e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	885b      	ldrh	r3, [r3, #2]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	f200 80ac 	bhi.w	800640c <USBD_GetDescriptor+0x204>
 80062b4:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <USBD_GetDescriptor+0xb4>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062d5 	.word	0x080062d5
 80062c0:	08006309 	.word	0x08006309
 80062c4:	0800633d 	.word	0x0800633d
 80062c8:	08006371 	.word	0x08006371
 80062cc:	080063a5 	.word	0x080063a5
 80062d0:	080063d9 	.word	0x080063d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	7c12      	ldrb	r2, [r2, #16]
 80062ec:	f107 0108 	add.w	r1, r7, #8
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062f6:	e091      	b.n	800641c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 facb 	bl	8006896 <USBD_CtlError>
            err++;
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	3301      	adds	r3, #1
 8006304:	72fb      	strb	r3, [r7, #11]
          break;
 8006306:	e089      	b.n	800641c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	7c12      	ldrb	r2, [r2, #16]
 8006320:	f107 0108 	add.w	r1, r7, #8
 8006324:	4610      	mov	r0, r2
 8006326:	4798      	blx	r3
 8006328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800632a:	e077      	b.n	800641c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fab1 	bl	8006896 <USBD_CtlError>
            err++;
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	3301      	adds	r3, #1
 8006338:	72fb      	strb	r3, [r7, #11]
          break;
 800633a:	e06f      	b.n	800641c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	7c12      	ldrb	r2, [r2, #16]
 8006354:	f107 0108 	add.w	r1, r7, #8
 8006358:	4610      	mov	r0, r2
 800635a:	4798      	blx	r3
 800635c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800635e:	e05d      	b.n	800641c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa97 	bl	8006896 <USBD_CtlError>
            err++;
 8006368:	7afb      	ldrb	r3, [r7, #11]
 800636a:	3301      	adds	r3, #1
 800636c:	72fb      	strb	r3, [r7, #11]
          break;
 800636e:	e055      	b.n	800641c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	7c12      	ldrb	r2, [r2, #16]
 8006388:	f107 0108 	add.w	r1, r7, #8
 800638c:	4610      	mov	r0, r2
 800638e:	4798      	blx	r3
 8006390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006392:	e043      	b.n	800641c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa7d 	bl	8006896 <USBD_CtlError>
            err++;
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	3301      	adds	r3, #1
 80063a0:	72fb      	strb	r3, [r7, #11]
          break;
 80063a2:	e03b      	b.n	800641c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	7c12      	ldrb	r2, [r2, #16]
 80063bc:	f107 0108 	add.w	r1, r7, #8
 80063c0:	4610      	mov	r0, r2
 80063c2:	4798      	blx	r3
 80063c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063c6:	e029      	b.n	800641c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa63 	bl	8006896 <USBD_CtlError>
            err++;
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	3301      	adds	r3, #1
 80063d4:	72fb      	strb	r3, [r7, #11]
          break;
 80063d6:	e021      	b.n	800641c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	7c12      	ldrb	r2, [r2, #16]
 80063f0:	f107 0108 	add.w	r1, r7, #8
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063fa:	e00f      	b.n	800641c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa49 	bl	8006896 <USBD_CtlError>
            err++;
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	3301      	adds	r3, #1
 8006408:	72fb      	strb	r3, [r7, #11]
          break;
 800640a:	e007      	b.n	800641c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fa41 	bl	8006896 <USBD_CtlError>
          err++;
 8006414:	7afb      	ldrb	r3, [r7, #11]
 8006416:	3301      	adds	r3, #1
 8006418:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800641a:	bf00      	nop
      }
      break;
 800641c:	e037      	b.n	800648e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	7c1b      	ldrb	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800642c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642e:	f107 0208 	add.w	r2, r7, #8
 8006432:	4610      	mov	r0, r2
 8006434:	4798      	blx	r3
 8006436:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006438:	e029      	b.n	800648e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fa2a 	bl	8006896 <USBD_CtlError>
        err++;
 8006442:	7afb      	ldrb	r3, [r7, #11]
 8006444:	3301      	adds	r3, #1
 8006446:	72fb      	strb	r3, [r7, #11]
      break;
 8006448:	e021      	b.n	800648e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	7c1b      	ldrb	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10d      	bne.n	800646e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645a:	f107 0208 	add.w	r2, r7, #8
 800645e:	4610      	mov	r0, r2
 8006460:	4798      	blx	r3
 8006462:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	2207      	movs	r2, #7
 800646a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800646c:	e00f      	b.n	800648e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fa10 	bl	8006896 <USBD_CtlError>
        err++;
 8006476:	7afb      	ldrb	r3, [r7, #11]
 8006478:	3301      	adds	r3, #1
 800647a:	72fb      	strb	r3, [r7, #11]
      break;
 800647c:	e007      	b.n	800648e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa08 	bl	8006896 <USBD_CtlError>
      err++;
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	3301      	adds	r3, #1
 800648a:	72fb      	strb	r3, [r7, #11]
      break;
 800648c:	bf00      	nop
  }

  if (err != 0U)
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d11e      	bne.n	80064d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	88db      	ldrh	r3, [r3, #6]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d016      	beq.n	80064ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800649c:	893b      	ldrh	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00e      	beq.n	80064c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	88da      	ldrh	r2, [r3, #6]
 80064a6:	893b      	ldrh	r3, [r7, #8]
 80064a8:	4293      	cmp	r3, r2
 80064aa:	bf28      	it	cs
 80064ac:	4613      	movcs	r3, r2
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064b2:	893b      	ldrh	r3, [r7, #8]
 80064b4:	461a      	mov	r2, r3
 80064b6:	68f9      	ldr	r1, [r7, #12]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fa69 	bl	8006990 <USBD_CtlSendData>
 80064be:	e009      	b.n	80064d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f9e7 	bl	8006896 <USBD_CtlError>
 80064c8:	e004      	b.n	80064d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fac1 	bl	8006a52 <USBD_CtlSendStatus>
 80064d0:	e000      	b.n	80064d4 <USBD_GetDescriptor+0x2cc>
    return;
 80064d2:	bf00      	nop
  }
}
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop

080064dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	889b      	ldrh	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d131      	bne.n	8006552 <USBD_SetAddress+0x76>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	88db      	ldrh	r3, [r3, #6]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d12d      	bne.n	8006552 <USBD_SetAddress+0x76>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	885b      	ldrh	r3, [r3, #2]
 80064fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80064fc:	d829      	bhi.n	8006552 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	885b      	ldrh	r3, [r3, #2]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006508:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b03      	cmp	r3, #3
 8006514:	d104      	bne.n	8006520 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f9bc 	bl	8006896 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651e:	e01d      	b.n	800655c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	7bfa      	ldrb	r2, [r7, #15]
 8006524:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 ff0f 	bl	8007350 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa8d 	bl	8006a52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2202      	movs	r2, #2
 8006542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006546:	e009      	b.n	800655c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006550:	e004      	b.n	800655c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f99e 	bl	8006896 <USBD_CtlError>
  }
}
 800655a:	bf00      	nop
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	885b      	ldrh	r3, [r3, #2]
 8006576:	b2da      	uxtb	r2, r3
 8006578:	4b4e      	ldr	r3, [pc, #312]	@ (80066b4 <USBD_SetConfig+0x150>)
 800657a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800657c:	4b4d      	ldr	r3, [pc, #308]	@ (80066b4 <USBD_SetConfig+0x150>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d905      	bls.n	8006590 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f985 	bl	8006896 <USBD_CtlError>
    return USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	e08c      	b.n	80066aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d002      	beq.n	80065a2 <USBD_SetConfig+0x3e>
 800659c:	2b03      	cmp	r3, #3
 800659e:	d029      	beq.n	80065f4 <USBD_SetConfig+0x90>
 80065a0:	e075      	b.n	800668e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80065a2:	4b44      	ldr	r3, [pc, #272]	@ (80066b4 <USBD_SetConfig+0x150>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d020      	beq.n	80065ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80065aa:	4b42      	ldr	r3, [pc, #264]	@ (80066b4 <USBD_SetConfig+0x150>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065b4:	4b3f      	ldr	r3, [pc, #252]	@ (80066b4 <USBD_SetConfig+0x150>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7fe ffcd 	bl	800555a <USBD_SetClassConfig>
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d008      	beq.n	80065dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f962 	bl	8006896 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065da:	e065      	b.n	80066a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fa38 	bl	8006a52 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2203      	movs	r2, #3
 80065e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80065ea:	e05d      	b.n	80066a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fa30 	bl	8006a52 <USBD_CtlSendStatus>
      break;
 80065f2:	e059      	b.n	80066a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80065f4:	4b2f      	ldr	r3, [pc, #188]	@ (80066b4 <USBD_SetConfig+0x150>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d112      	bne.n	8006622 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006604:	4b2b      	ldr	r3, [pc, #172]	@ (80066b4 <USBD_SetConfig+0x150>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800660e:	4b29      	ldr	r3, [pc, #164]	@ (80066b4 <USBD_SetConfig+0x150>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7fe ffbc 	bl	8005592 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa19 	bl	8006a52 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006620:	e042      	b.n	80066a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006622:	4b24      	ldr	r3, [pc, #144]	@ (80066b4 <USBD_SetConfig+0x150>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d02a      	beq.n	8006686 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fe ffaa 	bl	8005592 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800663e:	4b1d      	ldr	r3, [pc, #116]	@ (80066b4 <USBD_SetConfig+0x150>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006648:	4b1a      	ldr	r3, [pc, #104]	@ (80066b4 <USBD_SetConfig+0x150>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fe ff83 	bl	800555a <USBD_SetClassConfig>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00f      	beq.n	800667e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f918 	bl	8006896 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fe ff8f 	bl	8005592 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800667c:	e014      	b.n	80066a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9e7 	bl	8006a52 <USBD_CtlSendStatus>
      break;
 8006684:	e010      	b.n	80066a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f9e3 	bl	8006a52 <USBD_CtlSendStatus>
      break;
 800668c:	e00c      	b.n	80066a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f900 	bl	8006896 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006696:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <USBD_SetConfig+0x150>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7fe ff78 	bl	8005592 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80066a2:	2303      	movs	r3, #3
 80066a4:	73fb      	strb	r3, [r7, #15]
      break;
 80066a6:	bf00      	nop
  }

  return ret;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200001d0 	.word	0x200001d0

080066b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	88db      	ldrh	r3, [r3, #6]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d004      	beq.n	80066d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f8e2 	bl	8006896 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80066d2:	e023      	b.n	800671c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	dc02      	bgt.n	80066e6 <USBD_GetConfig+0x2e>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	dc03      	bgt.n	80066ec <USBD_GetConfig+0x34>
 80066e4:	e015      	b.n	8006712 <USBD_GetConfig+0x5a>
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d00b      	beq.n	8006702 <USBD_GetConfig+0x4a>
 80066ea:	e012      	b.n	8006712 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3308      	adds	r3, #8
 80066f6:	2201      	movs	r2, #1
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f948 	bl	8006990 <USBD_CtlSendData>
        break;
 8006700:	e00c      	b.n	800671c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3304      	adds	r3, #4
 8006706:	2201      	movs	r2, #1
 8006708:	4619      	mov	r1, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f940 	bl	8006990 <USBD_CtlSendData>
        break;
 8006710:	e004      	b.n	800671c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f8be 	bl	8006896 <USBD_CtlError>
        break;
 800671a:	bf00      	nop
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	2b02      	cmp	r3, #2
 800673a:	d81e      	bhi.n	800677a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	88db      	ldrh	r3, [r3, #6]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d004      	beq.n	800674e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f8a5 	bl	8006896 <USBD_CtlError>
        break;
 800674c:	e01a      	b.n	8006784 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f043 0202 	orr.w	r2, r3, #2
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	330c      	adds	r3, #12
 800676e:	2202      	movs	r2, #2
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f90c 	bl	8006990 <USBD_CtlSendData>
      break;
 8006778:	e004      	b.n	8006784 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f88a 	bl	8006896 <USBD_CtlError>
      break;
 8006782:	bf00      	nop
  }
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	885b      	ldrh	r3, [r3, #2]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d107      	bne.n	80067ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f953 	bl	8006a52 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80067ac:	e013      	b.n	80067d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	885b      	ldrh	r3, [r3, #2]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d10b      	bne.n	80067ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	889b      	ldrh	r3, [r3, #4]
 80067ba:	0a1b      	lsrs	r3, r3, #8
 80067bc:	b29b      	uxth	r3, r3
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f943 	bl	8006a52 <USBD_CtlSendStatus>
}
 80067cc:	e003      	b.n	80067d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f860 	bl	8006896 <USBD_CtlError>
}
 80067d6:	bf00      	nop
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d80b      	bhi.n	800680e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	885b      	ldrh	r3, [r3, #2]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d10c      	bne.n	8006818 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f923 	bl	8006a52 <USBD_CtlSendStatus>
      }
      break;
 800680c:	e004      	b.n	8006818 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f840 	bl	8006896 <USBD_CtlError>
      break;
 8006816:	e000      	b.n	800681a <USBD_ClrFeature+0x3c>
      break;
 8006818:	bf00      	nop
  }
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fa3d 	bl	8005ccc <SWAPBYTE>
 8006852:	4603      	mov	r3, r0
 8006854:	461a      	mov	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3301      	adds	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff fa30 	bl	8005ccc <SWAPBYTE>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7ff fa23 	bl	8005ccc <SWAPBYTE>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	80da      	strh	r2, [r3, #6]
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068a0:	2180      	movs	r1, #128	@ 0x80
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fcea 	bl	800727c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068a8:	2100      	movs	r1, #0
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fce6 	bl	800727c <USBD_LL_StallEP>
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d042      	beq.n	8006954 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80068d2:	6938      	ldr	r0, [r7, #16]
 80068d4:	f000 f842 	bl	800695c <USBD_GetLen>
 80068d8:	4603      	mov	r3, r0
 80068da:	3301      	adds	r3, #1
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068e2:	d808      	bhi.n	80068f6 <USBD_GetString+0x3e>
 80068e4:	6938      	ldr	r0, [r7, #16]
 80068e6:	f000 f839 	bl	800695c <USBD_GetLen>
 80068ea:	4603      	mov	r3, r0
 80068ec:	3301      	adds	r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	e001      	b.n	80068fa <USBD_GetString+0x42>
 80068f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	4413      	add	r3, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	701a      	strb	r2, [r3, #0]
  idx++;
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	3301      	adds	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	4413      	add	r3, r2
 8006916:	2203      	movs	r2, #3
 8006918:	701a      	strb	r2, [r3, #0]
  idx++;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	3301      	adds	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006920:	e013      	b.n	800694a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	4413      	add	r3, r2
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	7812      	ldrb	r2, [r2, #0]
 800692c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3301      	adds	r3, #1
 8006932:	613b      	str	r3, [r7, #16]
    idx++;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	3301      	adds	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	4413      	add	r3, r2
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
    idx++;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	3301      	adds	r3, #1
 8006948:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e7      	bne.n	8006922 <USBD_GetString+0x6a>
 8006952:	e000      	b.n	8006956 <USBD_GetString+0x9e>
    return;
 8006954:	bf00      	nop
  }
}
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800696c:	e005      	b.n	800697a <USBD_GetLen+0x1e>
  {
    len++;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	3301      	adds	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3301      	adds	r3, #1
 8006978:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1f5      	bne.n	800696e <USBD_GetLen+0x12>
  }

  return len;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2202      	movs	r2, #2
 80069a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	2100      	movs	r1, #0
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fce6 	bl	800738e <USBD_LL_Transmit>

  return USBD_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	2100      	movs	r1, #0
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fcd5 	bl	800738e <USBD_LL_Transmit>

  return USBD_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2203      	movs	r2, #3
 80069fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	2100      	movs	r1, #0
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 fcd5 	bl	80073d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	2100      	movs	r1, #0
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fcc4 	bl	80073d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2204      	movs	r2, #4
 8006a5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a62:	2300      	movs	r3, #0
 8006a64:	2200      	movs	r2, #0
 8006a66:	2100      	movs	r1, #0
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fc90 	bl	800738e <USBD_LL_Transmit>

  return USBD_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2205      	movs	r2, #5
 8006a84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fc9e 	bl	80073d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4912      	ldr	r1, [pc, #72]	@ (8006af0 <MX_USB_DEVICE_Init+0x50>)
 8006aa8:	4812      	ldr	r0, [pc, #72]	@ (8006af4 <MX_USB_DEVICE_Init+0x54>)
 8006aaa:	f7fe fcd9 	bl	8005460 <USBD_Init>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ab4:	f7f9 fe93 	bl	80007de <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ab8:	490f      	ldr	r1, [pc, #60]	@ (8006af8 <MX_USB_DEVICE_Init+0x58>)
 8006aba:	480e      	ldr	r0, [pc, #56]	@ (8006af4 <MX_USB_DEVICE_Init+0x54>)
 8006abc:	f7fe fd00 	bl	80054c0 <USBD_RegisterClass>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ac6:	f7f9 fe8a 	bl	80007de <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006aca:	490c      	ldr	r1, [pc, #48]	@ (8006afc <MX_USB_DEVICE_Init+0x5c>)
 8006acc:	4809      	ldr	r0, [pc, #36]	@ (8006af4 <MX_USB_DEVICE_Init+0x54>)
 8006ace:	f7fe fbf7 	bl	80052c0 <USBD_CDC_RegisterInterface>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ad8:	f7f9 fe81 	bl	80007de <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006adc:	4805      	ldr	r0, [pc, #20]	@ (8006af4 <MX_USB_DEVICE_Init+0x54>)
 8006ade:	f7fe fd25 	bl	800552c <USBD_Start>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ae8:	f7f9 fe79 	bl	80007de <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006aec:	bf00      	nop
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	200000ac 	.word	0x200000ac
 8006af4:	200001d4 	.word	0x200001d4
 8006af8:	20000018 	.word	0x20000018
 8006afc:	20000098 	.word	0x20000098

08006b00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b04:	2200      	movs	r2, #0
 8006b06:	4905      	ldr	r1, [pc, #20]	@ (8006b1c <CDC_Init_FS+0x1c>)
 8006b08:	4805      	ldr	r0, [pc, #20]	@ (8006b20 <CDC_Init_FS+0x20>)
 8006b0a:	f7fe fbf3 	bl	80052f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b0e:	4905      	ldr	r1, [pc, #20]	@ (8006b24 <CDC_Init_FS+0x24>)
 8006b10:	4803      	ldr	r0, [pc, #12]	@ (8006b20 <CDC_Init_FS+0x20>)
 8006b12:	f7fe fc11 	bl	8005338 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000cb0 	.word	0x20000cb0
 8006b20:	200001d4 	.word	0x200001d4
 8006b24:	200004b0 	.word	0x200004b0

08006b28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	6039      	str	r1, [r7, #0]
 8006b42:	71fb      	strb	r3, [r7, #7]
 8006b44:	4613      	mov	r3, r2
 8006b46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	2b23      	cmp	r3, #35	@ 0x23
 8006b4c:	d84a      	bhi.n	8006be4 <CDC_Control_FS+0xac>
 8006b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <CDC_Control_FS+0x1c>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006be5 	.word	0x08006be5
 8006b58:	08006be5 	.word	0x08006be5
 8006b5c:	08006be5 	.word	0x08006be5
 8006b60:	08006be5 	.word	0x08006be5
 8006b64:	08006be5 	.word	0x08006be5
 8006b68:	08006be5 	.word	0x08006be5
 8006b6c:	08006be5 	.word	0x08006be5
 8006b70:	08006be5 	.word	0x08006be5
 8006b74:	08006be5 	.word	0x08006be5
 8006b78:	08006be5 	.word	0x08006be5
 8006b7c:	08006be5 	.word	0x08006be5
 8006b80:	08006be5 	.word	0x08006be5
 8006b84:	08006be5 	.word	0x08006be5
 8006b88:	08006be5 	.word	0x08006be5
 8006b8c:	08006be5 	.word	0x08006be5
 8006b90:	08006be5 	.word	0x08006be5
 8006b94:	08006be5 	.word	0x08006be5
 8006b98:	08006be5 	.word	0x08006be5
 8006b9c:	08006be5 	.word	0x08006be5
 8006ba0:	08006be5 	.word	0x08006be5
 8006ba4:	08006be5 	.word	0x08006be5
 8006ba8:	08006be5 	.word	0x08006be5
 8006bac:	08006be5 	.word	0x08006be5
 8006bb0:	08006be5 	.word	0x08006be5
 8006bb4:	08006be5 	.word	0x08006be5
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006be5 	.word	0x08006be5
 8006bc8:	08006be5 	.word	0x08006be5
 8006bcc:	08006be5 	.word	0x08006be5
 8006bd0:	08006be5 	.word	0x08006be5
 8006bd4:	08006be5 	.word	0x08006be5
 8006bd8:	08006be5 	.word	0x08006be5
 8006bdc:	08006be5 	.word	0x08006be5
 8006be0:	08006be5 	.word	0x08006be5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006be4:	bf00      	nop
  }

  return (USBD_OK);
 8006be6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4805      	ldr	r0, [pc, #20]	@ (8006c18 <CDC_Receive_FS+0x24>)
 8006c02:	f7fe fb99 	bl	8005338 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c06:	4804      	ldr	r0, [pc, #16]	@ (8006c18 <CDC_Receive_FS+0x24>)
 8006c08:	f7fe fbf4 	bl	80053f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200001d4 	.word	0x200001d4

08006c1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c64 <CDC_Transmit_FS+0x48>)
 8006c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e00b      	b.n	8006c5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	461a      	mov	r2, r3
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4806      	ldr	r0, [pc, #24]	@ (8006c64 <CDC_Transmit_FS+0x48>)
 8006c4a:	f7fe fb53 	bl	80052f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c4e:	4805      	ldr	r0, [pc, #20]	@ (8006c64 <CDC_Transmit_FS+0x48>)
 8006c50:	f7fe fb90 	bl	8005374 <USBD_CDC_TransmitPacket>
 8006c54:	4603      	mov	r3, r0
 8006c56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	200001d4 	.word	0x200001d4

08006c68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
	...

08006c8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	6039      	str	r1, [r7, #0]
 8006c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2212      	movs	r2, #18
 8006c9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c9e:	4b03      	ldr	r3, [pc, #12]	@ (8006cac <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	200000c8 	.word	0x200000c8

08006cb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	6039      	str	r1, [r7, #0]
 8006cba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006cc2:	4b03      	ldr	r3, [pc, #12]	@ (8006cd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	200000dc 	.word	0x200000dc

08006cd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	6039      	str	r1, [r7, #0]
 8006cde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d105      	bne.n	8006cf2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	4907      	ldr	r1, [pc, #28]	@ (8006d08 <USBD_FS_ProductStrDescriptor+0x34>)
 8006cea:	4808      	ldr	r0, [pc, #32]	@ (8006d0c <USBD_FS_ProductStrDescriptor+0x38>)
 8006cec:	f7ff fde4 	bl	80068b8 <USBD_GetString>
 8006cf0:	e004      	b.n	8006cfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	4904      	ldr	r1, [pc, #16]	@ (8006d08 <USBD_FS_ProductStrDescriptor+0x34>)
 8006cf6:	4805      	ldr	r0, [pc, #20]	@ (8006d0c <USBD_FS_ProductStrDescriptor+0x38>)
 8006cf8:	f7ff fdde 	bl	80068b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cfc:	4b02      	ldr	r3, [pc, #8]	@ (8006d08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	200014b0 	.word	0x200014b0
 8006d0c:	08008434 	.word	0x08008434

08006d10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	6039      	str	r1, [r7, #0]
 8006d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	4904      	ldr	r1, [pc, #16]	@ (8006d30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d20:	4804      	ldr	r0, [pc, #16]	@ (8006d34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d22:	f7ff fdc9 	bl	80068b8 <USBD_GetString>
  return USBD_StrDesc;
 8006d26:	4b02      	ldr	r3, [pc, #8]	@ (8006d30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	200014b0 	.word	0x200014b0
 8006d34:	0800844c 	.word	0x0800844c

08006d38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	6039      	str	r1, [r7, #0]
 8006d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	221a      	movs	r2, #26
 8006d48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d4a:	f000 f843 	bl	8006dd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d4e:	4b02      	ldr	r3, [pc, #8]	@ (8006d58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	200000e0 	.word	0x200000e0

08006d5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	6039      	str	r1, [r7, #0]
 8006d66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d68:	79fb      	ldrb	r3, [r7, #7]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d105      	bne.n	8006d7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	4907      	ldr	r1, [pc, #28]	@ (8006d90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d72:	4808      	ldr	r0, [pc, #32]	@ (8006d94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d74:	f7ff fda0 	bl	80068b8 <USBD_GetString>
 8006d78:	e004      	b.n	8006d84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	4904      	ldr	r1, [pc, #16]	@ (8006d90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d7e:	4805      	ldr	r0, [pc, #20]	@ (8006d94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d80:	f7ff fd9a 	bl	80068b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d84:	4b02      	ldr	r3, [pc, #8]	@ (8006d90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	200014b0 	.word	0x200014b0
 8006d94:	08008460 	.word	0x08008460

08006d98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	6039      	str	r1, [r7, #0]
 8006da2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d105      	bne.n	8006db6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4907      	ldr	r1, [pc, #28]	@ (8006dcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dae:	4808      	ldr	r0, [pc, #32]	@ (8006dd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006db0:	f7ff fd82 	bl	80068b8 <USBD_GetString>
 8006db4:	e004      	b.n	8006dc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	4904      	ldr	r1, [pc, #16]	@ (8006dcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dba:	4805      	ldr	r0, [pc, #20]	@ (8006dd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006dbc:	f7ff fd7c 	bl	80068b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dc0:	4b02      	ldr	r3, [pc, #8]	@ (8006dcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	200014b0 	.word	0x200014b0
 8006dd0:	0800846c 	.word	0x0800846c

08006dd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006dda:	4b0f      	ldr	r3, [pc, #60]	@ (8006e18 <Get_SerialNum+0x44>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006de0:	4b0e      	ldr	r3, [pc, #56]	@ (8006e1c <Get_SerialNum+0x48>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006de6:	4b0e      	ldr	r3, [pc, #56]	@ (8006e20 <Get_SerialNum+0x4c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006dfa:	2208      	movs	r2, #8
 8006dfc:	4909      	ldr	r1, [pc, #36]	@ (8006e24 <Get_SerialNum+0x50>)
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 f814 	bl	8006e2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e04:	2204      	movs	r2, #4
 8006e06:	4908      	ldr	r1, [pc, #32]	@ (8006e28 <Get_SerialNum+0x54>)
 8006e08:	68b8      	ldr	r0, [r7, #8]
 8006e0a:	f000 f80f 	bl	8006e2c <IntToUnicode>
  }
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	1fff7a10 	.word	0x1fff7a10
 8006e1c:	1fff7a14 	.word	0x1fff7a14
 8006e20:	1fff7a18 	.word	0x1fff7a18
 8006e24:	200000e2 	.word	0x200000e2
 8006e28:	200000f2 	.word	0x200000f2

08006e2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	4613      	mov	r3, r2
 8006e38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	75fb      	strb	r3, [r7, #23]
 8006e42:	e027      	b.n	8006e94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	0f1b      	lsrs	r3, r3, #28
 8006e48:	2b09      	cmp	r3, #9
 8006e4a:	d80b      	bhi.n	8006e64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	0f1b      	lsrs	r3, r3, #28
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	4619      	mov	r1, r3
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	440b      	add	r3, r1
 8006e5c:	3230      	adds	r2, #48	@ 0x30
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	e00a      	b.n	8006e7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	0f1b      	lsrs	r3, r3, #28
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	4619      	mov	r1, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	440b      	add	r3, r1
 8006e74:	3237      	adds	r2, #55	@ 0x37
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	3301      	adds	r3, #1
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	4413      	add	r3, r2
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	3301      	adds	r3, #1
 8006e92:	75fb      	strb	r3, [r7, #23]
 8006e94:	7dfa      	ldrb	r2, [r7, #23]
 8006e96:	79fb      	ldrb	r3, [r7, #7]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d3d3      	bcc.n	8006e44 <IntToUnicode+0x18>
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08a      	sub	sp, #40	@ 0x28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb4:	f107 0314 	add.w	r3, r7, #20
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	605a      	str	r2, [r3, #4]
 8006ebe:	609a      	str	r2, [r3, #8]
 8006ec0:	60da      	str	r2, [r3, #12]
 8006ec2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ecc:	d13a      	bne.n	8006f44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8006f4c <HAL_PCD_MspInit+0xa0>)
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8006f4c <HAL_PCD_MspInit+0xa0>)
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ede:	4b1b      	ldr	r3, [pc, #108]	@ (8006f4c <HAL_PCD_MspInit+0xa0>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006eea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006efc:	230a      	movs	r3, #10
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f00:	f107 0314 	add.w	r3, r7, #20
 8006f04:	4619      	mov	r1, r3
 8006f06:	4812      	ldr	r0, [pc, #72]	@ (8006f50 <HAL_PCD_MspInit+0xa4>)
 8006f08:	f7f9 ff86 	bl	8000e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f4c <HAL_PCD_MspInit+0xa0>)
 8006f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f10:	4a0e      	ldr	r2, [pc, #56]	@ (8006f4c <HAL_PCD_MspInit+0xa0>)
 8006f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f16:	6353      	str	r3, [r2, #52]	@ 0x34
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f4c <HAL_PCD_MspInit+0xa0>)
 8006f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f20:	4a0a      	ldr	r2, [pc, #40]	@ (8006f4c <HAL_PCD_MspInit+0xa0>)
 8006f22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f26:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f28:	4b08      	ldr	r3, [pc, #32]	@ (8006f4c <HAL_PCD_MspInit+0xa0>)
 8006f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f34:	2200      	movs	r2, #0
 8006f36:	2100      	movs	r1, #0
 8006f38:	2043      	movs	r0, #67	@ 0x43
 8006f3a:	f7f9 ff36 	bl	8000daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f3e:	2043      	movs	r0, #67	@ 0x43
 8006f40:	f7f9 ff4f 	bl	8000de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f44:	bf00      	nop
 8006f46:	3728      	adds	r7, #40	@ 0x28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40020000 	.word	0x40020000

08006f54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fe fb2b 	bl	80055c6 <USBD_LL_SetupStage>
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006f8a:	78fa      	ldrb	r2, [r7, #3]
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f7fe fb65 	bl	8005670 <USBD_LL_DataOutStage>
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006fc0:	78fa      	ldrb	r2, [r7, #3]
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	3320      	adds	r3, #32
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	f7fe fc07 	bl	80057e8 <USBD_LL_DataInStage>
}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe fd4b 	bl	8005a8c <USBD_LL_SOF>
}
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007006:	2301      	movs	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	79db      	ldrb	r3, [r3, #7]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d001      	beq.n	8007016 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007012:	f7f9 fbe4 	bl	80007de <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800701c:	7bfa      	ldrb	r2, [r7, #15]
 800701e:	4611      	mov	r1, r2
 8007020:	4618      	mov	r0, r3
 8007022:	f7fe fcef 	bl	8005a04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fc96 	bl	800595e <USBD_LL_Reset>
}
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fcea 	bl	8005a24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	7adb      	ldrb	r3, [r3, #11]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007070:	4b04      	ldr	r3, [pc, #16]	@ (8007084 <HAL_PCD_SuspendCallback+0x48>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	4a03      	ldr	r2, [pc, #12]	@ (8007084 <HAL_PCD_SuspendCallback+0x48>)
 8007076:	f043 0306 	orr.w	r3, r3, #6
 800707a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	e000ed00 	.word	0xe000ed00

08007088 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fce0 	bl	8005a5c <USBD_LL_Resume>
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fd38 	bl	8005b30 <USBD_LL_IsoOUTIncomplete>
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070da:	78fa      	ldrb	r2, [r7, #3]
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fcf4 	bl	8005acc <USBD_LL_IsoINIncomplete>
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fd4a 	bl	8005b94 <USBD_LL_DevConnected>
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe fd47 	bl	8005baa <USBD_LL_DevDisconnected>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d13c      	bne.n	80071ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007134:	4a20      	ldr	r2, [pc, #128]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a1e      	ldr	r2, [pc, #120]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007140:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007144:	4b1c      	ldr	r3, [pc, #112]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007146:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800714a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800714c:	4b1a      	ldr	r3, [pc, #104]	@ (80071b8 <USBD_LL_Init+0x94>)
 800714e:	2204      	movs	r2, #4
 8007150:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007152:	4b19      	ldr	r3, [pc, #100]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007154:	2202      	movs	r2, #2
 8007156:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007158:	4b17      	ldr	r3, [pc, #92]	@ (80071b8 <USBD_LL_Init+0x94>)
 800715a:	2200      	movs	r2, #0
 800715c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800715e:	4b16      	ldr	r3, [pc, #88]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007160:	2202      	movs	r2, #2
 8007162:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007164:	4b14      	ldr	r3, [pc, #80]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007166:	2200      	movs	r2, #0
 8007168:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800716a:	4b13      	ldr	r3, [pc, #76]	@ (80071b8 <USBD_LL_Init+0x94>)
 800716c:	2200      	movs	r2, #0
 800716e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007170:	4b11      	ldr	r3, [pc, #68]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007172:	2200      	movs	r2, #0
 8007174:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007176:	4b10      	ldr	r3, [pc, #64]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007178:	2200      	movs	r2, #0
 800717a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800717c:	4b0e      	ldr	r3, [pc, #56]	@ (80071b8 <USBD_LL_Init+0x94>)
 800717e:	2200      	movs	r2, #0
 8007180:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007182:	480d      	ldr	r0, [pc, #52]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007184:	f7fa fab8 	bl	80016f8 <HAL_PCD_Init>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800718e:	f7f9 fb26 	bl	80007de <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007192:	2180      	movs	r1, #128	@ 0x80
 8007194:	4808      	ldr	r0, [pc, #32]	@ (80071b8 <USBD_LL_Init+0x94>)
 8007196:	f7fb fce4 	bl	8002b62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800719a:	2240      	movs	r2, #64	@ 0x40
 800719c:	2100      	movs	r1, #0
 800719e:	4806      	ldr	r0, [pc, #24]	@ (80071b8 <USBD_LL_Init+0x94>)
 80071a0:	f7fb fc98 	bl	8002ad4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80071a4:	2280      	movs	r2, #128	@ 0x80
 80071a6:	2101      	movs	r1, #1
 80071a8:	4803      	ldr	r0, [pc, #12]	@ (80071b8 <USBD_LL_Init+0x94>)
 80071aa:	f7fb fc93 	bl	8002ad4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	200016b0 	.word	0x200016b0

080071bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fa fb9f 	bl	8001916 <HAL_PCD_Start>
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f942 	bl	8007468 <USBD_Get_USB_Status>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	4608      	mov	r0, r1
 80071fc:	4611      	mov	r1, r2
 80071fe:	461a      	mov	r2, r3
 8007200:	4603      	mov	r3, r0
 8007202:	70fb      	strb	r3, [r7, #3]
 8007204:	460b      	mov	r3, r1
 8007206:	70bb      	strb	r3, [r7, #2]
 8007208:	4613      	mov	r3, r2
 800720a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800721a:	78bb      	ldrb	r3, [r7, #2]
 800721c:	883a      	ldrh	r2, [r7, #0]
 800721e:	78f9      	ldrb	r1, [r7, #3]
 8007220:	f7fb f873 	bl	800230a <HAL_PCD_EP_Open>
 8007224:	4603      	mov	r3, r0
 8007226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f91c 	bl	8007468 <USBD_Get_USB_Status>
 8007230:	4603      	mov	r3, r0
 8007232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007234:	7bbb      	ldrb	r3, [r7, #14]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007258:	78fa      	ldrb	r2, [r7, #3]
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f7fb f8be 	bl	80023de <HAL_PCD_EP_Close>
 8007262:	4603      	mov	r3, r0
 8007264:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f8fd 	bl	8007468 <USBD_Get_USB_Status>
 800726e:	4603      	mov	r3, r0
 8007270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007272:	7bbb      	ldrb	r3, [r7, #14]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f7fb f976 	bl	800258c <HAL_PCD_EP_SetStall>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f8de 	bl	8007468 <USBD_Get_USB_Status>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	4611      	mov	r1, r2
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fb f9ba 	bl	8002652 <HAL_PCD_EP_ClrStall>
 80072de:	4603      	mov	r3, r0
 80072e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 f8bf 	bl	8007468 <USBD_Get_USB_Status>
 80072ea:	4603      	mov	r3, r0
 80072ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800730a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800730c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007310:	2b00      	cmp	r3, #0
 8007312:	da0b      	bge.n	800732c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	4613      	mov	r3, r2
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	3316      	adds	r3, #22
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	e00b      	b.n	8007344 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007332:	68f9      	ldr	r1, [r7, #12]
 8007334:	4613      	mov	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007342:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7fa ffa7 	bl	80022c2 <HAL_PCD_SetAddress>
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f874 	bl	8007468 <USBD_Get_USB_Status>
 8007380:	4603      	mov	r3, r0
 8007382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007384:	7bbb      	ldrb	r3, [r7, #14]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
 800739a:	460b      	mov	r3, r1
 800739c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80073ac:	7af9      	ldrb	r1, [r7, #11]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	f7fb f8b1 	bl	8002518 <HAL_PCD_EP_Transmit>
 80073b6:	4603      	mov	r3, r0
 80073b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 f853 	bl	8007468 <USBD_Get_USB_Status>
 80073c2:	4603      	mov	r3, r0
 80073c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80073c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	607a      	str	r2, [r7, #4]
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	460b      	mov	r3, r1
 80073de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80073ee:	7af9      	ldrb	r1, [r7, #11]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	f7fb f83d 	bl	8002472 <HAL_PCD_EP_Receive>
 80073f8:	4603      	mov	r3, r0
 80073fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f832 	bl	8007468 <USBD_Get_USB_Status>
 8007404:	4603      	mov	r3, r0
 8007406:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007408:	7dbb      	ldrb	r3, [r7, #22]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007424:	78fa      	ldrb	r2, [r7, #3]
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f7fb f85d 	bl	80024e8 <HAL_PCD_EP_GetRxCount>
 800742e:	4603      	mov	r3, r0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007440:	4b03      	ldr	r3, [pc, #12]	@ (8007450 <USBD_static_malloc+0x18>)
}
 8007442:	4618      	mov	r0, r3
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20001b94 	.word	0x20001b94

08007454 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]

}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d817      	bhi.n	80074ac <USBD_Get_USB_Status+0x44>
 800747c:	a201      	add	r2, pc, #4	@ (adr r2, 8007484 <USBD_Get_USB_Status+0x1c>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	08007495 	.word	0x08007495
 8007488:	0800749b 	.word	0x0800749b
 800748c:	080074a1 	.word	0x080074a1
 8007490:	080074a7 	.word	0x080074a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
    break;
 8007498:	e00b      	b.n	80074b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800749a:	2303      	movs	r3, #3
 800749c:	73fb      	strb	r3, [r7, #15]
    break;
 800749e:	e008      	b.n	80074b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
    break;
 80074a4:	e005      	b.n	80074b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074a6:	2303      	movs	r3, #3
 80074a8:	73fb      	strb	r3, [r7, #15]
    break;
 80074aa:	e002      	b.n	80074b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80074ac:	2303      	movs	r3, #3
 80074ae:	73fb      	strb	r3, [r7, #15]
    break;
 80074b0:	bf00      	nop
  }
  return usb_status;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <std>:
 80074c0:	2300      	movs	r3, #0
 80074c2:	b510      	push	{r4, lr}
 80074c4:	4604      	mov	r4, r0
 80074c6:	e9c0 3300 	strd	r3, r3, [r0]
 80074ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074ce:	6083      	str	r3, [r0, #8]
 80074d0:	8181      	strh	r1, [r0, #12]
 80074d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074d4:	81c2      	strh	r2, [r0, #14]
 80074d6:	6183      	str	r3, [r0, #24]
 80074d8:	4619      	mov	r1, r3
 80074da:	2208      	movs	r2, #8
 80074dc:	305c      	adds	r0, #92	@ 0x5c
 80074de:	f000 f9f9 	bl	80078d4 <memset>
 80074e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <std+0x58>)
 80074e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80074e6:	4b0d      	ldr	r3, [pc, #52]	@ (800751c <std+0x5c>)
 80074e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007520 <std+0x60>)
 80074ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <std+0x64>)
 80074f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <std+0x68>)
 80074f4:	6224      	str	r4, [r4, #32]
 80074f6:	429c      	cmp	r4, r3
 80074f8:	d006      	beq.n	8007508 <std+0x48>
 80074fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074fe:	4294      	cmp	r4, r2
 8007500:	d002      	beq.n	8007508 <std+0x48>
 8007502:	33d0      	adds	r3, #208	@ 0xd0
 8007504:	429c      	cmp	r4, r3
 8007506:	d105      	bne.n	8007514 <std+0x54>
 8007508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800750c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007510:	f000 ba58 	b.w	80079c4 <__retarget_lock_init_recursive>
 8007514:	bd10      	pop	{r4, pc}
 8007516:	bf00      	nop
 8007518:	08007725 	.word	0x08007725
 800751c:	08007747 	.word	0x08007747
 8007520:	0800777f 	.word	0x0800777f
 8007524:	080077a3 	.word	0x080077a3
 8007528:	20001db4 	.word	0x20001db4

0800752c <stdio_exit_handler>:
 800752c:	4a02      	ldr	r2, [pc, #8]	@ (8007538 <stdio_exit_handler+0xc>)
 800752e:	4903      	ldr	r1, [pc, #12]	@ (800753c <stdio_exit_handler+0x10>)
 8007530:	4803      	ldr	r0, [pc, #12]	@ (8007540 <stdio_exit_handler+0x14>)
 8007532:	f000 b869 	b.w	8007608 <_fwalk_sglue>
 8007536:	bf00      	nop
 8007538:	200000fc 	.word	0x200000fc
 800753c:	08008261 	.word	0x08008261
 8007540:	2000010c 	.word	0x2000010c

08007544 <cleanup_stdio>:
 8007544:	6841      	ldr	r1, [r0, #4]
 8007546:	4b0c      	ldr	r3, [pc, #48]	@ (8007578 <cleanup_stdio+0x34>)
 8007548:	4299      	cmp	r1, r3
 800754a:	b510      	push	{r4, lr}
 800754c:	4604      	mov	r4, r0
 800754e:	d001      	beq.n	8007554 <cleanup_stdio+0x10>
 8007550:	f000 fe86 	bl	8008260 <_fflush_r>
 8007554:	68a1      	ldr	r1, [r4, #8]
 8007556:	4b09      	ldr	r3, [pc, #36]	@ (800757c <cleanup_stdio+0x38>)
 8007558:	4299      	cmp	r1, r3
 800755a:	d002      	beq.n	8007562 <cleanup_stdio+0x1e>
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fe7f 	bl	8008260 <_fflush_r>
 8007562:	68e1      	ldr	r1, [r4, #12]
 8007564:	4b06      	ldr	r3, [pc, #24]	@ (8007580 <cleanup_stdio+0x3c>)
 8007566:	4299      	cmp	r1, r3
 8007568:	d004      	beq.n	8007574 <cleanup_stdio+0x30>
 800756a:	4620      	mov	r0, r4
 800756c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007570:	f000 be76 	b.w	8008260 <_fflush_r>
 8007574:	bd10      	pop	{r4, pc}
 8007576:	bf00      	nop
 8007578:	20001db4 	.word	0x20001db4
 800757c:	20001e1c 	.word	0x20001e1c
 8007580:	20001e84 	.word	0x20001e84

08007584 <global_stdio_init.part.0>:
 8007584:	b510      	push	{r4, lr}
 8007586:	4b0b      	ldr	r3, [pc, #44]	@ (80075b4 <global_stdio_init.part.0+0x30>)
 8007588:	4c0b      	ldr	r4, [pc, #44]	@ (80075b8 <global_stdio_init.part.0+0x34>)
 800758a:	4a0c      	ldr	r2, [pc, #48]	@ (80075bc <global_stdio_init.part.0+0x38>)
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	4620      	mov	r0, r4
 8007590:	2200      	movs	r2, #0
 8007592:	2104      	movs	r1, #4
 8007594:	f7ff ff94 	bl	80074c0 <std>
 8007598:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800759c:	2201      	movs	r2, #1
 800759e:	2109      	movs	r1, #9
 80075a0:	f7ff ff8e 	bl	80074c0 <std>
 80075a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075a8:	2202      	movs	r2, #2
 80075aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ae:	2112      	movs	r1, #18
 80075b0:	f7ff bf86 	b.w	80074c0 <std>
 80075b4:	20001eec 	.word	0x20001eec
 80075b8:	20001db4 	.word	0x20001db4
 80075bc:	0800752d 	.word	0x0800752d

080075c0 <__sfp_lock_acquire>:
 80075c0:	4801      	ldr	r0, [pc, #4]	@ (80075c8 <__sfp_lock_acquire+0x8>)
 80075c2:	f000 ba00 	b.w	80079c6 <__retarget_lock_acquire_recursive>
 80075c6:	bf00      	nop
 80075c8:	20001ef5 	.word	0x20001ef5

080075cc <__sfp_lock_release>:
 80075cc:	4801      	ldr	r0, [pc, #4]	@ (80075d4 <__sfp_lock_release+0x8>)
 80075ce:	f000 b9fb 	b.w	80079c8 <__retarget_lock_release_recursive>
 80075d2:	bf00      	nop
 80075d4:	20001ef5 	.word	0x20001ef5

080075d8 <__sinit>:
 80075d8:	b510      	push	{r4, lr}
 80075da:	4604      	mov	r4, r0
 80075dc:	f7ff fff0 	bl	80075c0 <__sfp_lock_acquire>
 80075e0:	6a23      	ldr	r3, [r4, #32]
 80075e2:	b11b      	cbz	r3, 80075ec <__sinit+0x14>
 80075e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e8:	f7ff bff0 	b.w	80075cc <__sfp_lock_release>
 80075ec:	4b04      	ldr	r3, [pc, #16]	@ (8007600 <__sinit+0x28>)
 80075ee:	6223      	str	r3, [r4, #32]
 80075f0:	4b04      	ldr	r3, [pc, #16]	@ (8007604 <__sinit+0x2c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f5      	bne.n	80075e4 <__sinit+0xc>
 80075f8:	f7ff ffc4 	bl	8007584 <global_stdio_init.part.0>
 80075fc:	e7f2      	b.n	80075e4 <__sinit+0xc>
 80075fe:	bf00      	nop
 8007600:	08007545 	.word	0x08007545
 8007604:	20001eec 	.word	0x20001eec

08007608 <_fwalk_sglue>:
 8007608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800760c:	4607      	mov	r7, r0
 800760e:	4688      	mov	r8, r1
 8007610:	4614      	mov	r4, r2
 8007612:	2600      	movs	r6, #0
 8007614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007618:	f1b9 0901 	subs.w	r9, r9, #1
 800761c:	d505      	bpl.n	800762a <_fwalk_sglue+0x22>
 800761e:	6824      	ldr	r4, [r4, #0]
 8007620:	2c00      	cmp	r4, #0
 8007622:	d1f7      	bne.n	8007614 <_fwalk_sglue+0xc>
 8007624:	4630      	mov	r0, r6
 8007626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d907      	bls.n	8007640 <_fwalk_sglue+0x38>
 8007630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007634:	3301      	adds	r3, #1
 8007636:	d003      	beq.n	8007640 <_fwalk_sglue+0x38>
 8007638:	4629      	mov	r1, r5
 800763a:	4638      	mov	r0, r7
 800763c:	47c0      	blx	r8
 800763e:	4306      	orrs	r6, r0
 8007640:	3568      	adds	r5, #104	@ 0x68
 8007642:	e7e9      	b.n	8007618 <_fwalk_sglue+0x10>

08007644 <iprintf>:
 8007644:	b40f      	push	{r0, r1, r2, r3}
 8007646:	b507      	push	{r0, r1, r2, lr}
 8007648:	4906      	ldr	r1, [pc, #24]	@ (8007664 <iprintf+0x20>)
 800764a:	ab04      	add	r3, sp, #16
 800764c:	6808      	ldr	r0, [r1, #0]
 800764e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007652:	6881      	ldr	r1, [r0, #8]
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	f000 fadb 	bl	8007c10 <_vfiprintf_r>
 800765a:	b003      	add	sp, #12
 800765c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007660:	b004      	add	sp, #16
 8007662:	4770      	bx	lr
 8007664:	20000108 	.word	0x20000108

08007668 <_puts_r>:
 8007668:	6a03      	ldr	r3, [r0, #32]
 800766a:	b570      	push	{r4, r5, r6, lr}
 800766c:	6884      	ldr	r4, [r0, #8]
 800766e:	4605      	mov	r5, r0
 8007670:	460e      	mov	r6, r1
 8007672:	b90b      	cbnz	r3, 8007678 <_puts_r+0x10>
 8007674:	f7ff ffb0 	bl	80075d8 <__sinit>
 8007678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800767a:	07db      	lsls	r3, r3, #31
 800767c:	d405      	bmi.n	800768a <_puts_r+0x22>
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	0598      	lsls	r0, r3, #22
 8007682:	d402      	bmi.n	800768a <_puts_r+0x22>
 8007684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007686:	f000 f99e 	bl	80079c6 <__retarget_lock_acquire_recursive>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	0719      	lsls	r1, r3, #28
 800768e:	d502      	bpl.n	8007696 <_puts_r+0x2e>
 8007690:	6923      	ldr	r3, [r4, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d135      	bne.n	8007702 <_puts_r+0x9a>
 8007696:	4621      	mov	r1, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f000 f8c5 	bl	8007828 <__swsetup_r>
 800769e:	b380      	cbz	r0, 8007702 <_puts_r+0x9a>
 80076a0:	f04f 35ff 	mov.w	r5, #4294967295
 80076a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076a6:	07da      	lsls	r2, r3, #31
 80076a8:	d405      	bmi.n	80076b6 <_puts_r+0x4e>
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	059b      	lsls	r3, r3, #22
 80076ae:	d402      	bmi.n	80076b6 <_puts_r+0x4e>
 80076b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076b2:	f000 f989 	bl	80079c8 <__retarget_lock_release_recursive>
 80076b6:	4628      	mov	r0, r5
 80076b8:	bd70      	pop	{r4, r5, r6, pc}
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	da04      	bge.n	80076c8 <_puts_r+0x60>
 80076be:	69a2      	ldr	r2, [r4, #24]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	dc17      	bgt.n	80076f4 <_puts_r+0x8c>
 80076c4:	290a      	cmp	r1, #10
 80076c6:	d015      	beq.n	80076f4 <_puts_r+0x8c>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	6022      	str	r2, [r4, #0]
 80076ce:	7019      	strb	r1, [r3, #0]
 80076d0:	68a3      	ldr	r3, [r4, #8]
 80076d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076d6:	3b01      	subs	r3, #1
 80076d8:	60a3      	str	r3, [r4, #8]
 80076da:	2900      	cmp	r1, #0
 80076dc:	d1ed      	bne.n	80076ba <_puts_r+0x52>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	da11      	bge.n	8007706 <_puts_r+0x9e>
 80076e2:	4622      	mov	r2, r4
 80076e4:	210a      	movs	r1, #10
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 f85f 	bl	80077aa <__swbuf_r>
 80076ec:	3001      	adds	r0, #1
 80076ee:	d0d7      	beq.n	80076a0 <_puts_r+0x38>
 80076f0:	250a      	movs	r5, #10
 80076f2:	e7d7      	b.n	80076a4 <_puts_r+0x3c>
 80076f4:	4622      	mov	r2, r4
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 f857 	bl	80077aa <__swbuf_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d1e7      	bne.n	80076d0 <_puts_r+0x68>
 8007700:	e7ce      	b.n	80076a0 <_puts_r+0x38>
 8007702:	3e01      	subs	r6, #1
 8007704:	e7e4      	b.n	80076d0 <_puts_r+0x68>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	6022      	str	r2, [r4, #0]
 800770c:	220a      	movs	r2, #10
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	e7ee      	b.n	80076f0 <_puts_r+0x88>
	...

08007714 <puts>:
 8007714:	4b02      	ldr	r3, [pc, #8]	@ (8007720 <puts+0xc>)
 8007716:	4601      	mov	r1, r0
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	f7ff bfa5 	b.w	8007668 <_puts_r>
 800771e:	bf00      	nop
 8007720:	20000108 	.word	0x20000108

08007724 <__sread>:
 8007724:	b510      	push	{r4, lr}
 8007726:	460c      	mov	r4, r1
 8007728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772c:	f000 f8fc 	bl	8007928 <_read_r>
 8007730:	2800      	cmp	r0, #0
 8007732:	bfab      	itete	ge
 8007734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007736:	89a3      	ldrhlt	r3, [r4, #12]
 8007738:	181b      	addge	r3, r3, r0
 800773a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800773e:	bfac      	ite	ge
 8007740:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007742:	81a3      	strhlt	r3, [r4, #12]
 8007744:	bd10      	pop	{r4, pc}

08007746 <__swrite>:
 8007746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	461f      	mov	r7, r3
 800774c:	898b      	ldrh	r3, [r1, #12]
 800774e:	05db      	lsls	r3, r3, #23
 8007750:	4605      	mov	r5, r0
 8007752:	460c      	mov	r4, r1
 8007754:	4616      	mov	r6, r2
 8007756:	d505      	bpl.n	8007764 <__swrite+0x1e>
 8007758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775c:	2302      	movs	r3, #2
 800775e:	2200      	movs	r2, #0
 8007760:	f000 f8d0 	bl	8007904 <_lseek_r>
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800776a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800776e:	81a3      	strh	r3, [r4, #12]
 8007770:	4632      	mov	r2, r6
 8007772:	463b      	mov	r3, r7
 8007774:	4628      	mov	r0, r5
 8007776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800777a:	f000 b8e7 	b.w	800794c <_write_r>

0800777e <__sseek>:
 800777e:	b510      	push	{r4, lr}
 8007780:	460c      	mov	r4, r1
 8007782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007786:	f000 f8bd 	bl	8007904 <_lseek_r>
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	bf15      	itete	ne
 8007790:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800779a:	81a3      	strheq	r3, [r4, #12]
 800779c:	bf18      	it	ne
 800779e:	81a3      	strhne	r3, [r4, #12]
 80077a0:	bd10      	pop	{r4, pc}

080077a2 <__sclose>:
 80077a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a6:	f000 b89d 	b.w	80078e4 <_close_r>

080077aa <__swbuf_r>:
 80077aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ac:	460e      	mov	r6, r1
 80077ae:	4614      	mov	r4, r2
 80077b0:	4605      	mov	r5, r0
 80077b2:	b118      	cbz	r0, 80077bc <__swbuf_r+0x12>
 80077b4:	6a03      	ldr	r3, [r0, #32]
 80077b6:	b90b      	cbnz	r3, 80077bc <__swbuf_r+0x12>
 80077b8:	f7ff ff0e 	bl	80075d8 <__sinit>
 80077bc:	69a3      	ldr	r3, [r4, #24]
 80077be:	60a3      	str	r3, [r4, #8]
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	071a      	lsls	r2, r3, #28
 80077c4:	d501      	bpl.n	80077ca <__swbuf_r+0x20>
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	b943      	cbnz	r3, 80077dc <__swbuf_r+0x32>
 80077ca:	4621      	mov	r1, r4
 80077cc:	4628      	mov	r0, r5
 80077ce:	f000 f82b 	bl	8007828 <__swsetup_r>
 80077d2:	b118      	cbz	r0, 80077dc <__swbuf_r+0x32>
 80077d4:	f04f 37ff 	mov.w	r7, #4294967295
 80077d8:	4638      	mov	r0, r7
 80077da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	6922      	ldr	r2, [r4, #16]
 80077e0:	1a98      	subs	r0, r3, r2
 80077e2:	6963      	ldr	r3, [r4, #20]
 80077e4:	b2f6      	uxtb	r6, r6
 80077e6:	4283      	cmp	r3, r0
 80077e8:	4637      	mov	r7, r6
 80077ea:	dc05      	bgt.n	80077f8 <__swbuf_r+0x4e>
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 fd36 	bl	8008260 <_fflush_r>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d1ed      	bne.n	80077d4 <__swbuf_r+0x2a>
 80077f8:	68a3      	ldr	r3, [r4, #8]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	60a3      	str	r3, [r4, #8]
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	6022      	str	r2, [r4, #0]
 8007804:	701e      	strb	r6, [r3, #0]
 8007806:	6962      	ldr	r2, [r4, #20]
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	429a      	cmp	r2, r3
 800780c:	d004      	beq.n	8007818 <__swbuf_r+0x6e>
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	07db      	lsls	r3, r3, #31
 8007812:	d5e1      	bpl.n	80077d8 <__swbuf_r+0x2e>
 8007814:	2e0a      	cmp	r6, #10
 8007816:	d1df      	bne.n	80077d8 <__swbuf_r+0x2e>
 8007818:	4621      	mov	r1, r4
 800781a:	4628      	mov	r0, r5
 800781c:	f000 fd20 	bl	8008260 <_fflush_r>
 8007820:	2800      	cmp	r0, #0
 8007822:	d0d9      	beq.n	80077d8 <__swbuf_r+0x2e>
 8007824:	e7d6      	b.n	80077d4 <__swbuf_r+0x2a>
	...

08007828 <__swsetup_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4b29      	ldr	r3, [pc, #164]	@ (80078d0 <__swsetup_r+0xa8>)
 800782c:	4605      	mov	r5, r0
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	460c      	mov	r4, r1
 8007832:	b118      	cbz	r0, 800783c <__swsetup_r+0x14>
 8007834:	6a03      	ldr	r3, [r0, #32]
 8007836:	b90b      	cbnz	r3, 800783c <__swsetup_r+0x14>
 8007838:	f7ff fece 	bl	80075d8 <__sinit>
 800783c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007840:	0719      	lsls	r1, r3, #28
 8007842:	d422      	bmi.n	800788a <__swsetup_r+0x62>
 8007844:	06da      	lsls	r2, r3, #27
 8007846:	d407      	bmi.n	8007858 <__swsetup_r+0x30>
 8007848:	2209      	movs	r2, #9
 800784a:	602a      	str	r2, [r5, #0]
 800784c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	f04f 30ff 	mov.w	r0, #4294967295
 8007856:	e033      	b.n	80078c0 <__swsetup_r+0x98>
 8007858:	0758      	lsls	r0, r3, #29
 800785a:	d512      	bpl.n	8007882 <__swsetup_r+0x5a>
 800785c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800785e:	b141      	cbz	r1, 8007872 <__swsetup_r+0x4a>
 8007860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007864:	4299      	cmp	r1, r3
 8007866:	d002      	beq.n	800786e <__swsetup_r+0x46>
 8007868:	4628      	mov	r0, r5
 800786a:	f000 f8af 	bl	80079cc <_free_r>
 800786e:	2300      	movs	r3, #0
 8007870:	6363      	str	r3, [r4, #52]	@ 0x34
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	2300      	movs	r3, #0
 800787c:	6063      	str	r3, [r4, #4]
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f043 0308 	orr.w	r3, r3, #8
 8007888:	81a3      	strh	r3, [r4, #12]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	b94b      	cbnz	r3, 80078a2 <__swsetup_r+0x7a>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007898:	d003      	beq.n	80078a2 <__swsetup_r+0x7a>
 800789a:	4621      	mov	r1, r4
 800789c:	4628      	mov	r0, r5
 800789e:	f000 fd2d 	bl	80082fc <__smakebuf_r>
 80078a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a6:	f013 0201 	ands.w	r2, r3, #1
 80078aa:	d00a      	beq.n	80078c2 <__swsetup_r+0x9a>
 80078ac:	2200      	movs	r2, #0
 80078ae:	60a2      	str	r2, [r4, #8]
 80078b0:	6962      	ldr	r2, [r4, #20]
 80078b2:	4252      	negs	r2, r2
 80078b4:	61a2      	str	r2, [r4, #24]
 80078b6:	6922      	ldr	r2, [r4, #16]
 80078b8:	b942      	cbnz	r2, 80078cc <__swsetup_r+0xa4>
 80078ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078be:	d1c5      	bne.n	800784c <__swsetup_r+0x24>
 80078c0:	bd38      	pop	{r3, r4, r5, pc}
 80078c2:	0799      	lsls	r1, r3, #30
 80078c4:	bf58      	it	pl
 80078c6:	6962      	ldrpl	r2, [r4, #20]
 80078c8:	60a2      	str	r2, [r4, #8]
 80078ca:	e7f4      	b.n	80078b6 <__swsetup_r+0x8e>
 80078cc:	2000      	movs	r0, #0
 80078ce:	e7f7      	b.n	80078c0 <__swsetup_r+0x98>
 80078d0:	20000108 	.word	0x20000108

080078d4 <memset>:
 80078d4:	4402      	add	r2, r0
 80078d6:	4603      	mov	r3, r0
 80078d8:	4293      	cmp	r3, r2
 80078da:	d100      	bne.n	80078de <memset+0xa>
 80078dc:	4770      	bx	lr
 80078de:	f803 1b01 	strb.w	r1, [r3], #1
 80078e2:	e7f9      	b.n	80078d8 <memset+0x4>

080078e4 <_close_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d06      	ldr	r5, [pc, #24]	@ (8007900 <_close_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	f7f9 f843 	bl	800097a <_close>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_close_r+0x1a>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_close_r+0x1a>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20001ef0 	.word	0x20001ef0

08007904 <_lseek_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d07      	ldr	r5, [pc, #28]	@ (8007924 <_lseek_r+0x20>)
 8007908:	4604      	mov	r4, r0
 800790a:	4608      	mov	r0, r1
 800790c:	4611      	mov	r1, r2
 800790e:	2200      	movs	r2, #0
 8007910:	602a      	str	r2, [r5, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	f7f9 f858 	bl	80009c8 <_lseek>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_lseek_r+0x1e>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	b103      	cbz	r3, 8007922 <_lseek_r+0x1e>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	20001ef0 	.word	0x20001ef0

08007928 <_read_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d07      	ldr	r5, [pc, #28]	@ (8007948 <_read_r+0x20>)
 800792c:	4604      	mov	r4, r0
 800792e:	4608      	mov	r0, r1
 8007930:	4611      	mov	r1, r2
 8007932:	2200      	movs	r2, #0
 8007934:	602a      	str	r2, [r5, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	f7f9 f802 	bl	8000940 <_read>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_read_r+0x1e>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_read_r+0x1e>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	20001ef0 	.word	0x20001ef0

0800794c <_write_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d07      	ldr	r5, [pc, #28]	@ (800796c <_write_r+0x20>)
 8007950:	4604      	mov	r4, r0
 8007952:	4608      	mov	r0, r1
 8007954:	4611      	mov	r1, r2
 8007956:	2200      	movs	r2, #0
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f7f8 ff2e 	bl	80007bc <_write>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_write_r+0x1e>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_write_r+0x1e>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20001ef0 	.word	0x20001ef0

08007970 <__errno>:
 8007970:	4b01      	ldr	r3, [pc, #4]	@ (8007978 <__errno+0x8>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000108 	.word	0x20000108

0800797c <__libc_init_array>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4d0d      	ldr	r5, [pc, #52]	@ (80079b4 <__libc_init_array+0x38>)
 8007980:	4c0d      	ldr	r4, [pc, #52]	@ (80079b8 <__libc_init_array+0x3c>)
 8007982:	1b64      	subs	r4, r4, r5
 8007984:	10a4      	asrs	r4, r4, #2
 8007986:	2600      	movs	r6, #0
 8007988:	42a6      	cmp	r6, r4
 800798a:	d109      	bne.n	80079a0 <__libc_init_array+0x24>
 800798c:	4d0b      	ldr	r5, [pc, #44]	@ (80079bc <__libc_init_array+0x40>)
 800798e:	4c0c      	ldr	r4, [pc, #48]	@ (80079c0 <__libc_init_array+0x44>)
 8007990:	f000 fd22 	bl	80083d8 <_init>
 8007994:	1b64      	subs	r4, r4, r5
 8007996:	10a4      	asrs	r4, r4, #2
 8007998:	2600      	movs	r6, #0
 800799a:	42a6      	cmp	r6, r4
 800799c:	d105      	bne.n	80079aa <__libc_init_array+0x2e>
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a4:	4798      	blx	r3
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7ee      	b.n	8007988 <__libc_init_array+0xc>
 80079aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ae:	4798      	blx	r3
 80079b0:	3601      	adds	r6, #1
 80079b2:	e7f2      	b.n	800799a <__libc_init_array+0x1e>
 80079b4:	080084d0 	.word	0x080084d0
 80079b8:	080084d0 	.word	0x080084d0
 80079bc:	080084d0 	.word	0x080084d0
 80079c0:	080084d4 	.word	0x080084d4

080079c4 <__retarget_lock_init_recursive>:
 80079c4:	4770      	bx	lr

080079c6 <__retarget_lock_acquire_recursive>:
 80079c6:	4770      	bx	lr

080079c8 <__retarget_lock_release_recursive>:
 80079c8:	4770      	bx	lr
	...

080079cc <_free_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4605      	mov	r5, r0
 80079d0:	2900      	cmp	r1, #0
 80079d2:	d041      	beq.n	8007a58 <_free_r+0x8c>
 80079d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d8:	1f0c      	subs	r4, r1, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bfb8      	it	lt
 80079de:	18e4      	addlt	r4, r4, r3
 80079e0:	f000 f8e0 	bl	8007ba4 <__malloc_lock>
 80079e4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a5c <_free_r+0x90>)
 80079e6:	6813      	ldr	r3, [r2, #0]
 80079e8:	b933      	cbnz	r3, 80079f8 <_free_r+0x2c>
 80079ea:	6063      	str	r3, [r4, #4]
 80079ec:	6014      	str	r4, [r2, #0]
 80079ee:	4628      	mov	r0, r5
 80079f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f4:	f000 b8dc 	b.w	8007bb0 <__malloc_unlock>
 80079f8:	42a3      	cmp	r3, r4
 80079fa:	d908      	bls.n	8007a0e <_free_r+0x42>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	1821      	adds	r1, r4, r0
 8007a00:	428b      	cmp	r3, r1
 8007a02:	bf01      	itttt	eq
 8007a04:	6819      	ldreq	r1, [r3, #0]
 8007a06:	685b      	ldreq	r3, [r3, #4]
 8007a08:	1809      	addeq	r1, r1, r0
 8007a0a:	6021      	streq	r1, [r4, #0]
 8007a0c:	e7ed      	b.n	80079ea <_free_r+0x1e>
 8007a0e:	461a      	mov	r2, r3
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	b10b      	cbz	r3, 8007a18 <_free_r+0x4c>
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	d9fa      	bls.n	8007a0e <_free_r+0x42>
 8007a18:	6811      	ldr	r1, [r2, #0]
 8007a1a:	1850      	adds	r0, r2, r1
 8007a1c:	42a0      	cmp	r0, r4
 8007a1e:	d10b      	bne.n	8007a38 <_free_r+0x6c>
 8007a20:	6820      	ldr	r0, [r4, #0]
 8007a22:	4401      	add	r1, r0
 8007a24:	1850      	adds	r0, r2, r1
 8007a26:	4283      	cmp	r3, r0
 8007a28:	6011      	str	r1, [r2, #0]
 8007a2a:	d1e0      	bne.n	80079ee <_free_r+0x22>
 8007a2c:	6818      	ldr	r0, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	6053      	str	r3, [r2, #4]
 8007a32:	4408      	add	r0, r1
 8007a34:	6010      	str	r0, [r2, #0]
 8007a36:	e7da      	b.n	80079ee <_free_r+0x22>
 8007a38:	d902      	bls.n	8007a40 <_free_r+0x74>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	602b      	str	r3, [r5, #0]
 8007a3e:	e7d6      	b.n	80079ee <_free_r+0x22>
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	1821      	adds	r1, r4, r0
 8007a44:	428b      	cmp	r3, r1
 8007a46:	bf04      	itt	eq
 8007a48:	6819      	ldreq	r1, [r3, #0]
 8007a4a:	685b      	ldreq	r3, [r3, #4]
 8007a4c:	6063      	str	r3, [r4, #4]
 8007a4e:	bf04      	itt	eq
 8007a50:	1809      	addeq	r1, r1, r0
 8007a52:	6021      	streq	r1, [r4, #0]
 8007a54:	6054      	str	r4, [r2, #4]
 8007a56:	e7ca      	b.n	80079ee <_free_r+0x22>
 8007a58:	bd38      	pop	{r3, r4, r5, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20001efc 	.word	0x20001efc

08007a60 <sbrk_aligned>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	4e0f      	ldr	r6, [pc, #60]	@ (8007aa0 <sbrk_aligned+0x40>)
 8007a64:	460c      	mov	r4, r1
 8007a66:	6831      	ldr	r1, [r6, #0]
 8007a68:	4605      	mov	r5, r0
 8007a6a:	b911      	cbnz	r1, 8007a72 <sbrk_aligned+0x12>
 8007a6c:	f000 fca4 	bl	80083b8 <_sbrk_r>
 8007a70:	6030      	str	r0, [r6, #0]
 8007a72:	4621      	mov	r1, r4
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 fc9f 	bl	80083b8 <_sbrk_r>
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	d103      	bne.n	8007a86 <sbrk_aligned+0x26>
 8007a7e:	f04f 34ff 	mov.w	r4, #4294967295
 8007a82:	4620      	mov	r0, r4
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
 8007a86:	1cc4      	adds	r4, r0, #3
 8007a88:	f024 0403 	bic.w	r4, r4, #3
 8007a8c:	42a0      	cmp	r0, r4
 8007a8e:	d0f8      	beq.n	8007a82 <sbrk_aligned+0x22>
 8007a90:	1a21      	subs	r1, r4, r0
 8007a92:	4628      	mov	r0, r5
 8007a94:	f000 fc90 	bl	80083b8 <_sbrk_r>
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d1f2      	bne.n	8007a82 <sbrk_aligned+0x22>
 8007a9c:	e7ef      	b.n	8007a7e <sbrk_aligned+0x1e>
 8007a9e:	bf00      	nop
 8007aa0:	20001ef8 	.word	0x20001ef8

08007aa4 <_malloc_r>:
 8007aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa8:	1ccd      	adds	r5, r1, #3
 8007aaa:	f025 0503 	bic.w	r5, r5, #3
 8007aae:	3508      	adds	r5, #8
 8007ab0:	2d0c      	cmp	r5, #12
 8007ab2:	bf38      	it	cc
 8007ab4:	250c      	movcc	r5, #12
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	4606      	mov	r6, r0
 8007aba:	db01      	blt.n	8007ac0 <_malloc_r+0x1c>
 8007abc:	42a9      	cmp	r1, r5
 8007abe:	d904      	bls.n	8007aca <_malloc_r+0x26>
 8007ac0:	230c      	movs	r3, #12
 8007ac2:	6033      	str	r3, [r6, #0]
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ba0 <_malloc_r+0xfc>
 8007ace:	f000 f869 	bl	8007ba4 <__malloc_lock>
 8007ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ad6:	461c      	mov	r4, r3
 8007ad8:	bb44      	cbnz	r4, 8007b2c <_malloc_r+0x88>
 8007ada:	4629      	mov	r1, r5
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff ffbf 	bl	8007a60 <sbrk_aligned>
 8007ae2:	1c43      	adds	r3, r0, #1
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	d158      	bne.n	8007b9a <_malloc_r+0xf6>
 8007ae8:	f8d8 4000 	ldr.w	r4, [r8]
 8007aec:	4627      	mov	r7, r4
 8007aee:	2f00      	cmp	r7, #0
 8007af0:	d143      	bne.n	8007b7a <_malloc_r+0xd6>
 8007af2:	2c00      	cmp	r4, #0
 8007af4:	d04b      	beq.n	8007b8e <_malloc_r+0xea>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	4639      	mov	r1, r7
 8007afa:	4630      	mov	r0, r6
 8007afc:	eb04 0903 	add.w	r9, r4, r3
 8007b00:	f000 fc5a 	bl	80083b8 <_sbrk_r>
 8007b04:	4581      	cmp	r9, r0
 8007b06:	d142      	bne.n	8007b8e <_malloc_r+0xea>
 8007b08:	6821      	ldr	r1, [r4, #0]
 8007b0a:	1a6d      	subs	r5, r5, r1
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7ff ffa6 	bl	8007a60 <sbrk_aligned>
 8007b14:	3001      	adds	r0, #1
 8007b16:	d03a      	beq.n	8007b8e <_malloc_r+0xea>
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	442b      	add	r3, r5
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	bb62      	cbnz	r2, 8007b80 <_malloc_r+0xdc>
 8007b26:	f8c8 7000 	str.w	r7, [r8]
 8007b2a:	e00f      	b.n	8007b4c <_malloc_r+0xa8>
 8007b2c:	6822      	ldr	r2, [r4, #0]
 8007b2e:	1b52      	subs	r2, r2, r5
 8007b30:	d420      	bmi.n	8007b74 <_malloc_r+0xd0>
 8007b32:	2a0b      	cmp	r2, #11
 8007b34:	d917      	bls.n	8007b66 <_malloc_r+0xc2>
 8007b36:	1961      	adds	r1, r4, r5
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	6025      	str	r5, [r4, #0]
 8007b3c:	bf18      	it	ne
 8007b3e:	6059      	strne	r1, [r3, #4]
 8007b40:	6863      	ldr	r3, [r4, #4]
 8007b42:	bf08      	it	eq
 8007b44:	f8c8 1000 	streq.w	r1, [r8]
 8007b48:	5162      	str	r2, [r4, r5]
 8007b4a:	604b      	str	r3, [r1, #4]
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f000 f82f 	bl	8007bb0 <__malloc_unlock>
 8007b52:	f104 000b 	add.w	r0, r4, #11
 8007b56:	1d23      	adds	r3, r4, #4
 8007b58:	f020 0007 	bic.w	r0, r0, #7
 8007b5c:	1ac2      	subs	r2, r0, r3
 8007b5e:	bf1c      	itt	ne
 8007b60:	1a1b      	subne	r3, r3, r0
 8007b62:	50a3      	strne	r3, [r4, r2]
 8007b64:	e7af      	b.n	8007ac6 <_malloc_r+0x22>
 8007b66:	6862      	ldr	r2, [r4, #4]
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	bf0c      	ite	eq
 8007b6c:	f8c8 2000 	streq.w	r2, [r8]
 8007b70:	605a      	strne	r2, [r3, #4]
 8007b72:	e7eb      	b.n	8007b4c <_malloc_r+0xa8>
 8007b74:	4623      	mov	r3, r4
 8007b76:	6864      	ldr	r4, [r4, #4]
 8007b78:	e7ae      	b.n	8007ad8 <_malloc_r+0x34>
 8007b7a:	463c      	mov	r4, r7
 8007b7c:	687f      	ldr	r7, [r7, #4]
 8007b7e:	e7b6      	b.n	8007aee <_malloc_r+0x4a>
 8007b80:	461a      	mov	r2, r3
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	42a3      	cmp	r3, r4
 8007b86:	d1fb      	bne.n	8007b80 <_malloc_r+0xdc>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	6053      	str	r3, [r2, #4]
 8007b8c:	e7de      	b.n	8007b4c <_malloc_r+0xa8>
 8007b8e:	230c      	movs	r3, #12
 8007b90:	6033      	str	r3, [r6, #0]
 8007b92:	4630      	mov	r0, r6
 8007b94:	f000 f80c 	bl	8007bb0 <__malloc_unlock>
 8007b98:	e794      	b.n	8007ac4 <_malloc_r+0x20>
 8007b9a:	6005      	str	r5, [r0, #0]
 8007b9c:	e7d6      	b.n	8007b4c <_malloc_r+0xa8>
 8007b9e:	bf00      	nop
 8007ba0:	20001efc 	.word	0x20001efc

08007ba4 <__malloc_lock>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	@ (8007bac <__malloc_lock+0x8>)
 8007ba6:	f7ff bf0e 	b.w	80079c6 <__retarget_lock_acquire_recursive>
 8007baa:	bf00      	nop
 8007bac:	20001ef4 	.word	0x20001ef4

08007bb0 <__malloc_unlock>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	@ (8007bb8 <__malloc_unlock+0x8>)
 8007bb2:	f7ff bf09 	b.w	80079c8 <__retarget_lock_release_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	20001ef4 	.word	0x20001ef4

08007bbc <__sfputc_r>:
 8007bbc:	6893      	ldr	r3, [r2, #8]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	b410      	push	{r4}
 8007bc4:	6093      	str	r3, [r2, #8]
 8007bc6:	da08      	bge.n	8007bda <__sfputc_r+0x1e>
 8007bc8:	6994      	ldr	r4, [r2, #24]
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	db01      	blt.n	8007bd2 <__sfputc_r+0x16>
 8007bce:	290a      	cmp	r1, #10
 8007bd0:	d103      	bne.n	8007bda <__sfputc_r+0x1e>
 8007bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd6:	f7ff bde8 	b.w	80077aa <__swbuf_r>
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	1c58      	adds	r0, r3, #1
 8007bde:	6010      	str	r0, [r2, #0]
 8007be0:	7019      	strb	r1, [r3, #0]
 8007be2:	4608      	mov	r0, r1
 8007be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <__sfputs_r>:
 8007bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bec:	4606      	mov	r6, r0
 8007bee:	460f      	mov	r7, r1
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	18d5      	adds	r5, r2, r3
 8007bf4:	42ac      	cmp	r4, r5
 8007bf6:	d101      	bne.n	8007bfc <__sfputs_r+0x12>
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	e007      	b.n	8007c0c <__sfputs_r+0x22>
 8007bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c00:	463a      	mov	r2, r7
 8007c02:	4630      	mov	r0, r6
 8007c04:	f7ff ffda 	bl	8007bbc <__sfputc_r>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d1f3      	bne.n	8007bf4 <__sfputs_r+0xa>
 8007c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c10 <_vfiprintf_r>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	460d      	mov	r5, r1
 8007c16:	b09d      	sub	sp, #116	@ 0x74
 8007c18:	4614      	mov	r4, r2
 8007c1a:	4698      	mov	r8, r3
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	b118      	cbz	r0, 8007c28 <_vfiprintf_r+0x18>
 8007c20:	6a03      	ldr	r3, [r0, #32]
 8007c22:	b90b      	cbnz	r3, 8007c28 <_vfiprintf_r+0x18>
 8007c24:	f7ff fcd8 	bl	80075d8 <__sinit>
 8007c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c2a:	07d9      	lsls	r1, r3, #31
 8007c2c:	d405      	bmi.n	8007c3a <_vfiprintf_r+0x2a>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	059a      	lsls	r2, r3, #22
 8007c32:	d402      	bmi.n	8007c3a <_vfiprintf_r+0x2a>
 8007c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c36:	f7ff fec6 	bl	80079c6 <__retarget_lock_acquire_recursive>
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	071b      	lsls	r3, r3, #28
 8007c3e:	d501      	bpl.n	8007c44 <_vfiprintf_r+0x34>
 8007c40:	692b      	ldr	r3, [r5, #16]
 8007c42:	b99b      	cbnz	r3, 8007c6c <_vfiprintf_r+0x5c>
 8007c44:	4629      	mov	r1, r5
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff fdee 	bl	8007828 <__swsetup_r>
 8007c4c:	b170      	cbz	r0, 8007c6c <_vfiprintf_r+0x5c>
 8007c4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c50:	07dc      	lsls	r4, r3, #31
 8007c52:	d504      	bpl.n	8007c5e <_vfiprintf_r+0x4e>
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	b01d      	add	sp, #116	@ 0x74
 8007c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5e:	89ab      	ldrh	r3, [r5, #12]
 8007c60:	0598      	lsls	r0, r3, #22
 8007c62:	d4f7      	bmi.n	8007c54 <_vfiprintf_r+0x44>
 8007c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c66:	f7ff feaf 	bl	80079c8 <__retarget_lock_release_recursive>
 8007c6a:	e7f3      	b.n	8007c54 <_vfiprintf_r+0x44>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c70:	2320      	movs	r3, #32
 8007c72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c7a:	2330      	movs	r3, #48	@ 0x30
 8007c7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e2c <_vfiprintf_r+0x21c>
 8007c80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c84:	f04f 0901 	mov.w	r9, #1
 8007c88:	4623      	mov	r3, r4
 8007c8a:	469a      	mov	sl, r3
 8007c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c90:	b10a      	cbz	r2, 8007c96 <_vfiprintf_r+0x86>
 8007c92:	2a25      	cmp	r2, #37	@ 0x25
 8007c94:	d1f9      	bne.n	8007c8a <_vfiprintf_r+0x7a>
 8007c96:	ebba 0b04 	subs.w	fp, sl, r4
 8007c9a:	d00b      	beq.n	8007cb4 <_vfiprintf_r+0xa4>
 8007c9c:	465b      	mov	r3, fp
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7ff ffa1 	bl	8007bea <__sfputs_r>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f000 80a7 	beq.w	8007dfc <_vfiprintf_r+0x1ec>
 8007cae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cb0:	445a      	add	r2, fp
 8007cb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 809f 	beq.w	8007dfc <_vfiprintf_r+0x1ec>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cc8:	f10a 0a01 	add.w	sl, sl, #1
 8007ccc:	9304      	str	r3, [sp, #16]
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cd6:	4654      	mov	r4, sl
 8007cd8:	2205      	movs	r2, #5
 8007cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cde:	4853      	ldr	r0, [pc, #332]	@ (8007e2c <_vfiprintf_r+0x21c>)
 8007ce0:	f7f8 fa7e 	bl	80001e0 <memchr>
 8007ce4:	9a04      	ldr	r2, [sp, #16]
 8007ce6:	b9d8      	cbnz	r0, 8007d20 <_vfiprintf_r+0x110>
 8007ce8:	06d1      	lsls	r1, r2, #27
 8007cea:	bf44      	itt	mi
 8007cec:	2320      	movmi	r3, #32
 8007cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cf2:	0713      	lsls	r3, r2, #28
 8007cf4:	bf44      	itt	mi
 8007cf6:	232b      	movmi	r3, #43	@ 0x2b
 8007cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d02:	d015      	beq.n	8007d30 <_vfiprintf_r+0x120>
 8007d04:	9a07      	ldr	r2, [sp, #28]
 8007d06:	4654      	mov	r4, sl
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f04f 0c0a 	mov.w	ip, #10
 8007d0e:	4621      	mov	r1, r4
 8007d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d14:	3b30      	subs	r3, #48	@ 0x30
 8007d16:	2b09      	cmp	r3, #9
 8007d18:	d94b      	bls.n	8007db2 <_vfiprintf_r+0x1a2>
 8007d1a:	b1b0      	cbz	r0, 8007d4a <_vfiprintf_r+0x13a>
 8007d1c:	9207      	str	r2, [sp, #28]
 8007d1e:	e014      	b.n	8007d4a <_vfiprintf_r+0x13a>
 8007d20:	eba0 0308 	sub.w	r3, r0, r8
 8007d24:	fa09 f303 	lsl.w	r3, r9, r3
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	9304      	str	r3, [sp, #16]
 8007d2c:	46a2      	mov	sl, r4
 8007d2e:	e7d2      	b.n	8007cd6 <_vfiprintf_r+0xc6>
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	1d19      	adds	r1, r3, #4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	9103      	str	r1, [sp, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bfbb      	ittet	lt
 8007d3c:	425b      	neglt	r3, r3
 8007d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d42:	9307      	strge	r3, [sp, #28]
 8007d44:	9307      	strlt	r3, [sp, #28]
 8007d46:	bfb8      	it	lt
 8007d48:	9204      	strlt	r2, [sp, #16]
 8007d4a:	7823      	ldrb	r3, [r4, #0]
 8007d4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d4e:	d10a      	bne.n	8007d66 <_vfiprintf_r+0x156>
 8007d50:	7863      	ldrb	r3, [r4, #1]
 8007d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d54:	d132      	bne.n	8007dbc <_vfiprintf_r+0x1ac>
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	1d1a      	adds	r2, r3, #4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	9203      	str	r2, [sp, #12]
 8007d5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d62:	3402      	adds	r4, #2
 8007d64:	9305      	str	r3, [sp, #20]
 8007d66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e3c <_vfiprintf_r+0x22c>
 8007d6a:	7821      	ldrb	r1, [r4, #0]
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	4650      	mov	r0, sl
 8007d70:	f7f8 fa36 	bl	80001e0 <memchr>
 8007d74:	b138      	cbz	r0, 8007d86 <_vfiprintf_r+0x176>
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	eba0 000a 	sub.w	r0, r0, sl
 8007d7c:	2240      	movs	r2, #64	@ 0x40
 8007d7e:	4082      	lsls	r2, r0
 8007d80:	4313      	orrs	r3, r2
 8007d82:	3401      	adds	r4, #1
 8007d84:	9304      	str	r3, [sp, #16]
 8007d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8a:	4829      	ldr	r0, [pc, #164]	@ (8007e30 <_vfiprintf_r+0x220>)
 8007d8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d90:	2206      	movs	r2, #6
 8007d92:	f7f8 fa25 	bl	80001e0 <memchr>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d03f      	beq.n	8007e1a <_vfiprintf_r+0x20a>
 8007d9a:	4b26      	ldr	r3, [pc, #152]	@ (8007e34 <_vfiprintf_r+0x224>)
 8007d9c:	bb1b      	cbnz	r3, 8007de6 <_vfiprintf_r+0x1d6>
 8007d9e:	9b03      	ldr	r3, [sp, #12]
 8007da0:	3307      	adds	r3, #7
 8007da2:	f023 0307 	bic.w	r3, r3, #7
 8007da6:	3308      	adds	r3, #8
 8007da8:	9303      	str	r3, [sp, #12]
 8007daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dac:	443b      	add	r3, r7
 8007dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8007db0:	e76a      	b.n	8007c88 <_vfiprintf_r+0x78>
 8007db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007db6:	460c      	mov	r4, r1
 8007db8:	2001      	movs	r0, #1
 8007dba:	e7a8      	b.n	8007d0e <_vfiprintf_r+0xfe>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	3401      	adds	r4, #1
 8007dc0:	9305      	str	r3, [sp, #20]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	f04f 0c0a 	mov.w	ip, #10
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dce:	3a30      	subs	r2, #48	@ 0x30
 8007dd0:	2a09      	cmp	r2, #9
 8007dd2:	d903      	bls.n	8007ddc <_vfiprintf_r+0x1cc>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0c6      	beq.n	8007d66 <_vfiprintf_r+0x156>
 8007dd8:	9105      	str	r1, [sp, #20]
 8007dda:	e7c4      	b.n	8007d66 <_vfiprintf_r+0x156>
 8007ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de0:	4604      	mov	r4, r0
 8007de2:	2301      	movs	r3, #1
 8007de4:	e7f0      	b.n	8007dc8 <_vfiprintf_r+0x1b8>
 8007de6:	ab03      	add	r3, sp, #12
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	462a      	mov	r2, r5
 8007dec:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <_vfiprintf_r+0x228>)
 8007dee:	a904      	add	r1, sp, #16
 8007df0:	4630      	mov	r0, r6
 8007df2:	f3af 8000 	nop.w
 8007df6:	4607      	mov	r7, r0
 8007df8:	1c78      	adds	r0, r7, #1
 8007dfa:	d1d6      	bne.n	8007daa <_vfiprintf_r+0x19a>
 8007dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dfe:	07d9      	lsls	r1, r3, #31
 8007e00:	d405      	bmi.n	8007e0e <_vfiprintf_r+0x1fe>
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	059a      	lsls	r2, r3, #22
 8007e06:	d402      	bmi.n	8007e0e <_vfiprintf_r+0x1fe>
 8007e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e0a:	f7ff fddd 	bl	80079c8 <__retarget_lock_release_recursive>
 8007e0e:	89ab      	ldrh	r3, [r5, #12]
 8007e10:	065b      	lsls	r3, r3, #25
 8007e12:	f53f af1f 	bmi.w	8007c54 <_vfiprintf_r+0x44>
 8007e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e18:	e71e      	b.n	8007c58 <_vfiprintf_r+0x48>
 8007e1a:	ab03      	add	r3, sp, #12
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	462a      	mov	r2, r5
 8007e20:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <_vfiprintf_r+0x228>)
 8007e22:	a904      	add	r1, sp, #16
 8007e24:	4630      	mov	r0, r6
 8007e26:	f000 f879 	bl	8007f1c <_printf_i>
 8007e2a:	e7e4      	b.n	8007df6 <_vfiprintf_r+0x1e6>
 8007e2c:	08008494 	.word	0x08008494
 8007e30:	0800849e 	.word	0x0800849e
 8007e34:	00000000 	.word	0x00000000
 8007e38:	08007beb 	.word	0x08007beb
 8007e3c:	0800849a 	.word	0x0800849a

08007e40 <_printf_common>:
 8007e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e44:	4616      	mov	r6, r2
 8007e46:	4698      	mov	r8, r3
 8007e48:	688a      	ldr	r2, [r1, #8]
 8007e4a:	690b      	ldr	r3, [r1, #16]
 8007e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e50:	4293      	cmp	r3, r2
 8007e52:	bfb8      	it	lt
 8007e54:	4613      	movlt	r3, r2
 8007e56:	6033      	str	r3, [r6, #0]
 8007e58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	b10a      	cbz	r2, 8007e66 <_printf_common+0x26>
 8007e62:	3301      	adds	r3, #1
 8007e64:	6033      	str	r3, [r6, #0]
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	0699      	lsls	r1, r3, #26
 8007e6a:	bf42      	ittt	mi
 8007e6c:	6833      	ldrmi	r3, [r6, #0]
 8007e6e:	3302      	addmi	r3, #2
 8007e70:	6033      	strmi	r3, [r6, #0]
 8007e72:	6825      	ldr	r5, [r4, #0]
 8007e74:	f015 0506 	ands.w	r5, r5, #6
 8007e78:	d106      	bne.n	8007e88 <_printf_common+0x48>
 8007e7a:	f104 0a19 	add.w	sl, r4, #25
 8007e7e:	68e3      	ldr	r3, [r4, #12]
 8007e80:	6832      	ldr	r2, [r6, #0]
 8007e82:	1a9b      	subs	r3, r3, r2
 8007e84:	42ab      	cmp	r3, r5
 8007e86:	dc26      	bgt.n	8007ed6 <_printf_common+0x96>
 8007e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e8c:	6822      	ldr	r2, [r4, #0]
 8007e8e:	3b00      	subs	r3, #0
 8007e90:	bf18      	it	ne
 8007e92:	2301      	movne	r3, #1
 8007e94:	0692      	lsls	r2, r2, #26
 8007e96:	d42b      	bmi.n	8007ef0 <_printf_common+0xb0>
 8007e98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	47c8      	blx	r9
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	d01e      	beq.n	8007ee4 <_printf_common+0xa4>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	6922      	ldr	r2, [r4, #16]
 8007eaa:	f003 0306 	and.w	r3, r3, #6
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	bf02      	ittt	eq
 8007eb2:	68e5      	ldreq	r5, [r4, #12]
 8007eb4:	6833      	ldreq	r3, [r6, #0]
 8007eb6:	1aed      	subeq	r5, r5, r3
 8007eb8:	68a3      	ldr	r3, [r4, #8]
 8007eba:	bf0c      	ite	eq
 8007ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ec0:	2500      	movne	r5, #0
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	bfc4      	itt	gt
 8007ec6:	1a9b      	subgt	r3, r3, r2
 8007ec8:	18ed      	addgt	r5, r5, r3
 8007eca:	2600      	movs	r6, #0
 8007ecc:	341a      	adds	r4, #26
 8007ece:	42b5      	cmp	r5, r6
 8007ed0:	d11a      	bne.n	8007f08 <_printf_common+0xc8>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e008      	b.n	8007ee8 <_printf_common+0xa8>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4652      	mov	r2, sl
 8007eda:	4641      	mov	r1, r8
 8007edc:	4638      	mov	r0, r7
 8007ede:	47c8      	blx	r9
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d103      	bne.n	8007eec <_printf_common+0xac>
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eec:	3501      	adds	r5, #1
 8007eee:	e7c6      	b.n	8007e7e <_printf_common+0x3e>
 8007ef0:	18e1      	adds	r1, r4, r3
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	2030      	movs	r0, #48	@ 0x30
 8007ef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007efa:	4422      	add	r2, r4
 8007efc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f04:	3302      	adds	r3, #2
 8007f06:	e7c7      	b.n	8007e98 <_printf_common+0x58>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	4641      	mov	r1, r8
 8007f0e:	4638      	mov	r0, r7
 8007f10:	47c8      	blx	r9
 8007f12:	3001      	adds	r0, #1
 8007f14:	d0e6      	beq.n	8007ee4 <_printf_common+0xa4>
 8007f16:	3601      	adds	r6, #1
 8007f18:	e7d9      	b.n	8007ece <_printf_common+0x8e>
	...

08007f1c <_printf_i>:
 8007f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	7e0f      	ldrb	r7, [r1, #24]
 8007f22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f24:	2f78      	cmp	r7, #120	@ 0x78
 8007f26:	4691      	mov	r9, r2
 8007f28:	4680      	mov	r8, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	469a      	mov	sl, r3
 8007f2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f32:	d807      	bhi.n	8007f44 <_printf_i+0x28>
 8007f34:	2f62      	cmp	r7, #98	@ 0x62
 8007f36:	d80a      	bhi.n	8007f4e <_printf_i+0x32>
 8007f38:	2f00      	cmp	r7, #0
 8007f3a:	f000 80d1 	beq.w	80080e0 <_printf_i+0x1c4>
 8007f3e:	2f58      	cmp	r7, #88	@ 0x58
 8007f40:	f000 80b8 	beq.w	80080b4 <_printf_i+0x198>
 8007f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f4c:	e03a      	b.n	8007fc4 <_printf_i+0xa8>
 8007f4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f52:	2b15      	cmp	r3, #21
 8007f54:	d8f6      	bhi.n	8007f44 <_printf_i+0x28>
 8007f56:	a101      	add	r1, pc, #4	@ (adr r1, 8007f5c <_printf_i+0x40>)
 8007f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f5c:	08007fb5 	.word	0x08007fb5
 8007f60:	08007fc9 	.word	0x08007fc9
 8007f64:	08007f45 	.word	0x08007f45
 8007f68:	08007f45 	.word	0x08007f45
 8007f6c:	08007f45 	.word	0x08007f45
 8007f70:	08007f45 	.word	0x08007f45
 8007f74:	08007fc9 	.word	0x08007fc9
 8007f78:	08007f45 	.word	0x08007f45
 8007f7c:	08007f45 	.word	0x08007f45
 8007f80:	08007f45 	.word	0x08007f45
 8007f84:	08007f45 	.word	0x08007f45
 8007f88:	080080c7 	.word	0x080080c7
 8007f8c:	08007ff3 	.word	0x08007ff3
 8007f90:	08008081 	.word	0x08008081
 8007f94:	08007f45 	.word	0x08007f45
 8007f98:	08007f45 	.word	0x08007f45
 8007f9c:	080080e9 	.word	0x080080e9
 8007fa0:	08007f45 	.word	0x08007f45
 8007fa4:	08007ff3 	.word	0x08007ff3
 8007fa8:	08007f45 	.word	0x08007f45
 8007fac:	08007f45 	.word	0x08007f45
 8007fb0:	08008089 	.word	0x08008089
 8007fb4:	6833      	ldr	r3, [r6, #0]
 8007fb6:	1d1a      	adds	r2, r3, #4
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6032      	str	r2, [r6, #0]
 8007fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e09c      	b.n	8008102 <_printf_i+0x1e6>
 8007fc8:	6833      	ldr	r3, [r6, #0]
 8007fca:	6820      	ldr	r0, [r4, #0]
 8007fcc:	1d19      	adds	r1, r3, #4
 8007fce:	6031      	str	r1, [r6, #0]
 8007fd0:	0606      	lsls	r6, r0, #24
 8007fd2:	d501      	bpl.n	8007fd8 <_printf_i+0xbc>
 8007fd4:	681d      	ldr	r5, [r3, #0]
 8007fd6:	e003      	b.n	8007fe0 <_printf_i+0xc4>
 8007fd8:	0645      	lsls	r5, r0, #25
 8007fda:	d5fb      	bpl.n	8007fd4 <_printf_i+0xb8>
 8007fdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fe0:	2d00      	cmp	r5, #0
 8007fe2:	da03      	bge.n	8007fec <_printf_i+0xd0>
 8007fe4:	232d      	movs	r3, #45	@ 0x2d
 8007fe6:	426d      	negs	r5, r5
 8007fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fec:	4858      	ldr	r0, [pc, #352]	@ (8008150 <_printf_i+0x234>)
 8007fee:	230a      	movs	r3, #10
 8007ff0:	e011      	b.n	8008016 <_printf_i+0xfa>
 8007ff2:	6821      	ldr	r1, [r4, #0]
 8007ff4:	6833      	ldr	r3, [r6, #0]
 8007ff6:	0608      	lsls	r0, r1, #24
 8007ff8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ffc:	d402      	bmi.n	8008004 <_printf_i+0xe8>
 8007ffe:	0649      	lsls	r1, r1, #25
 8008000:	bf48      	it	mi
 8008002:	b2ad      	uxthmi	r5, r5
 8008004:	2f6f      	cmp	r7, #111	@ 0x6f
 8008006:	4852      	ldr	r0, [pc, #328]	@ (8008150 <_printf_i+0x234>)
 8008008:	6033      	str	r3, [r6, #0]
 800800a:	bf14      	ite	ne
 800800c:	230a      	movne	r3, #10
 800800e:	2308      	moveq	r3, #8
 8008010:	2100      	movs	r1, #0
 8008012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008016:	6866      	ldr	r6, [r4, #4]
 8008018:	60a6      	str	r6, [r4, #8]
 800801a:	2e00      	cmp	r6, #0
 800801c:	db05      	blt.n	800802a <_printf_i+0x10e>
 800801e:	6821      	ldr	r1, [r4, #0]
 8008020:	432e      	orrs	r6, r5
 8008022:	f021 0104 	bic.w	r1, r1, #4
 8008026:	6021      	str	r1, [r4, #0]
 8008028:	d04b      	beq.n	80080c2 <_printf_i+0x1a6>
 800802a:	4616      	mov	r6, r2
 800802c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008030:	fb03 5711 	mls	r7, r3, r1, r5
 8008034:	5dc7      	ldrb	r7, [r0, r7]
 8008036:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800803a:	462f      	mov	r7, r5
 800803c:	42bb      	cmp	r3, r7
 800803e:	460d      	mov	r5, r1
 8008040:	d9f4      	bls.n	800802c <_printf_i+0x110>
 8008042:	2b08      	cmp	r3, #8
 8008044:	d10b      	bne.n	800805e <_printf_i+0x142>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	07df      	lsls	r7, r3, #31
 800804a:	d508      	bpl.n	800805e <_printf_i+0x142>
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	6861      	ldr	r1, [r4, #4]
 8008050:	4299      	cmp	r1, r3
 8008052:	bfde      	ittt	le
 8008054:	2330      	movle	r3, #48	@ 0x30
 8008056:	f806 3c01 	strble.w	r3, [r6, #-1]
 800805a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800805e:	1b92      	subs	r2, r2, r6
 8008060:	6122      	str	r2, [r4, #16]
 8008062:	f8cd a000 	str.w	sl, [sp]
 8008066:	464b      	mov	r3, r9
 8008068:	aa03      	add	r2, sp, #12
 800806a:	4621      	mov	r1, r4
 800806c:	4640      	mov	r0, r8
 800806e:	f7ff fee7 	bl	8007e40 <_printf_common>
 8008072:	3001      	adds	r0, #1
 8008074:	d14a      	bne.n	800810c <_printf_i+0x1f0>
 8008076:	f04f 30ff 	mov.w	r0, #4294967295
 800807a:	b004      	add	sp, #16
 800807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	f043 0320 	orr.w	r3, r3, #32
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	4832      	ldr	r0, [pc, #200]	@ (8008154 <_printf_i+0x238>)
 800808a:	2778      	movs	r7, #120	@ 0x78
 800808c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	6831      	ldr	r1, [r6, #0]
 8008094:	061f      	lsls	r7, r3, #24
 8008096:	f851 5b04 	ldr.w	r5, [r1], #4
 800809a:	d402      	bmi.n	80080a2 <_printf_i+0x186>
 800809c:	065f      	lsls	r7, r3, #25
 800809e:	bf48      	it	mi
 80080a0:	b2ad      	uxthmi	r5, r5
 80080a2:	6031      	str	r1, [r6, #0]
 80080a4:	07d9      	lsls	r1, r3, #31
 80080a6:	bf44      	itt	mi
 80080a8:	f043 0320 	orrmi.w	r3, r3, #32
 80080ac:	6023      	strmi	r3, [r4, #0]
 80080ae:	b11d      	cbz	r5, 80080b8 <_printf_i+0x19c>
 80080b0:	2310      	movs	r3, #16
 80080b2:	e7ad      	b.n	8008010 <_printf_i+0xf4>
 80080b4:	4826      	ldr	r0, [pc, #152]	@ (8008150 <_printf_i+0x234>)
 80080b6:	e7e9      	b.n	800808c <_printf_i+0x170>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	f023 0320 	bic.w	r3, r3, #32
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	e7f6      	b.n	80080b0 <_printf_i+0x194>
 80080c2:	4616      	mov	r6, r2
 80080c4:	e7bd      	b.n	8008042 <_printf_i+0x126>
 80080c6:	6833      	ldr	r3, [r6, #0]
 80080c8:	6825      	ldr	r5, [r4, #0]
 80080ca:	6961      	ldr	r1, [r4, #20]
 80080cc:	1d18      	adds	r0, r3, #4
 80080ce:	6030      	str	r0, [r6, #0]
 80080d0:	062e      	lsls	r6, r5, #24
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	d501      	bpl.n	80080da <_printf_i+0x1be>
 80080d6:	6019      	str	r1, [r3, #0]
 80080d8:	e002      	b.n	80080e0 <_printf_i+0x1c4>
 80080da:	0668      	lsls	r0, r5, #25
 80080dc:	d5fb      	bpl.n	80080d6 <_printf_i+0x1ba>
 80080de:	8019      	strh	r1, [r3, #0]
 80080e0:	2300      	movs	r3, #0
 80080e2:	6123      	str	r3, [r4, #16]
 80080e4:	4616      	mov	r6, r2
 80080e6:	e7bc      	b.n	8008062 <_printf_i+0x146>
 80080e8:	6833      	ldr	r3, [r6, #0]
 80080ea:	1d1a      	adds	r2, r3, #4
 80080ec:	6032      	str	r2, [r6, #0]
 80080ee:	681e      	ldr	r6, [r3, #0]
 80080f0:	6862      	ldr	r2, [r4, #4]
 80080f2:	2100      	movs	r1, #0
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7f8 f873 	bl	80001e0 <memchr>
 80080fa:	b108      	cbz	r0, 8008100 <_printf_i+0x1e4>
 80080fc:	1b80      	subs	r0, r0, r6
 80080fe:	6060      	str	r0, [r4, #4]
 8008100:	6863      	ldr	r3, [r4, #4]
 8008102:	6123      	str	r3, [r4, #16]
 8008104:	2300      	movs	r3, #0
 8008106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800810a:	e7aa      	b.n	8008062 <_printf_i+0x146>
 800810c:	6923      	ldr	r3, [r4, #16]
 800810e:	4632      	mov	r2, r6
 8008110:	4649      	mov	r1, r9
 8008112:	4640      	mov	r0, r8
 8008114:	47d0      	blx	sl
 8008116:	3001      	adds	r0, #1
 8008118:	d0ad      	beq.n	8008076 <_printf_i+0x15a>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	079b      	lsls	r3, r3, #30
 800811e:	d413      	bmi.n	8008148 <_printf_i+0x22c>
 8008120:	68e0      	ldr	r0, [r4, #12]
 8008122:	9b03      	ldr	r3, [sp, #12]
 8008124:	4298      	cmp	r0, r3
 8008126:	bfb8      	it	lt
 8008128:	4618      	movlt	r0, r3
 800812a:	e7a6      	b.n	800807a <_printf_i+0x15e>
 800812c:	2301      	movs	r3, #1
 800812e:	4632      	mov	r2, r6
 8008130:	4649      	mov	r1, r9
 8008132:	4640      	mov	r0, r8
 8008134:	47d0      	blx	sl
 8008136:	3001      	adds	r0, #1
 8008138:	d09d      	beq.n	8008076 <_printf_i+0x15a>
 800813a:	3501      	adds	r5, #1
 800813c:	68e3      	ldr	r3, [r4, #12]
 800813e:	9903      	ldr	r1, [sp, #12]
 8008140:	1a5b      	subs	r3, r3, r1
 8008142:	42ab      	cmp	r3, r5
 8008144:	dcf2      	bgt.n	800812c <_printf_i+0x210>
 8008146:	e7eb      	b.n	8008120 <_printf_i+0x204>
 8008148:	2500      	movs	r5, #0
 800814a:	f104 0619 	add.w	r6, r4, #25
 800814e:	e7f5      	b.n	800813c <_printf_i+0x220>
 8008150:	080084a5 	.word	0x080084a5
 8008154:	080084b6 	.word	0x080084b6

08008158 <__sflush_r>:
 8008158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	0716      	lsls	r6, r2, #28
 8008162:	4605      	mov	r5, r0
 8008164:	460c      	mov	r4, r1
 8008166:	d454      	bmi.n	8008212 <__sflush_r+0xba>
 8008168:	684b      	ldr	r3, [r1, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dc02      	bgt.n	8008174 <__sflush_r+0x1c>
 800816e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	dd48      	ble.n	8008206 <__sflush_r+0xae>
 8008174:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008176:	2e00      	cmp	r6, #0
 8008178:	d045      	beq.n	8008206 <__sflush_r+0xae>
 800817a:	2300      	movs	r3, #0
 800817c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008180:	682f      	ldr	r7, [r5, #0]
 8008182:	6a21      	ldr	r1, [r4, #32]
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	d030      	beq.n	80081ea <__sflush_r+0x92>
 8008188:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	0759      	lsls	r1, r3, #29
 800818e:	d505      	bpl.n	800819c <__sflush_r+0x44>
 8008190:	6863      	ldr	r3, [r4, #4]
 8008192:	1ad2      	subs	r2, r2, r3
 8008194:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008196:	b10b      	cbz	r3, 800819c <__sflush_r+0x44>
 8008198:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	2300      	movs	r3, #0
 800819e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081a0:	6a21      	ldr	r1, [r4, #32]
 80081a2:	4628      	mov	r0, r5
 80081a4:	47b0      	blx	r6
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	d106      	bne.n	80081ba <__sflush_r+0x62>
 80081ac:	6829      	ldr	r1, [r5, #0]
 80081ae:	291d      	cmp	r1, #29
 80081b0:	d82b      	bhi.n	800820a <__sflush_r+0xb2>
 80081b2:	4a2a      	ldr	r2, [pc, #168]	@ (800825c <__sflush_r+0x104>)
 80081b4:	40ca      	lsrs	r2, r1
 80081b6:	07d6      	lsls	r6, r2, #31
 80081b8:	d527      	bpl.n	800820a <__sflush_r+0xb2>
 80081ba:	2200      	movs	r2, #0
 80081bc:	6062      	str	r2, [r4, #4]
 80081be:	04d9      	lsls	r1, r3, #19
 80081c0:	6922      	ldr	r2, [r4, #16]
 80081c2:	6022      	str	r2, [r4, #0]
 80081c4:	d504      	bpl.n	80081d0 <__sflush_r+0x78>
 80081c6:	1c42      	adds	r2, r0, #1
 80081c8:	d101      	bne.n	80081ce <__sflush_r+0x76>
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	b903      	cbnz	r3, 80081d0 <__sflush_r+0x78>
 80081ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80081d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081d2:	602f      	str	r7, [r5, #0]
 80081d4:	b1b9      	cbz	r1, 8008206 <__sflush_r+0xae>
 80081d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081da:	4299      	cmp	r1, r3
 80081dc:	d002      	beq.n	80081e4 <__sflush_r+0x8c>
 80081de:	4628      	mov	r0, r5
 80081e0:	f7ff fbf4 	bl	80079cc <_free_r>
 80081e4:	2300      	movs	r3, #0
 80081e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80081e8:	e00d      	b.n	8008206 <__sflush_r+0xae>
 80081ea:	2301      	movs	r3, #1
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b0      	blx	r6
 80081f0:	4602      	mov	r2, r0
 80081f2:	1c50      	adds	r0, r2, #1
 80081f4:	d1c9      	bne.n	800818a <__sflush_r+0x32>
 80081f6:	682b      	ldr	r3, [r5, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0c6      	beq.n	800818a <__sflush_r+0x32>
 80081fc:	2b1d      	cmp	r3, #29
 80081fe:	d001      	beq.n	8008204 <__sflush_r+0xac>
 8008200:	2b16      	cmp	r3, #22
 8008202:	d11e      	bne.n	8008242 <__sflush_r+0xea>
 8008204:	602f      	str	r7, [r5, #0]
 8008206:	2000      	movs	r0, #0
 8008208:	e022      	b.n	8008250 <__sflush_r+0xf8>
 800820a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800820e:	b21b      	sxth	r3, r3
 8008210:	e01b      	b.n	800824a <__sflush_r+0xf2>
 8008212:	690f      	ldr	r7, [r1, #16]
 8008214:	2f00      	cmp	r7, #0
 8008216:	d0f6      	beq.n	8008206 <__sflush_r+0xae>
 8008218:	0793      	lsls	r3, r2, #30
 800821a:	680e      	ldr	r6, [r1, #0]
 800821c:	bf08      	it	eq
 800821e:	694b      	ldreq	r3, [r1, #20]
 8008220:	600f      	str	r7, [r1, #0]
 8008222:	bf18      	it	ne
 8008224:	2300      	movne	r3, #0
 8008226:	eba6 0807 	sub.w	r8, r6, r7
 800822a:	608b      	str	r3, [r1, #8]
 800822c:	f1b8 0f00 	cmp.w	r8, #0
 8008230:	dde9      	ble.n	8008206 <__sflush_r+0xae>
 8008232:	6a21      	ldr	r1, [r4, #32]
 8008234:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008236:	4643      	mov	r3, r8
 8008238:	463a      	mov	r2, r7
 800823a:	4628      	mov	r0, r5
 800823c:	47b0      	blx	r6
 800823e:	2800      	cmp	r0, #0
 8008240:	dc08      	bgt.n	8008254 <__sflush_r+0xfc>
 8008242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800824a:	81a3      	strh	r3, [r4, #12]
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008254:	4407      	add	r7, r0
 8008256:	eba8 0800 	sub.w	r8, r8, r0
 800825a:	e7e7      	b.n	800822c <__sflush_r+0xd4>
 800825c:	20400001 	.word	0x20400001

08008260 <_fflush_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	690b      	ldr	r3, [r1, #16]
 8008264:	4605      	mov	r5, r0
 8008266:	460c      	mov	r4, r1
 8008268:	b913      	cbnz	r3, 8008270 <_fflush_r+0x10>
 800826a:	2500      	movs	r5, #0
 800826c:	4628      	mov	r0, r5
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	b118      	cbz	r0, 800827a <_fflush_r+0x1a>
 8008272:	6a03      	ldr	r3, [r0, #32]
 8008274:	b90b      	cbnz	r3, 800827a <_fflush_r+0x1a>
 8008276:	f7ff f9af 	bl	80075d8 <__sinit>
 800827a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0f3      	beq.n	800826a <_fflush_r+0xa>
 8008282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008284:	07d0      	lsls	r0, r2, #31
 8008286:	d404      	bmi.n	8008292 <_fflush_r+0x32>
 8008288:	0599      	lsls	r1, r3, #22
 800828a:	d402      	bmi.n	8008292 <_fflush_r+0x32>
 800828c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800828e:	f7ff fb9a 	bl	80079c6 <__retarget_lock_acquire_recursive>
 8008292:	4628      	mov	r0, r5
 8008294:	4621      	mov	r1, r4
 8008296:	f7ff ff5f 	bl	8008158 <__sflush_r>
 800829a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800829c:	07da      	lsls	r2, r3, #31
 800829e:	4605      	mov	r5, r0
 80082a0:	d4e4      	bmi.n	800826c <_fflush_r+0xc>
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	059b      	lsls	r3, r3, #22
 80082a6:	d4e1      	bmi.n	800826c <_fflush_r+0xc>
 80082a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082aa:	f7ff fb8d 	bl	80079c8 <__retarget_lock_release_recursive>
 80082ae:	e7dd      	b.n	800826c <_fflush_r+0xc>

080082b0 <__swhatbuf_r>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	460c      	mov	r4, r1
 80082b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b8:	2900      	cmp	r1, #0
 80082ba:	b096      	sub	sp, #88	@ 0x58
 80082bc:	4615      	mov	r5, r2
 80082be:	461e      	mov	r6, r3
 80082c0:	da0d      	bge.n	80082de <__swhatbuf_r+0x2e>
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082c8:	f04f 0100 	mov.w	r1, #0
 80082cc:	bf14      	ite	ne
 80082ce:	2340      	movne	r3, #64	@ 0x40
 80082d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082d4:	2000      	movs	r0, #0
 80082d6:	6031      	str	r1, [r6, #0]
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	b016      	add	sp, #88	@ 0x58
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
 80082de:	466a      	mov	r2, sp
 80082e0:	f000 f848 	bl	8008374 <_fstat_r>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	dbec      	blt.n	80082c2 <__swhatbuf_r+0x12>
 80082e8:	9901      	ldr	r1, [sp, #4]
 80082ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082f2:	4259      	negs	r1, r3
 80082f4:	4159      	adcs	r1, r3
 80082f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082fa:	e7eb      	b.n	80082d4 <__swhatbuf_r+0x24>

080082fc <__smakebuf_r>:
 80082fc:	898b      	ldrh	r3, [r1, #12]
 80082fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008300:	079d      	lsls	r5, r3, #30
 8008302:	4606      	mov	r6, r0
 8008304:	460c      	mov	r4, r1
 8008306:	d507      	bpl.n	8008318 <__smakebuf_r+0x1c>
 8008308:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	2301      	movs	r3, #1
 8008312:	6163      	str	r3, [r4, #20]
 8008314:	b003      	add	sp, #12
 8008316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008318:	ab01      	add	r3, sp, #4
 800831a:	466a      	mov	r2, sp
 800831c:	f7ff ffc8 	bl	80082b0 <__swhatbuf_r>
 8008320:	9f00      	ldr	r7, [sp, #0]
 8008322:	4605      	mov	r5, r0
 8008324:	4639      	mov	r1, r7
 8008326:	4630      	mov	r0, r6
 8008328:	f7ff fbbc 	bl	8007aa4 <_malloc_r>
 800832c:	b948      	cbnz	r0, 8008342 <__smakebuf_r+0x46>
 800832e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008332:	059a      	lsls	r2, r3, #22
 8008334:	d4ee      	bmi.n	8008314 <__smakebuf_r+0x18>
 8008336:	f023 0303 	bic.w	r3, r3, #3
 800833a:	f043 0302 	orr.w	r3, r3, #2
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	e7e2      	b.n	8008308 <__smakebuf_r+0xc>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	6020      	str	r0, [r4, #0]
 8008346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800834a:	81a3      	strh	r3, [r4, #12]
 800834c:	9b01      	ldr	r3, [sp, #4]
 800834e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008352:	b15b      	cbz	r3, 800836c <__smakebuf_r+0x70>
 8008354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008358:	4630      	mov	r0, r6
 800835a:	f000 f81d 	bl	8008398 <_isatty_r>
 800835e:	b128      	cbz	r0, 800836c <__smakebuf_r+0x70>
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	f023 0303 	bic.w	r3, r3, #3
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	431d      	orrs	r5, r3
 8008370:	81a5      	strh	r5, [r4, #12]
 8008372:	e7cf      	b.n	8008314 <__smakebuf_r+0x18>

08008374 <_fstat_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4d07      	ldr	r5, [pc, #28]	@ (8008394 <_fstat_r+0x20>)
 8008378:	2300      	movs	r3, #0
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	4611      	mov	r1, r2
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	f7f8 fb06 	bl	8000992 <_fstat>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d102      	bne.n	8008390 <_fstat_r+0x1c>
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	b103      	cbz	r3, 8008390 <_fstat_r+0x1c>
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	bd38      	pop	{r3, r4, r5, pc}
 8008392:	bf00      	nop
 8008394:	20001ef0 	.word	0x20001ef0

08008398 <_isatty_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d06      	ldr	r5, [pc, #24]	@ (80083b4 <_isatty_r+0x1c>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f8 fb05 	bl	80009b2 <_isatty>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_isatty_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_isatty_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20001ef0 	.word	0x20001ef0

080083b8 <_sbrk_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	@ (80083d4 <_sbrk_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7f8 fb0e 	bl	80009e4 <_sbrk>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_sbrk_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_sbrk_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20001ef0 	.word	0x20001ef0

080083d8 <_init>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr

080083e4 <_fini>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	bf00      	nop
 80083e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	469e      	mov	lr, r3
 80083ee:	4770      	bx	lr
