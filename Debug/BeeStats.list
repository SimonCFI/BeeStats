
BeeStats.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08006348  08006348  00007348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006714  08006714  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006714  08006714  00007714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800671c  0800671c  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800671c  0800671c  0000771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006720  08006720  00007720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006724  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001d4  080068f8  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080068f8  00008458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9ee  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f27  00000000  00000000  00015bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00017b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1a  00000000  00000000  00018810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ba8  00000000  00000000  0001922a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010022  00000000  00000000  0001bdd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919da  00000000  00000000  0002bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd7ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  000bd814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c1ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006330 	.word	0x08006330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006330 	.word	0x08006330

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b08c      	sub	sp, #48	@ 0x30
 8000ee8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fc49 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f839 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 f989 	bl	8001208 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef6:	f000 f89f 	bl	8001038 <MX_I2C1_Init>
  MX_RTC_Init();
 8000efa:	f000 f8cb 	bl	8001094 <MX_RTC_Init>
  MX_SPI1_Init();
 8000efe:	f000 f923 	bl	8001148 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f02:	f000 f957 	bl	80011b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;

  int counter = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while(1){
	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	4812      	ldr	r0, [pc, #72]	@ (8000f5c <main+0x78>)
 8000f14:	f001 fef5 	bl	8002d02 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);  // Muss nach GetTime!
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <main+0x78>)
 8000f20:	f001 ffd1 	bl	8002ec6 <HAL_RTC_GetDate>

	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
	         counter,
			 currentTime.Hours,
 8000f24:	7a3b      	ldrb	r3, [r7, #8]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f26:	461c      	mov	r4, r3
	         currentTime.Minutes,
 8000f28:	7a7b      	ldrb	r3, [r7, #9]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f2a:	461d      	mov	r5, r3
	         currentTime.Seconds,
 8000f2c:	7abb      	ldrb	r3, [r7, #10]
	         currentDate.Date,
 8000f2e:	79ba      	ldrb	r2, [r7, #6]
	         currentDate.Month,
 8000f30:	7979      	ldrb	r1, [r7, #5]
	         currentDate.Year);
 8000f32:	79f8      	ldrb	r0, [r7, #7]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f34:	9003      	str	r0, [sp, #12]
 8000f36:	9102      	str	r1, [sp, #8]
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	462b      	mov	r3, r5
 8000f3e:	4622      	mov	r2, r4
 8000f40:	69f9      	ldr	r1, [r7, #28]
 8000f42:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <main+0x7c>)
 8000f44:	f003 fa78 	bl	8004438 <iprintf>
	  counter++;
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
	  HAL_Delay(1000);  // Ausgabe alle 1s
 8000f4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f52:	f000 fc87 	bl	8001864 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000f56:	bf00      	nop
 8000f58:	e7d7      	b.n	8000f0a <main+0x26>
 8000f5a:	bf00      	nop
 8000f5c:	20000244 	.word	0x20000244
 8000f60:	08006348 	.word	0x08006348

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	@ 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 fab5 	bl	80044e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fc0:	2309      	movs	r3, #9
 8000fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fd8:	2319      	movs	r3, #25
 8000fda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fdc:	23c0      	movs	r3, #192	@ 0xc0
 8000fde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 f825 	bl	800203c <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ff8:	f000 f97a 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2103      	movs	r1, #3
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fa87 	bl	800252c <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001024:	f000 f964 	bl	80012f0 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3750      	adds	r7, #80	@ 0x50
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_I2C1_Init+0x50>)
 800103e:	4a13      	ldr	r2, [pc, #76]	@ (800108c <MX_I2C1_Init+0x54>)
 8001040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001044:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_I2C1_Init+0x58>)
 8001046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001056:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800105a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001076:	f000 fe9d 	bl	8001db4 <HAL_I2C_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 f936 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001f0 	.word	0x200001f0
 800108c:	40005400 	.word	0x40005400
 8001090:	000186a0 	.word	0x000186a0

08001094 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010a8:	2300      	movs	r3, #0
 80010aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_RTC_Init+0xac>)
 80010ae:	4a25      	ldr	r2, [pc, #148]	@ (8001144 <MX_RTC_Init+0xb0>)
 80010b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_RTC_Init+0xac>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_RTC_Init+0xac>)
 80010ba:	227f      	movs	r2, #127	@ 0x7f
 80010bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <MX_RTC_Init+0xac>)
 80010c0:	22ff      	movs	r2, #255	@ 0xff
 80010c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <MX_RTC_Init+0xac>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_RTC_Init+0xac>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_RTC_Init+0xac>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010d6:	481a      	ldr	r0, [pc, #104]	@ (8001140 <MX_RTC_Init+0xac>)
 80010d8:	f001 fcf8 	bl	8002acc <HAL_RTC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 f905 	bl	80012f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	480f      	ldr	r0, [pc, #60]	@ (8001140 <MX_RTC_Init+0xac>)
 8001102:	f001 fd64 	bl	8002bce <HAL_RTC_SetTime>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 f8f0 	bl	80012f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001110:	2301      	movs	r3, #1
 8001112:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001114:	2301      	movs	r3, #1
 8001116:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001118:	2301      	movs	r3, #1
 800111a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800111c:	2300      	movs	r3, #0
 800111e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001120:	463b      	mov	r3, r7
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_RTC_Init+0xac>)
 8001128:	f001 fe49 	bl	8002dbe <HAL_RTC_SetDate>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001132:	f000 f8dd 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000244 	.word	0x20000244
 8001144:	40002800 	.word	0x40002800

08001148 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_SPI1_Init+0x64>)
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <MX_SPI1_Init+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001154:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001158:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001178:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001194:	220a      	movs	r2, #10
 8001196:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_SPI1_Init+0x64>)
 800119a:	f001 ffa1 	bl	80030e0 <HAL_SPI_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011a4:	f000 f8a4 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000264 	.word	0x20000264
 80011b0:	40013000 	.word	0x40013000

080011b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <MX_USART1_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ec:	f002 f801 	bl	80031f2 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 f87b 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200002bc 	.word	0x200002bc
 8001204:	40011000 	.word	0x40011000

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <MX_GPIO_Init+0xb4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a25      	ldr	r2, [pc, #148]	@ (80012bc <MX_GPIO_Init+0xb4>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <MX_GPIO_Init+0xb4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <MX_GPIO_Init+0xb4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <MX_GPIO_Init+0xb4>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <MX_GPIO_Init+0xb4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <MX_GPIO_Init+0xb4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a17      	ldr	r2, [pc, #92]	@ (80012bc <MX_GPIO_Init+0xb4>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <MX_GPIO_Init+0xb4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_GPIO_Init+0xb4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a10      	ldr	r2, [pc, #64]	@ (80012bc <MX_GPIO_Init+0xb4>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_GPIO_Init+0xb4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAM_GPIO_Port, FRAM_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2110      	movs	r1, #16
 8001292:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <MX_GPIO_Init+0xb8>)
 8001294:	f000 fd74 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FRAM_Pin */
  GPIO_InitStruct.Pin = FRAM_Pin;
 8001298:	2310      	movs	r3, #16
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRAM_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_GPIO_Init+0xb8>)
 80012b0:	f000 fbe2 	bl	8001a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000

080012c4 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	4804      	ldr	r0, [pc, #16]	@ (80012ec <_write+0x28>)
 80012dc:	f001 ffd9 	bl	8003292 <HAL_UART_Transmit>
    return len;}
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002bc 	.word	0x200002bc

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <Error_Handler+0x8>

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	@ 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_I2C_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12b      	bne.n	80013c6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800138a:	23c0      	movs	r3, #192	@ 0xc0
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138e:	2312      	movs	r3, #18
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139a:	2304      	movs	r3, #4
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <HAL_I2C_MspInit+0x8c>)
 80013a6:	f000 fb67 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	@ 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40005400 	.word	0x40005400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a0c      	ldr	r2, [pc, #48]	@ (800142c <HAL_RTC_MspInit+0x50>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d111      	bne.n	8001424 <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001400:	2302      	movs	r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001404:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001408:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fa6c 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800141a:	f7ff ff69 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <HAL_RTC_MspInit+0x54>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40002800 	.word	0x40002800
 8001430:	42470e3c 	.word	0x42470e3c

08001434 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a19      	ldr	r2, [pc, #100]	@ (80014b8 <HAL_SPI_MspInit+0x84>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d12b      	bne.n	80014ae <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_SPI_MspInit+0x88>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	4a17      	ldr	r2, [pc, #92]	@ (80014bc <HAL_SPI_MspInit+0x88>)
 8001460:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001464:	6453      	str	r3, [r2, #68]	@ 0x44
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <HAL_SPI_MspInit+0x88>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_SPI_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <HAL_SPI_MspInit+0x88>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_SPI_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800148e:	23e0      	movs	r3, #224	@ 0xe0
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800149e:	2305      	movs	r3, #5
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <HAL_SPI_MspInit+0x8c>)
 80014aa:	f000 fae5 	bl	8001a78 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	@ 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40013000 	.word	0x40013000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000

080014c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a19      	ldr	r2, [pc, #100]	@ (8001548 <HAL_UART_MspInit+0x84>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12c      	bne.n	8001540 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_UART_MspInit+0x88>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	4a17      	ldr	r2, [pc, #92]	@ (800154c <HAL_UART_MspInit+0x88>)
 80014f0:	f043 0310 	orr.w	r3, r3, #16
 80014f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_UART_MspInit+0x88>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <HAL_UART_MspInit+0x88>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a10      	ldr	r2, [pc, #64]	@ (800154c <HAL_UART_MspInit+0x88>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <HAL_UART_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800151e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001530:	2307      	movs	r3, #7
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <HAL_UART_MspInit+0x8c>)
 800153c:	f000 fa9c 	bl	8001a78 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	@ 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40011000 	.word	0x40011000
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <NMI_Handler+0x4>

0800155c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <MemManage_Handler+0x4>

0800156c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <UsageFault_Handler+0x4>

0800157c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015aa:	f000 f93b 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  return 1;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_kill>:

int _kill(int pid, int sig)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015cc:	f002 ffdc 	bl	8004588 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2216      	movs	r2, #22
 80015d4:	601a      	str	r2, [r3, #0]
  return -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_exit>:

void _exit (int status)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ea:	f04f 31ff 	mov.w	r1, #4294967295
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffe7 	bl	80015c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <_exit+0x12>

080015f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	e00a      	b.n	8001620 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800160a:	f3af 8000 	nop.w
 800160e:	4601      	mov	r1, r0
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	60ba      	str	r2, [r7, #8]
 8001616:	b2ca      	uxtb	r2, r1
 8001618:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	dbf0      	blt.n	800160a <_read+0x12>
  }

  return len;
 8001628:	687b      	ldr	r3, [r7, #4]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800165a:	605a      	str	r2, [r3, #4]
  return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_isatty>:

int _isatty(int file)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f002 ff5c 	bl	8004588 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20020000 	.word	0x20020000
 80016fc:	00000400 	.word	0x00000400
 8001700:	20000304 	.word	0x20000304
 8001704:	20000458 	.word	0x20000458

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001764 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001730:	f7ff ffea 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	@ (800176c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	@ (8001778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f002 ff1b 	bl	8004594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff fbc1 	bl	8000ee4 <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001770:	08006724 	.word	0x08006724
  ldr r2, =_sbss
 8001774:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001778:	20000458 	.word	0x20000458

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f931 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fda2 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f93b 	bl	8001a5e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f911 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000000 	.word	0x20000000
 800181c:	20000008 	.word	0x20000008
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	20000308 	.word	0x20000308

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000308 	.word	0x20000308

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff ffee 	bl	800184c <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffde 	bl	800184c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	@ (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	@ (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff47 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff5c 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb0 	bl	80019cc <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e159      	b.n	8001d48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8148 	bne.w	8001d42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a2 	beq.w	8001d42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b57      	ldr	r3, [pc, #348]	@ (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	4a56      	ldr	r2, [pc, #344]	@ (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0e:	4b54      	ldr	r3, [pc, #336]	@ (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a52      	ldr	r2, [pc, #328]	@ (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a49      	ldr	r2, [pc, #292]	@ (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_Init+0x202>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a48      	ldr	r2, [pc, #288]	@ (8001d6c <HAL_GPIO_Init+0x2f4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0x1fe>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a47      	ldr	r2, [pc, #284]	@ (8001d70 <HAL_GPIO_Init+0x2f8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_Init+0x1fa>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a46      	ldr	r2, [pc, #280]	@ (8001d74 <HAL_GPIO_Init+0x2fc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_Init+0x1f6>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a45      	ldr	r2, [pc, #276]	@ (8001d78 <HAL_GPIO_Init+0x300>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_GPIO_Init+0x1f2>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	@ (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b38      	ldr	r3, [pc, #224]	@ (8001d7c <HAL_GPIO_Init+0x304>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8001d7c <HAL_GPIO_Init+0x304>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <HAL_GPIO_Init+0x304>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a24      	ldr	r2, [pc, #144]	@ (8001d7c <HAL_GPIO_Init+0x304>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cee:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <HAL_GPIO_Init+0x304>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d12:	4a1a      	ldr	r2, [pc, #104]	@ (8001d7c <HAL_GPIO_Init+0x304>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d18:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <HAL_GPIO_Init+0x304>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d7c <HAL_GPIO_Init+0x304>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f aea2 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40013c00 	.word	0x40013c00

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e12b      	b.n	800201e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fab6 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	@ 0x24
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e18:	f000 fd40 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8001e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a81      	ldr	r2, [pc, #516]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d807      	bhi.n	8001e38 <HAL_I2C_Init+0x84>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a80      	ldr	r2, [pc, #512]	@ (800202c <HAL_I2C_Init+0x278>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e006      	b.n	8001e46 <HAL_I2C_Init+0x92>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002030 <HAL_I2C_Init+0x27c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0e7      	b.n	800201e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a78      	ldr	r2, [pc, #480]	@ (8002034 <HAL_I2C_Init+0x280>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d802      	bhi.n	8001e88 <HAL_I2C_Init+0xd4>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3301      	adds	r3, #1
 8001e86:	e009      	b.n	8001e9c <HAL_I2C_Init+0xe8>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	4a69      	ldr	r2, [pc, #420]	@ (8002038 <HAL_I2C_Init+0x284>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001eae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	495c      	ldr	r1, [pc, #368]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	d819      	bhi.n	8001ef0 <HAL_I2C_Init+0x13c>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e59      	subs	r1, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eca:	1c59      	adds	r1, r3, #1
 8001ecc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_I2C_Init+0x138>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e59      	subs	r1, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eea:	e051      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001eec:	2304      	movs	r3, #4
 8001eee:	e04f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <HAL_I2C_Init+0x168>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e012      	b.n	8001f42 <HAL_I2C_Init+0x18e>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Init+0x196>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e022      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <HAL_I2C_Init+0x1bc>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e58      	subs	r0, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	440b      	add	r3, r1
 8001f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f6e:	e00f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	6809      	ldr	r1, [r1, #0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6911      	ldr	r1, [r2, #16]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68d2      	ldr	r2, [r2, #12]
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	000186a0 	.word	0x000186a0
 800202c:	001e847f 	.word	0x001e847f
 8002030:	003d08ff 	.word	0x003d08ff
 8002034:	431bde83 	.word	0x431bde83
 8002038:	10624dd3 	.word	0x10624dd3

0800203c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e267      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d075      	beq.n	8002146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800205a:	4b88      	ldr	r3, [pc, #544]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d00c      	beq.n	8002080 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002066:	4b85      	ldr	r3, [pc, #532]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800206e:	2b08      	cmp	r3, #8
 8002070:	d112      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002072:	4b82      	ldr	r3, [pc, #520]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800207e:	d10b      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	4b7e      	ldr	r3, [pc, #504]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05b      	beq.n	8002144 <HAL_RCC_OscConfig+0x108>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d157      	bne.n	8002144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e242      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a0:	d106      	bne.n	80020b0 <HAL_RCC_OscConfig+0x74>
 80020a2:	4b76      	ldr	r3, [pc, #472]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a75      	ldr	r2, [pc, #468]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01d      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x98>
 80020ba:	4b70      	ldr	r3, [pc, #448]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6f      	ldr	r2, [pc, #444]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b6d      	ldr	r3, [pc, #436]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6c      	ldr	r2, [pc, #432]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020d4:	4b69      	ldr	r3, [pc, #420]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a68      	ldr	r2, [pc, #416]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b66      	ldr	r3, [pc, #408]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a65      	ldr	r2, [pc, #404]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fbaa 	bl	800184c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fba6 	bl	800184c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e207      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b5b      	ldr	r3, [pc, #364]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xc0>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fb96 	bl	800184c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff fb92 	bl	800184c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1f3      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b51      	ldr	r3, [pc, #324]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0xe8>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d063      	beq.n	800221a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002152:	4b4a      	ldr	r3, [pc, #296]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216a:	4b44      	ldr	r3, [pc, #272]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1c7      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b3b      	ldr	r3, [pc, #236]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4937      	ldr	r1, [pc, #220]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	e03a      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ac:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <HAL_RCC_OscConfig+0x244>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff fb4b 	bl	800184c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff fb47 	bl	800184c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1a8      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b28      	ldr	r3, [pc, #160]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4925      	ldr	r1, [pc, #148]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ee:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <HAL_RCC_OscConfig+0x244>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff fb2a 	bl	800184c <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7ff fb26 	bl	800184c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e187      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d036      	beq.n	8002294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <HAL_RCC_OscConfig+0x248>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7ff fb0a 	bl	800184c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223c:	f7ff fb06 	bl	800184c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e167      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x200>
 800225a:	e01b      	b.n	8002294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225c:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_RCC_OscConfig+0x248>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7ff faf3 	bl	800184c <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	e00e      	b.n	8002288 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226a:	f7ff faef 	bl	800184c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d907      	bls.n	8002288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e150      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
 800227c:	40023800 	.word	0x40023800
 8002280:	42470000 	.word	0x42470000
 8002284:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	4b88      	ldr	r3, [pc, #544]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800228a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ea      	bne.n	800226a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8097 	beq.w	80023d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b81      	ldr	r3, [pc, #516]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b7d      	ldr	r3, [pc, #500]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	4a7c      	ldr	r2, [pc, #496]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c2:	4b7a      	ldr	r3, [pc, #488]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b77      	ldr	r3, [pc, #476]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022de:	4b74      	ldr	r3, [pc, #464]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a73      	ldr	r2, [pc, #460]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7ff faaf 	bl	800184c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7ff faab 	bl	800184c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e10c      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b6a      	ldr	r3, [pc, #424]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x2ea>
 8002318:	4b64      	ldr	r3, [pc, #400]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231c:	4a63      	ldr	r2, [pc, #396]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	@ 0x70
 8002324:	e01c      	b.n	8002360 <HAL_RCC_OscConfig+0x324>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x30c>
 800232e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002332:	4a5e      	ldr	r2, [pc, #376]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	6713      	str	r3, [r2, #112]	@ 0x70
 800233a:	4b5c      	ldr	r3, [pc, #368]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233e:	4a5b      	ldr	r2, [pc, #364]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6713      	str	r3, [r2, #112]	@ 0x70
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0x324>
 8002348:	4b58      	ldr	r3, [pc, #352]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234c:	4a57      	ldr	r2, [pc, #348]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	@ 0x70
 8002354:	4b55      	ldr	r3, [pc, #340]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	4a54      	ldr	r2, [pc, #336]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800235a:	f023 0304 	bic.w	r3, r3, #4
 800235e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d015      	beq.n	8002394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7ff fa70 	bl	800184c <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7ff fa6c 	bl	800184c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0cb      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	4b49      	ldr	r3, [pc, #292]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0ee      	beq.n	8002370 <HAL_RCC_OscConfig+0x334>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7ff fa5a 	bl	800184c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7ff fa56 	bl	800184c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0b5      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ee      	bne.n	800239c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	4a38      	ldr	r2, [pc, #224]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a1 	beq.w	800251c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023da:	4b34      	ldr	r3, [pc, #208]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d05c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d141      	bne.n	8002472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <HAL_RCC_OscConfig+0x478>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fa2a 	bl	800184c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff fa26 	bl	800184c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e087      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	3b01      	subs	r3, #1
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	491b      	ldr	r1, [pc, #108]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x478>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff f9ff 	bl	800184c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7ff f9fb 	bl	800184c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e05c      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x416>
 8002470:	e054      	b.n	800251c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_RCC_OscConfig+0x478>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff f9e8 	bl	800184c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff f9e4 	bl	800184c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e045      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x444>
 800249e:	e03d      	b.n	800251c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e038      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x4ec>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d028      	beq.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d121      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d11a      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024e8:	4013      	ands	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d111      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	3b01      	subs	r3, #1
 8002502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0cc      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b68      	ldr	r3, [pc, #416]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d90c      	bls.n	8002568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b65      	ldr	r3, [pc, #404]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b8      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002580:	4b59      	ldr	r3, [pc, #356]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a58      	ldr	r2, [pc, #352]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800258a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002598:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a52      	ldr	r2, [pc, #328]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b50      	ldr	r3, [pc, #320]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	494d      	ldr	r1, [pc, #308]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d044      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d119      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3b      	ldr	r3, [pc, #236]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e067      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b37      	ldr	r3, [pc, #220]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4934      	ldr	r1, [pc, #208]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7ff f916 	bl	800184c <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7ff f912 	bl	800184c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e04f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d20c      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e032      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4916      	ldr	r1, [pc, #88]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269e:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	490e      	ldr	r1, [pc, #56]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b2:	f000 f821 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	490a      	ldr	r1, [pc, #40]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	5ccb      	ldrb	r3, [r1, r3]
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f876 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08006388 	.word	0x08006388
 80026f0:	20000000 	.word	0x20000000
 80026f4:	20000004 	.word	0x20000004

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026fc:	b090      	sub	sp, #64	@ 0x40
 80026fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d00d      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x40>
 800271c:	2b08      	cmp	r3, #8
 800271e:	f200 80a1 	bhi.w	8002864 <HAL_RCC_GetSysClockFreq+0x16c>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x34>
 8002726:	2b04      	cmp	r3, #4
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x3a>
 800272a:	e09b      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b53      	ldr	r3, [pc, #332]	@ (800287c <HAL_RCC_GetSysClockFreq+0x184>)
 800272e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002730:	e09b      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002732:	4b53      	ldr	r3, [pc, #332]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x188>)
 8002734:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002736:	e098      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002738:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002740:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002742:	4b4d      	ldr	r3, [pc, #308]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d028      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b4a      	ldr	r3, [pc, #296]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	2200      	movs	r2, #0
 8002756:	623b      	str	r3, [r7, #32]
 8002758:	627a      	str	r2, [r7, #36]	@ 0x24
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002760:	2100      	movs	r1, #0
 8002762:	4b47      	ldr	r3, [pc, #284]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x188>)
 8002764:	fb03 f201 	mul.w	r2, r3, r1
 8002768:	2300      	movs	r3, #0
 800276a:	fb00 f303 	mul.w	r3, r0, r3
 800276e:	4413      	add	r3, r2
 8002770:	4a43      	ldr	r2, [pc, #268]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x188>)
 8002772:	fba0 1202 	umull	r1, r2, r0, r2
 8002776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002778:	460a      	mov	r2, r1
 800277a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800277c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800277e:	4413      	add	r3, r2
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002784:	2200      	movs	r2, #0
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	61fa      	str	r2, [r7, #28]
 800278a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800278e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002792:	f7fe fa11 	bl	8000bb8 <__aeabi_uldivmod>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4613      	mov	r3, r2
 800279c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800279e:	e053      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a0:	4b35      	ldr	r3, [pc, #212]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	2200      	movs	r2, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	617a      	str	r2, [r7, #20]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027b2:	f04f 0b00 	mov.w	fp, #0
 80027b6:	4652      	mov	r2, sl
 80027b8:	465b      	mov	r3, fp
 80027ba:	f04f 0000 	mov.w	r0, #0
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	0159      	lsls	r1, r3, #5
 80027c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c8:	0150      	lsls	r0, r2, #5
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	ebb2 080a 	subs.w	r8, r2, sl
 80027d2:	eb63 090b 	sbc.w	r9, r3, fp
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027ea:	ebb2 0408 	subs.w	r4, r2, r8
 80027ee:	eb63 0509 	sbc.w	r5, r3, r9
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	00eb      	lsls	r3, r5, #3
 80027fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002800:	00e2      	lsls	r2, r4, #3
 8002802:	4614      	mov	r4, r2
 8002804:	461d      	mov	r5, r3
 8002806:	eb14 030a 	adds.w	r3, r4, sl
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	eb45 030b 	adc.w	r3, r5, fp
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281e:	4629      	mov	r1, r5
 8002820:	028b      	lsls	r3, r1, #10
 8002822:	4621      	mov	r1, r4
 8002824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002828:	4621      	mov	r1, r4
 800282a:	028a      	lsls	r2, r1, #10
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002832:	2200      	movs	r2, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	60fa      	str	r2, [r7, #12]
 8002838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800283c:	f7fe f9bc 	bl	8000bb8 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	3301      	adds	r3, #1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002858:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002862:	e002      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_RCC_GetSysClockFreq+0x184>)
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800286c:	4618      	mov	r0, r3
 800286e:	3740      	adds	r7, #64	@ 0x40
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	00f42400 	.word	0x00f42400
 8002880:	017d7840 	.word	0x017d7840

08002884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000000 	.word	0x20000000

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a0:	f7ff fff0 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0a9b      	lsrs	r3, r3, #10
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	@ (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	08006398 	.word	0x08006398

080028c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c8:	f7ff ffdc 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0b5b      	lsrs	r3, r3, #13
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08006398 	.word	0x08006398

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002910:	2b00      	cmp	r3, #0
 8002912:	d038      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800291a:	f7fe ff97 	bl	800184c <HAL_GetTick>
 800291e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002922:	f7fe ff93 	bl	800184c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0bd      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002934:	4b61      	ldr	r3, [pc, #388]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	071b      	lsls	r3, r3, #28
 8002952:	495a      	ldr	r1, [pc, #360]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800295a:	4b57      	ldr	r3, [pc, #348]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002960:	f7fe ff74 	bl	800184c <HAL_GetTick>
 8002964:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002968:	f7fe ff70 	bl	800184c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e09a      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800297a:	4b50      	ldr	r3, [pc, #320]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8083 	beq.w	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	4b48      	ldr	r3, [pc, #288]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	4a47      	ldr	r2, [pc, #284]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a4:	4b45      	ldr	r3, [pc, #276]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80029b0:	4b43      	ldr	r3, [pc, #268]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a42      	ldr	r2, [pc, #264]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ba:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029bc:	f7fe ff46 	bl	800184c <HAL_GetTick>
 80029c0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe ff42 	bl	800184c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e06c      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80029d6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029e2:	4b36      	ldr	r3, [pc, #216]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ea:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02f      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d028      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a00:	4b2e      	ldr	r3, [pc, #184]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a08:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a10:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a16:	4a29      	ldr	r2, [pc, #164]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a1c:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d114      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe ff10 	bl	800184c <HAL_GetTick>
 8002a2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7fe ff0c 	bl	800184c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e034      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0ee      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a5e:	d10d      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002a60:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a74:	4911      	ldr	r1, [pc, #68]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
 8002a7a:	e005      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a0e      	ldr	r2, [pc, #56]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a82:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a86:	6093      	str	r3, [r2, #8]
 8002a88:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	4909      	ldr	r1, [pc, #36]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7d1a      	ldrb	r2, [r3, #20]
 8002aaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002aac:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	42470068 	.word	0x42470068
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	42470e40 	.word	0x42470e40
 8002ac8:	424711e0 	.word	0x424711e0

08002acc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e073      	b.n	8002bc6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7f5b      	ldrb	r3, [r3, #29]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe fc74 	bl	80013dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d055      	beq.n	8002bb4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	22ca      	movs	r2, #202	@ 0xca
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2253      	movs	r2, #83	@ 0x53
 8002b16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fa49 	bl	8002fb0 <RTC_EnterInitMode>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d12c      	bne.n	8002b82 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b3a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6919      	ldr	r1, [r3, #16]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	041a      	lsls	r2, r3, #16
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fa50 	bl	800301e <RTC_ExitInitMode>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d110      	bne.n	8002baa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	22ff      	movs	r2, #255	@ 0xff
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bb2:	e001      	b.n	8002bb8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d102      	bne.n	8002bc4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bce:	b590      	push	{r4, r7, lr}
 8002bd0:	b087      	sub	sp, #28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	7f1b      	ldrb	r3, [r3, #28]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_RTC_SetTime+0x1c>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e087      	b.n	8002cfa <HAL_RTC_SetTime+0x12c>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d126      	bne.n	8002c4a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fa27 	bl	8003068 <RTC_ByteToBcd2>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fa20 	bl	8003068 <RTC_ByteToBcd2>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c2c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	789b      	ldrb	r3, [r3, #2]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fa18 	bl	8003068 <RTC_ByteToBcd2>
 8002c38:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c3a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	78db      	ldrb	r3, [r3, #3]
 8002c42:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e018      	b.n	8002c7c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002c6a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002c70:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	78db      	ldrb	r3, [r3, #3]
 8002c76:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	22ca      	movs	r2, #202	@ 0xca
 8002c82:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2253      	movs	r2, #83	@ 0x53
 8002c8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f98f 	bl	8002fb0 <RTC_EnterInitMode>
 8002c92:	4603      	mov	r3, r0
 8002c94:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d120      	bne.n	8002cde <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002ca6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002caa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002cba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f9a2 	bl	800301e <RTC_ExitInitMode>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002cde:	7cfb      	ldrb	r3, [r7, #19]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	22ff      	movs	r2, #255	@ 0xff
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]

  return status;
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}

08002d02 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002d34:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002d38:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	0d9b      	lsrs	r3, r3, #22
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d11a      	bne.n	8002db4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f98e 	bl	80030a4 <RTC_Bcd2ToByte>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f985 	bl	80030a4 <RTC_Bcd2ToByte>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	789b      	ldrb	r3, [r3, #2]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f97c 	bl	80030a4 <RTC_Bcd2ToByte>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002dbe:	b590      	push	{r4, r7, lr}
 8002dc0:	b087      	sub	sp, #28
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	7f1b      	ldrb	r3, [r3, #28]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_RTC_SetDate+0x1c>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e071      	b.n	8002ebe <HAL_RTC_SetDate+0x100>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2202      	movs	r2, #2
 8002de4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10e      	bne.n	8002e0a <HAL_RTC_SetDate+0x4c>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	f023 0310 	bic.w	r3, r3, #16
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	330a      	adds	r3, #10
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11c      	bne.n	8002e4a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	78db      	ldrb	r3, [r3, #3]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 f927 	bl	8003068 <RTC_ByteToBcd2>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f920 	bl	8003068 <RTC_ByteToBcd2>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e2c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	789b      	ldrb	r3, [r3, #2]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f918 	bl	8003068 <RTC_ByteToBcd2>
 8002e38:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e3a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e00e      	b.n	8002e68 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	78db      	ldrb	r3, [r3, #3]
 8002e4e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e56:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002e5c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	22ca      	movs	r2, #202	@ 0xca
 8002e6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2253      	movs	r2, #83	@ 0x53
 8002e76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f899 	bl	8002fb0 <RTC_EnterInitMode>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10c      	bne.n	8002ea2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e96:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f8c0 	bl	800301e <RTC_ExitInitMode>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	22ff      	movs	r2, #255	@ 0xff
 8002eb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]

  return status;
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}

08002ec6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ee0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	0b5b      	lsrs	r3, r3, #13
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11a      	bne.n	8002f5a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	78db      	ldrb	r3, [r3, #3]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f8bb 	bl	80030a4 <RTC_Bcd2ToByte>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f8b2 	bl	80030a4 <RTC_Bcd2ToByte>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	789b      	ldrb	r3, [r3, #2]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f8a9 	bl	80030a4 <RTC_Bcd2ToByte>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <HAL_RTC_WaitForSynchro+0x48>)
 8002f76:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f78:	f7fe fc68 	bl	800184c <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f7e:	e009      	b.n	8002f94 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f80:	f7fe fc64 	bl	800184c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f8e:	d901      	bls.n	8002f94 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e007      	b.n	8002fa4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0ee      	beq.n	8002f80 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	00013f5f 	.word	0x00013f5f

08002fb0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d122      	bne.n	8003014 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fdc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fde:	f7fe fc35 	bl	800184c <HAL_GetTick>
 8002fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002fe4:	e00c      	b.n	8003000 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fe6:	f7fe fc31 	bl	800184c <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ff4:	d904      	bls.n	8003000 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <RTC_EnterInitMode+0x64>
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d1e8      	bne.n	8002fe6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003038:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ff8b 	bl	8002f64 <HAL_RTC_WaitForSynchro>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2204      	movs	r2, #4
 8003058:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003076:	e005      	b.n	8003084 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	3b0a      	subs	r3, #10
 8003082:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	2b09      	cmp	r3, #9
 8003088:	d8f6      	bhi.n	8003078 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	b2da      	uxtb	r2, r3
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	4313      	orrs	r3, r2
 8003096:	b2db      	uxtb	r3, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	b2db      	uxtb	r3, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e07b      	b.n	80031ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d108      	bne.n	800310c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003102:	d009      	beq.n	8003118 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
 800310a:	e005      	b.n	8003118 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe f97e 	bl	8001434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800314e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319c:	ea42 0103 	orr.w	r1, r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	f003 0104 	and.w	r1, r3, #4
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	f003 0210 	and.w	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e042      	b.n	800328a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fe f953 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2224      	movs	r2, #36	@ 0x24
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003234:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f972 	bl	8003520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800324a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800325a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800326a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b08a      	sub	sp, #40	@ 0x28
 8003296:	af02      	add	r7, sp, #8
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d175      	bne.n	800339e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_UART_Transmit+0x2c>
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06e      	b.n	80033a0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2221      	movs	r2, #33	@ 0x21
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d0:	f7fe fabc 	bl	800184c <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	88fa      	ldrh	r2, [r7, #6]
 80032da:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ea:	d108      	bne.n	80032fe <HAL_UART_Transmit+0x6c>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	e003      	b.n	8003306 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003306:	e02e      	b.n	8003366 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2200      	movs	r2, #0
 8003310:	2180      	movs	r1, #128	@ 0x80
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f848 	bl	80033a8 <UART_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e03a      	b.n	80033a0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	3302      	adds	r3, #2
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e007      	b.n	8003358 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3301      	adds	r3, #1
 8003356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1cb      	bne.n	8003308 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2200      	movs	r2, #0
 8003378:	2140      	movs	r1, #64	@ 0x40
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f814 	bl	80033a8 <UART_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e006      	b.n	80033a0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
  }
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b8:	e03b      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d037      	beq.n	8003432 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c2:	f7fe fa43 	bl	800184c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d302      	bcc.n	80033d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e03a      	b.n	8003452 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d023      	beq.n	8003432 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b80      	cmp	r3, #128	@ 0x80
 80033ee:	d020      	beq.n	8003432 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b40      	cmp	r3, #64	@ 0x40
 80033f4:	d01d      	beq.n	8003432 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d116      	bne.n	8003432 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f81d 	bl	800345a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2208      	movs	r2, #8
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e00f      	b.n	8003452 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4013      	ands	r3, r2
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	429a      	cmp	r2, r3
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	429a      	cmp	r2, r3
 800344e:	d0b4      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800345a:	b480      	push	{r7}
 800345c:	b095      	sub	sp, #84	@ 0x54
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	330c      	adds	r3, #12
 8003480:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003482:	643a      	str	r2, [r7, #64]	@ 0x40
 8003484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003488:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e5      	bne.n	8003462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3314      	adds	r3, #20
 800349c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3314      	adds	r3, #20
 80034b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e5      	bne.n	8003496 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d119      	bne.n	8003506 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f023 0310 	bic.w	r3, r3, #16
 80034e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f2:	61ba      	str	r2, [r7, #24]
 80034f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6979      	ldr	r1, [r7, #20]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e5      	bne.n	80034d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003514:	bf00      	nop
 8003516:	3754      	adds	r7, #84	@ 0x54
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003524:	b0c0      	sub	sp, #256	@ 0x100
 8003526:	af00      	add	r7, sp, #0
 8003528:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353c:	68d9      	ldr	r1, [r3, #12]
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	ea40 0301 	orr.w	r3, r0, r1
 8003548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	431a      	orrs	r2, r3
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003578:	f021 010c 	bic.w	r1, r1, #12
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003586:	430b      	orrs	r3, r1
 8003588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359a:	6999      	ldr	r1, [r3, #24]
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	ea40 0301 	orr.w	r3, r0, r1
 80035a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b8f      	ldr	r3, [pc, #572]	@ (80037ec <UART_SetConfig+0x2cc>)
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d005      	beq.n	80035c0 <UART_SetConfig+0xa0>
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b8d      	ldr	r3, [pc, #564]	@ (80037f0 <UART_SetConfig+0x2d0>)
 80035bc:	429a      	cmp	r2, r3
 80035be:	d104      	bne.n	80035ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c0:	f7ff f980 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 80035c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035c8:	e003      	b.n	80035d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ca:	f7ff f967 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 80035ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035dc:	f040 810c 	bne.w	80037f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035e4:	2200      	movs	r2, #0
 80035e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035f2:	4622      	mov	r2, r4
 80035f4:	462b      	mov	r3, r5
 80035f6:	1891      	adds	r1, r2, r2
 80035f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035fa:	415b      	adcs	r3, r3
 80035fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003602:	4621      	mov	r1, r4
 8003604:	eb12 0801 	adds.w	r8, r2, r1
 8003608:	4629      	mov	r1, r5
 800360a:	eb43 0901 	adc.w	r9, r3, r1
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800361a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800361e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003622:	4690      	mov	r8, r2
 8003624:	4699      	mov	r9, r3
 8003626:	4623      	mov	r3, r4
 8003628:	eb18 0303 	adds.w	r3, r8, r3
 800362c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003630:	462b      	mov	r3, r5
 8003632:	eb49 0303 	adc.w	r3, r9, r3
 8003636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003646:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800364a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800364e:	460b      	mov	r3, r1
 8003650:	18db      	adds	r3, r3, r3
 8003652:	653b      	str	r3, [r7, #80]	@ 0x50
 8003654:	4613      	mov	r3, r2
 8003656:	eb42 0303 	adc.w	r3, r2, r3
 800365a:	657b      	str	r3, [r7, #84]	@ 0x54
 800365c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003664:	f7fd faa8 	bl	8000bb8 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4b61      	ldr	r3, [pc, #388]	@ (80037f4 <UART_SetConfig+0x2d4>)
 800366e:	fba3 2302 	umull	r2, r3, r3, r2
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	011c      	lsls	r4, r3, #4
 8003676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003680:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003688:	4642      	mov	r2, r8
 800368a:	464b      	mov	r3, r9
 800368c:	1891      	adds	r1, r2, r2
 800368e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003690:	415b      	adcs	r3, r3
 8003692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003698:	4641      	mov	r1, r8
 800369a:	eb12 0a01 	adds.w	sl, r2, r1
 800369e:	4649      	mov	r1, r9
 80036a0:	eb43 0b01 	adc.w	fp, r3, r1
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b8:	4692      	mov	sl, r2
 80036ba:	469b      	mov	fp, r3
 80036bc:	4643      	mov	r3, r8
 80036be:	eb1a 0303 	adds.w	r3, sl, r3
 80036c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036c6:	464b      	mov	r3, r9
 80036c8:	eb4b 0303 	adc.w	r3, fp, r3
 80036cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036e4:	460b      	mov	r3, r1
 80036e6:	18db      	adds	r3, r3, r3
 80036e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ea:	4613      	mov	r3, r2
 80036ec:	eb42 0303 	adc.w	r3, r2, r3
 80036f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036fa:	f7fd fa5d 	bl	8000bb8 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4611      	mov	r1, r2
 8003704:	4b3b      	ldr	r3, [pc, #236]	@ (80037f4 <UART_SetConfig+0x2d4>)
 8003706:	fba3 2301 	umull	r2, r3, r3, r1
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2264      	movs	r2, #100	@ 0x64
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	1acb      	subs	r3, r1, r3
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800371a:	4b36      	ldr	r3, [pc, #216]	@ (80037f4 <UART_SetConfig+0x2d4>)
 800371c:	fba3 2302 	umull	r2, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003728:	441c      	add	r4, r3
 800372a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800372e:	2200      	movs	r2, #0
 8003730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003734:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800373c:	4642      	mov	r2, r8
 800373e:	464b      	mov	r3, r9
 8003740:	1891      	adds	r1, r2, r2
 8003742:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003744:	415b      	adcs	r3, r3
 8003746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800374c:	4641      	mov	r1, r8
 800374e:	1851      	adds	r1, r2, r1
 8003750:	6339      	str	r1, [r7, #48]	@ 0x30
 8003752:	4649      	mov	r1, r9
 8003754:	414b      	adcs	r3, r1
 8003756:	637b      	str	r3, [r7, #52]	@ 0x34
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003764:	4659      	mov	r1, fp
 8003766:	00cb      	lsls	r3, r1, #3
 8003768:	4651      	mov	r1, sl
 800376a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800376e:	4651      	mov	r1, sl
 8003770:	00ca      	lsls	r2, r1, #3
 8003772:	4610      	mov	r0, r2
 8003774:	4619      	mov	r1, r3
 8003776:	4603      	mov	r3, r0
 8003778:	4642      	mov	r2, r8
 800377a:	189b      	adds	r3, r3, r2
 800377c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003780:	464b      	mov	r3, r9
 8003782:	460a      	mov	r2, r1
 8003784:	eb42 0303 	adc.w	r3, r2, r3
 8003788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003798:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800379c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037a0:	460b      	mov	r3, r1
 80037a2:	18db      	adds	r3, r3, r3
 80037a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a6:	4613      	mov	r3, r2
 80037a8:	eb42 0303 	adc.w	r3, r2, r3
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037b6:	f7fd f9ff 	bl	8000bb8 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <UART_SetConfig+0x2d4>)
 80037c0:	fba3 1302 	umull	r1, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2164      	movs	r1, #100	@ 0x64
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	3332      	adds	r3, #50	@ 0x32
 80037d2:	4a08      	ldr	r2, [pc, #32]	@ (80037f4 <UART_SetConfig+0x2d4>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	f003 0207 	and.w	r2, r3, #7
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4422      	add	r2, r4
 80037e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037e8:	e106      	b.n	80039f8 <UART_SetConfig+0x4d8>
 80037ea:	bf00      	nop
 80037ec:	40011000 	.word	0x40011000
 80037f0:	40011400 	.word	0x40011400
 80037f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003802:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800380a:	4642      	mov	r2, r8
 800380c:	464b      	mov	r3, r9
 800380e:	1891      	adds	r1, r2, r2
 8003810:	6239      	str	r1, [r7, #32]
 8003812:	415b      	adcs	r3, r3
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
 8003816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800381a:	4641      	mov	r1, r8
 800381c:	1854      	adds	r4, r2, r1
 800381e:	4649      	mov	r1, r9
 8003820:	eb43 0501 	adc.w	r5, r3, r1
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	00eb      	lsls	r3, r5, #3
 800382e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003832:	00e2      	lsls	r2, r4, #3
 8003834:	4614      	mov	r4, r2
 8003836:	461d      	mov	r5, r3
 8003838:	4643      	mov	r3, r8
 800383a:	18e3      	adds	r3, r4, r3
 800383c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003840:	464b      	mov	r3, r9
 8003842:	eb45 0303 	adc.w	r3, r5, r3
 8003846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003866:	4629      	mov	r1, r5
 8003868:	008b      	lsls	r3, r1, #2
 800386a:	4621      	mov	r1, r4
 800386c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003870:	4621      	mov	r1, r4
 8003872:	008a      	lsls	r2, r1, #2
 8003874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003878:	f7fd f99e 	bl	8000bb8 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4b60      	ldr	r3, [pc, #384]	@ (8003a04 <UART_SetConfig+0x4e4>)
 8003882:	fba3 2302 	umull	r2, r3, r3, r2
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	011c      	lsls	r4, r3, #4
 800388a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003894:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800389c:	4642      	mov	r2, r8
 800389e:	464b      	mov	r3, r9
 80038a0:	1891      	adds	r1, r2, r2
 80038a2:	61b9      	str	r1, [r7, #24]
 80038a4:	415b      	adcs	r3, r3
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ac:	4641      	mov	r1, r8
 80038ae:	1851      	adds	r1, r2, r1
 80038b0:	6139      	str	r1, [r7, #16]
 80038b2:	4649      	mov	r1, r9
 80038b4:	414b      	adcs	r3, r1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038c4:	4659      	mov	r1, fp
 80038c6:	00cb      	lsls	r3, r1, #3
 80038c8:	4651      	mov	r1, sl
 80038ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ce:	4651      	mov	r1, sl
 80038d0:	00ca      	lsls	r2, r1, #3
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	4642      	mov	r2, r8
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038e0:	464b      	mov	r3, r9
 80038e2:	460a      	mov	r2, r1
 80038e4:	eb42 0303 	adc.w	r3, r2, r3
 80038e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003904:	4649      	mov	r1, r9
 8003906:	008b      	lsls	r3, r1, #2
 8003908:	4641      	mov	r1, r8
 800390a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800390e:	4641      	mov	r1, r8
 8003910:	008a      	lsls	r2, r1, #2
 8003912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003916:	f7fd f94f 	bl	8000bb8 <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4611      	mov	r1, r2
 8003920:	4b38      	ldr	r3, [pc, #224]	@ (8003a04 <UART_SetConfig+0x4e4>)
 8003922:	fba3 2301 	umull	r2, r3, r3, r1
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2264      	movs	r2, #100	@ 0x64
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	1acb      	subs	r3, r1, r3
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	3332      	adds	r3, #50	@ 0x32
 8003934:	4a33      	ldr	r2, [pc, #204]	@ (8003a04 <UART_SetConfig+0x4e4>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003940:	441c      	add	r4, r3
 8003942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003946:	2200      	movs	r2, #0
 8003948:	673b      	str	r3, [r7, #112]	@ 0x70
 800394a:	677a      	str	r2, [r7, #116]	@ 0x74
 800394c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003950:	4642      	mov	r2, r8
 8003952:	464b      	mov	r3, r9
 8003954:	1891      	adds	r1, r2, r2
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	415b      	adcs	r3, r3
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003960:	4641      	mov	r1, r8
 8003962:	1851      	adds	r1, r2, r1
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	4649      	mov	r1, r9
 8003968:	414b      	adcs	r3, r1
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003978:	4659      	mov	r1, fp
 800397a:	00cb      	lsls	r3, r1, #3
 800397c:	4651      	mov	r1, sl
 800397e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003982:	4651      	mov	r1, sl
 8003984:	00ca      	lsls	r2, r1, #3
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	4603      	mov	r3, r0
 800398c:	4642      	mov	r2, r8
 800398e:	189b      	adds	r3, r3, r2
 8003990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003992:	464b      	mov	r3, r9
 8003994:	460a      	mov	r2, r1
 8003996:	eb42 0303 	adc.w	r3, r2, r3
 800399a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80039a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039b4:	4649      	mov	r1, r9
 80039b6:	008b      	lsls	r3, r1, #2
 80039b8:	4641      	mov	r1, r8
 80039ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039be:	4641      	mov	r1, r8
 80039c0:	008a      	lsls	r2, r1, #2
 80039c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039c6:	f7fd f8f7 	bl	8000bb8 <__aeabi_uldivmod>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003a04 <UART_SetConfig+0x4e4>)
 80039d0:	fba3 1302 	umull	r1, r3, r3, r2
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	2164      	movs	r1, #100	@ 0x64
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	3332      	adds	r3, #50	@ 0x32
 80039e2:	4a08      	ldr	r2, [pc, #32]	@ (8003a04 <UART_SetConfig+0x4e4>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4422      	add	r2, r4
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039fe:	46bd      	mov	sp, r7
 8003a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a04:	51eb851f 	.word	0x51eb851f

08003a08 <__cvt>:
 8003a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a0c:	ec57 6b10 	vmov	r6, r7, d0
 8003a10:	2f00      	cmp	r7, #0
 8003a12:	460c      	mov	r4, r1
 8003a14:	4619      	mov	r1, r3
 8003a16:	463b      	mov	r3, r7
 8003a18:	bfbb      	ittet	lt
 8003a1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003a1e:	461f      	movlt	r7, r3
 8003a20:	2300      	movge	r3, #0
 8003a22:	232d      	movlt	r3, #45	@ 0x2d
 8003a24:	700b      	strb	r3, [r1, #0]
 8003a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003a2c:	4691      	mov	r9, r2
 8003a2e:	f023 0820 	bic.w	r8, r3, #32
 8003a32:	bfbc      	itt	lt
 8003a34:	4632      	movlt	r2, r6
 8003a36:	4616      	movlt	r6, r2
 8003a38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a3c:	d005      	beq.n	8003a4a <__cvt+0x42>
 8003a3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a42:	d100      	bne.n	8003a46 <__cvt+0x3e>
 8003a44:	3401      	adds	r4, #1
 8003a46:	2102      	movs	r1, #2
 8003a48:	e000      	b.n	8003a4c <__cvt+0x44>
 8003a4a:	2103      	movs	r1, #3
 8003a4c:	ab03      	add	r3, sp, #12
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	ab02      	add	r3, sp, #8
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	ec47 6b10 	vmov	d0, r6, r7
 8003a58:	4653      	mov	r3, sl
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	f000 fe58 	bl	8004710 <_dtoa_r>
 8003a60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003a64:	4605      	mov	r5, r0
 8003a66:	d119      	bne.n	8003a9c <__cvt+0x94>
 8003a68:	f019 0f01 	tst.w	r9, #1
 8003a6c:	d00e      	beq.n	8003a8c <__cvt+0x84>
 8003a6e:	eb00 0904 	add.w	r9, r0, r4
 8003a72:	2200      	movs	r2, #0
 8003a74:	2300      	movs	r3, #0
 8003a76:	4630      	mov	r0, r6
 8003a78:	4639      	mov	r1, r7
 8003a7a:	f7fd f82d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a7e:	b108      	cbz	r0, 8003a84 <__cvt+0x7c>
 8003a80:	f8cd 900c 	str.w	r9, [sp, #12]
 8003a84:	2230      	movs	r2, #48	@ 0x30
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	454b      	cmp	r3, r9
 8003a8a:	d31e      	bcc.n	8003aca <__cvt+0xc2>
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a90:	1b5b      	subs	r3, r3, r5
 8003a92:	4628      	mov	r0, r5
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	b004      	add	sp, #16
 8003a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003aa0:	eb00 0904 	add.w	r9, r0, r4
 8003aa4:	d1e5      	bne.n	8003a72 <__cvt+0x6a>
 8003aa6:	7803      	ldrb	r3, [r0, #0]
 8003aa8:	2b30      	cmp	r3, #48	@ 0x30
 8003aaa:	d10a      	bne.n	8003ac2 <__cvt+0xba>
 8003aac:	2200      	movs	r2, #0
 8003aae:	2300      	movs	r3, #0
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	f7fd f810 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ab8:	b918      	cbnz	r0, 8003ac2 <__cvt+0xba>
 8003aba:	f1c4 0401 	rsb	r4, r4, #1
 8003abe:	f8ca 4000 	str.w	r4, [sl]
 8003ac2:	f8da 3000 	ldr.w	r3, [sl]
 8003ac6:	4499      	add	r9, r3
 8003ac8:	e7d3      	b.n	8003a72 <__cvt+0x6a>
 8003aca:	1c59      	adds	r1, r3, #1
 8003acc:	9103      	str	r1, [sp, #12]
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e7d9      	b.n	8003a86 <__cvt+0x7e>

08003ad2 <__exponent>:
 8003ad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	bfba      	itte	lt
 8003ad8:	4249      	neglt	r1, r1
 8003ada:	232d      	movlt	r3, #45	@ 0x2d
 8003adc:	232b      	movge	r3, #43	@ 0x2b
 8003ade:	2909      	cmp	r1, #9
 8003ae0:	7002      	strb	r2, [r0, #0]
 8003ae2:	7043      	strb	r3, [r0, #1]
 8003ae4:	dd29      	ble.n	8003b3a <__exponent+0x68>
 8003ae6:	f10d 0307 	add.w	r3, sp, #7
 8003aea:	461d      	mov	r5, r3
 8003aec:	270a      	movs	r7, #10
 8003aee:	461a      	mov	r2, r3
 8003af0:	fbb1 f6f7 	udiv	r6, r1, r7
 8003af4:	fb07 1416 	mls	r4, r7, r6, r1
 8003af8:	3430      	adds	r4, #48	@ 0x30
 8003afa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003afe:	460c      	mov	r4, r1
 8003b00:	2c63      	cmp	r4, #99	@ 0x63
 8003b02:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b06:	4631      	mov	r1, r6
 8003b08:	dcf1      	bgt.n	8003aee <__exponent+0x1c>
 8003b0a:	3130      	adds	r1, #48	@ 0x30
 8003b0c:	1e94      	subs	r4, r2, #2
 8003b0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b12:	1c41      	adds	r1, r0, #1
 8003b14:	4623      	mov	r3, r4
 8003b16:	42ab      	cmp	r3, r5
 8003b18:	d30a      	bcc.n	8003b30 <__exponent+0x5e>
 8003b1a:	f10d 0309 	add.w	r3, sp, #9
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	42ac      	cmp	r4, r5
 8003b22:	bf88      	it	hi
 8003b24:	2300      	movhi	r3, #0
 8003b26:	3302      	adds	r3, #2
 8003b28:	4403      	add	r3, r0
 8003b2a:	1a18      	subs	r0, r3, r0
 8003b2c:	b003      	add	sp, #12
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b38:	e7ed      	b.n	8003b16 <__exponent+0x44>
 8003b3a:	2330      	movs	r3, #48	@ 0x30
 8003b3c:	3130      	adds	r1, #48	@ 0x30
 8003b3e:	7083      	strb	r3, [r0, #2]
 8003b40:	70c1      	strb	r1, [r0, #3]
 8003b42:	1d03      	adds	r3, r0, #4
 8003b44:	e7f1      	b.n	8003b2a <__exponent+0x58>
	...

08003b48 <_printf_float>:
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	b08d      	sub	sp, #52	@ 0x34
 8003b4e:	460c      	mov	r4, r1
 8003b50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003b54:	4616      	mov	r6, r2
 8003b56:	461f      	mov	r7, r3
 8003b58:	4605      	mov	r5, r0
 8003b5a:	f000 fccb 	bl	80044f4 <_localeconv_r>
 8003b5e:	6803      	ldr	r3, [r0, #0]
 8003b60:	9304      	str	r3, [sp, #16]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fb8c 	bl	8000280 <strlen>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b70:	9005      	str	r0, [sp, #20]
 8003b72:	3307      	adds	r3, #7
 8003b74:	f023 0307 	bic.w	r3, r3, #7
 8003b78:	f103 0208 	add.w	r2, r3, #8
 8003b7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003b80:	f8d4 b000 	ldr.w	fp, [r4]
 8003b84:	f8c8 2000 	str.w	r2, [r8]
 8003b88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003b90:	9307      	str	r3, [sp, #28]
 8003b92:	f8cd 8018 	str.w	r8, [sp, #24]
 8003b96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003b9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b9e:	4b9c      	ldr	r3, [pc, #624]	@ (8003e10 <_printf_float+0x2c8>)
 8003ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba4:	f7fc ffca 	bl	8000b3c <__aeabi_dcmpun>
 8003ba8:	bb70      	cbnz	r0, 8003c08 <_printf_float+0xc0>
 8003baa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bae:	4b98      	ldr	r3, [pc, #608]	@ (8003e10 <_printf_float+0x2c8>)
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	f7fc ffa4 	bl	8000b00 <__aeabi_dcmple>
 8003bb8:	bb30      	cbnz	r0, 8003c08 <_printf_float+0xc0>
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	f7fc ff93 	bl	8000aec <__aeabi_dcmplt>
 8003bc6:	b110      	cbz	r0, 8003bce <_printf_float+0x86>
 8003bc8:	232d      	movs	r3, #45	@ 0x2d
 8003bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bce:	4a91      	ldr	r2, [pc, #580]	@ (8003e14 <_printf_float+0x2cc>)
 8003bd0:	4b91      	ldr	r3, [pc, #580]	@ (8003e18 <_printf_float+0x2d0>)
 8003bd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003bd6:	bf8c      	ite	hi
 8003bd8:	4690      	movhi	r8, r2
 8003bda:	4698      	movls	r8, r3
 8003bdc:	2303      	movs	r3, #3
 8003bde:	6123      	str	r3, [r4, #16]
 8003be0:	f02b 0304 	bic.w	r3, fp, #4
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	f04f 0900 	mov.w	r9, #0
 8003bea:	9700      	str	r7, [sp, #0]
 8003bec:	4633      	mov	r3, r6
 8003bee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f000 f9d2 	bl	8003f9c <_printf_common>
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	f040 808d 	bne.w	8003d18 <_printf_float+0x1d0>
 8003bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003c02:	b00d      	add	sp, #52	@ 0x34
 8003c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c08:	4642      	mov	r2, r8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	4640      	mov	r0, r8
 8003c0e:	4649      	mov	r1, r9
 8003c10:	f7fc ff94 	bl	8000b3c <__aeabi_dcmpun>
 8003c14:	b140      	cbz	r0, 8003c28 <_printf_float+0xe0>
 8003c16:	464b      	mov	r3, r9
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bfbc      	itt	lt
 8003c1c:	232d      	movlt	r3, #45	@ 0x2d
 8003c1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c22:	4a7e      	ldr	r2, [pc, #504]	@ (8003e1c <_printf_float+0x2d4>)
 8003c24:	4b7e      	ldr	r3, [pc, #504]	@ (8003e20 <_printf_float+0x2d8>)
 8003c26:	e7d4      	b.n	8003bd2 <_printf_float+0x8a>
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003c2e:	9206      	str	r2, [sp, #24]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	d13b      	bne.n	8003cac <_printf_float+0x164>
 8003c34:	2306      	movs	r3, #6
 8003c36:	6063      	str	r3, [r4, #4]
 8003c38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6022      	str	r2, [r4, #0]
 8003c40:	9303      	str	r3, [sp, #12]
 8003c42:	ab0a      	add	r3, sp, #40	@ 0x28
 8003c44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003c48:	ab09      	add	r3, sp, #36	@ 0x24
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	6861      	ldr	r1, [r4, #4]
 8003c4e:	ec49 8b10 	vmov	d0, r8, r9
 8003c52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003c56:	4628      	mov	r0, r5
 8003c58:	f7ff fed6 	bl	8003a08 <__cvt>
 8003c5c:	9b06      	ldr	r3, [sp, #24]
 8003c5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003c60:	2b47      	cmp	r3, #71	@ 0x47
 8003c62:	4680      	mov	r8, r0
 8003c64:	d129      	bne.n	8003cba <_printf_float+0x172>
 8003c66:	1cc8      	adds	r0, r1, #3
 8003c68:	db02      	blt.n	8003c70 <_printf_float+0x128>
 8003c6a:	6863      	ldr	r3, [r4, #4]
 8003c6c:	4299      	cmp	r1, r3
 8003c6e:	dd41      	ble.n	8003cf4 <_printf_float+0x1ac>
 8003c70:	f1aa 0a02 	sub.w	sl, sl, #2
 8003c74:	fa5f fa8a 	uxtb.w	sl, sl
 8003c78:	3901      	subs	r1, #1
 8003c7a:	4652      	mov	r2, sl
 8003c7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003c80:	9109      	str	r1, [sp, #36]	@ 0x24
 8003c82:	f7ff ff26 	bl	8003ad2 <__exponent>
 8003c86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c88:	1813      	adds	r3, r2, r0
 8003c8a:	2a01      	cmp	r2, #1
 8003c8c:	4681      	mov	r9, r0
 8003c8e:	6123      	str	r3, [r4, #16]
 8003c90:	dc02      	bgt.n	8003c98 <_printf_float+0x150>
 8003c92:	6822      	ldr	r2, [r4, #0]
 8003c94:	07d2      	lsls	r2, r2, #31
 8003c96:	d501      	bpl.n	8003c9c <_printf_float+0x154>
 8003c98:	3301      	adds	r3, #1
 8003c9a:	6123      	str	r3, [r4, #16]
 8003c9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0a2      	beq.n	8003bea <_printf_float+0xa2>
 8003ca4:	232d      	movs	r3, #45	@ 0x2d
 8003ca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003caa:	e79e      	b.n	8003bea <_printf_float+0xa2>
 8003cac:	9a06      	ldr	r2, [sp, #24]
 8003cae:	2a47      	cmp	r2, #71	@ 0x47
 8003cb0:	d1c2      	bne.n	8003c38 <_printf_float+0xf0>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1c0      	bne.n	8003c38 <_printf_float+0xf0>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e7bd      	b.n	8003c36 <_printf_float+0xee>
 8003cba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003cbe:	d9db      	bls.n	8003c78 <_printf_float+0x130>
 8003cc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003cc4:	d118      	bne.n	8003cf8 <_printf_float+0x1b0>
 8003cc6:	2900      	cmp	r1, #0
 8003cc8:	6863      	ldr	r3, [r4, #4]
 8003cca:	dd0b      	ble.n	8003ce4 <_printf_float+0x19c>
 8003ccc:	6121      	str	r1, [r4, #16]
 8003cce:	b913      	cbnz	r3, 8003cd6 <_printf_float+0x18e>
 8003cd0:	6822      	ldr	r2, [r4, #0]
 8003cd2:	07d0      	lsls	r0, r2, #31
 8003cd4:	d502      	bpl.n	8003cdc <_printf_float+0x194>
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	440b      	add	r3, r1
 8003cda:	6123      	str	r3, [r4, #16]
 8003cdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003cde:	f04f 0900 	mov.w	r9, #0
 8003ce2:	e7db      	b.n	8003c9c <_printf_float+0x154>
 8003ce4:	b913      	cbnz	r3, 8003cec <_printf_float+0x1a4>
 8003ce6:	6822      	ldr	r2, [r4, #0]
 8003ce8:	07d2      	lsls	r2, r2, #31
 8003cea:	d501      	bpl.n	8003cf0 <_printf_float+0x1a8>
 8003cec:	3302      	adds	r3, #2
 8003cee:	e7f4      	b.n	8003cda <_printf_float+0x192>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e7f2      	b.n	8003cda <_printf_float+0x192>
 8003cf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003cfa:	4299      	cmp	r1, r3
 8003cfc:	db05      	blt.n	8003d0a <_printf_float+0x1c2>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	6121      	str	r1, [r4, #16]
 8003d02:	07d8      	lsls	r0, r3, #31
 8003d04:	d5ea      	bpl.n	8003cdc <_printf_float+0x194>
 8003d06:	1c4b      	adds	r3, r1, #1
 8003d08:	e7e7      	b.n	8003cda <_printf_float+0x192>
 8003d0a:	2900      	cmp	r1, #0
 8003d0c:	bfd4      	ite	le
 8003d0e:	f1c1 0202 	rsble	r2, r1, #2
 8003d12:	2201      	movgt	r2, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	e7e0      	b.n	8003cda <_printf_float+0x192>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	055a      	lsls	r2, r3, #21
 8003d1c:	d407      	bmi.n	8003d2e <_printf_float+0x1e6>
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	4642      	mov	r2, r8
 8003d22:	4631      	mov	r1, r6
 8003d24:	4628      	mov	r0, r5
 8003d26:	47b8      	blx	r7
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d12b      	bne.n	8003d84 <_printf_float+0x23c>
 8003d2c:	e767      	b.n	8003bfe <_printf_float+0xb6>
 8003d2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d32:	f240 80dd 	bls.w	8003ef0 <_printf_float+0x3a8>
 8003d36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f7fc fecb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d033      	beq.n	8003dae <_printf_float+0x266>
 8003d46:	4a37      	ldr	r2, [pc, #220]	@ (8003e24 <_printf_float+0x2dc>)
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	47b8      	blx	r7
 8003d50:	3001      	adds	r0, #1
 8003d52:	f43f af54 	beq.w	8003bfe <_printf_float+0xb6>
 8003d56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003d5a:	4543      	cmp	r3, r8
 8003d5c:	db02      	blt.n	8003d64 <_printf_float+0x21c>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	07d8      	lsls	r0, r3, #31
 8003d62:	d50f      	bpl.n	8003d84 <_printf_float+0x23c>
 8003d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d68:	4631      	mov	r1, r6
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	47b8      	blx	r7
 8003d6e:	3001      	adds	r0, #1
 8003d70:	f43f af45 	beq.w	8003bfe <_printf_float+0xb6>
 8003d74:	f04f 0900 	mov.w	r9, #0
 8003d78:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d7c:	f104 0a1a 	add.w	sl, r4, #26
 8003d80:	45c8      	cmp	r8, r9
 8003d82:	dc09      	bgt.n	8003d98 <_printf_float+0x250>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	079b      	lsls	r3, r3, #30
 8003d88:	f100 8103 	bmi.w	8003f92 <_printf_float+0x44a>
 8003d8c:	68e0      	ldr	r0, [r4, #12]
 8003d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d90:	4298      	cmp	r0, r3
 8003d92:	bfb8      	it	lt
 8003d94:	4618      	movlt	r0, r3
 8003d96:	e734      	b.n	8003c02 <_printf_float+0xba>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4652      	mov	r2, sl
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	4628      	mov	r0, r5
 8003da0:	47b8      	blx	r7
 8003da2:	3001      	adds	r0, #1
 8003da4:	f43f af2b 	beq.w	8003bfe <_printf_float+0xb6>
 8003da8:	f109 0901 	add.w	r9, r9, #1
 8003dac:	e7e8      	b.n	8003d80 <_printf_float+0x238>
 8003dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	dc39      	bgt.n	8003e28 <_printf_float+0x2e0>
 8003db4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e24 <_printf_float+0x2dc>)
 8003db6:	2301      	movs	r3, #1
 8003db8:	4631      	mov	r1, r6
 8003dba:	4628      	mov	r0, r5
 8003dbc:	47b8      	blx	r7
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	f43f af1d 	beq.w	8003bfe <_printf_float+0xb6>
 8003dc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003dc8:	ea59 0303 	orrs.w	r3, r9, r3
 8003dcc:	d102      	bne.n	8003dd4 <_printf_float+0x28c>
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	07d9      	lsls	r1, r3, #31
 8003dd2:	d5d7      	bpl.n	8003d84 <_printf_float+0x23c>
 8003dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dd8:	4631      	mov	r1, r6
 8003dda:	4628      	mov	r0, r5
 8003ddc:	47b8      	blx	r7
 8003dde:	3001      	adds	r0, #1
 8003de0:	f43f af0d 	beq.w	8003bfe <_printf_float+0xb6>
 8003de4:	f04f 0a00 	mov.w	sl, #0
 8003de8:	f104 0b1a 	add.w	fp, r4, #26
 8003dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dee:	425b      	negs	r3, r3
 8003df0:	4553      	cmp	r3, sl
 8003df2:	dc01      	bgt.n	8003df8 <_printf_float+0x2b0>
 8003df4:	464b      	mov	r3, r9
 8003df6:	e793      	b.n	8003d20 <_printf_float+0x1d8>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	465a      	mov	r2, fp
 8003dfc:	4631      	mov	r1, r6
 8003dfe:	4628      	mov	r0, r5
 8003e00:	47b8      	blx	r7
 8003e02:	3001      	adds	r0, #1
 8003e04:	f43f aefb 	beq.w	8003bfe <_printf_float+0xb6>
 8003e08:	f10a 0a01 	add.w	sl, sl, #1
 8003e0c:	e7ee      	b.n	8003dec <_printf_float+0x2a4>
 8003e0e:	bf00      	nop
 8003e10:	7fefffff 	.word	0x7fefffff
 8003e14:	080063a4 	.word	0x080063a4
 8003e18:	080063a0 	.word	0x080063a0
 8003e1c:	080063ac 	.word	0x080063ac
 8003e20:	080063a8 	.word	0x080063a8
 8003e24:	080063b0 	.word	0x080063b0
 8003e28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e2e:	4553      	cmp	r3, sl
 8003e30:	bfa8      	it	ge
 8003e32:	4653      	movge	r3, sl
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	4699      	mov	r9, r3
 8003e38:	dc36      	bgt.n	8003ea8 <_printf_float+0x360>
 8003e3a:	f04f 0b00 	mov.w	fp, #0
 8003e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e42:	f104 021a 	add.w	r2, r4, #26
 8003e46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e48:	9306      	str	r3, [sp, #24]
 8003e4a:	eba3 0309 	sub.w	r3, r3, r9
 8003e4e:	455b      	cmp	r3, fp
 8003e50:	dc31      	bgt.n	8003eb6 <_printf_float+0x36e>
 8003e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e54:	459a      	cmp	sl, r3
 8003e56:	dc3a      	bgt.n	8003ece <_printf_float+0x386>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	07da      	lsls	r2, r3, #31
 8003e5c:	d437      	bmi.n	8003ece <_printf_float+0x386>
 8003e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e60:	ebaa 0903 	sub.w	r9, sl, r3
 8003e64:	9b06      	ldr	r3, [sp, #24]
 8003e66:	ebaa 0303 	sub.w	r3, sl, r3
 8003e6a:	4599      	cmp	r9, r3
 8003e6c:	bfa8      	it	ge
 8003e6e:	4699      	movge	r9, r3
 8003e70:	f1b9 0f00 	cmp.w	r9, #0
 8003e74:	dc33      	bgt.n	8003ede <_printf_float+0x396>
 8003e76:	f04f 0800 	mov.w	r8, #0
 8003e7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e7e:	f104 0b1a 	add.w	fp, r4, #26
 8003e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e84:	ebaa 0303 	sub.w	r3, sl, r3
 8003e88:	eba3 0309 	sub.w	r3, r3, r9
 8003e8c:	4543      	cmp	r3, r8
 8003e8e:	f77f af79 	ble.w	8003d84 <_printf_float+0x23c>
 8003e92:	2301      	movs	r3, #1
 8003e94:	465a      	mov	r2, fp
 8003e96:	4631      	mov	r1, r6
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b8      	blx	r7
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	f43f aeae 	beq.w	8003bfe <_printf_float+0xb6>
 8003ea2:	f108 0801 	add.w	r8, r8, #1
 8003ea6:	e7ec      	b.n	8003e82 <_printf_float+0x33a>
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4628      	mov	r0, r5
 8003eae:	47b8      	blx	r7
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d1c2      	bne.n	8003e3a <_printf_float+0x2f2>
 8003eb4:	e6a3      	b.n	8003bfe <_printf_float+0xb6>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4631      	mov	r1, r6
 8003eba:	4628      	mov	r0, r5
 8003ebc:	9206      	str	r2, [sp, #24]
 8003ebe:	47b8      	blx	r7
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f43f ae9c 	beq.w	8003bfe <_printf_float+0xb6>
 8003ec6:	9a06      	ldr	r2, [sp, #24]
 8003ec8:	f10b 0b01 	add.w	fp, fp, #1
 8003ecc:	e7bb      	b.n	8003e46 <_printf_float+0x2fe>
 8003ece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	47b8      	blx	r7
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d1c0      	bne.n	8003e5e <_printf_float+0x316>
 8003edc:	e68f      	b.n	8003bfe <_printf_float+0xb6>
 8003ede:	9a06      	ldr	r2, [sp, #24]
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	4442      	add	r2, r8
 8003ee4:	4631      	mov	r1, r6
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	d1c3      	bne.n	8003e76 <_printf_float+0x32e>
 8003eee:	e686      	b.n	8003bfe <_printf_float+0xb6>
 8003ef0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003ef4:	f1ba 0f01 	cmp.w	sl, #1
 8003ef8:	dc01      	bgt.n	8003efe <_printf_float+0x3b6>
 8003efa:	07db      	lsls	r3, r3, #31
 8003efc:	d536      	bpl.n	8003f6c <_printf_float+0x424>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4642      	mov	r2, r8
 8003f02:	4631      	mov	r1, r6
 8003f04:	4628      	mov	r0, r5
 8003f06:	47b8      	blx	r7
 8003f08:	3001      	adds	r0, #1
 8003f0a:	f43f ae78 	beq.w	8003bfe <_printf_float+0xb6>
 8003f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f12:	4631      	mov	r1, r6
 8003f14:	4628      	mov	r0, r5
 8003f16:	47b8      	blx	r7
 8003f18:	3001      	adds	r0, #1
 8003f1a:	f43f ae70 	beq.w	8003bfe <_printf_float+0xb6>
 8003f1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f22:	2200      	movs	r2, #0
 8003f24:	2300      	movs	r3, #0
 8003f26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f2a:	f7fc fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f2e:	b9c0      	cbnz	r0, 8003f62 <_printf_float+0x41a>
 8003f30:	4653      	mov	r3, sl
 8003f32:	f108 0201 	add.w	r2, r8, #1
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d10c      	bne.n	8003f5a <_printf_float+0x412>
 8003f40:	e65d      	b.n	8003bfe <_printf_float+0xb6>
 8003f42:	2301      	movs	r3, #1
 8003f44:	465a      	mov	r2, fp
 8003f46:	4631      	mov	r1, r6
 8003f48:	4628      	mov	r0, r5
 8003f4a:	47b8      	blx	r7
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	f43f ae56 	beq.w	8003bfe <_printf_float+0xb6>
 8003f52:	f108 0801 	add.w	r8, r8, #1
 8003f56:	45d0      	cmp	r8, sl
 8003f58:	dbf3      	blt.n	8003f42 <_printf_float+0x3fa>
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003f60:	e6df      	b.n	8003d22 <_printf_float+0x1da>
 8003f62:	f04f 0800 	mov.w	r8, #0
 8003f66:	f104 0b1a 	add.w	fp, r4, #26
 8003f6a:	e7f4      	b.n	8003f56 <_printf_float+0x40e>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	4642      	mov	r2, r8
 8003f70:	e7e1      	b.n	8003f36 <_printf_float+0x3ee>
 8003f72:	2301      	movs	r3, #1
 8003f74:	464a      	mov	r2, r9
 8003f76:	4631      	mov	r1, r6
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b8      	blx	r7
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	f43f ae3e 	beq.w	8003bfe <_printf_float+0xb6>
 8003f82:	f108 0801 	add.w	r8, r8, #1
 8003f86:	68e3      	ldr	r3, [r4, #12]
 8003f88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f8a:	1a5b      	subs	r3, r3, r1
 8003f8c:	4543      	cmp	r3, r8
 8003f8e:	dcf0      	bgt.n	8003f72 <_printf_float+0x42a>
 8003f90:	e6fc      	b.n	8003d8c <_printf_float+0x244>
 8003f92:	f04f 0800 	mov.w	r8, #0
 8003f96:	f104 0919 	add.w	r9, r4, #25
 8003f9a:	e7f4      	b.n	8003f86 <_printf_float+0x43e>

08003f9c <_printf_common>:
 8003f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa0:	4616      	mov	r6, r2
 8003fa2:	4698      	mov	r8, r3
 8003fa4:	688a      	ldr	r2, [r1, #8]
 8003fa6:	690b      	ldr	r3, [r1, #16]
 8003fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fac:	4293      	cmp	r3, r2
 8003fae:	bfb8      	it	lt
 8003fb0:	4613      	movlt	r3, r2
 8003fb2:	6033      	str	r3, [r6, #0]
 8003fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fb8:	4607      	mov	r7, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	b10a      	cbz	r2, 8003fc2 <_printf_common+0x26>
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	6033      	str	r3, [r6, #0]
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	0699      	lsls	r1, r3, #26
 8003fc6:	bf42      	ittt	mi
 8003fc8:	6833      	ldrmi	r3, [r6, #0]
 8003fca:	3302      	addmi	r3, #2
 8003fcc:	6033      	strmi	r3, [r6, #0]
 8003fce:	6825      	ldr	r5, [r4, #0]
 8003fd0:	f015 0506 	ands.w	r5, r5, #6
 8003fd4:	d106      	bne.n	8003fe4 <_printf_common+0x48>
 8003fd6:	f104 0a19 	add.w	sl, r4, #25
 8003fda:	68e3      	ldr	r3, [r4, #12]
 8003fdc:	6832      	ldr	r2, [r6, #0]
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	42ab      	cmp	r3, r5
 8003fe2:	dc26      	bgt.n	8004032 <_printf_common+0x96>
 8003fe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fe8:	6822      	ldr	r2, [r4, #0]
 8003fea:	3b00      	subs	r3, #0
 8003fec:	bf18      	it	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	0692      	lsls	r2, r2, #26
 8003ff2:	d42b      	bmi.n	800404c <_printf_common+0xb0>
 8003ff4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	47c8      	blx	r9
 8003ffe:	3001      	adds	r0, #1
 8004000:	d01e      	beq.n	8004040 <_printf_common+0xa4>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	6922      	ldr	r2, [r4, #16]
 8004006:	f003 0306 	and.w	r3, r3, #6
 800400a:	2b04      	cmp	r3, #4
 800400c:	bf02      	ittt	eq
 800400e:	68e5      	ldreq	r5, [r4, #12]
 8004010:	6833      	ldreq	r3, [r6, #0]
 8004012:	1aed      	subeq	r5, r5, r3
 8004014:	68a3      	ldr	r3, [r4, #8]
 8004016:	bf0c      	ite	eq
 8004018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800401c:	2500      	movne	r5, #0
 800401e:	4293      	cmp	r3, r2
 8004020:	bfc4      	itt	gt
 8004022:	1a9b      	subgt	r3, r3, r2
 8004024:	18ed      	addgt	r5, r5, r3
 8004026:	2600      	movs	r6, #0
 8004028:	341a      	adds	r4, #26
 800402a:	42b5      	cmp	r5, r6
 800402c:	d11a      	bne.n	8004064 <_printf_common+0xc8>
 800402e:	2000      	movs	r0, #0
 8004030:	e008      	b.n	8004044 <_printf_common+0xa8>
 8004032:	2301      	movs	r3, #1
 8004034:	4652      	mov	r2, sl
 8004036:	4641      	mov	r1, r8
 8004038:	4638      	mov	r0, r7
 800403a:	47c8      	blx	r9
 800403c:	3001      	adds	r0, #1
 800403e:	d103      	bne.n	8004048 <_printf_common+0xac>
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004048:	3501      	adds	r5, #1
 800404a:	e7c6      	b.n	8003fda <_printf_common+0x3e>
 800404c:	18e1      	adds	r1, r4, r3
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	2030      	movs	r0, #48	@ 0x30
 8004052:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004056:	4422      	add	r2, r4
 8004058:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800405c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004060:	3302      	adds	r3, #2
 8004062:	e7c7      	b.n	8003ff4 <_printf_common+0x58>
 8004064:	2301      	movs	r3, #1
 8004066:	4622      	mov	r2, r4
 8004068:	4641      	mov	r1, r8
 800406a:	4638      	mov	r0, r7
 800406c:	47c8      	blx	r9
 800406e:	3001      	adds	r0, #1
 8004070:	d0e6      	beq.n	8004040 <_printf_common+0xa4>
 8004072:	3601      	adds	r6, #1
 8004074:	e7d9      	b.n	800402a <_printf_common+0x8e>
	...

08004078 <_printf_i>:
 8004078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800407c:	7e0f      	ldrb	r7, [r1, #24]
 800407e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004080:	2f78      	cmp	r7, #120	@ 0x78
 8004082:	4691      	mov	r9, r2
 8004084:	4680      	mov	r8, r0
 8004086:	460c      	mov	r4, r1
 8004088:	469a      	mov	sl, r3
 800408a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800408e:	d807      	bhi.n	80040a0 <_printf_i+0x28>
 8004090:	2f62      	cmp	r7, #98	@ 0x62
 8004092:	d80a      	bhi.n	80040aa <_printf_i+0x32>
 8004094:	2f00      	cmp	r7, #0
 8004096:	f000 80d1 	beq.w	800423c <_printf_i+0x1c4>
 800409a:	2f58      	cmp	r7, #88	@ 0x58
 800409c:	f000 80b8 	beq.w	8004210 <_printf_i+0x198>
 80040a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040a8:	e03a      	b.n	8004120 <_printf_i+0xa8>
 80040aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040ae:	2b15      	cmp	r3, #21
 80040b0:	d8f6      	bhi.n	80040a0 <_printf_i+0x28>
 80040b2:	a101      	add	r1, pc, #4	@ (adr r1, 80040b8 <_printf_i+0x40>)
 80040b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b8:	08004111 	.word	0x08004111
 80040bc:	08004125 	.word	0x08004125
 80040c0:	080040a1 	.word	0x080040a1
 80040c4:	080040a1 	.word	0x080040a1
 80040c8:	080040a1 	.word	0x080040a1
 80040cc:	080040a1 	.word	0x080040a1
 80040d0:	08004125 	.word	0x08004125
 80040d4:	080040a1 	.word	0x080040a1
 80040d8:	080040a1 	.word	0x080040a1
 80040dc:	080040a1 	.word	0x080040a1
 80040e0:	080040a1 	.word	0x080040a1
 80040e4:	08004223 	.word	0x08004223
 80040e8:	0800414f 	.word	0x0800414f
 80040ec:	080041dd 	.word	0x080041dd
 80040f0:	080040a1 	.word	0x080040a1
 80040f4:	080040a1 	.word	0x080040a1
 80040f8:	08004245 	.word	0x08004245
 80040fc:	080040a1 	.word	0x080040a1
 8004100:	0800414f 	.word	0x0800414f
 8004104:	080040a1 	.word	0x080040a1
 8004108:	080040a1 	.word	0x080040a1
 800410c:	080041e5 	.word	0x080041e5
 8004110:	6833      	ldr	r3, [r6, #0]
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6032      	str	r2, [r6, #0]
 8004118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800411c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004120:	2301      	movs	r3, #1
 8004122:	e09c      	b.n	800425e <_printf_i+0x1e6>
 8004124:	6833      	ldr	r3, [r6, #0]
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	1d19      	adds	r1, r3, #4
 800412a:	6031      	str	r1, [r6, #0]
 800412c:	0606      	lsls	r6, r0, #24
 800412e:	d501      	bpl.n	8004134 <_printf_i+0xbc>
 8004130:	681d      	ldr	r5, [r3, #0]
 8004132:	e003      	b.n	800413c <_printf_i+0xc4>
 8004134:	0645      	lsls	r5, r0, #25
 8004136:	d5fb      	bpl.n	8004130 <_printf_i+0xb8>
 8004138:	f9b3 5000 	ldrsh.w	r5, [r3]
 800413c:	2d00      	cmp	r5, #0
 800413e:	da03      	bge.n	8004148 <_printf_i+0xd0>
 8004140:	232d      	movs	r3, #45	@ 0x2d
 8004142:	426d      	negs	r5, r5
 8004144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004148:	4858      	ldr	r0, [pc, #352]	@ (80042ac <_printf_i+0x234>)
 800414a:	230a      	movs	r3, #10
 800414c:	e011      	b.n	8004172 <_printf_i+0xfa>
 800414e:	6821      	ldr	r1, [r4, #0]
 8004150:	6833      	ldr	r3, [r6, #0]
 8004152:	0608      	lsls	r0, r1, #24
 8004154:	f853 5b04 	ldr.w	r5, [r3], #4
 8004158:	d402      	bmi.n	8004160 <_printf_i+0xe8>
 800415a:	0649      	lsls	r1, r1, #25
 800415c:	bf48      	it	mi
 800415e:	b2ad      	uxthmi	r5, r5
 8004160:	2f6f      	cmp	r7, #111	@ 0x6f
 8004162:	4852      	ldr	r0, [pc, #328]	@ (80042ac <_printf_i+0x234>)
 8004164:	6033      	str	r3, [r6, #0]
 8004166:	bf14      	ite	ne
 8004168:	230a      	movne	r3, #10
 800416a:	2308      	moveq	r3, #8
 800416c:	2100      	movs	r1, #0
 800416e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004172:	6866      	ldr	r6, [r4, #4]
 8004174:	60a6      	str	r6, [r4, #8]
 8004176:	2e00      	cmp	r6, #0
 8004178:	db05      	blt.n	8004186 <_printf_i+0x10e>
 800417a:	6821      	ldr	r1, [r4, #0]
 800417c:	432e      	orrs	r6, r5
 800417e:	f021 0104 	bic.w	r1, r1, #4
 8004182:	6021      	str	r1, [r4, #0]
 8004184:	d04b      	beq.n	800421e <_printf_i+0x1a6>
 8004186:	4616      	mov	r6, r2
 8004188:	fbb5 f1f3 	udiv	r1, r5, r3
 800418c:	fb03 5711 	mls	r7, r3, r1, r5
 8004190:	5dc7      	ldrb	r7, [r0, r7]
 8004192:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004196:	462f      	mov	r7, r5
 8004198:	42bb      	cmp	r3, r7
 800419a:	460d      	mov	r5, r1
 800419c:	d9f4      	bls.n	8004188 <_printf_i+0x110>
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d10b      	bne.n	80041ba <_printf_i+0x142>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	07df      	lsls	r7, r3, #31
 80041a6:	d508      	bpl.n	80041ba <_printf_i+0x142>
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	6861      	ldr	r1, [r4, #4]
 80041ac:	4299      	cmp	r1, r3
 80041ae:	bfde      	ittt	le
 80041b0:	2330      	movle	r3, #48	@ 0x30
 80041b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041ba:	1b92      	subs	r2, r2, r6
 80041bc:	6122      	str	r2, [r4, #16]
 80041be:	f8cd a000 	str.w	sl, [sp]
 80041c2:	464b      	mov	r3, r9
 80041c4:	aa03      	add	r2, sp, #12
 80041c6:	4621      	mov	r1, r4
 80041c8:	4640      	mov	r0, r8
 80041ca:	f7ff fee7 	bl	8003f9c <_printf_common>
 80041ce:	3001      	adds	r0, #1
 80041d0:	d14a      	bne.n	8004268 <_printf_i+0x1f0>
 80041d2:	f04f 30ff 	mov.w	r0, #4294967295
 80041d6:	b004      	add	sp, #16
 80041d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	f043 0320 	orr.w	r3, r3, #32
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	4832      	ldr	r0, [pc, #200]	@ (80042b0 <_printf_i+0x238>)
 80041e6:	2778      	movs	r7, #120	@ 0x78
 80041e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	6831      	ldr	r1, [r6, #0]
 80041f0:	061f      	lsls	r7, r3, #24
 80041f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80041f6:	d402      	bmi.n	80041fe <_printf_i+0x186>
 80041f8:	065f      	lsls	r7, r3, #25
 80041fa:	bf48      	it	mi
 80041fc:	b2ad      	uxthmi	r5, r5
 80041fe:	6031      	str	r1, [r6, #0]
 8004200:	07d9      	lsls	r1, r3, #31
 8004202:	bf44      	itt	mi
 8004204:	f043 0320 	orrmi.w	r3, r3, #32
 8004208:	6023      	strmi	r3, [r4, #0]
 800420a:	b11d      	cbz	r5, 8004214 <_printf_i+0x19c>
 800420c:	2310      	movs	r3, #16
 800420e:	e7ad      	b.n	800416c <_printf_i+0xf4>
 8004210:	4826      	ldr	r0, [pc, #152]	@ (80042ac <_printf_i+0x234>)
 8004212:	e7e9      	b.n	80041e8 <_printf_i+0x170>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	f023 0320 	bic.w	r3, r3, #32
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	e7f6      	b.n	800420c <_printf_i+0x194>
 800421e:	4616      	mov	r6, r2
 8004220:	e7bd      	b.n	800419e <_printf_i+0x126>
 8004222:	6833      	ldr	r3, [r6, #0]
 8004224:	6825      	ldr	r5, [r4, #0]
 8004226:	6961      	ldr	r1, [r4, #20]
 8004228:	1d18      	adds	r0, r3, #4
 800422a:	6030      	str	r0, [r6, #0]
 800422c:	062e      	lsls	r6, r5, #24
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	d501      	bpl.n	8004236 <_printf_i+0x1be>
 8004232:	6019      	str	r1, [r3, #0]
 8004234:	e002      	b.n	800423c <_printf_i+0x1c4>
 8004236:	0668      	lsls	r0, r5, #25
 8004238:	d5fb      	bpl.n	8004232 <_printf_i+0x1ba>
 800423a:	8019      	strh	r1, [r3, #0]
 800423c:	2300      	movs	r3, #0
 800423e:	6123      	str	r3, [r4, #16]
 8004240:	4616      	mov	r6, r2
 8004242:	e7bc      	b.n	80041be <_printf_i+0x146>
 8004244:	6833      	ldr	r3, [r6, #0]
 8004246:	1d1a      	adds	r2, r3, #4
 8004248:	6032      	str	r2, [r6, #0]
 800424a:	681e      	ldr	r6, [r3, #0]
 800424c:	6862      	ldr	r2, [r4, #4]
 800424e:	2100      	movs	r1, #0
 8004250:	4630      	mov	r0, r6
 8004252:	f7fb ffc5 	bl	80001e0 <memchr>
 8004256:	b108      	cbz	r0, 800425c <_printf_i+0x1e4>
 8004258:	1b80      	subs	r0, r0, r6
 800425a:	6060      	str	r0, [r4, #4]
 800425c:	6863      	ldr	r3, [r4, #4]
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	2300      	movs	r3, #0
 8004262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004266:	e7aa      	b.n	80041be <_printf_i+0x146>
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	4632      	mov	r2, r6
 800426c:	4649      	mov	r1, r9
 800426e:	4640      	mov	r0, r8
 8004270:	47d0      	blx	sl
 8004272:	3001      	adds	r0, #1
 8004274:	d0ad      	beq.n	80041d2 <_printf_i+0x15a>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	079b      	lsls	r3, r3, #30
 800427a:	d413      	bmi.n	80042a4 <_printf_i+0x22c>
 800427c:	68e0      	ldr	r0, [r4, #12]
 800427e:	9b03      	ldr	r3, [sp, #12]
 8004280:	4298      	cmp	r0, r3
 8004282:	bfb8      	it	lt
 8004284:	4618      	movlt	r0, r3
 8004286:	e7a6      	b.n	80041d6 <_printf_i+0x15e>
 8004288:	2301      	movs	r3, #1
 800428a:	4632      	mov	r2, r6
 800428c:	4649      	mov	r1, r9
 800428e:	4640      	mov	r0, r8
 8004290:	47d0      	blx	sl
 8004292:	3001      	adds	r0, #1
 8004294:	d09d      	beq.n	80041d2 <_printf_i+0x15a>
 8004296:	3501      	adds	r5, #1
 8004298:	68e3      	ldr	r3, [r4, #12]
 800429a:	9903      	ldr	r1, [sp, #12]
 800429c:	1a5b      	subs	r3, r3, r1
 800429e:	42ab      	cmp	r3, r5
 80042a0:	dcf2      	bgt.n	8004288 <_printf_i+0x210>
 80042a2:	e7eb      	b.n	800427c <_printf_i+0x204>
 80042a4:	2500      	movs	r5, #0
 80042a6:	f104 0619 	add.w	r6, r4, #25
 80042aa:	e7f5      	b.n	8004298 <_printf_i+0x220>
 80042ac:	080063b2 	.word	0x080063b2
 80042b0:	080063c3 	.word	0x080063c3

080042b4 <std>:
 80042b4:	2300      	movs	r3, #0
 80042b6:	b510      	push	{r4, lr}
 80042b8:	4604      	mov	r4, r0
 80042ba:	e9c0 3300 	strd	r3, r3, [r0]
 80042be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042c2:	6083      	str	r3, [r0, #8]
 80042c4:	8181      	strh	r1, [r0, #12]
 80042c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042c8:	81c2      	strh	r2, [r0, #14]
 80042ca:	6183      	str	r3, [r0, #24]
 80042cc:	4619      	mov	r1, r3
 80042ce:	2208      	movs	r2, #8
 80042d0:	305c      	adds	r0, #92	@ 0x5c
 80042d2:	f000 f906 	bl	80044e2 <memset>
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <std+0x58>)
 80042d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <std+0x5c>)
 80042dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <std+0x60>)
 80042e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <std+0x64>)
 80042e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x68>)
 80042e8:	6224      	str	r4, [r4, #32]
 80042ea:	429c      	cmp	r4, r3
 80042ec:	d006      	beq.n	80042fc <std+0x48>
 80042ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042f2:	4294      	cmp	r4, r2
 80042f4:	d002      	beq.n	80042fc <std+0x48>
 80042f6:	33d0      	adds	r3, #208	@ 0xd0
 80042f8:	429c      	cmp	r4, r3
 80042fa:	d105      	bne.n	8004308 <std+0x54>
 80042fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004304:	f000 b96a 	b.w	80045dc <__retarget_lock_init_recursive>
 8004308:	bd10      	pop	{r4, pc}
 800430a:	bf00      	nop
 800430c:	0800445d 	.word	0x0800445d
 8004310:	0800447f 	.word	0x0800447f
 8004314:	080044b7 	.word	0x080044b7
 8004318:	080044db 	.word	0x080044db
 800431c:	2000030c 	.word	0x2000030c

08004320 <stdio_exit_handler>:
 8004320:	4a02      	ldr	r2, [pc, #8]	@ (800432c <stdio_exit_handler+0xc>)
 8004322:	4903      	ldr	r1, [pc, #12]	@ (8004330 <stdio_exit_handler+0x10>)
 8004324:	4803      	ldr	r0, [pc, #12]	@ (8004334 <stdio_exit_handler+0x14>)
 8004326:	f000 b869 	b.w	80043fc <_fwalk_sglue>
 800432a:	bf00      	nop
 800432c:	2000000c 	.word	0x2000000c
 8004330:	08005f31 	.word	0x08005f31
 8004334:	2000001c 	.word	0x2000001c

08004338 <cleanup_stdio>:
 8004338:	6841      	ldr	r1, [r0, #4]
 800433a:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <cleanup_stdio+0x34>)
 800433c:	4299      	cmp	r1, r3
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
 8004342:	d001      	beq.n	8004348 <cleanup_stdio+0x10>
 8004344:	f001 fdf4 	bl	8005f30 <_fflush_r>
 8004348:	68a1      	ldr	r1, [r4, #8]
 800434a:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <cleanup_stdio+0x38>)
 800434c:	4299      	cmp	r1, r3
 800434e:	d002      	beq.n	8004356 <cleanup_stdio+0x1e>
 8004350:	4620      	mov	r0, r4
 8004352:	f001 fded 	bl	8005f30 <_fflush_r>
 8004356:	68e1      	ldr	r1, [r4, #12]
 8004358:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <cleanup_stdio+0x3c>)
 800435a:	4299      	cmp	r1, r3
 800435c:	d004      	beq.n	8004368 <cleanup_stdio+0x30>
 800435e:	4620      	mov	r0, r4
 8004360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004364:	f001 bde4 	b.w	8005f30 <_fflush_r>
 8004368:	bd10      	pop	{r4, pc}
 800436a:	bf00      	nop
 800436c:	2000030c 	.word	0x2000030c
 8004370:	20000374 	.word	0x20000374
 8004374:	200003dc 	.word	0x200003dc

08004378 <global_stdio_init.part.0>:
 8004378:	b510      	push	{r4, lr}
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <global_stdio_init.part.0+0x30>)
 800437c:	4c0b      	ldr	r4, [pc, #44]	@ (80043ac <global_stdio_init.part.0+0x34>)
 800437e:	4a0c      	ldr	r2, [pc, #48]	@ (80043b0 <global_stdio_init.part.0+0x38>)
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	4620      	mov	r0, r4
 8004384:	2200      	movs	r2, #0
 8004386:	2104      	movs	r1, #4
 8004388:	f7ff ff94 	bl	80042b4 <std>
 800438c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004390:	2201      	movs	r2, #1
 8004392:	2109      	movs	r1, #9
 8004394:	f7ff ff8e 	bl	80042b4 <std>
 8004398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800439c:	2202      	movs	r2, #2
 800439e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a2:	2112      	movs	r1, #18
 80043a4:	f7ff bf86 	b.w	80042b4 <std>
 80043a8:	20000444 	.word	0x20000444
 80043ac:	2000030c 	.word	0x2000030c
 80043b0:	08004321 	.word	0x08004321

080043b4 <__sfp_lock_acquire>:
 80043b4:	4801      	ldr	r0, [pc, #4]	@ (80043bc <__sfp_lock_acquire+0x8>)
 80043b6:	f000 b912 	b.w	80045de <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	2000044d 	.word	0x2000044d

080043c0 <__sfp_lock_release>:
 80043c0:	4801      	ldr	r0, [pc, #4]	@ (80043c8 <__sfp_lock_release+0x8>)
 80043c2:	f000 b90d 	b.w	80045e0 <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	2000044d 	.word	0x2000044d

080043cc <__sinit>:
 80043cc:	b510      	push	{r4, lr}
 80043ce:	4604      	mov	r4, r0
 80043d0:	f7ff fff0 	bl	80043b4 <__sfp_lock_acquire>
 80043d4:	6a23      	ldr	r3, [r4, #32]
 80043d6:	b11b      	cbz	r3, 80043e0 <__sinit+0x14>
 80043d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043dc:	f7ff bff0 	b.w	80043c0 <__sfp_lock_release>
 80043e0:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <__sinit+0x28>)
 80043e2:	6223      	str	r3, [r4, #32]
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <__sinit+0x2c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f5      	bne.n	80043d8 <__sinit+0xc>
 80043ec:	f7ff ffc4 	bl	8004378 <global_stdio_init.part.0>
 80043f0:	e7f2      	b.n	80043d8 <__sinit+0xc>
 80043f2:	bf00      	nop
 80043f4:	08004339 	.word	0x08004339
 80043f8:	20000444 	.word	0x20000444

080043fc <_fwalk_sglue>:
 80043fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004400:	4607      	mov	r7, r0
 8004402:	4688      	mov	r8, r1
 8004404:	4614      	mov	r4, r2
 8004406:	2600      	movs	r6, #0
 8004408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800440c:	f1b9 0901 	subs.w	r9, r9, #1
 8004410:	d505      	bpl.n	800441e <_fwalk_sglue+0x22>
 8004412:	6824      	ldr	r4, [r4, #0]
 8004414:	2c00      	cmp	r4, #0
 8004416:	d1f7      	bne.n	8004408 <_fwalk_sglue+0xc>
 8004418:	4630      	mov	r0, r6
 800441a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800441e:	89ab      	ldrh	r3, [r5, #12]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d907      	bls.n	8004434 <_fwalk_sglue+0x38>
 8004424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004428:	3301      	adds	r3, #1
 800442a:	d003      	beq.n	8004434 <_fwalk_sglue+0x38>
 800442c:	4629      	mov	r1, r5
 800442e:	4638      	mov	r0, r7
 8004430:	47c0      	blx	r8
 8004432:	4306      	orrs	r6, r0
 8004434:	3568      	adds	r5, #104	@ 0x68
 8004436:	e7e9      	b.n	800440c <_fwalk_sglue+0x10>

08004438 <iprintf>:
 8004438:	b40f      	push	{r0, r1, r2, r3}
 800443a:	b507      	push	{r0, r1, r2, lr}
 800443c:	4906      	ldr	r1, [pc, #24]	@ (8004458 <iprintf+0x20>)
 800443e:	ab04      	add	r3, sp, #16
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	f853 2b04 	ldr.w	r2, [r3], #4
 8004446:	6881      	ldr	r1, [r0, #8]
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	f001 fbd5 	bl	8005bf8 <_vfiprintf_r>
 800444e:	b003      	add	sp, #12
 8004450:	f85d eb04 	ldr.w	lr, [sp], #4
 8004454:	b004      	add	sp, #16
 8004456:	4770      	bx	lr
 8004458:	20000018 	.word	0x20000018

0800445c <__sread>:
 800445c:	b510      	push	{r4, lr}
 800445e:	460c      	mov	r4, r1
 8004460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004464:	f000 f86c 	bl	8004540 <_read_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	bfab      	itete	ge
 800446c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800446e:	89a3      	ldrhlt	r3, [r4, #12]
 8004470:	181b      	addge	r3, r3, r0
 8004472:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004476:	bfac      	ite	ge
 8004478:	6563      	strge	r3, [r4, #84]	@ 0x54
 800447a:	81a3      	strhlt	r3, [r4, #12]
 800447c:	bd10      	pop	{r4, pc}

0800447e <__swrite>:
 800447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004482:	461f      	mov	r7, r3
 8004484:	898b      	ldrh	r3, [r1, #12]
 8004486:	05db      	lsls	r3, r3, #23
 8004488:	4605      	mov	r5, r0
 800448a:	460c      	mov	r4, r1
 800448c:	4616      	mov	r6, r2
 800448e:	d505      	bpl.n	800449c <__swrite+0x1e>
 8004490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004494:	2302      	movs	r3, #2
 8004496:	2200      	movs	r2, #0
 8004498:	f000 f840 	bl	800451c <_lseek_r>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	4632      	mov	r2, r6
 80044aa:	463b      	mov	r3, r7
 80044ac:	4628      	mov	r0, r5
 80044ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044b2:	f000 b857 	b.w	8004564 <_write_r>

080044b6 <__sseek>:
 80044b6:	b510      	push	{r4, lr}
 80044b8:	460c      	mov	r4, r1
 80044ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044be:	f000 f82d 	bl	800451c <_lseek_r>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	bf15      	itete	ne
 80044c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044d2:	81a3      	strheq	r3, [r4, #12]
 80044d4:	bf18      	it	ne
 80044d6:	81a3      	strhne	r3, [r4, #12]
 80044d8:	bd10      	pop	{r4, pc}

080044da <__sclose>:
 80044da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044de:	f000 b80d 	b.w	80044fc <_close_r>

080044e2 <memset>:
 80044e2:	4402      	add	r2, r0
 80044e4:	4603      	mov	r3, r0
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d100      	bne.n	80044ec <memset+0xa>
 80044ea:	4770      	bx	lr
 80044ec:	f803 1b01 	strb.w	r1, [r3], #1
 80044f0:	e7f9      	b.n	80044e6 <memset+0x4>
	...

080044f4 <_localeconv_r>:
 80044f4:	4800      	ldr	r0, [pc, #0]	@ (80044f8 <_localeconv_r+0x4>)
 80044f6:	4770      	bx	lr
 80044f8:	20000158 	.word	0x20000158

080044fc <_close_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4d06      	ldr	r5, [pc, #24]	@ (8004518 <_close_r+0x1c>)
 8004500:	2300      	movs	r3, #0
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	602b      	str	r3, [r5, #0]
 8004508:	f7fd f893 	bl	8001632 <_close>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d102      	bne.n	8004516 <_close_r+0x1a>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	b103      	cbz	r3, 8004516 <_close_r+0x1a>
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	20000448 	.word	0x20000448

0800451c <_lseek_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4d07      	ldr	r5, [pc, #28]	@ (800453c <_lseek_r+0x20>)
 8004520:	4604      	mov	r4, r0
 8004522:	4608      	mov	r0, r1
 8004524:	4611      	mov	r1, r2
 8004526:	2200      	movs	r2, #0
 8004528:	602a      	str	r2, [r5, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	f7fd f8a8 	bl	8001680 <_lseek>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_lseek_r+0x1e>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_lseek_r+0x1e>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	20000448 	.word	0x20000448

08004540 <_read_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4d07      	ldr	r5, [pc, #28]	@ (8004560 <_read_r+0x20>)
 8004544:	4604      	mov	r4, r0
 8004546:	4608      	mov	r0, r1
 8004548:	4611      	mov	r1, r2
 800454a:	2200      	movs	r2, #0
 800454c:	602a      	str	r2, [r5, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	f7fd f852 	bl	80015f8 <_read>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_read_r+0x1e>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	b103      	cbz	r3, 800455e <_read_r+0x1e>
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	20000448 	.word	0x20000448

08004564 <_write_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4d07      	ldr	r5, [pc, #28]	@ (8004584 <_write_r+0x20>)
 8004568:	4604      	mov	r4, r0
 800456a:	4608      	mov	r0, r1
 800456c:	4611      	mov	r1, r2
 800456e:	2200      	movs	r2, #0
 8004570:	602a      	str	r2, [r5, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	f7fc fea6 	bl	80012c4 <_write>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_write_r+0x1e>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_write_r+0x1e>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	20000448 	.word	0x20000448

08004588 <__errno>:
 8004588:	4b01      	ldr	r3, [pc, #4]	@ (8004590 <__errno+0x8>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000018 	.word	0x20000018

08004594 <__libc_init_array>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4d0d      	ldr	r5, [pc, #52]	@ (80045cc <__libc_init_array+0x38>)
 8004598:	4c0d      	ldr	r4, [pc, #52]	@ (80045d0 <__libc_init_array+0x3c>)
 800459a:	1b64      	subs	r4, r4, r5
 800459c:	10a4      	asrs	r4, r4, #2
 800459e:	2600      	movs	r6, #0
 80045a0:	42a6      	cmp	r6, r4
 80045a2:	d109      	bne.n	80045b8 <__libc_init_array+0x24>
 80045a4:	4d0b      	ldr	r5, [pc, #44]	@ (80045d4 <__libc_init_array+0x40>)
 80045a6:	4c0c      	ldr	r4, [pc, #48]	@ (80045d8 <__libc_init_array+0x44>)
 80045a8:	f001 fec2 	bl	8006330 <_init>
 80045ac:	1b64      	subs	r4, r4, r5
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	2600      	movs	r6, #0
 80045b2:	42a6      	cmp	r6, r4
 80045b4:	d105      	bne.n	80045c2 <__libc_init_array+0x2e>
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045bc:	4798      	blx	r3
 80045be:	3601      	adds	r6, #1
 80045c0:	e7ee      	b.n	80045a0 <__libc_init_array+0xc>
 80045c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c6:	4798      	blx	r3
 80045c8:	3601      	adds	r6, #1
 80045ca:	e7f2      	b.n	80045b2 <__libc_init_array+0x1e>
 80045cc:	0800671c 	.word	0x0800671c
 80045d0:	0800671c 	.word	0x0800671c
 80045d4:	0800671c 	.word	0x0800671c
 80045d8:	08006720 	.word	0x08006720

080045dc <__retarget_lock_init_recursive>:
 80045dc:	4770      	bx	lr

080045de <__retarget_lock_acquire_recursive>:
 80045de:	4770      	bx	lr

080045e0 <__retarget_lock_release_recursive>:
 80045e0:	4770      	bx	lr

080045e2 <memcpy>:
 80045e2:	440a      	add	r2, r1
 80045e4:	4291      	cmp	r1, r2
 80045e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80045ea:	d100      	bne.n	80045ee <memcpy+0xc>
 80045ec:	4770      	bx	lr
 80045ee:	b510      	push	{r4, lr}
 80045f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045f8:	4291      	cmp	r1, r2
 80045fa:	d1f9      	bne.n	80045f0 <memcpy+0xe>
 80045fc:	bd10      	pop	{r4, pc}

080045fe <quorem>:
 80045fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004602:	6903      	ldr	r3, [r0, #16]
 8004604:	690c      	ldr	r4, [r1, #16]
 8004606:	42a3      	cmp	r3, r4
 8004608:	4607      	mov	r7, r0
 800460a:	db7e      	blt.n	800470a <quorem+0x10c>
 800460c:	3c01      	subs	r4, #1
 800460e:	f101 0814 	add.w	r8, r1, #20
 8004612:	00a3      	lsls	r3, r4, #2
 8004614:	f100 0514 	add.w	r5, r0, #20
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004628:	3301      	adds	r3, #1
 800462a:	429a      	cmp	r2, r3
 800462c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004630:	fbb2 f6f3 	udiv	r6, r2, r3
 8004634:	d32e      	bcc.n	8004694 <quorem+0x96>
 8004636:	f04f 0a00 	mov.w	sl, #0
 800463a:	46c4      	mov	ip, r8
 800463c:	46ae      	mov	lr, r5
 800463e:	46d3      	mov	fp, sl
 8004640:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004644:	b298      	uxth	r0, r3
 8004646:	fb06 a000 	mla	r0, r6, r0, sl
 800464a:	0c02      	lsrs	r2, r0, #16
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	fb06 2303 	mla	r3, r6, r3, r2
 8004652:	f8de 2000 	ldr.w	r2, [lr]
 8004656:	b280      	uxth	r0, r0
 8004658:	b292      	uxth	r2, r2
 800465a:	1a12      	subs	r2, r2, r0
 800465c:	445a      	add	r2, fp
 800465e:	f8de 0000 	ldr.w	r0, [lr]
 8004662:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004666:	b29b      	uxth	r3, r3
 8004668:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800466c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004670:	b292      	uxth	r2, r2
 8004672:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004676:	45e1      	cmp	r9, ip
 8004678:	f84e 2b04 	str.w	r2, [lr], #4
 800467c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004680:	d2de      	bcs.n	8004640 <quorem+0x42>
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	58eb      	ldr	r3, [r5, r3]
 8004686:	b92b      	cbnz	r3, 8004694 <quorem+0x96>
 8004688:	9b01      	ldr	r3, [sp, #4]
 800468a:	3b04      	subs	r3, #4
 800468c:	429d      	cmp	r5, r3
 800468e:	461a      	mov	r2, r3
 8004690:	d32f      	bcc.n	80046f2 <quorem+0xf4>
 8004692:	613c      	str	r4, [r7, #16]
 8004694:	4638      	mov	r0, r7
 8004696:	f001 f97d 	bl	8005994 <__mcmp>
 800469a:	2800      	cmp	r0, #0
 800469c:	db25      	blt.n	80046ea <quorem+0xec>
 800469e:	4629      	mov	r1, r5
 80046a0:	2000      	movs	r0, #0
 80046a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80046a6:	f8d1 c000 	ldr.w	ip, [r1]
 80046aa:	fa1f fe82 	uxth.w	lr, r2
 80046ae:	fa1f f38c 	uxth.w	r3, ip
 80046b2:	eba3 030e 	sub.w	r3, r3, lr
 80046b6:	4403      	add	r3, r0
 80046b8:	0c12      	lsrs	r2, r2, #16
 80046ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80046be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046c8:	45c1      	cmp	r9, r8
 80046ca:	f841 3b04 	str.w	r3, [r1], #4
 80046ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80046d2:	d2e6      	bcs.n	80046a2 <quorem+0xa4>
 80046d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046dc:	b922      	cbnz	r2, 80046e8 <quorem+0xea>
 80046de:	3b04      	subs	r3, #4
 80046e0:	429d      	cmp	r5, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	d30b      	bcc.n	80046fe <quorem+0x100>
 80046e6:	613c      	str	r4, [r7, #16]
 80046e8:	3601      	adds	r6, #1
 80046ea:	4630      	mov	r0, r6
 80046ec:	b003      	add	sp, #12
 80046ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	3b04      	subs	r3, #4
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	d1cb      	bne.n	8004692 <quorem+0x94>
 80046fa:	3c01      	subs	r4, #1
 80046fc:	e7c6      	b.n	800468c <quorem+0x8e>
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	3b04      	subs	r3, #4
 8004702:	2a00      	cmp	r2, #0
 8004704:	d1ef      	bne.n	80046e6 <quorem+0xe8>
 8004706:	3c01      	subs	r4, #1
 8004708:	e7ea      	b.n	80046e0 <quorem+0xe2>
 800470a:	2000      	movs	r0, #0
 800470c:	e7ee      	b.n	80046ec <quorem+0xee>
	...

08004710 <_dtoa_r>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	69c7      	ldr	r7, [r0, #28]
 8004716:	b097      	sub	sp, #92	@ 0x5c
 8004718:	ed8d 0b04 	vstr	d0, [sp, #16]
 800471c:	ec55 4b10 	vmov	r4, r5, d0
 8004720:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004722:	9107      	str	r1, [sp, #28]
 8004724:	4681      	mov	r9, r0
 8004726:	920c      	str	r2, [sp, #48]	@ 0x30
 8004728:	9311      	str	r3, [sp, #68]	@ 0x44
 800472a:	b97f      	cbnz	r7, 800474c <_dtoa_r+0x3c>
 800472c:	2010      	movs	r0, #16
 800472e:	f000 fe09 	bl	8005344 <malloc>
 8004732:	4602      	mov	r2, r0
 8004734:	f8c9 001c 	str.w	r0, [r9, #28]
 8004738:	b920      	cbnz	r0, 8004744 <_dtoa_r+0x34>
 800473a:	4ba9      	ldr	r3, [pc, #676]	@ (80049e0 <_dtoa_r+0x2d0>)
 800473c:	21ef      	movs	r1, #239	@ 0xef
 800473e:	48a9      	ldr	r0, [pc, #676]	@ (80049e4 <_dtoa_r+0x2d4>)
 8004740:	f001 fcc2 	bl	80060c8 <__assert_func>
 8004744:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004748:	6007      	str	r7, [r0, #0]
 800474a:	60c7      	str	r7, [r0, #12]
 800474c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	b159      	cbz	r1, 800476c <_dtoa_r+0x5c>
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	604a      	str	r2, [r1, #4]
 8004758:	2301      	movs	r3, #1
 800475a:	4093      	lsls	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
 800475e:	4648      	mov	r0, r9
 8004760:	f000 fee6 	bl	8005530 <_Bfree>
 8004764:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	1e2b      	subs	r3, r5, #0
 800476e:	bfb9      	ittee	lt
 8004770:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004774:	9305      	strlt	r3, [sp, #20]
 8004776:	2300      	movge	r3, #0
 8004778:	6033      	strge	r3, [r6, #0]
 800477a:	9f05      	ldr	r7, [sp, #20]
 800477c:	4b9a      	ldr	r3, [pc, #616]	@ (80049e8 <_dtoa_r+0x2d8>)
 800477e:	bfbc      	itt	lt
 8004780:	2201      	movlt	r2, #1
 8004782:	6032      	strlt	r2, [r6, #0]
 8004784:	43bb      	bics	r3, r7
 8004786:	d112      	bne.n	80047ae <_dtoa_r+0x9e>
 8004788:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800478a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004794:	4323      	orrs	r3, r4
 8004796:	f000 855a 	beq.w	800524e <_dtoa_r+0xb3e>
 800479a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800479c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80049fc <_dtoa_r+0x2ec>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 855c 	beq.w	800525e <_dtoa_r+0xb4e>
 80047a6:	f10a 0303 	add.w	r3, sl, #3
 80047aa:	f000 bd56 	b.w	800525a <_dtoa_r+0xb4a>
 80047ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80047b2:	2200      	movs	r2, #0
 80047b4:	ec51 0b17 	vmov	r0, r1, d7
 80047b8:	2300      	movs	r3, #0
 80047ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80047be:	f7fc f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80047c2:	4680      	mov	r8, r0
 80047c4:	b158      	cbz	r0, 80047de <_dtoa_r+0xce>
 80047c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80047c8:	2301      	movs	r3, #1
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047ce:	b113      	cbz	r3, 80047d6 <_dtoa_r+0xc6>
 80047d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80047d2:	4b86      	ldr	r3, [pc, #536]	@ (80049ec <_dtoa_r+0x2dc>)
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004a00 <_dtoa_r+0x2f0>
 80047da:	f000 bd40 	b.w	800525e <_dtoa_r+0xb4e>
 80047de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80047e2:	aa14      	add	r2, sp, #80	@ 0x50
 80047e4:	a915      	add	r1, sp, #84	@ 0x54
 80047e6:	4648      	mov	r0, r9
 80047e8:	f001 f984 	bl	8005af4 <__d2b>
 80047ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80047f0:	9002      	str	r0, [sp, #8]
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	d078      	beq.n	80048e8 <_dtoa_r+0x1d8>
 80047f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80047fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004804:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004808:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800480c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004810:	4619      	mov	r1, r3
 8004812:	2200      	movs	r2, #0
 8004814:	4b76      	ldr	r3, [pc, #472]	@ (80049f0 <_dtoa_r+0x2e0>)
 8004816:	f7fb fd3f 	bl	8000298 <__aeabi_dsub>
 800481a:	a36b      	add	r3, pc, #428	@ (adr r3, 80049c8 <_dtoa_r+0x2b8>)
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f7fb fef2 	bl	8000608 <__aeabi_dmul>
 8004824:	a36a      	add	r3, pc, #424	@ (adr r3, 80049d0 <_dtoa_r+0x2c0>)
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f7fb fd37 	bl	800029c <__adddf3>
 800482e:	4604      	mov	r4, r0
 8004830:	4630      	mov	r0, r6
 8004832:	460d      	mov	r5, r1
 8004834:	f7fb fe7e 	bl	8000534 <__aeabi_i2d>
 8004838:	a367      	add	r3, pc, #412	@ (adr r3, 80049d8 <_dtoa_r+0x2c8>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fb fee3 	bl	8000608 <__aeabi_dmul>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fb fd27 	bl	800029c <__adddf3>
 800484e:	4604      	mov	r4, r0
 8004850:	460d      	mov	r5, r1
 8004852:	f7fc f989 	bl	8000b68 <__aeabi_d2iz>
 8004856:	2200      	movs	r2, #0
 8004858:	4607      	mov	r7, r0
 800485a:	2300      	movs	r3, #0
 800485c:	4620      	mov	r0, r4
 800485e:	4629      	mov	r1, r5
 8004860:	f7fc f944 	bl	8000aec <__aeabi_dcmplt>
 8004864:	b140      	cbz	r0, 8004878 <_dtoa_r+0x168>
 8004866:	4638      	mov	r0, r7
 8004868:	f7fb fe64 	bl	8000534 <__aeabi_i2d>
 800486c:	4622      	mov	r2, r4
 800486e:	462b      	mov	r3, r5
 8004870:	f7fc f932 	bl	8000ad8 <__aeabi_dcmpeq>
 8004874:	b900      	cbnz	r0, 8004878 <_dtoa_r+0x168>
 8004876:	3f01      	subs	r7, #1
 8004878:	2f16      	cmp	r7, #22
 800487a:	d852      	bhi.n	8004922 <_dtoa_r+0x212>
 800487c:	4b5d      	ldr	r3, [pc, #372]	@ (80049f4 <_dtoa_r+0x2e4>)
 800487e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800488a:	f7fc f92f 	bl	8000aec <__aeabi_dcmplt>
 800488e:	2800      	cmp	r0, #0
 8004890:	d049      	beq.n	8004926 <_dtoa_r+0x216>
 8004892:	3f01      	subs	r7, #1
 8004894:	2300      	movs	r3, #0
 8004896:	9310      	str	r3, [sp, #64]	@ 0x40
 8004898:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800489a:	1b9b      	subs	r3, r3, r6
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	bf45      	ittet	mi
 80048a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80048a4:	9300      	strmi	r3, [sp, #0]
 80048a6:	2300      	movpl	r3, #0
 80048a8:	2300      	movmi	r3, #0
 80048aa:	9206      	str	r2, [sp, #24]
 80048ac:	bf54      	ite	pl
 80048ae:	9300      	strpl	r3, [sp, #0]
 80048b0:	9306      	strmi	r3, [sp, #24]
 80048b2:	2f00      	cmp	r7, #0
 80048b4:	db39      	blt.n	800492a <_dtoa_r+0x21a>
 80048b6:	9b06      	ldr	r3, [sp, #24]
 80048b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80048ba:	443b      	add	r3, r7
 80048bc:	9306      	str	r3, [sp, #24]
 80048be:	2300      	movs	r3, #0
 80048c0:	9308      	str	r3, [sp, #32]
 80048c2:	9b07      	ldr	r3, [sp, #28]
 80048c4:	2b09      	cmp	r3, #9
 80048c6:	d863      	bhi.n	8004990 <_dtoa_r+0x280>
 80048c8:	2b05      	cmp	r3, #5
 80048ca:	bfc4      	itt	gt
 80048cc:	3b04      	subgt	r3, #4
 80048ce:	9307      	strgt	r3, [sp, #28]
 80048d0:	9b07      	ldr	r3, [sp, #28]
 80048d2:	f1a3 0302 	sub.w	r3, r3, #2
 80048d6:	bfcc      	ite	gt
 80048d8:	2400      	movgt	r4, #0
 80048da:	2401      	movle	r4, #1
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d863      	bhi.n	80049a8 <_dtoa_r+0x298>
 80048e0:	e8df f003 	tbb	[pc, r3]
 80048e4:	2b375452 	.word	0x2b375452
 80048e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80048ec:	441e      	add	r6, r3
 80048ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	bfc1      	itttt	gt
 80048f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80048fa:	409f      	lslgt	r7, r3
 80048fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004900:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004904:	bfd6      	itet	le
 8004906:	f1c3 0320 	rsble	r3, r3, #32
 800490a:	ea47 0003 	orrgt.w	r0, r7, r3
 800490e:	fa04 f003 	lslle.w	r0, r4, r3
 8004912:	f7fb fdff 	bl	8000514 <__aeabi_ui2d>
 8004916:	2201      	movs	r2, #1
 8004918:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800491c:	3e01      	subs	r6, #1
 800491e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004920:	e776      	b.n	8004810 <_dtoa_r+0x100>
 8004922:	2301      	movs	r3, #1
 8004924:	e7b7      	b.n	8004896 <_dtoa_r+0x186>
 8004926:	9010      	str	r0, [sp, #64]	@ 0x40
 8004928:	e7b6      	b.n	8004898 <_dtoa_r+0x188>
 800492a:	9b00      	ldr	r3, [sp, #0]
 800492c:	1bdb      	subs	r3, r3, r7
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	427b      	negs	r3, r7
 8004932:	9308      	str	r3, [sp, #32]
 8004934:	2300      	movs	r3, #0
 8004936:	930d      	str	r3, [sp, #52]	@ 0x34
 8004938:	e7c3      	b.n	80048c2 <_dtoa_r+0x1b2>
 800493a:	2301      	movs	r3, #1
 800493c:	9309      	str	r3, [sp, #36]	@ 0x24
 800493e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004940:	eb07 0b03 	add.w	fp, r7, r3
 8004944:	f10b 0301 	add.w	r3, fp, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	9303      	str	r3, [sp, #12]
 800494c:	bfb8      	it	lt
 800494e:	2301      	movlt	r3, #1
 8004950:	e006      	b.n	8004960 <_dtoa_r+0x250>
 8004952:	2301      	movs	r3, #1
 8004954:	9309      	str	r3, [sp, #36]	@ 0x24
 8004956:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004958:	2b00      	cmp	r3, #0
 800495a:	dd28      	ble.n	80049ae <_dtoa_r+0x29e>
 800495c:	469b      	mov	fp, r3
 800495e:	9303      	str	r3, [sp, #12]
 8004960:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004964:	2100      	movs	r1, #0
 8004966:	2204      	movs	r2, #4
 8004968:	f102 0514 	add.w	r5, r2, #20
 800496c:	429d      	cmp	r5, r3
 800496e:	d926      	bls.n	80049be <_dtoa_r+0x2ae>
 8004970:	6041      	str	r1, [r0, #4]
 8004972:	4648      	mov	r0, r9
 8004974:	f000 fd9c 	bl	80054b0 <_Balloc>
 8004978:	4682      	mov	sl, r0
 800497a:	2800      	cmp	r0, #0
 800497c:	d142      	bne.n	8004a04 <_dtoa_r+0x2f4>
 800497e:	4b1e      	ldr	r3, [pc, #120]	@ (80049f8 <_dtoa_r+0x2e8>)
 8004980:	4602      	mov	r2, r0
 8004982:	f240 11af 	movw	r1, #431	@ 0x1af
 8004986:	e6da      	b.n	800473e <_dtoa_r+0x2e>
 8004988:	2300      	movs	r3, #0
 800498a:	e7e3      	b.n	8004954 <_dtoa_r+0x244>
 800498c:	2300      	movs	r3, #0
 800498e:	e7d5      	b.n	800493c <_dtoa_r+0x22c>
 8004990:	2401      	movs	r4, #1
 8004992:	2300      	movs	r3, #0
 8004994:	9307      	str	r3, [sp, #28]
 8004996:	9409      	str	r4, [sp, #36]	@ 0x24
 8004998:	f04f 3bff 	mov.w	fp, #4294967295
 800499c:	2200      	movs	r2, #0
 800499e:	f8cd b00c 	str.w	fp, [sp, #12]
 80049a2:	2312      	movs	r3, #18
 80049a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80049a6:	e7db      	b.n	8004960 <_dtoa_r+0x250>
 80049a8:	2301      	movs	r3, #1
 80049aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ac:	e7f4      	b.n	8004998 <_dtoa_r+0x288>
 80049ae:	f04f 0b01 	mov.w	fp, #1
 80049b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80049b6:	465b      	mov	r3, fp
 80049b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80049bc:	e7d0      	b.n	8004960 <_dtoa_r+0x250>
 80049be:	3101      	adds	r1, #1
 80049c0:	0052      	lsls	r2, r2, #1
 80049c2:	e7d1      	b.n	8004968 <_dtoa_r+0x258>
 80049c4:	f3af 8000 	nop.w
 80049c8:	636f4361 	.word	0x636f4361
 80049cc:	3fd287a7 	.word	0x3fd287a7
 80049d0:	8b60c8b3 	.word	0x8b60c8b3
 80049d4:	3fc68a28 	.word	0x3fc68a28
 80049d8:	509f79fb 	.word	0x509f79fb
 80049dc:	3fd34413 	.word	0x3fd34413
 80049e0:	080063e1 	.word	0x080063e1
 80049e4:	080063f8 	.word	0x080063f8
 80049e8:	7ff00000 	.word	0x7ff00000
 80049ec:	080063b1 	.word	0x080063b1
 80049f0:	3ff80000 	.word	0x3ff80000
 80049f4:	08006548 	.word	0x08006548
 80049f8:	08006450 	.word	0x08006450
 80049fc:	080063dd 	.word	0x080063dd
 8004a00:	080063b0 	.word	0x080063b0
 8004a04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004a08:	6018      	str	r0, [r3, #0]
 8004a0a:	9b03      	ldr	r3, [sp, #12]
 8004a0c:	2b0e      	cmp	r3, #14
 8004a0e:	f200 80a1 	bhi.w	8004b54 <_dtoa_r+0x444>
 8004a12:	2c00      	cmp	r4, #0
 8004a14:	f000 809e 	beq.w	8004b54 <_dtoa_r+0x444>
 8004a18:	2f00      	cmp	r7, #0
 8004a1a:	dd33      	ble.n	8004a84 <_dtoa_r+0x374>
 8004a1c:	4b9c      	ldr	r3, [pc, #624]	@ (8004c90 <_dtoa_r+0x580>)
 8004a1e:	f007 020f 	and.w	r2, r7, #15
 8004a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a26:	ed93 7b00 	vldr	d7, [r3]
 8004a2a:	05f8      	lsls	r0, r7, #23
 8004a2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004a30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004a34:	d516      	bpl.n	8004a64 <_dtoa_r+0x354>
 8004a36:	4b97      	ldr	r3, [pc, #604]	@ (8004c94 <_dtoa_r+0x584>)
 8004a38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a40:	f7fb ff0c 	bl	800085c <__aeabi_ddiv>
 8004a44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a48:	f004 040f 	and.w	r4, r4, #15
 8004a4c:	2603      	movs	r6, #3
 8004a4e:	4d91      	ldr	r5, [pc, #580]	@ (8004c94 <_dtoa_r+0x584>)
 8004a50:	b954      	cbnz	r4, 8004a68 <_dtoa_r+0x358>
 8004a52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a5a:	f7fb feff 	bl	800085c <__aeabi_ddiv>
 8004a5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a62:	e028      	b.n	8004ab6 <_dtoa_r+0x3a6>
 8004a64:	2602      	movs	r6, #2
 8004a66:	e7f2      	b.n	8004a4e <_dtoa_r+0x33e>
 8004a68:	07e1      	lsls	r1, r4, #31
 8004a6a:	d508      	bpl.n	8004a7e <_dtoa_r+0x36e>
 8004a6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004a70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a74:	f7fb fdc8 	bl	8000608 <__aeabi_dmul>
 8004a78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	1064      	asrs	r4, r4, #1
 8004a80:	3508      	adds	r5, #8
 8004a82:	e7e5      	b.n	8004a50 <_dtoa_r+0x340>
 8004a84:	f000 80af 	beq.w	8004be6 <_dtoa_r+0x4d6>
 8004a88:	427c      	negs	r4, r7
 8004a8a:	4b81      	ldr	r3, [pc, #516]	@ (8004c90 <_dtoa_r+0x580>)
 8004a8c:	4d81      	ldr	r5, [pc, #516]	@ (8004c94 <_dtoa_r+0x584>)
 8004a8e:	f004 020f 	and.w	r2, r4, #15
 8004a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a9e:	f7fb fdb3 	bl	8000608 <__aeabi_dmul>
 8004aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aa6:	1124      	asrs	r4, r4, #4
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2602      	movs	r6, #2
 8004aac:	2c00      	cmp	r4, #0
 8004aae:	f040 808f 	bne.w	8004bd0 <_dtoa_r+0x4c0>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1d3      	bne.n	8004a5e <_dtoa_r+0x34e>
 8004ab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004ab8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8094 	beq.w	8004bea <_dtoa_r+0x4da>
 8004ac2:	4b75      	ldr	r3, [pc, #468]	@ (8004c98 <_dtoa_r+0x588>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f7fc f80f 	bl	8000aec <__aeabi_dcmplt>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f000 808b 	beq.w	8004bea <_dtoa_r+0x4da>
 8004ad4:	9b03      	ldr	r3, [sp, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8087 	beq.w	8004bea <_dtoa_r+0x4da>
 8004adc:	f1bb 0f00 	cmp.w	fp, #0
 8004ae0:	dd34      	ble.n	8004b4c <_dtoa_r+0x43c>
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4b6d      	ldr	r3, [pc, #436]	@ (8004c9c <_dtoa_r+0x58c>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	4629      	mov	r1, r5
 8004aea:	f7fb fd8d 	bl	8000608 <__aeabi_dmul>
 8004aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004af2:	f107 38ff 	add.w	r8, r7, #4294967295
 8004af6:	3601      	adds	r6, #1
 8004af8:	465c      	mov	r4, fp
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7fb fd1a 	bl	8000534 <__aeabi_i2d>
 8004b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b04:	f7fb fd80 	bl	8000608 <__aeabi_dmul>
 8004b08:	4b65      	ldr	r3, [pc, #404]	@ (8004ca0 <_dtoa_r+0x590>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f7fb fbc6 	bl	800029c <__adddf3>
 8004b10:	4605      	mov	r5, r0
 8004b12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004b16:	2c00      	cmp	r4, #0
 8004b18:	d16a      	bne.n	8004bf0 <_dtoa_r+0x4e0>
 8004b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b1e:	4b61      	ldr	r3, [pc, #388]	@ (8004ca4 <_dtoa_r+0x594>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	f7fb fbb9 	bl	8000298 <__aeabi_dsub>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b2e:	462a      	mov	r2, r5
 8004b30:	4633      	mov	r3, r6
 8004b32:	f7fb fff9 	bl	8000b28 <__aeabi_dcmpgt>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	f040 8298 	bne.w	800506c <_dtoa_r+0x95c>
 8004b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b40:	462a      	mov	r2, r5
 8004b42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b46:	f7fb ffd1 	bl	8000aec <__aeabi_dcmplt>
 8004b4a:	bb38      	cbnz	r0, 8004b9c <_dtoa_r+0x48c>
 8004b4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004b50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f2c0 8157 	blt.w	8004e0a <_dtoa_r+0x6fa>
 8004b5c:	2f0e      	cmp	r7, #14
 8004b5e:	f300 8154 	bgt.w	8004e0a <_dtoa_r+0x6fa>
 8004b62:	4b4b      	ldr	r3, [pc, #300]	@ (8004c90 <_dtoa_r+0x580>)
 8004b64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b68:	ed93 7b00 	vldr	d7, [r3]
 8004b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	ed8d 7b00 	vstr	d7, [sp]
 8004b74:	f280 80e5 	bge.w	8004d42 <_dtoa_r+0x632>
 8004b78:	9b03      	ldr	r3, [sp, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f300 80e1 	bgt.w	8004d42 <_dtoa_r+0x632>
 8004b80:	d10c      	bne.n	8004b9c <_dtoa_r+0x48c>
 8004b82:	4b48      	ldr	r3, [pc, #288]	@ (8004ca4 <_dtoa_r+0x594>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	ec51 0b17 	vmov	r0, r1, d7
 8004b8a:	f7fb fd3d 	bl	8000608 <__aeabi_dmul>
 8004b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b92:	f7fb ffbf 	bl	8000b14 <__aeabi_dcmpge>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	f000 8266 	beq.w	8005068 <_dtoa_r+0x958>
 8004b9c:	2400      	movs	r4, #0
 8004b9e:	4625      	mov	r5, r4
 8004ba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ba2:	4656      	mov	r6, sl
 8004ba4:	ea6f 0803 	mvn.w	r8, r3
 8004ba8:	2700      	movs	r7, #0
 8004baa:	4621      	mov	r1, r4
 8004bac:	4648      	mov	r0, r9
 8004bae:	f000 fcbf 	bl	8005530 <_Bfree>
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	f000 80bd 	beq.w	8004d32 <_dtoa_r+0x622>
 8004bb8:	b12f      	cbz	r7, 8004bc6 <_dtoa_r+0x4b6>
 8004bba:	42af      	cmp	r7, r5
 8004bbc:	d003      	beq.n	8004bc6 <_dtoa_r+0x4b6>
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	4648      	mov	r0, r9
 8004bc2:	f000 fcb5 	bl	8005530 <_Bfree>
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4648      	mov	r0, r9
 8004bca:	f000 fcb1 	bl	8005530 <_Bfree>
 8004bce:	e0b0      	b.n	8004d32 <_dtoa_r+0x622>
 8004bd0:	07e2      	lsls	r2, r4, #31
 8004bd2:	d505      	bpl.n	8004be0 <_dtoa_r+0x4d0>
 8004bd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bd8:	f7fb fd16 	bl	8000608 <__aeabi_dmul>
 8004bdc:	3601      	adds	r6, #1
 8004bde:	2301      	movs	r3, #1
 8004be0:	1064      	asrs	r4, r4, #1
 8004be2:	3508      	adds	r5, #8
 8004be4:	e762      	b.n	8004aac <_dtoa_r+0x39c>
 8004be6:	2602      	movs	r6, #2
 8004be8:	e765      	b.n	8004ab6 <_dtoa_r+0x3a6>
 8004bea:	9c03      	ldr	r4, [sp, #12]
 8004bec:	46b8      	mov	r8, r7
 8004bee:	e784      	b.n	8004afa <_dtoa_r+0x3ea>
 8004bf0:	4b27      	ldr	r3, [pc, #156]	@ (8004c90 <_dtoa_r+0x580>)
 8004bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004bf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004bf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004bfc:	4454      	add	r4, sl
 8004bfe:	2900      	cmp	r1, #0
 8004c00:	d054      	beq.n	8004cac <_dtoa_r+0x59c>
 8004c02:	4929      	ldr	r1, [pc, #164]	@ (8004ca8 <_dtoa_r+0x598>)
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7fb fe29 	bl	800085c <__aeabi_ddiv>
 8004c0a:	4633      	mov	r3, r6
 8004c0c:	462a      	mov	r2, r5
 8004c0e:	f7fb fb43 	bl	8000298 <__aeabi_dsub>
 8004c12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004c16:	4656      	mov	r6, sl
 8004c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c1c:	f7fb ffa4 	bl	8000b68 <__aeabi_d2iz>
 8004c20:	4605      	mov	r5, r0
 8004c22:	f7fb fc87 	bl	8000534 <__aeabi_i2d>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c2e:	f7fb fb33 	bl	8000298 <__aeabi_dsub>
 8004c32:	3530      	adds	r5, #48	@ 0x30
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c3c:	f806 5b01 	strb.w	r5, [r6], #1
 8004c40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004c44:	f7fb ff52 	bl	8000aec <__aeabi_dcmplt>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d172      	bne.n	8004d32 <_dtoa_r+0x622>
 8004c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c50:	4911      	ldr	r1, [pc, #68]	@ (8004c98 <_dtoa_r+0x588>)
 8004c52:	2000      	movs	r0, #0
 8004c54:	f7fb fb20 	bl	8000298 <__aeabi_dsub>
 8004c58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004c5c:	f7fb ff46 	bl	8000aec <__aeabi_dcmplt>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	f040 80b4 	bne.w	8004dce <_dtoa_r+0x6be>
 8004c66:	42a6      	cmp	r6, r4
 8004c68:	f43f af70 	beq.w	8004b4c <_dtoa_r+0x43c>
 8004c6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004c70:	4b0a      	ldr	r3, [pc, #40]	@ (8004c9c <_dtoa_r+0x58c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	f7fb fcc8 	bl	8000608 <__aeabi_dmul>
 8004c78:	4b08      	ldr	r3, [pc, #32]	@ (8004c9c <_dtoa_r+0x58c>)
 8004c7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004c7e:	2200      	movs	r2, #0
 8004c80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c84:	f7fb fcc0 	bl	8000608 <__aeabi_dmul>
 8004c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c8c:	e7c4      	b.n	8004c18 <_dtoa_r+0x508>
 8004c8e:	bf00      	nop
 8004c90:	08006548 	.word	0x08006548
 8004c94:	08006520 	.word	0x08006520
 8004c98:	3ff00000 	.word	0x3ff00000
 8004c9c:	40240000 	.word	0x40240000
 8004ca0:	401c0000 	.word	0x401c0000
 8004ca4:	40140000 	.word	0x40140000
 8004ca8:	3fe00000 	.word	0x3fe00000
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f7fb fcaa 	bl	8000608 <__aeabi_dmul>
 8004cb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004cb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004cba:	4656      	mov	r6, sl
 8004cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc0:	f7fb ff52 	bl	8000b68 <__aeabi_d2iz>
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	f7fb fc35 	bl	8000534 <__aeabi_i2d>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd2:	f7fb fae1 	bl	8000298 <__aeabi_dsub>
 8004cd6:	3530      	adds	r5, #48	@ 0x30
 8004cd8:	f806 5b01 	strb.w	r5, [r6], #1
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	d124      	bne.n	8004d36 <_dtoa_r+0x626>
 8004cec:	4baf      	ldr	r3, [pc, #700]	@ (8004fac <_dtoa_r+0x89c>)
 8004cee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004cf2:	f7fb fad3 	bl	800029c <__adddf3>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cfe:	f7fb ff13 	bl	8000b28 <__aeabi_dcmpgt>
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d163      	bne.n	8004dce <_dtoa_r+0x6be>
 8004d06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004d0a:	49a8      	ldr	r1, [pc, #672]	@ (8004fac <_dtoa_r+0x89c>)
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7fb fac3 	bl	8000298 <__aeabi_dsub>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d1a:	f7fb fee7 	bl	8000aec <__aeabi_dcmplt>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f43f af14 	beq.w	8004b4c <_dtoa_r+0x43c>
 8004d24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004d26:	1e73      	subs	r3, r6, #1
 8004d28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004d2e:	2b30      	cmp	r3, #48	@ 0x30
 8004d30:	d0f8      	beq.n	8004d24 <_dtoa_r+0x614>
 8004d32:	4647      	mov	r7, r8
 8004d34:	e03b      	b.n	8004dae <_dtoa_r+0x69e>
 8004d36:	4b9e      	ldr	r3, [pc, #632]	@ (8004fb0 <_dtoa_r+0x8a0>)
 8004d38:	f7fb fc66 	bl	8000608 <__aeabi_dmul>
 8004d3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d40:	e7bc      	b.n	8004cbc <_dtoa_r+0x5ac>
 8004d42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004d46:	4656      	mov	r6, sl
 8004d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	4629      	mov	r1, r5
 8004d50:	f7fb fd84 	bl	800085c <__aeabi_ddiv>
 8004d54:	f7fb ff08 	bl	8000b68 <__aeabi_d2iz>
 8004d58:	4680      	mov	r8, r0
 8004d5a:	f7fb fbeb 	bl	8000534 <__aeabi_i2d>
 8004d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d62:	f7fb fc51 	bl	8000608 <__aeabi_dmul>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004d72:	f7fb fa91 	bl	8000298 <__aeabi_dsub>
 8004d76:	f806 4b01 	strb.w	r4, [r6], #1
 8004d7a:	9d03      	ldr	r5, [sp, #12]
 8004d7c:	eba6 040a 	sub.w	r4, r6, sl
 8004d80:	42a5      	cmp	r5, r4
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	d133      	bne.n	8004df0 <_dtoa_r+0x6e0>
 8004d88:	f7fb fa88 	bl	800029c <__adddf3>
 8004d8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d90:	4604      	mov	r4, r0
 8004d92:	460d      	mov	r5, r1
 8004d94:	f7fb fec8 	bl	8000b28 <__aeabi_dcmpgt>
 8004d98:	b9c0      	cbnz	r0, 8004dcc <_dtoa_r+0x6bc>
 8004d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7fb fe99 	bl	8000ad8 <__aeabi_dcmpeq>
 8004da6:	b110      	cbz	r0, 8004dae <_dtoa_r+0x69e>
 8004da8:	f018 0f01 	tst.w	r8, #1
 8004dac:	d10e      	bne.n	8004dcc <_dtoa_r+0x6bc>
 8004dae:	9902      	ldr	r1, [sp, #8]
 8004db0:	4648      	mov	r0, r9
 8004db2:	f000 fbbd 	bl	8005530 <_Bfree>
 8004db6:	2300      	movs	r3, #0
 8004db8:	7033      	strb	r3, [r6, #0]
 8004dba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004dbc:	3701      	adds	r7, #1
 8004dbe:	601f      	str	r7, [r3, #0]
 8004dc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 824b 	beq.w	800525e <_dtoa_r+0xb4e>
 8004dc8:	601e      	str	r6, [r3, #0]
 8004dca:	e248      	b.n	800525e <_dtoa_r+0xb4e>
 8004dcc:	46b8      	mov	r8, r7
 8004dce:	4633      	mov	r3, r6
 8004dd0:	461e      	mov	r6, r3
 8004dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dd6:	2a39      	cmp	r2, #57	@ 0x39
 8004dd8:	d106      	bne.n	8004de8 <_dtoa_r+0x6d8>
 8004dda:	459a      	cmp	sl, r3
 8004ddc:	d1f8      	bne.n	8004dd0 <_dtoa_r+0x6c0>
 8004dde:	2230      	movs	r2, #48	@ 0x30
 8004de0:	f108 0801 	add.w	r8, r8, #1
 8004de4:	f88a 2000 	strb.w	r2, [sl]
 8004de8:	781a      	ldrb	r2, [r3, #0]
 8004dea:	3201      	adds	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e7a0      	b.n	8004d32 <_dtoa_r+0x622>
 8004df0:	4b6f      	ldr	r3, [pc, #444]	@ (8004fb0 <_dtoa_r+0x8a0>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	f7fb fc08 	bl	8000608 <__aeabi_dmul>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	460d      	mov	r5, r1
 8004e00:	f7fb fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d09f      	beq.n	8004d48 <_dtoa_r+0x638>
 8004e08:	e7d1      	b.n	8004dae <_dtoa_r+0x69e>
 8004e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e0c:	2a00      	cmp	r2, #0
 8004e0e:	f000 80ea 	beq.w	8004fe6 <_dtoa_r+0x8d6>
 8004e12:	9a07      	ldr	r2, [sp, #28]
 8004e14:	2a01      	cmp	r2, #1
 8004e16:	f300 80cd 	bgt.w	8004fb4 <_dtoa_r+0x8a4>
 8004e1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	f000 80c1 	beq.w	8004fa4 <_dtoa_r+0x894>
 8004e22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004e26:	9c08      	ldr	r4, [sp, #32]
 8004e28:	9e00      	ldr	r6, [sp, #0]
 8004e2a:	9a00      	ldr	r2, [sp, #0]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	9200      	str	r2, [sp, #0]
 8004e30:	9a06      	ldr	r2, [sp, #24]
 8004e32:	2101      	movs	r1, #1
 8004e34:	441a      	add	r2, r3
 8004e36:	4648      	mov	r0, r9
 8004e38:	9206      	str	r2, [sp, #24]
 8004e3a:	f000 fc2d 	bl	8005698 <__i2b>
 8004e3e:	4605      	mov	r5, r0
 8004e40:	b166      	cbz	r6, 8004e5c <_dtoa_r+0x74c>
 8004e42:	9b06      	ldr	r3, [sp, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	dd09      	ble.n	8004e5c <_dtoa_r+0x74c>
 8004e48:	42b3      	cmp	r3, r6
 8004e4a:	9a00      	ldr	r2, [sp, #0]
 8004e4c:	bfa8      	it	ge
 8004e4e:	4633      	movge	r3, r6
 8004e50:	1ad2      	subs	r2, r2, r3
 8004e52:	9200      	str	r2, [sp, #0]
 8004e54:	9a06      	ldr	r2, [sp, #24]
 8004e56:	1af6      	subs	r6, r6, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	9306      	str	r3, [sp, #24]
 8004e5c:	9b08      	ldr	r3, [sp, #32]
 8004e5e:	b30b      	cbz	r3, 8004ea4 <_dtoa_r+0x794>
 8004e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80c6 	beq.w	8004ff4 <_dtoa_r+0x8e4>
 8004e68:	2c00      	cmp	r4, #0
 8004e6a:	f000 80c0 	beq.w	8004fee <_dtoa_r+0x8de>
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4622      	mov	r2, r4
 8004e72:	4648      	mov	r0, r9
 8004e74:	f000 fcc8 	bl	8005808 <__pow5mult>
 8004e78:	9a02      	ldr	r2, [sp, #8]
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	4648      	mov	r0, r9
 8004e80:	f000 fc20 	bl	80056c4 <__multiply>
 8004e84:	9902      	ldr	r1, [sp, #8]
 8004e86:	4680      	mov	r8, r0
 8004e88:	4648      	mov	r0, r9
 8004e8a:	f000 fb51 	bl	8005530 <_Bfree>
 8004e8e:	9b08      	ldr	r3, [sp, #32]
 8004e90:	1b1b      	subs	r3, r3, r4
 8004e92:	9308      	str	r3, [sp, #32]
 8004e94:	f000 80b1 	beq.w	8004ffa <_dtoa_r+0x8ea>
 8004e98:	9a08      	ldr	r2, [sp, #32]
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	4648      	mov	r0, r9
 8004e9e:	f000 fcb3 	bl	8005808 <__pow5mult>
 8004ea2:	9002      	str	r0, [sp, #8]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	4648      	mov	r0, r9
 8004ea8:	f000 fbf6 	bl	8005698 <__i2b>
 8004eac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eae:	4604      	mov	r4, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 81d8 	beq.w	8005266 <_dtoa_r+0xb56>
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4601      	mov	r1, r0
 8004eba:	4648      	mov	r0, r9
 8004ebc:	f000 fca4 	bl	8005808 <__pow5mult>
 8004ec0:	9b07      	ldr	r3, [sp, #28]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	f300 809f 	bgt.w	8005008 <_dtoa_r+0x8f8>
 8004eca:	9b04      	ldr	r3, [sp, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f040 8097 	bne.w	8005000 <_dtoa_r+0x8f0>
 8004ed2:	9b05      	ldr	r3, [sp, #20]
 8004ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f040 8093 	bne.w	8005004 <_dtoa_r+0x8f4>
 8004ede:	9b05      	ldr	r3, [sp, #20]
 8004ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ee4:	0d1b      	lsrs	r3, r3, #20
 8004ee6:	051b      	lsls	r3, r3, #20
 8004ee8:	b133      	cbz	r3, 8004ef8 <_dtoa_r+0x7e8>
 8004eea:	9b00      	ldr	r3, [sp, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	9b06      	ldr	r3, [sp, #24]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	9306      	str	r3, [sp, #24]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	9308      	str	r3, [sp, #32]
 8004efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 81b8 	beq.w	8005272 <_dtoa_r+0xb62>
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f08:	6918      	ldr	r0, [r3, #16]
 8004f0a:	f000 fb79 	bl	8005600 <__hi0bits>
 8004f0e:	f1c0 0020 	rsb	r0, r0, #32
 8004f12:	9b06      	ldr	r3, [sp, #24]
 8004f14:	4418      	add	r0, r3
 8004f16:	f010 001f 	ands.w	r0, r0, #31
 8004f1a:	f000 8082 	beq.w	8005022 <_dtoa_r+0x912>
 8004f1e:	f1c0 0320 	rsb	r3, r0, #32
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	dd73      	ble.n	800500e <_dtoa_r+0x8fe>
 8004f26:	9b00      	ldr	r3, [sp, #0]
 8004f28:	f1c0 001c 	rsb	r0, r0, #28
 8004f2c:	4403      	add	r3, r0
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	9b06      	ldr	r3, [sp, #24]
 8004f32:	4403      	add	r3, r0
 8004f34:	4406      	add	r6, r0
 8004f36:	9306      	str	r3, [sp, #24]
 8004f38:	9b00      	ldr	r3, [sp, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dd05      	ble.n	8004f4a <_dtoa_r+0x83a>
 8004f3e:	9902      	ldr	r1, [sp, #8]
 8004f40:	461a      	mov	r2, r3
 8004f42:	4648      	mov	r0, r9
 8004f44:	f000 fcba 	bl	80058bc <__lshift>
 8004f48:	9002      	str	r0, [sp, #8]
 8004f4a:	9b06      	ldr	r3, [sp, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	dd05      	ble.n	8004f5c <_dtoa_r+0x84c>
 8004f50:	4621      	mov	r1, r4
 8004f52:	461a      	mov	r2, r3
 8004f54:	4648      	mov	r0, r9
 8004f56:	f000 fcb1 	bl	80058bc <__lshift>
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d061      	beq.n	8005026 <_dtoa_r+0x916>
 8004f62:	9802      	ldr	r0, [sp, #8]
 8004f64:	4621      	mov	r1, r4
 8004f66:	f000 fd15 	bl	8005994 <__mcmp>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	da5b      	bge.n	8005026 <_dtoa_r+0x916>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9902      	ldr	r1, [sp, #8]
 8004f72:	220a      	movs	r2, #10
 8004f74:	4648      	mov	r0, r9
 8004f76:	f000 fafd 	bl	8005574 <__multadd>
 8004f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f7c:	9002      	str	r0, [sp, #8]
 8004f7e:	f107 38ff 	add.w	r8, r7, #4294967295
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8177 	beq.w	8005276 <_dtoa_r+0xb66>
 8004f88:	4629      	mov	r1, r5
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	220a      	movs	r2, #10
 8004f8e:	4648      	mov	r0, r9
 8004f90:	f000 faf0 	bl	8005574 <__multadd>
 8004f94:	f1bb 0f00 	cmp.w	fp, #0
 8004f98:	4605      	mov	r5, r0
 8004f9a:	dc6f      	bgt.n	800507c <_dtoa_r+0x96c>
 8004f9c:	9b07      	ldr	r3, [sp, #28]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	dc49      	bgt.n	8005036 <_dtoa_r+0x926>
 8004fa2:	e06b      	b.n	800507c <_dtoa_r+0x96c>
 8004fa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004faa:	e73c      	b.n	8004e26 <_dtoa_r+0x716>
 8004fac:	3fe00000 	.word	0x3fe00000
 8004fb0:	40240000 	.word	0x40240000
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	1e5c      	subs	r4, r3, #1
 8004fb8:	9b08      	ldr	r3, [sp, #32]
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	db09      	blt.n	8004fd2 <_dtoa_r+0x8c2>
 8004fbe:	1b1c      	subs	r4, r3, r4
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f6bf af30 	bge.w	8004e28 <_dtoa_r+0x718>
 8004fc8:	9b00      	ldr	r3, [sp, #0]
 8004fca:	9a03      	ldr	r2, [sp, #12]
 8004fcc:	1a9e      	subs	r6, r3, r2
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e72b      	b.n	8004e2a <_dtoa_r+0x71a>
 8004fd2:	9b08      	ldr	r3, [sp, #32]
 8004fd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004fd6:	9408      	str	r4, [sp, #32]
 8004fd8:	1ae3      	subs	r3, r4, r3
 8004fda:	441a      	add	r2, r3
 8004fdc:	9e00      	ldr	r6, [sp, #0]
 8004fde:	9b03      	ldr	r3, [sp, #12]
 8004fe0:	920d      	str	r2, [sp, #52]	@ 0x34
 8004fe2:	2400      	movs	r4, #0
 8004fe4:	e721      	b.n	8004e2a <_dtoa_r+0x71a>
 8004fe6:	9c08      	ldr	r4, [sp, #32]
 8004fe8:	9e00      	ldr	r6, [sp, #0]
 8004fea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004fec:	e728      	b.n	8004e40 <_dtoa_r+0x730>
 8004fee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004ff2:	e751      	b.n	8004e98 <_dtoa_r+0x788>
 8004ff4:	9a08      	ldr	r2, [sp, #32]
 8004ff6:	9902      	ldr	r1, [sp, #8]
 8004ff8:	e750      	b.n	8004e9c <_dtoa_r+0x78c>
 8004ffa:	f8cd 8008 	str.w	r8, [sp, #8]
 8004ffe:	e751      	b.n	8004ea4 <_dtoa_r+0x794>
 8005000:	2300      	movs	r3, #0
 8005002:	e779      	b.n	8004ef8 <_dtoa_r+0x7e8>
 8005004:	9b04      	ldr	r3, [sp, #16]
 8005006:	e777      	b.n	8004ef8 <_dtoa_r+0x7e8>
 8005008:	2300      	movs	r3, #0
 800500a:	9308      	str	r3, [sp, #32]
 800500c:	e779      	b.n	8004f02 <_dtoa_r+0x7f2>
 800500e:	d093      	beq.n	8004f38 <_dtoa_r+0x828>
 8005010:	9a00      	ldr	r2, [sp, #0]
 8005012:	331c      	adds	r3, #28
 8005014:	441a      	add	r2, r3
 8005016:	9200      	str	r2, [sp, #0]
 8005018:	9a06      	ldr	r2, [sp, #24]
 800501a:	441a      	add	r2, r3
 800501c:	441e      	add	r6, r3
 800501e:	9206      	str	r2, [sp, #24]
 8005020:	e78a      	b.n	8004f38 <_dtoa_r+0x828>
 8005022:	4603      	mov	r3, r0
 8005024:	e7f4      	b.n	8005010 <_dtoa_r+0x900>
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	46b8      	mov	r8, r7
 800502c:	dc20      	bgt.n	8005070 <_dtoa_r+0x960>
 800502e:	469b      	mov	fp, r3
 8005030:	9b07      	ldr	r3, [sp, #28]
 8005032:	2b02      	cmp	r3, #2
 8005034:	dd1e      	ble.n	8005074 <_dtoa_r+0x964>
 8005036:	f1bb 0f00 	cmp.w	fp, #0
 800503a:	f47f adb1 	bne.w	8004ba0 <_dtoa_r+0x490>
 800503e:	4621      	mov	r1, r4
 8005040:	465b      	mov	r3, fp
 8005042:	2205      	movs	r2, #5
 8005044:	4648      	mov	r0, r9
 8005046:	f000 fa95 	bl	8005574 <__multadd>
 800504a:	4601      	mov	r1, r0
 800504c:	4604      	mov	r4, r0
 800504e:	9802      	ldr	r0, [sp, #8]
 8005050:	f000 fca0 	bl	8005994 <__mcmp>
 8005054:	2800      	cmp	r0, #0
 8005056:	f77f ada3 	ble.w	8004ba0 <_dtoa_r+0x490>
 800505a:	4656      	mov	r6, sl
 800505c:	2331      	movs	r3, #49	@ 0x31
 800505e:	f806 3b01 	strb.w	r3, [r6], #1
 8005062:	f108 0801 	add.w	r8, r8, #1
 8005066:	e59f      	b.n	8004ba8 <_dtoa_r+0x498>
 8005068:	9c03      	ldr	r4, [sp, #12]
 800506a:	46b8      	mov	r8, r7
 800506c:	4625      	mov	r5, r4
 800506e:	e7f4      	b.n	800505a <_dtoa_r+0x94a>
 8005070:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 8101 	beq.w	800527e <_dtoa_r+0xb6e>
 800507c:	2e00      	cmp	r6, #0
 800507e:	dd05      	ble.n	800508c <_dtoa_r+0x97c>
 8005080:	4629      	mov	r1, r5
 8005082:	4632      	mov	r2, r6
 8005084:	4648      	mov	r0, r9
 8005086:	f000 fc19 	bl	80058bc <__lshift>
 800508a:	4605      	mov	r5, r0
 800508c:	9b08      	ldr	r3, [sp, #32]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d05c      	beq.n	800514c <_dtoa_r+0xa3c>
 8005092:	6869      	ldr	r1, [r5, #4]
 8005094:	4648      	mov	r0, r9
 8005096:	f000 fa0b 	bl	80054b0 <_Balloc>
 800509a:	4606      	mov	r6, r0
 800509c:	b928      	cbnz	r0, 80050aa <_dtoa_r+0x99a>
 800509e:	4b82      	ldr	r3, [pc, #520]	@ (80052a8 <_dtoa_r+0xb98>)
 80050a0:	4602      	mov	r2, r0
 80050a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80050a6:	f7ff bb4a 	b.w	800473e <_dtoa_r+0x2e>
 80050aa:	692a      	ldr	r2, [r5, #16]
 80050ac:	3202      	adds	r2, #2
 80050ae:	0092      	lsls	r2, r2, #2
 80050b0:	f105 010c 	add.w	r1, r5, #12
 80050b4:	300c      	adds	r0, #12
 80050b6:	f7ff fa94 	bl	80045e2 <memcpy>
 80050ba:	2201      	movs	r2, #1
 80050bc:	4631      	mov	r1, r6
 80050be:	4648      	mov	r0, r9
 80050c0:	f000 fbfc 	bl	80058bc <__lshift>
 80050c4:	f10a 0301 	add.w	r3, sl, #1
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	eb0a 030b 	add.w	r3, sl, fp
 80050ce:	9308      	str	r3, [sp, #32]
 80050d0:	9b04      	ldr	r3, [sp, #16]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	462f      	mov	r7, r5
 80050d8:	9306      	str	r3, [sp, #24]
 80050da:	4605      	mov	r5, r0
 80050dc:	9b00      	ldr	r3, [sp, #0]
 80050de:	9802      	ldr	r0, [sp, #8]
 80050e0:	4621      	mov	r1, r4
 80050e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80050e6:	f7ff fa8a 	bl	80045fe <quorem>
 80050ea:	4603      	mov	r3, r0
 80050ec:	3330      	adds	r3, #48	@ 0x30
 80050ee:	9003      	str	r0, [sp, #12]
 80050f0:	4639      	mov	r1, r7
 80050f2:	9802      	ldr	r0, [sp, #8]
 80050f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050f6:	f000 fc4d 	bl	8005994 <__mcmp>
 80050fa:	462a      	mov	r2, r5
 80050fc:	9004      	str	r0, [sp, #16]
 80050fe:	4621      	mov	r1, r4
 8005100:	4648      	mov	r0, r9
 8005102:	f000 fc63 	bl	80059cc <__mdiff>
 8005106:	68c2      	ldr	r2, [r0, #12]
 8005108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800510a:	4606      	mov	r6, r0
 800510c:	bb02      	cbnz	r2, 8005150 <_dtoa_r+0xa40>
 800510e:	4601      	mov	r1, r0
 8005110:	9802      	ldr	r0, [sp, #8]
 8005112:	f000 fc3f 	bl	8005994 <__mcmp>
 8005116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005118:	4602      	mov	r2, r0
 800511a:	4631      	mov	r1, r6
 800511c:	4648      	mov	r0, r9
 800511e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005120:	9309      	str	r3, [sp, #36]	@ 0x24
 8005122:	f000 fa05 	bl	8005530 <_Bfree>
 8005126:	9b07      	ldr	r3, [sp, #28]
 8005128:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800512a:	9e00      	ldr	r6, [sp, #0]
 800512c:	ea42 0103 	orr.w	r1, r2, r3
 8005130:	9b06      	ldr	r3, [sp, #24]
 8005132:	4319      	orrs	r1, r3
 8005134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005136:	d10d      	bne.n	8005154 <_dtoa_r+0xa44>
 8005138:	2b39      	cmp	r3, #57	@ 0x39
 800513a:	d027      	beq.n	800518c <_dtoa_r+0xa7c>
 800513c:	9a04      	ldr	r2, [sp, #16]
 800513e:	2a00      	cmp	r2, #0
 8005140:	dd01      	ble.n	8005146 <_dtoa_r+0xa36>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	3331      	adds	r3, #49	@ 0x31
 8005146:	f88b 3000 	strb.w	r3, [fp]
 800514a:	e52e      	b.n	8004baa <_dtoa_r+0x49a>
 800514c:	4628      	mov	r0, r5
 800514e:	e7b9      	b.n	80050c4 <_dtoa_r+0x9b4>
 8005150:	2201      	movs	r2, #1
 8005152:	e7e2      	b.n	800511a <_dtoa_r+0xa0a>
 8005154:	9904      	ldr	r1, [sp, #16]
 8005156:	2900      	cmp	r1, #0
 8005158:	db04      	blt.n	8005164 <_dtoa_r+0xa54>
 800515a:	9807      	ldr	r0, [sp, #28]
 800515c:	4301      	orrs	r1, r0
 800515e:	9806      	ldr	r0, [sp, #24]
 8005160:	4301      	orrs	r1, r0
 8005162:	d120      	bne.n	80051a6 <_dtoa_r+0xa96>
 8005164:	2a00      	cmp	r2, #0
 8005166:	ddee      	ble.n	8005146 <_dtoa_r+0xa36>
 8005168:	9902      	ldr	r1, [sp, #8]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2201      	movs	r2, #1
 800516e:	4648      	mov	r0, r9
 8005170:	f000 fba4 	bl	80058bc <__lshift>
 8005174:	4621      	mov	r1, r4
 8005176:	9002      	str	r0, [sp, #8]
 8005178:	f000 fc0c 	bl	8005994 <__mcmp>
 800517c:	2800      	cmp	r0, #0
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	dc02      	bgt.n	8005188 <_dtoa_r+0xa78>
 8005182:	d1e0      	bne.n	8005146 <_dtoa_r+0xa36>
 8005184:	07da      	lsls	r2, r3, #31
 8005186:	d5de      	bpl.n	8005146 <_dtoa_r+0xa36>
 8005188:	2b39      	cmp	r3, #57	@ 0x39
 800518a:	d1da      	bne.n	8005142 <_dtoa_r+0xa32>
 800518c:	2339      	movs	r3, #57	@ 0x39
 800518e:	f88b 3000 	strb.w	r3, [fp]
 8005192:	4633      	mov	r3, r6
 8005194:	461e      	mov	r6, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800519c:	2a39      	cmp	r2, #57	@ 0x39
 800519e:	d04e      	beq.n	800523e <_dtoa_r+0xb2e>
 80051a0:	3201      	adds	r2, #1
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e501      	b.n	8004baa <_dtoa_r+0x49a>
 80051a6:	2a00      	cmp	r2, #0
 80051a8:	dd03      	ble.n	80051b2 <_dtoa_r+0xaa2>
 80051aa:	2b39      	cmp	r3, #57	@ 0x39
 80051ac:	d0ee      	beq.n	800518c <_dtoa_r+0xa7c>
 80051ae:	3301      	adds	r3, #1
 80051b0:	e7c9      	b.n	8005146 <_dtoa_r+0xa36>
 80051b2:	9a00      	ldr	r2, [sp, #0]
 80051b4:	9908      	ldr	r1, [sp, #32]
 80051b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80051ba:	428a      	cmp	r2, r1
 80051bc:	d028      	beq.n	8005210 <_dtoa_r+0xb00>
 80051be:	9902      	ldr	r1, [sp, #8]
 80051c0:	2300      	movs	r3, #0
 80051c2:	220a      	movs	r2, #10
 80051c4:	4648      	mov	r0, r9
 80051c6:	f000 f9d5 	bl	8005574 <__multadd>
 80051ca:	42af      	cmp	r7, r5
 80051cc:	9002      	str	r0, [sp, #8]
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	f04f 020a 	mov.w	r2, #10
 80051d6:	4639      	mov	r1, r7
 80051d8:	4648      	mov	r0, r9
 80051da:	d107      	bne.n	80051ec <_dtoa_r+0xadc>
 80051dc:	f000 f9ca 	bl	8005574 <__multadd>
 80051e0:	4607      	mov	r7, r0
 80051e2:	4605      	mov	r5, r0
 80051e4:	9b00      	ldr	r3, [sp, #0]
 80051e6:	3301      	adds	r3, #1
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	e777      	b.n	80050dc <_dtoa_r+0x9cc>
 80051ec:	f000 f9c2 	bl	8005574 <__multadd>
 80051f0:	4629      	mov	r1, r5
 80051f2:	4607      	mov	r7, r0
 80051f4:	2300      	movs	r3, #0
 80051f6:	220a      	movs	r2, #10
 80051f8:	4648      	mov	r0, r9
 80051fa:	f000 f9bb 	bl	8005574 <__multadd>
 80051fe:	4605      	mov	r5, r0
 8005200:	e7f0      	b.n	80051e4 <_dtoa_r+0xad4>
 8005202:	f1bb 0f00 	cmp.w	fp, #0
 8005206:	bfcc      	ite	gt
 8005208:	465e      	movgt	r6, fp
 800520a:	2601      	movle	r6, #1
 800520c:	4456      	add	r6, sl
 800520e:	2700      	movs	r7, #0
 8005210:	9902      	ldr	r1, [sp, #8]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	4648      	mov	r0, r9
 8005218:	f000 fb50 	bl	80058bc <__lshift>
 800521c:	4621      	mov	r1, r4
 800521e:	9002      	str	r0, [sp, #8]
 8005220:	f000 fbb8 	bl	8005994 <__mcmp>
 8005224:	2800      	cmp	r0, #0
 8005226:	dcb4      	bgt.n	8005192 <_dtoa_r+0xa82>
 8005228:	d102      	bne.n	8005230 <_dtoa_r+0xb20>
 800522a:	9b00      	ldr	r3, [sp, #0]
 800522c:	07db      	lsls	r3, r3, #31
 800522e:	d4b0      	bmi.n	8005192 <_dtoa_r+0xa82>
 8005230:	4633      	mov	r3, r6
 8005232:	461e      	mov	r6, r3
 8005234:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005238:	2a30      	cmp	r2, #48	@ 0x30
 800523a:	d0fa      	beq.n	8005232 <_dtoa_r+0xb22>
 800523c:	e4b5      	b.n	8004baa <_dtoa_r+0x49a>
 800523e:	459a      	cmp	sl, r3
 8005240:	d1a8      	bne.n	8005194 <_dtoa_r+0xa84>
 8005242:	2331      	movs	r3, #49	@ 0x31
 8005244:	f108 0801 	add.w	r8, r8, #1
 8005248:	f88a 3000 	strb.w	r3, [sl]
 800524c:	e4ad      	b.n	8004baa <_dtoa_r+0x49a>
 800524e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005250:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80052ac <_dtoa_r+0xb9c>
 8005254:	b11b      	cbz	r3, 800525e <_dtoa_r+0xb4e>
 8005256:	f10a 0308 	add.w	r3, sl, #8
 800525a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4650      	mov	r0, sl
 8005260:	b017      	add	sp, #92	@ 0x5c
 8005262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005266:	9b07      	ldr	r3, [sp, #28]
 8005268:	2b01      	cmp	r3, #1
 800526a:	f77f ae2e 	ble.w	8004eca <_dtoa_r+0x7ba>
 800526e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005270:	9308      	str	r3, [sp, #32]
 8005272:	2001      	movs	r0, #1
 8005274:	e64d      	b.n	8004f12 <_dtoa_r+0x802>
 8005276:	f1bb 0f00 	cmp.w	fp, #0
 800527a:	f77f aed9 	ble.w	8005030 <_dtoa_r+0x920>
 800527e:	4656      	mov	r6, sl
 8005280:	9802      	ldr	r0, [sp, #8]
 8005282:	4621      	mov	r1, r4
 8005284:	f7ff f9bb 	bl	80045fe <quorem>
 8005288:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800528c:	f806 3b01 	strb.w	r3, [r6], #1
 8005290:	eba6 020a 	sub.w	r2, r6, sl
 8005294:	4593      	cmp	fp, r2
 8005296:	ddb4      	ble.n	8005202 <_dtoa_r+0xaf2>
 8005298:	9902      	ldr	r1, [sp, #8]
 800529a:	2300      	movs	r3, #0
 800529c:	220a      	movs	r2, #10
 800529e:	4648      	mov	r0, r9
 80052a0:	f000 f968 	bl	8005574 <__multadd>
 80052a4:	9002      	str	r0, [sp, #8]
 80052a6:	e7eb      	b.n	8005280 <_dtoa_r+0xb70>
 80052a8:	08006450 	.word	0x08006450
 80052ac:	080063d4 	.word	0x080063d4

080052b0 <_free_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4605      	mov	r5, r0
 80052b4:	2900      	cmp	r1, #0
 80052b6:	d041      	beq.n	800533c <_free_r+0x8c>
 80052b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052bc:	1f0c      	subs	r4, r1, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bfb8      	it	lt
 80052c2:	18e4      	addlt	r4, r4, r3
 80052c4:	f000 f8e8 	bl	8005498 <__malloc_lock>
 80052c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005340 <_free_r+0x90>)
 80052ca:	6813      	ldr	r3, [r2, #0]
 80052cc:	b933      	cbnz	r3, 80052dc <_free_r+0x2c>
 80052ce:	6063      	str	r3, [r4, #4]
 80052d0:	6014      	str	r4, [r2, #0]
 80052d2:	4628      	mov	r0, r5
 80052d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d8:	f000 b8e4 	b.w	80054a4 <__malloc_unlock>
 80052dc:	42a3      	cmp	r3, r4
 80052de:	d908      	bls.n	80052f2 <_free_r+0x42>
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	1821      	adds	r1, r4, r0
 80052e4:	428b      	cmp	r3, r1
 80052e6:	bf01      	itttt	eq
 80052e8:	6819      	ldreq	r1, [r3, #0]
 80052ea:	685b      	ldreq	r3, [r3, #4]
 80052ec:	1809      	addeq	r1, r1, r0
 80052ee:	6021      	streq	r1, [r4, #0]
 80052f0:	e7ed      	b.n	80052ce <_free_r+0x1e>
 80052f2:	461a      	mov	r2, r3
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	b10b      	cbz	r3, 80052fc <_free_r+0x4c>
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d9fa      	bls.n	80052f2 <_free_r+0x42>
 80052fc:	6811      	ldr	r1, [r2, #0]
 80052fe:	1850      	adds	r0, r2, r1
 8005300:	42a0      	cmp	r0, r4
 8005302:	d10b      	bne.n	800531c <_free_r+0x6c>
 8005304:	6820      	ldr	r0, [r4, #0]
 8005306:	4401      	add	r1, r0
 8005308:	1850      	adds	r0, r2, r1
 800530a:	4283      	cmp	r3, r0
 800530c:	6011      	str	r1, [r2, #0]
 800530e:	d1e0      	bne.n	80052d2 <_free_r+0x22>
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	6053      	str	r3, [r2, #4]
 8005316:	4408      	add	r0, r1
 8005318:	6010      	str	r0, [r2, #0]
 800531a:	e7da      	b.n	80052d2 <_free_r+0x22>
 800531c:	d902      	bls.n	8005324 <_free_r+0x74>
 800531e:	230c      	movs	r3, #12
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	e7d6      	b.n	80052d2 <_free_r+0x22>
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	1821      	adds	r1, r4, r0
 8005328:	428b      	cmp	r3, r1
 800532a:	bf04      	itt	eq
 800532c:	6819      	ldreq	r1, [r3, #0]
 800532e:	685b      	ldreq	r3, [r3, #4]
 8005330:	6063      	str	r3, [r4, #4]
 8005332:	bf04      	itt	eq
 8005334:	1809      	addeq	r1, r1, r0
 8005336:	6021      	streq	r1, [r4, #0]
 8005338:	6054      	str	r4, [r2, #4]
 800533a:	e7ca      	b.n	80052d2 <_free_r+0x22>
 800533c:	bd38      	pop	{r3, r4, r5, pc}
 800533e:	bf00      	nop
 8005340:	20000454 	.word	0x20000454

08005344 <malloc>:
 8005344:	4b02      	ldr	r3, [pc, #8]	@ (8005350 <malloc+0xc>)
 8005346:	4601      	mov	r1, r0
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	f000 b825 	b.w	8005398 <_malloc_r>
 800534e:	bf00      	nop
 8005350:	20000018 	.word	0x20000018

08005354 <sbrk_aligned>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	4e0f      	ldr	r6, [pc, #60]	@ (8005394 <sbrk_aligned+0x40>)
 8005358:	460c      	mov	r4, r1
 800535a:	6831      	ldr	r1, [r6, #0]
 800535c:	4605      	mov	r5, r0
 800535e:	b911      	cbnz	r1, 8005366 <sbrk_aligned+0x12>
 8005360:	f000 fea2 	bl	80060a8 <_sbrk_r>
 8005364:	6030      	str	r0, [r6, #0]
 8005366:	4621      	mov	r1, r4
 8005368:	4628      	mov	r0, r5
 800536a:	f000 fe9d 	bl	80060a8 <_sbrk_r>
 800536e:	1c43      	adds	r3, r0, #1
 8005370:	d103      	bne.n	800537a <sbrk_aligned+0x26>
 8005372:	f04f 34ff 	mov.w	r4, #4294967295
 8005376:	4620      	mov	r0, r4
 8005378:	bd70      	pop	{r4, r5, r6, pc}
 800537a:	1cc4      	adds	r4, r0, #3
 800537c:	f024 0403 	bic.w	r4, r4, #3
 8005380:	42a0      	cmp	r0, r4
 8005382:	d0f8      	beq.n	8005376 <sbrk_aligned+0x22>
 8005384:	1a21      	subs	r1, r4, r0
 8005386:	4628      	mov	r0, r5
 8005388:	f000 fe8e 	bl	80060a8 <_sbrk_r>
 800538c:	3001      	adds	r0, #1
 800538e:	d1f2      	bne.n	8005376 <sbrk_aligned+0x22>
 8005390:	e7ef      	b.n	8005372 <sbrk_aligned+0x1e>
 8005392:	bf00      	nop
 8005394:	20000450 	.word	0x20000450

08005398 <_malloc_r>:
 8005398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800539c:	1ccd      	adds	r5, r1, #3
 800539e:	f025 0503 	bic.w	r5, r5, #3
 80053a2:	3508      	adds	r5, #8
 80053a4:	2d0c      	cmp	r5, #12
 80053a6:	bf38      	it	cc
 80053a8:	250c      	movcc	r5, #12
 80053aa:	2d00      	cmp	r5, #0
 80053ac:	4606      	mov	r6, r0
 80053ae:	db01      	blt.n	80053b4 <_malloc_r+0x1c>
 80053b0:	42a9      	cmp	r1, r5
 80053b2:	d904      	bls.n	80053be <_malloc_r+0x26>
 80053b4:	230c      	movs	r3, #12
 80053b6:	6033      	str	r3, [r6, #0]
 80053b8:	2000      	movs	r0, #0
 80053ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005494 <_malloc_r+0xfc>
 80053c2:	f000 f869 	bl	8005498 <__malloc_lock>
 80053c6:	f8d8 3000 	ldr.w	r3, [r8]
 80053ca:	461c      	mov	r4, r3
 80053cc:	bb44      	cbnz	r4, 8005420 <_malloc_r+0x88>
 80053ce:	4629      	mov	r1, r5
 80053d0:	4630      	mov	r0, r6
 80053d2:	f7ff ffbf 	bl	8005354 <sbrk_aligned>
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	4604      	mov	r4, r0
 80053da:	d158      	bne.n	800548e <_malloc_r+0xf6>
 80053dc:	f8d8 4000 	ldr.w	r4, [r8]
 80053e0:	4627      	mov	r7, r4
 80053e2:	2f00      	cmp	r7, #0
 80053e4:	d143      	bne.n	800546e <_malloc_r+0xd6>
 80053e6:	2c00      	cmp	r4, #0
 80053e8:	d04b      	beq.n	8005482 <_malloc_r+0xea>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	4639      	mov	r1, r7
 80053ee:	4630      	mov	r0, r6
 80053f0:	eb04 0903 	add.w	r9, r4, r3
 80053f4:	f000 fe58 	bl	80060a8 <_sbrk_r>
 80053f8:	4581      	cmp	r9, r0
 80053fa:	d142      	bne.n	8005482 <_malloc_r+0xea>
 80053fc:	6821      	ldr	r1, [r4, #0]
 80053fe:	1a6d      	subs	r5, r5, r1
 8005400:	4629      	mov	r1, r5
 8005402:	4630      	mov	r0, r6
 8005404:	f7ff ffa6 	bl	8005354 <sbrk_aligned>
 8005408:	3001      	adds	r0, #1
 800540a:	d03a      	beq.n	8005482 <_malloc_r+0xea>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	442b      	add	r3, r5
 8005410:	6023      	str	r3, [r4, #0]
 8005412:	f8d8 3000 	ldr.w	r3, [r8]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	bb62      	cbnz	r2, 8005474 <_malloc_r+0xdc>
 800541a:	f8c8 7000 	str.w	r7, [r8]
 800541e:	e00f      	b.n	8005440 <_malloc_r+0xa8>
 8005420:	6822      	ldr	r2, [r4, #0]
 8005422:	1b52      	subs	r2, r2, r5
 8005424:	d420      	bmi.n	8005468 <_malloc_r+0xd0>
 8005426:	2a0b      	cmp	r2, #11
 8005428:	d917      	bls.n	800545a <_malloc_r+0xc2>
 800542a:	1961      	adds	r1, r4, r5
 800542c:	42a3      	cmp	r3, r4
 800542e:	6025      	str	r5, [r4, #0]
 8005430:	bf18      	it	ne
 8005432:	6059      	strne	r1, [r3, #4]
 8005434:	6863      	ldr	r3, [r4, #4]
 8005436:	bf08      	it	eq
 8005438:	f8c8 1000 	streq.w	r1, [r8]
 800543c:	5162      	str	r2, [r4, r5]
 800543e:	604b      	str	r3, [r1, #4]
 8005440:	4630      	mov	r0, r6
 8005442:	f000 f82f 	bl	80054a4 <__malloc_unlock>
 8005446:	f104 000b 	add.w	r0, r4, #11
 800544a:	1d23      	adds	r3, r4, #4
 800544c:	f020 0007 	bic.w	r0, r0, #7
 8005450:	1ac2      	subs	r2, r0, r3
 8005452:	bf1c      	itt	ne
 8005454:	1a1b      	subne	r3, r3, r0
 8005456:	50a3      	strne	r3, [r4, r2]
 8005458:	e7af      	b.n	80053ba <_malloc_r+0x22>
 800545a:	6862      	ldr	r2, [r4, #4]
 800545c:	42a3      	cmp	r3, r4
 800545e:	bf0c      	ite	eq
 8005460:	f8c8 2000 	streq.w	r2, [r8]
 8005464:	605a      	strne	r2, [r3, #4]
 8005466:	e7eb      	b.n	8005440 <_malloc_r+0xa8>
 8005468:	4623      	mov	r3, r4
 800546a:	6864      	ldr	r4, [r4, #4]
 800546c:	e7ae      	b.n	80053cc <_malloc_r+0x34>
 800546e:	463c      	mov	r4, r7
 8005470:	687f      	ldr	r7, [r7, #4]
 8005472:	e7b6      	b.n	80053e2 <_malloc_r+0x4a>
 8005474:	461a      	mov	r2, r3
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	42a3      	cmp	r3, r4
 800547a:	d1fb      	bne.n	8005474 <_malloc_r+0xdc>
 800547c:	2300      	movs	r3, #0
 800547e:	6053      	str	r3, [r2, #4]
 8005480:	e7de      	b.n	8005440 <_malloc_r+0xa8>
 8005482:	230c      	movs	r3, #12
 8005484:	6033      	str	r3, [r6, #0]
 8005486:	4630      	mov	r0, r6
 8005488:	f000 f80c 	bl	80054a4 <__malloc_unlock>
 800548c:	e794      	b.n	80053b8 <_malloc_r+0x20>
 800548e:	6005      	str	r5, [r0, #0]
 8005490:	e7d6      	b.n	8005440 <_malloc_r+0xa8>
 8005492:	bf00      	nop
 8005494:	20000454 	.word	0x20000454

08005498 <__malloc_lock>:
 8005498:	4801      	ldr	r0, [pc, #4]	@ (80054a0 <__malloc_lock+0x8>)
 800549a:	f7ff b8a0 	b.w	80045de <__retarget_lock_acquire_recursive>
 800549e:	bf00      	nop
 80054a0:	2000044c 	.word	0x2000044c

080054a4 <__malloc_unlock>:
 80054a4:	4801      	ldr	r0, [pc, #4]	@ (80054ac <__malloc_unlock+0x8>)
 80054a6:	f7ff b89b 	b.w	80045e0 <__retarget_lock_release_recursive>
 80054aa:	bf00      	nop
 80054ac:	2000044c 	.word	0x2000044c

080054b0 <_Balloc>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	69c6      	ldr	r6, [r0, #28]
 80054b4:	4604      	mov	r4, r0
 80054b6:	460d      	mov	r5, r1
 80054b8:	b976      	cbnz	r6, 80054d8 <_Balloc+0x28>
 80054ba:	2010      	movs	r0, #16
 80054bc:	f7ff ff42 	bl	8005344 <malloc>
 80054c0:	4602      	mov	r2, r0
 80054c2:	61e0      	str	r0, [r4, #28]
 80054c4:	b920      	cbnz	r0, 80054d0 <_Balloc+0x20>
 80054c6:	4b18      	ldr	r3, [pc, #96]	@ (8005528 <_Balloc+0x78>)
 80054c8:	4818      	ldr	r0, [pc, #96]	@ (800552c <_Balloc+0x7c>)
 80054ca:	216b      	movs	r1, #107	@ 0x6b
 80054cc:	f000 fdfc 	bl	80060c8 <__assert_func>
 80054d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054d4:	6006      	str	r6, [r0, #0]
 80054d6:	60c6      	str	r6, [r0, #12]
 80054d8:	69e6      	ldr	r6, [r4, #28]
 80054da:	68f3      	ldr	r3, [r6, #12]
 80054dc:	b183      	cbz	r3, 8005500 <_Balloc+0x50>
 80054de:	69e3      	ldr	r3, [r4, #28]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054e6:	b9b8      	cbnz	r0, 8005518 <_Balloc+0x68>
 80054e8:	2101      	movs	r1, #1
 80054ea:	fa01 f605 	lsl.w	r6, r1, r5
 80054ee:	1d72      	adds	r2, r6, #5
 80054f0:	0092      	lsls	r2, r2, #2
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 fe06 	bl	8006104 <_calloc_r>
 80054f8:	b160      	cbz	r0, 8005514 <_Balloc+0x64>
 80054fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054fe:	e00e      	b.n	800551e <_Balloc+0x6e>
 8005500:	2221      	movs	r2, #33	@ 0x21
 8005502:	2104      	movs	r1, #4
 8005504:	4620      	mov	r0, r4
 8005506:	f000 fdfd 	bl	8006104 <_calloc_r>
 800550a:	69e3      	ldr	r3, [r4, #28]
 800550c:	60f0      	str	r0, [r6, #12]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e4      	bne.n	80054de <_Balloc+0x2e>
 8005514:	2000      	movs	r0, #0
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	6802      	ldr	r2, [r0, #0]
 800551a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800551e:	2300      	movs	r3, #0
 8005520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005524:	e7f7      	b.n	8005516 <_Balloc+0x66>
 8005526:	bf00      	nop
 8005528:	080063e1 	.word	0x080063e1
 800552c:	08006461 	.word	0x08006461

08005530 <_Bfree>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	69c6      	ldr	r6, [r0, #28]
 8005534:	4605      	mov	r5, r0
 8005536:	460c      	mov	r4, r1
 8005538:	b976      	cbnz	r6, 8005558 <_Bfree+0x28>
 800553a:	2010      	movs	r0, #16
 800553c:	f7ff ff02 	bl	8005344 <malloc>
 8005540:	4602      	mov	r2, r0
 8005542:	61e8      	str	r0, [r5, #28]
 8005544:	b920      	cbnz	r0, 8005550 <_Bfree+0x20>
 8005546:	4b09      	ldr	r3, [pc, #36]	@ (800556c <_Bfree+0x3c>)
 8005548:	4809      	ldr	r0, [pc, #36]	@ (8005570 <_Bfree+0x40>)
 800554a:	218f      	movs	r1, #143	@ 0x8f
 800554c:	f000 fdbc 	bl	80060c8 <__assert_func>
 8005550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005554:	6006      	str	r6, [r0, #0]
 8005556:	60c6      	str	r6, [r0, #12]
 8005558:	b13c      	cbz	r4, 800556a <_Bfree+0x3a>
 800555a:	69eb      	ldr	r3, [r5, #28]
 800555c:	6862      	ldr	r2, [r4, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005564:	6021      	str	r1, [r4, #0]
 8005566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	080063e1 	.word	0x080063e1
 8005570:	08006461 	.word	0x08006461

08005574 <__multadd>:
 8005574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005578:	690d      	ldr	r5, [r1, #16]
 800557a:	4607      	mov	r7, r0
 800557c:	460c      	mov	r4, r1
 800557e:	461e      	mov	r6, r3
 8005580:	f101 0c14 	add.w	ip, r1, #20
 8005584:	2000      	movs	r0, #0
 8005586:	f8dc 3000 	ldr.w	r3, [ip]
 800558a:	b299      	uxth	r1, r3
 800558c:	fb02 6101 	mla	r1, r2, r1, r6
 8005590:	0c1e      	lsrs	r6, r3, #16
 8005592:	0c0b      	lsrs	r3, r1, #16
 8005594:	fb02 3306 	mla	r3, r2, r6, r3
 8005598:	b289      	uxth	r1, r1
 800559a:	3001      	adds	r0, #1
 800559c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055a0:	4285      	cmp	r5, r0
 80055a2:	f84c 1b04 	str.w	r1, [ip], #4
 80055a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055aa:	dcec      	bgt.n	8005586 <__multadd+0x12>
 80055ac:	b30e      	cbz	r6, 80055f2 <__multadd+0x7e>
 80055ae:	68a3      	ldr	r3, [r4, #8]
 80055b0:	42ab      	cmp	r3, r5
 80055b2:	dc19      	bgt.n	80055e8 <__multadd+0x74>
 80055b4:	6861      	ldr	r1, [r4, #4]
 80055b6:	4638      	mov	r0, r7
 80055b8:	3101      	adds	r1, #1
 80055ba:	f7ff ff79 	bl	80054b0 <_Balloc>
 80055be:	4680      	mov	r8, r0
 80055c0:	b928      	cbnz	r0, 80055ce <__multadd+0x5a>
 80055c2:	4602      	mov	r2, r0
 80055c4:	4b0c      	ldr	r3, [pc, #48]	@ (80055f8 <__multadd+0x84>)
 80055c6:	480d      	ldr	r0, [pc, #52]	@ (80055fc <__multadd+0x88>)
 80055c8:	21ba      	movs	r1, #186	@ 0xba
 80055ca:	f000 fd7d 	bl	80060c8 <__assert_func>
 80055ce:	6922      	ldr	r2, [r4, #16]
 80055d0:	3202      	adds	r2, #2
 80055d2:	f104 010c 	add.w	r1, r4, #12
 80055d6:	0092      	lsls	r2, r2, #2
 80055d8:	300c      	adds	r0, #12
 80055da:	f7ff f802 	bl	80045e2 <memcpy>
 80055de:	4621      	mov	r1, r4
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ffa5 	bl	8005530 <_Bfree>
 80055e6:	4644      	mov	r4, r8
 80055e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055ec:	3501      	adds	r5, #1
 80055ee:	615e      	str	r6, [r3, #20]
 80055f0:	6125      	str	r5, [r4, #16]
 80055f2:	4620      	mov	r0, r4
 80055f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f8:	08006450 	.word	0x08006450
 80055fc:	08006461 	.word	0x08006461

08005600 <__hi0bits>:
 8005600:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005604:	4603      	mov	r3, r0
 8005606:	bf36      	itet	cc
 8005608:	0403      	lslcc	r3, r0, #16
 800560a:	2000      	movcs	r0, #0
 800560c:	2010      	movcc	r0, #16
 800560e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005612:	bf3c      	itt	cc
 8005614:	021b      	lslcc	r3, r3, #8
 8005616:	3008      	addcc	r0, #8
 8005618:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800561c:	bf3c      	itt	cc
 800561e:	011b      	lslcc	r3, r3, #4
 8005620:	3004      	addcc	r0, #4
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005626:	bf3c      	itt	cc
 8005628:	009b      	lslcc	r3, r3, #2
 800562a:	3002      	addcc	r0, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	db05      	blt.n	800563c <__hi0bits+0x3c>
 8005630:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005634:	f100 0001 	add.w	r0, r0, #1
 8005638:	bf08      	it	eq
 800563a:	2020      	moveq	r0, #32
 800563c:	4770      	bx	lr

0800563e <__lo0bits>:
 800563e:	6803      	ldr	r3, [r0, #0]
 8005640:	4602      	mov	r2, r0
 8005642:	f013 0007 	ands.w	r0, r3, #7
 8005646:	d00b      	beq.n	8005660 <__lo0bits+0x22>
 8005648:	07d9      	lsls	r1, r3, #31
 800564a:	d421      	bmi.n	8005690 <__lo0bits+0x52>
 800564c:	0798      	lsls	r0, r3, #30
 800564e:	bf49      	itett	mi
 8005650:	085b      	lsrmi	r3, r3, #1
 8005652:	089b      	lsrpl	r3, r3, #2
 8005654:	2001      	movmi	r0, #1
 8005656:	6013      	strmi	r3, [r2, #0]
 8005658:	bf5c      	itt	pl
 800565a:	6013      	strpl	r3, [r2, #0]
 800565c:	2002      	movpl	r0, #2
 800565e:	4770      	bx	lr
 8005660:	b299      	uxth	r1, r3
 8005662:	b909      	cbnz	r1, 8005668 <__lo0bits+0x2a>
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	2010      	movs	r0, #16
 8005668:	b2d9      	uxtb	r1, r3
 800566a:	b909      	cbnz	r1, 8005670 <__lo0bits+0x32>
 800566c:	3008      	adds	r0, #8
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	0719      	lsls	r1, r3, #28
 8005672:	bf04      	itt	eq
 8005674:	091b      	lsreq	r3, r3, #4
 8005676:	3004      	addeq	r0, #4
 8005678:	0799      	lsls	r1, r3, #30
 800567a:	bf04      	itt	eq
 800567c:	089b      	lsreq	r3, r3, #2
 800567e:	3002      	addeq	r0, #2
 8005680:	07d9      	lsls	r1, r3, #31
 8005682:	d403      	bmi.n	800568c <__lo0bits+0x4e>
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	f100 0001 	add.w	r0, r0, #1
 800568a:	d003      	beq.n	8005694 <__lo0bits+0x56>
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	4770      	bx	lr
 8005690:	2000      	movs	r0, #0
 8005692:	4770      	bx	lr
 8005694:	2020      	movs	r0, #32
 8005696:	4770      	bx	lr

08005698 <__i2b>:
 8005698:	b510      	push	{r4, lr}
 800569a:	460c      	mov	r4, r1
 800569c:	2101      	movs	r1, #1
 800569e:	f7ff ff07 	bl	80054b0 <_Balloc>
 80056a2:	4602      	mov	r2, r0
 80056a4:	b928      	cbnz	r0, 80056b2 <__i2b+0x1a>
 80056a6:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <__i2b+0x24>)
 80056a8:	4805      	ldr	r0, [pc, #20]	@ (80056c0 <__i2b+0x28>)
 80056aa:	f240 1145 	movw	r1, #325	@ 0x145
 80056ae:	f000 fd0b 	bl	80060c8 <__assert_func>
 80056b2:	2301      	movs	r3, #1
 80056b4:	6144      	str	r4, [r0, #20]
 80056b6:	6103      	str	r3, [r0, #16]
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	bf00      	nop
 80056bc:	08006450 	.word	0x08006450
 80056c0:	08006461 	.word	0x08006461

080056c4 <__multiply>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	4617      	mov	r7, r2
 80056ca:	690a      	ldr	r2, [r1, #16]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	bfa8      	it	ge
 80056d2:	463b      	movge	r3, r7
 80056d4:	4689      	mov	r9, r1
 80056d6:	bfa4      	itt	ge
 80056d8:	460f      	movge	r7, r1
 80056da:	4699      	movge	r9, r3
 80056dc:	693d      	ldr	r5, [r7, #16]
 80056de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	eb05 060a 	add.w	r6, r5, sl
 80056ea:	42b3      	cmp	r3, r6
 80056ec:	b085      	sub	sp, #20
 80056ee:	bfb8      	it	lt
 80056f0:	3101      	addlt	r1, #1
 80056f2:	f7ff fedd 	bl	80054b0 <_Balloc>
 80056f6:	b930      	cbnz	r0, 8005706 <__multiply+0x42>
 80056f8:	4602      	mov	r2, r0
 80056fa:	4b41      	ldr	r3, [pc, #260]	@ (8005800 <__multiply+0x13c>)
 80056fc:	4841      	ldr	r0, [pc, #260]	@ (8005804 <__multiply+0x140>)
 80056fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005702:	f000 fce1 	bl	80060c8 <__assert_func>
 8005706:	f100 0414 	add.w	r4, r0, #20
 800570a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800570e:	4623      	mov	r3, r4
 8005710:	2200      	movs	r2, #0
 8005712:	4573      	cmp	r3, lr
 8005714:	d320      	bcc.n	8005758 <__multiply+0x94>
 8005716:	f107 0814 	add.w	r8, r7, #20
 800571a:	f109 0114 	add.w	r1, r9, #20
 800571e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005722:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005726:	9302      	str	r3, [sp, #8]
 8005728:	1beb      	subs	r3, r5, r7
 800572a:	3b15      	subs	r3, #21
 800572c:	f023 0303 	bic.w	r3, r3, #3
 8005730:	3304      	adds	r3, #4
 8005732:	3715      	adds	r7, #21
 8005734:	42bd      	cmp	r5, r7
 8005736:	bf38      	it	cc
 8005738:	2304      	movcc	r3, #4
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	9b02      	ldr	r3, [sp, #8]
 800573e:	9103      	str	r1, [sp, #12]
 8005740:	428b      	cmp	r3, r1
 8005742:	d80c      	bhi.n	800575e <__multiply+0x9a>
 8005744:	2e00      	cmp	r6, #0
 8005746:	dd03      	ble.n	8005750 <__multiply+0x8c>
 8005748:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800574c:	2b00      	cmp	r3, #0
 800574e:	d055      	beq.n	80057fc <__multiply+0x138>
 8005750:	6106      	str	r6, [r0, #16]
 8005752:	b005      	add	sp, #20
 8005754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005758:	f843 2b04 	str.w	r2, [r3], #4
 800575c:	e7d9      	b.n	8005712 <__multiply+0x4e>
 800575e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005762:	f1ba 0f00 	cmp.w	sl, #0
 8005766:	d01f      	beq.n	80057a8 <__multiply+0xe4>
 8005768:	46c4      	mov	ip, r8
 800576a:	46a1      	mov	r9, r4
 800576c:	2700      	movs	r7, #0
 800576e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005772:	f8d9 3000 	ldr.w	r3, [r9]
 8005776:	fa1f fb82 	uxth.w	fp, r2
 800577a:	b29b      	uxth	r3, r3
 800577c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005780:	443b      	add	r3, r7
 8005782:	f8d9 7000 	ldr.w	r7, [r9]
 8005786:	0c12      	lsrs	r2, r2, #16
 8005788:	0c3f      	lsrs	r7, r7, #16
 800578a:	fb0a 7202 	mla	r2, sl, r2, r7
 800578e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005792:	b29b      	uxth	r3, r3
 8005794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005798:	4565      	cmp	r5, ip
 800579a:	f849 3b04 	str.w	r3, [r9], #4
 800579e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80057a2:	d8e4      	bhi.n	800576e <__multiply+0xaa>
 80057a4:	9b01      	ldr	r3, [sp, #4]
 80057a6:	50e7      	str	r7, [r4, r3]
 80057a8:	9b03      	ldr	r3, [sp, #12]
 80057aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80057ae:	3104      	adds	r1, #4
 80057b0:	f1b9 0f00 	cmp.w	r9, #0
 80057b4:	d020      	beq.n	80057f8 <__multiply+0x134>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	4647      	mov	r7, r8
 80057ba:	46a4      	mov	ip, r4
 80057bc:	f04f 0a00 	mov.w	sl, #0
 80057c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80057c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80057c8:	fb09 220b 	mla	r2, r9, fp, r2
 80057cc:	4452      	add	r2, sl
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057d4:	f84c 3b04 	str.w	r3, [ip], #4
 80057d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80057dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80057e4:	fb09 330a 	mla	r3, r9, sl, r3
 80057e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80057ec:	42bd      	cmp	r5, r7
 80057ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057f2:	d8e5      	bhi.n	80057c0 <__multiply+0xfc>
 80057f4:	9a01      	ldr	r2, [sp, #4]
 80057f6:	50a3      	str	r3, [r4, r2]
 80057f8:	3404      	adds	r4, #4
 80057fa:	e79f      	b.n	800573c <__multiply+0x78>
 80057fc:	3e01      	subs	r6, #1
 80057fe:	e7a1      	b.n	8005744 <__multiply+0x80>
 8005800:	08006450 	.word	0x08006450
 8005804:	08006461 	.word	0x08006461

08005808 <__pow5mult>:
 8005808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800580c:	4615      	mov	r5, r2
 800580e:	f012 0203 	ands.w	r2, r2, #3
 8005812:	4607      	mov	r7, r0
 8005814:	460e      	mov	r6, r1
 8005816:	d007      	beq.n	8005828 <__pow5mult+0x20>
 8005818:	4c25      	ldr	r4, [pc, #148]	@ (80058b0 <__pow5mult+0xa8>)
 800581a:	3a01      	subs	r2, #1
 800581c:	2300      	movs	r3, #0
 800581e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005822:	f7ff fea7 	bl	8005574 <__multadd>
 8005826:	4606      	mov	r6, r0
 8005828:	10ad      	asrs	r5, r5, #2
 800582a:	d03d      	beq.n	80058a8 <__pow5mult+0xa0>
 800582c:	69fc      	ldr	r4, [r7, #28]
 800582e:	b97c      	cbnz	r4, 8005850 <__pow5mult+0x48>
 8005830:	2010      	movs	r0, #16
 8005832:	f7ff fd87 	bl	8005344 <malloc>
 8005836:	4602      	mov	r2, r0
 8005838:	61f8      	str	r0, [r7, #28]
 800583a:	b928      	cbnz	r0, 8005848 <__pow5mult+0x40>
 800583c:	4b1d      	ldr	r3, [pc, #116]	@ (80058b4 <__pow5mult+0xac>)
 800583e:	481e      	ldr	r0, [pc, #120]	@ (80058b8 <__pow5mult+0xb0>)
 8005840:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005844:	f000 fc40 	bl	80060c8 <__assert_func>
 8005848:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800584c:	6004      	str	r4, [r0, #0]
 800584e:	60c4      	str	r4, [r0, #12]
 8005850:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005858:	b94c      	cbnz	r4, 800586e <__pow5mult+0x66>
 800585a:	f240 2171 	movw	r1, #625	@ 0x271
 800585e:	4638      	mov	r0, r7
 8005860:	f7ff ff1a 	bl	8005698 <__i2b>
 8005864:	2300      	movs	r3, #0
 8005866:	f8c8 0008 	str.w	r0, [r8, #8]
 800586a:	4604      	mov	r4, r0
 800586c:	6003      	str	r3, [r0, #0]
 800586e:	f04f 0900 	mov.w	r9, #0
 8005872:	07eb      	lsls	r3, r5, #31
 8005874:	d50a      	bpl.n	800588c <__pow5mult+0x84>
 8005876:	4631      	mov	r1, r6
 8005878:	4622      	mov	r2, r4
 800587a:	4638      	mov	r0, r7
 800587c:	f7ff ff22 	bl	80056c4 <__multiply>
 8005880:	4631      	mov	r1, r6
 8005882:	4680      	mov	r8, r0
 8005884:	4638      	mov	r0, r7
 8005886:	f7ff fe53 	bl	8005530 <_Bfree>
 800588a:	4646      	mov	r6, r8
 800588c:	106d      	asrs	r5, r5, #1
 800588e:	d00b      	beq.n	80058a8 <__pow5mult+0xa0>
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	b938      	cbnz	r0, 80058a4 <__pow5mult+0x9c>
 8005894:	4622      	mov	r2, r4
 8005896:	4621      	mov	r1, r4
 8005898:	4638      	mov	r0, r7
 800589a:	f7ff ff13 	bl	80056c4 <__multiply>
 800589e:	6020      	str	r0, [r4, #0]
 80058a0:	f8c0 9000 	str.w	r9, [r0]
 80058a4:	4604      	mov	r4, r0
 80058a6:	e7e4      	b.n	8005872 <__pow5mult+0x6a>
 80058a8:	4630      	mov	r0, r6
 80058aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ae:	bf00      	nop
 80058b0:	08006514 	.word	0x08006514
 80058b4:	080063e1 	.word	0x080063e1
 80058b8:	08006461 	.word	0x08006461

080058bc <__lshift>:
 80058bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	460c      	mov	r4, r1
 80058c2:	6849      	ldr	r1, [r1, #4]
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058ca:	68a3      	ldr	r3, [r4, #8]
 80058cc:	4607      	mov	r7, r0
 80058ce:	4691      	mov	r9, r2
 80058d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058d4:	f108 0601 	add.w	r6, r8, #1
 80058d8:	42b3      	cmp	r3, r6
 80058da:	db0b      	blt.n	80058f4 <__lshift+0x38>
 80058dc:	4638      	mov	r0, r7
 80058de:	f7ff fde7 	bl	80054b0 <_Balloc>
 80058e2:	4605      	mov	r5, r0
 80058e4:	b948      	cbnz	r0, 80058fa <__lshift+0x3e>
 80058e6:	4602      	mov	r2, r0
 80058e8:	4b28      	ldr	r3, [pc, #160]	@ (800598c <__lshift+0xd0>)
 80058ea:	4829      	ldr	r0, [pc, #164]	@ (8005990 <__lshift+0xd4>)
 80058ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80058f0:	f000 fbea 	bl	80060c8 <__assert_func>
 80058f4:	3101      	adds	r1, #1
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	e7ee      	b.n	80058d8 <__lshift+0x1c>
 80058fa:	2300      	movs	r3, #0
 80058fc:	f100 0114 	add.w	r1, r0, #20
 8005900:	f100 0210 	add.w	r2, r0, #16
 8005904:	4618      	mov	r0, r3
 8005906:	4553      	cmp	r3, sl
 8005908:	db33      	blt.n	8005972 <__lshift+0xb6>
 800590a:	6920      	ldr	r0, [r4, #16]
 800590c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005910:	f104 0314 	add.w	r3, r4, #20
 8005914:	f019 091f 	ands.w	r9, r9, #31
 8005918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800591c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005920:	d02b      	beq.n	800597a <__lshift+0xbe>
 8005922:	f1c9 0e20 	rsb	lr, r9, #32
 8005926:	468a      	mov	sl, r1
 8005928:	2200      	movs	r2, #0
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	fa00 f009 	lsl.w	r0, r0, r9
 8005930:	4310      	orrs	r0, r2
 8005932:	f84a 0b04 	str.w	r0, [sl], #4
 8005936:	f853 2b04 	ldr.w	r2, [r3], #4
 800593a:	459c      	cmp	ip, r3
 800593c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005940:	d8f3      	bhi.n	800592a <__lshift+0x6e>
 8005942:	ebac 0304 	sub.w	r3, ip, r4
 8005946:	3b15      	subs	r3, #21
 8005948:	f023 0303 	bic.w	r3, r3, #3
 800594c:	3304      	adds	r3, #4
 800594e:	f104 0015 	add.w	r0, r4, #21
 8005952:	4560      	cmp	r0, ip
 8005954:	bf88      	it	hi
 8005956:	2304      	movhi	r3, #4
 8005958:	50ca      	str	r2, [r1, r3]
 800595a:	b10a      	cbz	r2, 8005960 <__lshift+0xa4>
 800595c:	f108 0602 	add.w	r6, r8, #2
 8005960:	3e01      	subs	r6, #1
 8005962:	4638      	mov	r0, r7
 8005964:	612e      	str	r6, [r5, #16]
 8005966:	4621      	mov	r1, r4
 8005968:	f7ff fde2 	bl	8005530 <_Bfree>
 800596c:	4628      	mov	r0, r5
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	f842 0f04 	str.w	r0, [r2, #4]!
 8005976:	3301      	adds	r3, #1
 8005978:	e7c5      	b.n	8005906 <__lshift+0x4a>
 800597a:	3904      	subs	r1, #4
 800597c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005980:	f841 2f04 	str.w	r2, [r1, #4]!
 8005984:	459c      	cmp	ip, r3
 8005986:	d8f9      	bhi.n	800597c <__lshift+0xc0>
 8005988:	e7ea      	b.n	8005960 <__lshift+0xa4>
 800598a:	bf00      	nop
 800598c:	08006450 	.word	0x08006450
 8005990:	08006461 	.word	0x08006461

08005994 <__mcmp>:
 8005994:	690a      	ldr	r2, [r1, #16]
 8005996:	4603      	mov	r3, r0
 8005998:	6900      	ldr	r0, [r0, #16]
 800599a:	1a80      	subs	r0, r0, r2
 800599c:	b530      	push	{r4, r5, lr}
 800599e:	d10e      	bne.n	80059be <__mcmp+0x2a>
 80059a0:	3314      	adds	r3, #20
 80059a2:	3114      	adds	r1, #20
 80059a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059b4:	4295      	cmp	r5, r2
 80059b6:	d003      	beq.n	80059c0 <__mcmp+0x2c>
 80059b8:	d205      	bcs.n	80059c6 <__mcmp+0x32>
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295
 80059be:	bd30      	pop	{r4, r5, pc}
 80059c0:	42a3      	cmp	r3, r4
 80059c2:	d3f3      	bcc.n	80059ac <__mcmp+0x18>
 80059c4:	e7fb      	b.n	80059be <__mcmp+0x2a>
 80059c6:	2001      	movs	r0, #1
 80059c8:	e7f9      	b.n	80059be <__mcmp+0x2a>
	...

080059cc <__mdiff>:
 80059cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d0:	4689      	mov	r9, r1
 80059d2:	4606      	mov	r6, r0
 80059d4:	4611      	mov	r1, r2
 80059d6:	4648      	mov	r0, r9
 80059d8:	4614      	mov	r4, r2
 80059da:	f7ff ffdb 	bl	8005994 <__mcmp>
 80059de:	1e05      	subs	r5, r0, #0
 80059e0:	d112      	bne.n	8005a08 <__mdiff+0x3c>
 80059e2:	4629      	mov	r1, r5
 80059e4:	4630      	mov	r0, r6
 80059e6:	f7ff fd63 	bl	80054b0 <_Balloc>
 80059ea:	4602      	mov	r2, r0
 80059ec:	b928      	cbnz	r0, 80059fa <__mdiff+0x2e>
 80059ee:	4b3f      	ldr	r3, [pc, #252]	@ (8005aec <__mdiff+0x120>)
 80059f0:	f240 2137 	movw	r1, #567	@ 0x237
 80059f4:	483e      	ldr	r0, [pc, #248]	@ (8005af0 <__mdiff+0x124>)
 80059f6:	f000 fb67 	bl	80060c8 <__assert_func>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a00:	4610      	mov	r0, r2
 8005a02:	b003      	add	sp, #12
 8005a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a08:	bfbc      	itt	lt
 8005a0a:	464b      	movlt	r3, r9
 8005a0c:	46a1      	movlt	r9, r4
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a14:	bfba      	itte	lt
 8005a16:	461c      	movlt	r4, r3
 8005a18:	2501      	movlt	r5, #1
 8005a1a:	2500      	movge	r5, #0
 8005a1c:	f7ff fd48 	bl	80054b0 <_Balloc>
 8005a20:	4602      	mov	r2, r0
 8005a22:	b918      	cbnz	r0, 8005a2c <__mdiff+0x60>
 8005a24:	4b31      	ldr	r3, [pc, #196]	@ (8005aec <__mdiff+0x120>)
 8005a26:	f240 2145 	movw	r1, #581	@ 0x245
 8005a2a:	e7e3      	b.n	80059f4 <__mdiff+0x28>
 8005a2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005a30:	6926      	ldr	r6, [r4, #16]
 8005a32:	60c5      	str	r5, [r0, #12]
 8005a34:	f109 0310 	add.w	r3, r9, #16
 8005a38:	f109 0514 	add.w	r5, r9, #20
 8005a3c:	f104 0e14 	add.w	lr, r4, #20
 8005a40:	f100 0b14 	add.w	fp, r0, #20
 8005a44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005a48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	46d9      	mov	r9, fp
 8005a50:	f04f 0c00 	mov.w	ip, #0
 8005a54:	9b01      	ldr	r3, [sp, #4]
 8005a56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005a5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005a5e:	9301      	str	r3, [sp, #4]
 8005a60:	fa1f f38a 	uxth.w	r3, sl
 8005a64:	4619      	mov	r1, r3
 8005a66:	b283      	uxth	r3, r0
 8005a68:	1acb      	subs	r3, r1, r3
 8005a6a:	0c00      	lsrs	r0, r0, #16
 8005a6c:	4463      	add	r3, ip
 8005a6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005a72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005a7c:	4576      	cmp	r6, lr
 8005a7e:	f849 3b04 	str.w	r3, [r9], #4
 8005a82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a86:	d8e5      	bhi.n	8005a54 <__mdiff+0x88>
 8005a88:	1b33      	subs	r3, r6, r4
 8005a8a:	3b15      	subs	r3, #21
 8005a8c:	f023 0303 	bic.w	r3, r3, #3
 8005a90:	3415      	adds	r4, #21
 8005a92:	3304      	adds	r3, #4
 8005a94:	42a6      	cmp	r6, r4
 8005a96:	bf38      	it	cc
 8005a98:	2304      	movcc	r3, #4
 8005a9a:	441d      	add	r5, r3
 8005a9c:	445b      	add	r3, fp
 8005a9e:	461e      	mov	r6, r3
 8005aa0:	462c      	mov	r4, r5
 8005aa2:	4544      	cmp	r4, r8
 8005aa4:	d30e      	bcc.n	8005ac4 <__mdiff+0xf8>
 8005aa6:	f108 0103 	add.w	r1, r8, #3
 8005aaa:	1b49      	subs	r1, r1, r5
 8005aac:	f021 0103 	bic.w	r1, r1, #3
 8005ab0:	3d03      	subs	r5, #3
 8005ab2:	45a8      	cmp	r8, r5
 8005ab4:	bf38      	it	cc
 8005ab6:	2100      	movcc	r1, #0
 8005ab8:	440b      	add	r3, r1
 8005aba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005abe:	b191      	cbz	r1, 8005ae6 <__mdiff+0x11a>
 8005ac0:	6117      	str	r7, [r2, #16]
 8005ac2:	e79d      	b.n	8005a00 <__mdiff+0x34>
 8005ac4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005ac8:	46e6      	mov	lr, ip
 8005aca:	0c08      	lsrs	r0, r1, #16
 8005acc:	fa1c fc81 	uxtah	ip, ip, r1
 8005ad0:	4471      	add	r1, lr
 8005ad2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ad6:	b289      	uxth	r1, r1
 8005ad8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005adc:	f846 1b04 	str.w	r1, [r6], #4
 8005ae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ae4:	e7dd      	b.n	8005aa2 <__mdiff+0xd6>
 8005ae6:	3f01      	subs	r7, #1
 8005ae8:	e7e7      	b.n	8005aba <__mdiff+0xee>
 8005aea:	bf00      	nop
 8005aec:	08006450 	.word	0x08006450
 8005af0:	08006461 	.word	0x08006461

08005af4 <__d2b>:
 8005af4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005af8:	460f      	mov	r7, r1
 8005afa:	2101      	movs	r1, #1
 8005afc:	ec59 8b10 	vmov	r8, r9, d0
 8005b00:	4616      	mov	r6, r2
 8005b02:	f7ff fcd5 	bl	80054b0 <_Balloc>
 8005b06:	4604      	mov	r4, r0
 8005b08:	b930      	cbnz	r0, 8005b18 <__d2b+0x24>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	4b23      	ldr	r3, [pc, #140]	@ (8005b9c <__d2b+0xa8>)
 8005b0e:	4824      	ldr	r0, [pc, #144]	@ (8005ba0 <__d2b+0xac>)
 8005b10:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b14:	f000 fad8 	bl	80060c8 <__assert_func>
 8005b18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b20:	b10d      	cbz	r5, 8005b26 <__d2b+0x32>
 8005b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	f1b8 0300 	subs.w	r3, r8, #0
 8005b2c:	d023      	beq.n	8005b76 <__d2b+0x82>
 8005b2e:	4668      	mov	r0, sp
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f7ff fd84 	bl	800563e <__lo0bits>
 8005b36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b3a:	b1d0      	cbz	r0, 8005b72 <__d2b+0x7e>
 8005b3c:	f1c0 0320 	rsb	r3, r0, #32
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	430b      	orrs	r3, r1
 8005b46:	40c2      	lsrs	r2, r0
 8005b48:	6163      	str	r3, [r4, #20]
 8005b4a:	9201      	str	r2, [sp, #4]
 8005b4c:	9b01      	ldr	r3, [sp, #4]
 8005b4e:	61a3      	str	r3, [r4, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bf0c      	ite	eq
 8005b54:	2201      	moveq	r2, #1
 8005b56:	2202      	movne	r2, #2
 8005b58:	6122      	str	r2, [r4, #16]
 8005b5a:	b1a5      	cbz	r5, 8005b86 <__d2b+0x92>
 8005b5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005b60:	4405      	add	r5, r0
 8005b62:	603d      	str	r5, [r7, #0]
 8005b64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005b68:	6030      	str	r0, [r6, #0]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	b003      	add	sp, #12
 8005b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b72:	6161      	str	r1, [r4, #20]
 8005b74:	e7ea      	b.n	8005b4c <__d2b+0x58>
 8005b76:	a801      	add	r0, sp, #4
 8005b78:	f7ff fd61 	bl	800563e <__lo0bits>
 8005b7c:	9b01      	ldr	r3, [sp, #4]
 8005b7e:	6163      	str	r3, [r4, #20]
 8005b80:	3020      	adds	r0, #32
 8005b82:	2201      	movs	r2, #1
 8005b84:	e7e8      	b.n	8005b58 <__d2b+0x64>
 8005b86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005b8e:	6038      	str	r0, [r7, #0]
 8005b90:	6918      	ldr	r0, [r3, #16]
 8005b92:	f7ff fd35 	bl	8005600 <__hi0bits>
 8005b96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b9a:	e7e5      	b.n	8005b68 <__d2b+0x74>
 8005b9c:	08006450 	.word	0x08006450
 8005ba0:	08006461 	.word	0x08006461

08005ba4 <__sfputc_r>:
 8005ba4:	6893      	ldr	r3, [r2, #8]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	b410      	push	{r4}
 8005bac:	6093      	str	r3, [r2, #8]
 8005bae:	da08      	bge.n	8005bc2 <__sfputc_r+0x1e>
 8005bb0:	6994      	ldr	r4, [r2, #24]
 8005bb2:	42a3      	cmp	r3, r4
 8005bb4:	db01      	blt.n	8005bba <__sfputc_r+0x16>
 8005bb6:	290a      	cmp	r1, #10
 8005bb8:	d103      	bne.n	8005bc2 <__sfputc_r+0x1e>
 8005bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bbe:	f000 b9df 	b.w	8005f80 <__swbuf_r>
 8005bc2:	6813      	ldr	r3, [r2, #0]
 8005bc4:	1c58      	adds	r0, r3, #1
 8005bc6:	6010      	str	r0, [r2, #0]
 8005bc8:	7019      	strb	r1, [r3, #0]
 8005bca:	4608      	mov	r0, r1
 8005bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <__sfputs_r>:
 8005bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	460f      	mov	r7, r1
 8005bd8:	4614      	mov	r4, r2
 8005bda:	18d5      	adds	r5, r2, r3
 8005bdc:	42ac      	cmp	r4, r5
 8005bde:	d101      	bne.n	8005be4 <__sfputs_r+0x12>
 8005be0:	2000      	movs	r0, #0
 8005be2:	e007      	b.n	8005bf4 <__sfputs_r+0x22>
 8005be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be8:	463a      	mov	r2, r7
 8005bea:	4630      	mov	r0, r6
 8005bec:	f7ff ffda 	bl	8005ba4 <__sfputc_r>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d1f3      	bne.n	8005bdc <__sfputs_r+0xa>
 8005bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bf8 <_vfiprintf_r>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	b09d      	sub	sp, #116	@ 0x74
 8005c00:	4614      	mov	r4, r2
 8005c02:	4698      	mov	r8, r3
 8005c04:	4606      	mov	r6, r0
 8005c06:	b118      	cbz	r0, 8005c10 <_vfiprintf_r+0x18>
 8005c08:	6a03      	ldr	r3, [r0, #32]
 8005c0a:	b90b      	cbnz	r3, 8005c10 <_vfiprintf_r+0x18>
 8005c0c:	f7fe fbde 	bl	80043cc <__sinit>
 8005c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c12:	07d9      	lsls	r1, r3, #31
 8005c14:	d405      	bmi.n	8005c22 <_vfiprintf_r+0x2a>
 8005c16:	89ab      	ldrh	r3, [r5, #12]
 8005c18:	059a      	lsls	r2, r3, #22
 8005c1a:	d402      	bmi.n	8005c22 <_vfiprintf_r+0x2a>
 8005c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c1e:	f7fe fcde 	bl	80045de <__retarget_lock_acquire_recursive>
 8005c22:	89ab      	ldrh	r3, [r5, #12]
 8005c24:	071b      	lsls	r3, r3, #28
 8005c26:	d501      	bpl.n	8005c2c <_vfiprintf_r+0x34>
 8005c28:	692b      	ldr	r3, [r5, #16]
 8005c2a:	b99b      	cbnz	r3, 8005c54 <_vfiprintf_r+0x5c>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f000 f9e4 	bl	8005ffc <__swsetup_r>
 8005c34:	b170      	cbz	r0, 8005c54 <_vfiprintf_r+0x5c>
 8005c36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c38:	07dc      	lsls	r4, r3, #31
 8005c3a:	d504      	bpl.n	8005c46 <_vfiprintf_r+0x4e>
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c40:	b01d      	add	sp, #116	@ 0x74
 8005c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c46:	89ab      	ldrh	r3, [r5, #12]
 8005c48:	0598      	lsls	r0, r3, #22
 8005c4a:	d4f7      	bmi.n	8005c3c <_vfiprintf_r+0x44>
 8005c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c4e:	f7fe fcc7 	bl	80045e0 <__retarget_lock_release_recursive>
 8005c52:	e7f3      	b.n	8005c3c <_vfiprintf_r+0x44>
 8005c54:	2300      	movs	r3, #0
 8005c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c58:	2320      	movs	r3, #32
 8005c5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c62:	2330      	movs	r3, #48	@ 0x30
 8005c64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e14 <_vfiprintf_r+0x21c>
 8005c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c6c:	f04f 0901 	mov.w	r9, #1
 8005c70:	4623      	mov	r3, r4
 8005c72:	469a      	mov	sl, r3
 8005c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c78:	b10a      	cbz	r2, 8005c7e <_vfiprintf_r+0x86>
 8005c7a:	2a25      	cmp	r2, #37	@ 0x25
 8005c7c:	d1f9      	bne.n	8005c72 <_vfiprintf_r+0x7a>
 8005c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c82:	d00b      	beq.n	8005c9c <_vfiprintf_r+0xa4>
 8005c84:	465b      	mov	r3, fp
 8005c86:	4622      	mov	r2, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f7ff ffa1 	bl	8005bd2 <__sfputs_r>
 8005c90:	3001      	adds	r0, #1
 8005c92:	f000 80a7 	beq.w	8005de4 <_vfiprintf_r+0x1ec>
 8005c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c98:	445a      	add	r2, fp
 8005c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 809f 	beq.w	8005de4 <_vfiprintf_r+0x1ec>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cb0:	f10a 0a01 	add.w	sl, sl, #1
 8005cb4:	9304      	str	r3, [sp, #16]
 8005cb6:	9307      	str	r3, [sp, #28]
 8005cb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cbe:	4654      	mov	r4, sl
 8005cc0:	2205      	movs	r2, #5
 8005cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc6:	4853      	ldr	r0, [pc, #332]	@ (8005e14 <_vfiprintf_r+0x21c>)
 8005cc8:	f7fa fa8a 	bl	80001e0 <memchr>
 8005ccc:	9a04      	ldr	r2, [sp, #16]
 8005cce:	b9d8      	cbnz	r0, 8005d08 <_vfiprintf_r+0x110>
 8005cd0:	06d1      	lsls	r1, r2, #27
 8005cd2:	bf44      	itt	mi
 8005cd4:	2320      	movmi	r3, #32
 8005cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cda:	0713      	lsls	r3, r2, #28
 8005cdc:	bf44      	itt	mi
 8005cde:	232b      	movmi	r3, #43	@ 0x2b
 8005ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cea:	d015      	beq.n	8005d18 <_vfiprintf_r+0x120>
 8005cec:	9a07      	ldr	r2, [sp, #28]
 8005cee:	4654      	mov	r4, sl
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	f04f 0c0a 	mov.w	ip, #10
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cfc:	3b30      	subs	r3, #48	@ 0x30
 8005cfe:	2b09      	cmp	r3, #9
 8005d00:	d94b      	bls.n	8005d9a <_vfiprintf_r+0x1a2>
 8005d02:	b1b0      	cbz	r0, 8005d32 <_vfiprintf_r+0x13a>
 8005d04:	9207      	str	r2, [sp, #28]
 8005d06:	e014      	b.n	8005d32 <_vfiprintf_r+0x13a>
 8005d08:	eba0 0308 	sub.w	r3, r0, r8
 8005d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005d10:	4313      	orrs	r3, r2
 8005d12:	9304      	str	r3, [sp, #16]
 8005d14:	46a2      	mov	sl, r4
 8005d16:	e7d2      	b.n	8005cbe <_vfiprintf_r+0xc6>
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	1d19      	adds	r1, r3, #4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	9103      	str	r1, [sp, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bfbb      	ittet	lt
 8005d24:	425b      	neglt	r3, r3
 8005d26:	f042 0202 	orrlt.w	r2, r2, #2
 8005d2a:	9307      	strge	r3, [sp, #28]
 8005d2c:	9307      	strlt	r3, [sp, #28]
 8005d2e:	bfb8      	it	lt
 8005d30:	9204      	strlt	r2, [sp, #16]
 8005d32:	7823      	ldrb	r3, [r4, #0]
 8005d34:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d36:	d10a      	bne.n	8005d4e <_vfiprintf_r+0x156>
 8005d38:	7863      	ldrb	r3, [r4, #1]
 8005d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d3c:	d132      	bne.n	8005da4 <_vfiprintf_r+0x1ac>
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	1d1a      	adds	r2, r3, #4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	9203      	str	r2, [sp, #12]
 8005d46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d4a:	3402      	adds	r4, #2
 8005d4c:	9305      	str	r3, [sp, #20]
 8005d4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e24 <_vfiprintf_r+0x22c>
 8005d52:	7821      	ldrb	r1, [r4, #0]
 8005d54:	2203      	movs	r2, #3
 8005d56:	4650      	mov	r0, sl
 8005d58:	f7fa fa42 	bl	80001e0 <memchr>
 8005d5c:	b138      	cbz	r0, 8005d6e <_vfiprintf_r+0x176>
 8005d5e:	9b04      	ldr	r3, [sp, #16]
 8005d60:	eba0 000a 	sub.w	r0, r0, sl
 8005d64:	2240      	movs	r2, #64	@ 0x40
 8005d66:	4082      	lsls	r2, r0
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	3401      	adds	r4, #1
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d72:	4829      	ldr	r0, [pc, #164]	@ (8005e18 <_vfiprintf_r+0x220>)
 8005d74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d78:	2206      	movs	r2, #6
 8005d7a:	f7fa fa31 	bl	80001e0 <memchr>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d03f      	beq.n	8005e02 <_vfiprintf_r+0x20a>
 8005d82:	4b26      	ldr	r3, [pc, #152]	@ (8005e1c <_vfiprintf_r+0x224>)
 8005d84:	bb1b      	cbnz	r3, 8005dce <_vfiprintf_r+0x1d6>
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	3307      	adds	r3, #7
 8005d8a:	f023 0307 	bic.w	r3, r3, #7
 8005d8e:	3308      	adds	r3, #8
 8005d90:	9303      	str	r3, [sp, #12]
 8005d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d94:	443b      	add	r3, r7
 8005d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d98:	e76a      	b.n	8005c70 <_vfiprintf_r+0x78>
 8005d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d9e:	460c      	mov	r4, r1
 8005da0:	2001      	movs	r0, #1
 8005da2:	e7a8      	b.n	8005cf6 <_vfiprintf_r+0xfe>
 8005da4:	2300      	movs	r3, #0
 8005da6:	3401      	adds	r4, #1
 8005da8:	9305      	str	r3, [sp, #20]
 8005daa:	4619      	mov	r1, r3
 8005dac:	f04f 0c0a 	mov.w	ip, #10
 8005db0:	4620      	mov	r0, r4
 8005db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005db6:	3a30      	subs	r2, #48	@ 0x30
 8005db8:	2a09      	cmp	r2, #9
 8005dba:	d903      	bls.n	8005dc4 <_vfiprintf_r+0x1cc>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0c6      	beq.n	8005d4e <_vfiprintf_r+0x156>
 8005dc0:	9105      	str	r1, [sp, #20]
 8005dc2:	e7c4      	b.n	8005d4e <_vfiprintf_r+0x156>
 8005dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dc8:	4604      	mov	r4, r0
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e7f0      	b.n	8005db0 <_vfiprintf_r+0x1b8>
 8005dce:	ab03      	add	r3, sp, #12
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	462a      	mov	r2, r5
 8005dd4:	4b12      	ldr	r3, [pc, #72]	@ (8005e20 <_vfiprintf_r+0x228>)
 8005dd6:	a904      	add	r1, sp, #16
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f7fd feb5 	bl	8003b48 <_printf_float>
 8005dde:	4607      	mov	r7, r0
 8005de0:	1c78      	adds	r0, r7, #1
 8005de2:	d1d6      	bne.n	8005d92 <_vfiprintf_r+0x19a>
 8005de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005de6:	07d9      	lsls	r1, r3, #31
 8005de8:	d405      	bmi.n	8005df6 <_vfiprintf_r+0x1fe>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	059a      	lsls	r2, r3, #22
 8005dee:	d402      	bmi.n	8005df6 <_vfiprintf_r+0x1fe>
 8005df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005df2:	f7fe fbf5 	bl	80045e0 <__retarget_lock_release_recursive>
 8005df6:	89ab      	ldrh	r3, [r5, #12]
 8005df8:	065b      	lsls	r3, r3, #25
 8005dfa:	f53f af1f 	bmi.w	8005c3c <_vfiprintf_r+0x44>
 8005dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e00:	e71e      	b.n	8005c40 <_vfiprintf_r+0x48>
 8005e02:	ab03      	add	r3, sp, #12
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	462a      	mov	r2, r5
 8005e08:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <_vfiprintf_r+0x228>)
 8005e0a:	a904      	add	r1, sp, #16
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7fe f933 	bl	8004078 <_printf_i>
 8005e12:	e7e4      	b.n	8005dde <_vfiprintf_r+0x1e6>
 8005e14:	080064ba 	.word	0x080064ba
 8005e18:	080064c4 	.word	0x080064c4
 8005e1c:	08003b49 	.word	0x08003b49
 8005e20:	08005bd3 	.word	0x08005bd3
 8005e24:	080064c0 	.word	0x080064c0

08005e28 <__sflush_r>:
 8005e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e30:	0716      	lsls	r6, r2, #28
 8005e32:	4605      	mov	r5, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	d454      	bmi.n	8005ee2 <__sflush_r+0xba>
 8005e38:	684b      	ldr	r3, [r1, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dc02      	bgt.n	8005e44 <__sflush_r+0x1c>
 8005e3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dd48      	ble.n	8005ed6 <__sflush_r+0xae>
 8005e44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d045      	beq.n	8005ed6 <__sflush_r+0xae>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e50:	682f      	ldr	r7, [r5, #0]
 8005e52:	6a21      	ldr	r1, [r4, #32]
 8005e54:	602b      	str	r3, [r5, #0]
 8005e56:	d030      	beq.n	8005eba <__sflush_r+0x92>
 8005e58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	0759      	lsls	r1, r3, #29
 8005e5e:	d505      	bpl.n	8005e6c <__sflush_r+0x44>
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	1ad2      	subs	r2, r2, r3
 8005e64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e66:	b10b      	cbz	r3, 8005e6c <__sflush_r+0x44>
 8005e68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e6a:	1ad2      	subs	r2, r2, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e70:	6a21      	ldr	r1, [r4, #32]
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b0      	blx	r6
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	d106      	bne.n	8005e8a <__sflush_r+0x62>
 8005e7c:	6829      	ldr	r1, [r5, #0]
 8005e7e:	291d      	cmp	r1, #29
 8005e80:	d82b      	bhi.n	8005eda <__sflush_r+0xb2>
 8005e82:	4a2a      	ldr	r2, [pc, #168]	@ (8005f2c <__sflush_r+0x104>)
 8005e84:	40ca      	lsrs	r2, r1
 8005e86:	07d6      	lsls	r6, r2, #31
 8005e88:	d527      	bpl.n	8005eda <__sflush_r+0xb2>
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	6062      	str	r2, [r4, #4]
 8005e8e:	04d9      	lsls	r1, r3, #19
 8005e90:	6922      	ldr	r2, [r4, #16]
 8005e92:	6022      	str	r2, [r4, #0]
 8005e94:	d504      	bpl.n	8005ea0 <__sflush_r+0x78>
 8005e96:	1c42      	adds	r2, r0, #1
 8005e98:	d101      	bne.n	8005e9e <__sflush_r+0x76>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	b903      	cbnz	r3, 8005ea0 <__sflush_r+0x78>
 8005e9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ea2:	602f      	str	r7, [r5, #0]
 8005ea4:	b1b9      	cbz	r1, 8005ed6 <__sflush_r+0xae>
 8005ea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005eaa:	4299      	cmp	r1, r3
 8005eac:	d002      	beq.n	8005eb4 <__sflush_r+0x8c>
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f7ff f9fe 	bl	80052b0 <_free_r>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005eb8:	e00d      	b.n	8005ed6 <__sflush_r+0xae>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b0      	blx	r6
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	1c50      	adds	r0, r2, #1
 8005ec4:	d1c9      	bne.n	8005e5a <__sflush_r+0x32>
 8005ec6:	682b      	ldr	r3, [r5, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0c6      	beq.n	8005e5a <__sflush_r+0x32>
 8005ecc:	2b1d      	cmp	r3, #29
 8005ece:	d001      	beq.n	8005ed4 <__sflush_r+0xac>
 8005ed0:	2b16      	cmp	r3, #22
 8005ed2:	d11e      	bne.n	8005f12 <__sflush_r+0xea>
 8005ed4:	602f      	str	r7, [r5, #0]
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e022      	b.n	8005f20 <__sflush_r+0xf8>
 8005eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ede:	b21b      	sxth	r3, r3
 8005ee0:	e01b      	b.n	8005f1a <__sflush_r+0xf2>
 8005ee2:	690f      	ldr	r7, [r1, #16]
 8005ee4:	2f00      	cmp	r7, #0
 8005ee6:	d0f6      	beq.n	8005ed6 <__sflush_r+0xae>
 8005ee8:	0793      	lsls	r3, r2, #30
 8005eea:	680e      	ldr	r6, [r1, #0]
 8005eec:	bf08      	it	eq
 8005eee:	694b      	ldreq	r3, [r1, #20]
 8005ef0:	600f      	str	r7, [r1, #0]
 8005ef2:	bf18      	it	ne
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	eba6 0807 	sub.w	r8, r6, r7
 8005efa:	608b      	str	r3, [r1, #8]
 8005efc:	f1b8 0f00 	cmp.w	r8, #0
 8005f00:	dde9      	ble.n	8005ed6 <__sflush_r+0xae>
 8005f02:	6a21      	ldr	r1, [r4, #32]
 8005f04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f06:	4643      	mov	r3, r8
 8005f08:	463a      	mov	r2, r7
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b0      	blx	r6
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	dc08      	bgt.n	8005f24 <__sflush_r+0xfc>
 8005f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f24:	4407      	add	r7, r0
 8005f26:	eba8 0800 	sub.w	r8, r8, r0
 8005f2a:	e7e7      	b.n	8005efc <__sflush_r+0xd4>
 8005f2c:	20400001 	.word	0x20400001

08005f30 <_fflush_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	690b      	ldr	r3, [r1, #16]
 8005f34:	4605      	mov	r5, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	b913      	cbnz	r3, 8005f40 <_fflush_r+0x10>
 8005f3a:	2500      	movs	r5, #0
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	b118      	cbz	r0, 8005f4a <_fflush_r+0x1a>
 8005f42:	6a03      	ldr	r3, [r0, #32]
 8005f44:	b90b      	cbnz	r3, 8005f4a <_fflush_r+0x1a>
 8005f46:	f7fe fa41 	bl	80043cc <__sinit>
 8005f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f3      	beq.n	8005f3a <_fflush_r+0xa>
 8005f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f54:	07d0      	lsls	r0, r2, #31
 8005f56:	d404      	bmi.n	8005f62 <_fflush_r+0x32>
 8005f58:	0599      	lsls	r1, r3, #22
 8005f5a:	d402      	bmi.n	8005f62 <_fflush_r+0x32>
 8005f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f5e:	f7fe fb3e 	bl	80045de <__retarget_lock_acquire_recursive>
 8005f62:	4628      	mov	r0, r5
 8005f64:	4621      	mov	r1, r4
 8005f66:	f7ff ff5f 	bl	8005e28 <__sflush_r>
 8005f6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f6c:	07da      	lsls	r2, r3, #31
 8005f6e:	4605      	mov	r5, r0
 8005f70:	d4e4      	bmi.n	8005f3c <_fflush_r+0xc>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	059b      	lsls	r3, r3, #22
 8005f76:	d4e1      	bmi.n	8005f3c <_fflush_r+0xc>
 8005f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f7a:	f7fe fb31 	bl	80045e0 <__retarget_lock_release_recursive>
 8005f7e:	e7dd      	b.n	8005f3c <_fflush_r+0xc>

08005f80 <__swbuf_r>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	460e      	mov	r6, r1
 8005f84:	4614      	mov	r4, r2
 8005f86:	4605      	mov	r5, r0
 8005f88:	b118      	cbz	r0, 8005f92 <__swbuf_r+0x12>
 8005f8a:	6a03      	ldr	r3, [r0, #32]
 8005f8c:	b90b      	cbnz	r3, 8005f92 <__swbuf_r+0x12>
 8005f8e:	f7fe fa1d 	bl	80043cc <__sinit>
 8005f92:	69a3      	ldr	r3, [r4, #24]
 8005f94:	60a3      	str	r3, [r4, #8]
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	071a      	lsls	r2, r3, #28
 8005f9a:	d501      	bpl.n	8005fa0 <__swbuf_r+0x20>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	b943      	cbnz	r3, 8005fb2 <__swbuf_r+0x32>
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 f82a 	bl	8005ffc <__swsetup_r>
 8005fa8:	b118      	cbz	r0, 8005fb2 <__swbuf_r+0x32>
 8005faa:	f04f 37ff 	mov.w	r7, #4294967295
 8005fae:	4638      	mov	r0, r7
 8005fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	6922      	ldr	r2, [r4, #16]
 8005fb6:	1a98      	subs	r0, r3, r2
 8005fb8:	6963      	ldr	r3, [r4, #20]
 8005fba:	b2f6      	uxtb	r6, r6
 8005fbc:	4283      	cmp	r3, r0
 8005fbe:	4637      	mov	r7, r6
 8005fc0:	dc05      	bgt.n	8005fce <__swbuf_r+0x4e>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f7ff ffb3 	bl	8005f30 <_fflush_r>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d1ed      	bne.n	8005faa <__swbuf_r+0x2a>
 8005fce:	68a3      	ldr	r3, [r4, #8]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	60a3      	str	r3, [r4, #8]
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	6022      	str	r2, [r4, #0]
 8005fda:	701e      	strb	r6, [r3, #0]
 8005fdc:	6962      	ldr	r2, [r4, #20]
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d004      	beq.n	8005fee <__swbuf_r+0x6e>
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	07db      	lsls	r3, r3, #31
 8005fe8:	d5e1      	bpl.n	8005fae <__swbuf_r+0x2e>
 8005fea:	2e0a      	cmp	r6, #10
 8005fec:	d1df      	bne.n	8005fae <__swbuf_r+0x2e>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f7ff ff9d 	bl	8005f30 <_fflush_r>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d0d9      	beq.n	8005fae <__swbuf_r+0x2e>
 8005ffa:	e7d6      	b.n	8005faa <__swbuf_r+0x2a>

08005ffc <__swsetup_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4b29      	ldr	r3, [pc, #164]	@ (80060a4 <__swsetup_r+0xa8>)
 8006000:	4605      	mov	r5, r0
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	460c      	mov	r4, r1
 8006006:	b118      	cbz	r0, 8006010 <__swsetup_r+0x14>
 8006008:	6a03      	ldr	r3, [r0, #32]
 800600a:	b90b      	cbnz	r3, 8006010 <__swsetup_r+0x14>
 800600c:	f7fe f9de 	bl	80043cc <__sinit>
 8006010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006014:	0719      	lsls	r1, r3, #28
 8006016:	d422      	bmi.n	800605e <__swsetup_r+0x62>
 8006018:	06da      	lsls	r2, r3, #27
 800601a:	d407      	bmi.n	800602c <__swsetup_r+0x30>
 800601c:	2209      	movs	r2, #9
 800601e:	602a      	str	r2, [r5, #0]
 8006020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006024:	81a3      	strh	r3, [r4, #12]
 8006026:	f04f 30ff 	mov.w	r0, #4294967295
 800602a:	e033      	b.n	8006094 <__swsetup_r+0x98>
 800602c:	0758      	lsls	r0, r3, #29
 800602e:	d512      	bpl.n	8006056 <__swsetup_r+0x5a>
 8006030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006032:	b141      	cbz	r1, 8006046 <__swsetup_r+0x4a>
 8006034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006038:	4299      	cmp	r1, r3
 800603a:	d002      	beq.n	8006042 <__swsetup_r+0x46>
 800603c:	4628      	mov	r0, r5
 800603e:	f7ff f937 	bl	80052b0 <_free_r>
 8006042:	2300      	movs	r3, #0
 8006044:	6363      	str	r3, [r4, #52]	@ 0x34
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800604c:	81a3      	strh	r3, [r4, #12]
 800604e:	2300      	movs	r3, #0
 8006050:	6063      	str	r3, [r4, #4]
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	f043 0308 	orr.w	r3, r3, #8
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	b94b      	cbnz	r3, 8006076 <__swsetup_r+0x7a>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800606c:	d003      	beq.n	8006076 <__swsetup_r+0x7a>
 800606e:	4621      	mov	r1, r4
 8006070:	4628      	mov	r0, r5
 8006072:	f000 f8b3 	bl	80061dc <__smakebuf_r>
 8006076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800607a:	f013 0201 	ands.w	r2, r3, #1
 800607e:	d00a      	beq.n	8006096 <__swsetup_r+0x9a>
 8006080:	2200      	movs	r2, #0
 8006082:	60a2      	str	r2, [r4, #8]
 8006084:	6962      	ldr	r2, [r4, #20]
 8006086:	4252      	negs	r2, r2
 8006088:	61a2      	str	r2, [r4, #24]
 800608a:	6922      	ldr	r2, [r4, #16]
 800608c:	b942      	cbnz	r2, 80060a0 <__swsetup_r+0xa4>
 800608e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006092:	d1c5      	bne.n	8006020 <__swsetup_r+0x24>
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	0799      	lsls	r1, r3, #30
 8006098:	bf58      	it	pl
 800609a:	6962      	ldrpl	r2, [r4, #20]
 800609c:	60a2      	str	r2, [r4, #8]
 800609e:	e7f4      	b.n	800608a <__swsetup_r+0x8e>
 80060a0:	2000      	movs	r0, #0
 80060a2:	e7f7      	b.n	8006094 <__swsetup_r+0x98>
 80060a4:	20000018 	.word	0x20000018

080060a8 <_sbrk_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d06      	ldr	r5, [pc, #24]	@ (80060c4 <_sbrk_r+0x1c>)
 80060ac:	2300      	movs	r3, #0
 80060ae:	4604      	mov	r4, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	f7fb faf2 	bl	800169c <_sbrk>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_sbrk_r+0x1a>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_sbrk_r+0x1a>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20000448 	.word	0x20000448

080060c8 <__assert_func>:
 80060c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060ca:	4614      	mov	r4, r2
 80060cc:	461a      	mov	r2, r3
 80060ce:	4b09      	ldr	r3, [pc, #36]	@ (80060f4 <__assert_func+0x2c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4605      	mov	r5, r0
 80060d4:	68d8      	ldr	r0, [r3, #12]
 80060d6:	b14c      	cbz	r4, 80060ec <__assert_func+0x24>
 80060d8:	4b07      	ldr	r3, [pc, #28]	@ (80060f8 <__assert_func+0x30>)
 80060da:	9100      	str	r1, [sp, #0]
 80060dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060e0:	4906      	ldr	r1, [pc, #24]	@ (80060fc <__assert_func+0x34>)
 80060e2:	462b      	mov	r3, r5
 80060e4:	f000 f842 	bl	800616c <fiprintf>
 80060e8:	f000 f8d6 	bl	8006298 <abort>
 80060ec:	4b04      	ldr	r3, [pc, #16]	@ (8006100 <__assert_func+0x38>)
 80060ee:	461c      	mov	r4, r3
 80060f0:	e7f3      	b.n	80060da <__assert_func+0x12>
 80060f2:	bf00      	nop
 80060f4:	20000018 	.word	0x20000018
 80060f8:	080064d5 	.word	0x080064d5
 80060fc:	080064e2 	.word	0x080064e2
 8006100:	08006510 	.word	0x08006510

08006104 <_calloc_r>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	fba1 5402 	umull	r5, r4, r1, r2
 800610a:	b934      	cbnz	r4, 800611a <_calloc_r+0x16>
 800610c:	4629      	mov	r1, r5
 800610e:	f7ff f943 	bl	8005398 <_malloc_r>
 8006112:	4606      	mov	r6, r0
 8006114:	b928      	cbnz	r0, 8006122 <_calloc_r+0x1e>
 8006116:	4630      	mov	r0, r6
 8006118:	bd70      	pop	{r4, r5, r6, pc}
 800611a:	220c      	movs	r2, #12
 800611c:	6002      	str	r2, [r0, #0]
 800611e:	2600      	movs	r6, #0
 8006120:	e7f9      	b.n	8006116 <_calloc_r+0x12>
 8006122:	462a      	mov	r2, r5
 8006124:	4621      	mov	r1, r4
 8006126:	f7fe f9dc 	bl	80044e2 <memset>
 800612a:	e7f4      	b.n	8006116 <_calloc_r+0x12>

0800612c <__ascii_mbtowc>:
 800612c:	b082      	sub	sp, #8
 800612e:	b901      	cbnz	r1, 8006132 <__ascii_mbtowc+0x6>
 8006130:	a901      	add	r1, sp, #4
 8006132:	b142      	cbz	r2, 8006146 <__ascii_mbtowc+0x1a>
 8006134:	b14b      	cbz	r3, 800614a <__ascii_mbtowc+0x1e>
 8006136:	7813      	ldrb	r3, [r2, #0]
 8006138:	600b      	str	r3, [r1, #0]
 800613a:	7812      	ldrb	r2, [r2, #0]
 800613c:	1e10      	subs	r0, r2, #0
 800613e:	bf18      	it	ne
 8006140:	2001      	movne	r0, #1
 8006142:	b002      	add	sp, #8
 8006144:	4770      	bx	lr
 8006146:	4610      	mov	r0, r2
 8006148:	e7fb      	b.n	8006142 <__ascii_mbtowc+0x16>
 800614a:	f06f 0001 	mvn.w	r0, #1
 800614e:	e7f8      	b.n	8006142 <__ascii_mbtowc+0x16>

08006150 <__ascii_wctomb>:
 8006150:	4603      	mov	r3, r0
 8006152:	4608      	mov	r0, r1
 8006154:	b141      	cbz	r1, 8006168 <__ascii_wctomb+0x18>
 8006156:	2aff      	cmp	r2, #255	@ 0xff
 8006158:	d904      	bls.n	8006164 <__ascii_wctomb+0x14>
 800615a:	228a      	movs	r2, #138	@ 0x8a
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	f04f 30ff 	mov.w	r0, #4294967295
 8006162:	4770      	bx	lr
 8006164:	700a      	strb	r2, [r1, #0]
 8006166:	2001      	movs	r0, #1
 8006168:	4770      	bx	lr
	...

0800616c <fiprintf>:
 800616c:	b40e      	push	{r1, r2, r3}
 800616e:	b503      	push	{r0, r1, lr}
 8006170:	4601      	mov	r1, r0
 8006172:	ab03      	add	r3, sp, #12
 8006174:	4805      	ldr	r0, [pc, #20]	@ (800618c <fiprintf+0x20>)
 8006176:	f853 2b04 	ldr.w	r2, [r3], #4
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	f7ff fd3b 	bl	8005bf8 <_vfiprintf_r>
 8006182:	b002      	add	sp, #8
 8006184:	f85d eb04 	ldr.w	lr, [sp], #4
 8006188:	b003      	add	sp, #12
 800618a:	4770      	bx	lr
 800618c:	20000018 	.word	0x20000018

08006190 <__swhatbuf_r>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	460c      	mov	r4, r1
 8006194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006198:	2900      	cmp	r1, #0
 800619a:	b096      	sub	sp, #88	@ 0x58
 800619c:	4615      	mov	r5, r2
 800619e:	461e      	mov	r6, r3
 80061a0:	da0d      	bge.n	80061be <__swhatbuf_r+0x2e>
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061a8:	f04f 0100 	mov.w	r1, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2340      	movne	r3, #64	@ 0x40
 80061b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061b4:	2000      	movs	r0, #0
 80061b6:	6031      	str	r1, [r6, #0]
 80061b8:	602b      	str	r3, [r5, #0]
 80061ba:	b016      	add	sp, #88	@ 0x58
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
 80061be:	466a      	mov	r2, sp
 80061c0:	f000 f848 	bl	8006254 <_fstat_r>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	dbec      	blt.n	80061a2 <__swhatbuf_r+0x12>
 80061c8:	9901      	ldr	r1, [sp, #4]
 80061ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80061ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80061d2:	4259      	negs	r1, r3
 80061d4:	4159      	adcs	r1, r3
 80061d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061da:	e7eb      	b.n	80061b4 <__swhatbuf_r+0x24>

080061dc <__smakebuf_r>:
 80061dc:	898b      	ldrh	r3, [r1, #12]
 80061de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061e0:	079d      	lsls	r5, r3, #30
 80061e2:	4606      	mov	r6, r0
 80061e4:	460c      	mov	r4, r1
 80061e6:	d507      	bpl.n	80061f8 <__smakebuf_r+0x1c>
 80061e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	6123      	str	r3, [r4, #16]
 80061f0:	2301      	movs	r3, #1
 80061f2:	6163      	str	r3, [r4, #20]
 80061f4:	b003      	add	sp, #12
 80061f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061f8:	ab01      	add	r3, sp, #4
 80061fa:	466a      	mov	r2, sp
 80061fc:	f7ff ffc8 	bl	8006190 <__swhatbuf_r>
 8006200:	9f00      	ldr	r7, [sp, #0]
 8006202:	4605      	mov	r5, r0
 8006204:	4639      	mov	r1, r7
 8006206:	4630      	mov	r0, r6
 8006208:	f7ff f8c6 	bl	8005398 <_malloc_r>
 800620c:	b948      	cbnz	r0, 8006222 <__smakebuf_r+0x46>
 800620e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006212:	059a      	lsls	r2, r3, #22
 8006214:	d4ee      	bmi.n	80061f4 <__smakebuf_r+0x18>
 8006216:	f023 0303 	bic.w	r3, r3, #3
 800621a:	f043 0302 	orr.w	r3, r3, #2
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	e7e2      	b.n	80061e8 <__smakebuf_r+0xc>
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	6020      	str	r0, [r4, #0]
 8006226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800622a:	81a3      	strh	r3, [r4, #12]
 800622c:	9b01      	ldr	r3, [sp, #4]
 800622e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006232:	b15b      	cbz	r3, 800624c <__smakebuf_r+0x70>
 8006234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006238:	4630      	mov	r0, r6
 800623a:	f000 f81d 	bl	8006278 <_isatty_r>
 800623e:	b128      	cbz	r0, 800624c <__smakebuf_r+0x70>
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	431d      	orrs	r5, r3
 8006250:	81a5      	strh	r5, [r4, #12]
 8006252:	e7cf      	b.n	80061f4 <__smakebuf_r+0x18>

08006254 <_fstat_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4d07      	ldr	r5, [pc, #28]	@ (8006274 <_fstat_r+0x20>)
 8006258:	2300      	movs	r3, #0
 800625a:	4604      	mov	r4, r0
 800625c:	4608      	mov	r0, r1
 800625e:	4611      	mov	r1, r2
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	f7fb f9f2 	bl	800164a <_fstat>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d102      	bne.n	8006270 <_fstat_r+0x1c>
 800626a:	682b      	ldr	r3, [r5, #0]
 800626c:	b103      	cbz	r3, 8006270 <_fstat_r+0x1c>
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	bd38      	pop	{r3, r4, r5, pc}
 8006272:	bf00      	nop
 8006274:	20000448 	.word	0x20000448

08006278 <_isatty_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d06      	ldr	r5, [pc, #24]	@ (8006294 <_isatty_r+0x1c>)
 800627c:	2300      	movs	r3, #0
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	602b      	str	r3, [r5, #0]
 8006284:	f7fb f9f1 	bl	800166a <_isatty>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_isatty_r+0x1a>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_isatty_r+0x1a>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	20000448 	.word	0x20000448

08006298 <abort>:
 8006298:	b508      	push	{r3, lr}
 800629a:	2006      	movs	r0, #6
 800629c:	f000 f82c 	bl	80062f8 <raise>
 80062a0:	2001      	movs	r0, #1
 80062a2:	f7fb f99e 	bl	80015e2 <_exit>

080062a6 <_raise_r>:
 80062a6:	291f      	cmp	r1, #31
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4605      	mov	r5, r0
 80062ac:	460c      	mov	r4, r1
 80062ae:	d904      	bls.n	80062ba <_raise_r+0x14>
 80062b0:	2316      	movs	r3, #22
 80062b2:	6003      	str	r3, [r0, #0]
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295
 80062b8:	bd38      	pop	{r3, r4, r5, pc}
 80062ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062bc:	b112      	cbz	r2, 80062c4 <_raise_r+0x1e>
 80062be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062c2:	b94b      	cbnz	r3, 80062d8 <_raise_r+0x32>
 80062c4:	4628      	mov	r0, r5
 80062c6:	f000 f831 	bl	800632c <_getpid_r>
 80062ca:	4622      	mov	r2, r4
 80062cc:	4601      	mov	r1, r0
 80062ce:	4628      	mov	r0, r5
 80062d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062d4:	f000 b818 	b.w	8006308 <_kill_r>
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d00a      	beq.n	80062f2 <_raise_r+0x4c>
 80062dc:	1c59      	adds	r1, r3, #1
 80062de:	d103      	bne.n	80062e8 <_raise_r+0x42>
 80062e0:	2316      	movs	r3, #22
 80062e2:	6003      	str	r3, [r0, #0]
 80062e4:	2001      	movs	r0, #1
 80062e6:	e7e7      	b.n	80062b8 <_raise_r+0x12>
 80062e8:	2100      	movs	r1, #0
 80062ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062ee:	4620      	mov	r0, r4
 80062f0:	4798      	blx	r3
 80062f2:	2000      	movs	r0, #0
 80062f4:	e7e0      	b.n	80062b8 <_raise_r+0x12>
	...

080062f8 <raise>:
 80062f8:	4b02      	ldr	r3, [pc, #8]	@ (8006304 <raise+0xc>)
 80062fa:	4601      	mov	r1, r0
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f7ff bfd2 	b.w	80062a6 <_raise_r>
 8006302:	bf00      	nop
 8006304:	20000018 	.word	0x20000018

08006308 <_kill_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d07      	ldr	r5, [pc, #28]	@ (8006328 <_kill_r+0x20>)
 800630c:	2300      	movs	r3, #0
 800630e:	4604      	mov	r4, r0
 8006310:	4608      	mov	r0, r1
 8006312:	4611      	mov	r1, r2
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	f7fb f954 	bl	80015c2 <_kill>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d102      	bne.n	8006324 <_kill_r+0x1c>
 800631e:	682b      	ldr	r3, [r5, #0]
 8006320:	b103      	cbz	r3, 8006324 <_kill_r+0x1c>
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	bd38      	pop	{r3, r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	20000448 	.word	0x20000448

0800632c <_getpid_r>:
 800632c:	f7fb b941 	b.w	80015b2 <_getpid>

08006330 <_init>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	bf00      	nop
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr

0800633c <_fini>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr
