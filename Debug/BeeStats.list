
BeeStats.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800afd0  0800afd0  0000bfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3e4  0800b3e4  0000d2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b3e4  0800b3e4  0000c3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3ec  0800b3ec  0000d2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3ec  0800b3ec  0000c3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3f0  0800b3f0  0000c3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800b3f4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e20  200002c4  0800b6b8  0000d2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020e4  0800b6b8  0000e0e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143f2  00000000  00000000  0000d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fa  00000000  00000000  000216e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00024de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dbb  00000000  00000000  00025ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005713  00000000  00000000  00026db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182ac  00000000  00000000  0002c4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936ca  00000000  00000000  00044772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7e3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b18  00000000  00000000  000d7e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000dd998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800afb8 	.word	0x0800afb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800afb8 	.word	0x0800afb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b08c      	sub	sp, #48	@ 0x30
 8000ee8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fbdd 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f839 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 f95f 	bl	80011b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef6:	f000 f89f 	bl	8001038 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000efa:	f006 feb7 	bl	8007c6c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000efe:	f000 f8c9 	bl	8001094 <MX_RTC_Init>
  MX_SPI1_Init();
 8000f02:	f000 f921 	bl	8001148 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;

  int counter = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 2 */
while(1){
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	4812      	ldr	r0, [pc, #72]	@ (8000f5c <main+0x78>)
 8000f14:	f003 f8f3 	bl	80040fe <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);  // Muss nach GetTime!
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <main+0x78>)
 8000f20:	f003 f9cf 	bl	80042c2 <HAL_RTC_GetDate>

	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
	         counter,
			 currentTime.Hours,
 8000f24:	7a3b      	ldrb	r3, [r7, #8]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f26:	461c      	mov	r4, r3
	         currentTime.Minutes,
 8000f28:	7a7b      	ldrb	r3, [r7, #9]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f2a:	461d      	mov	r5, r3
	         currentTime.Seconds,
 8000f2c:	7abb      	ldrb	r3, [r7, #10]
	         currentDate.Date,
 8000f2e:	79ba      	ldrb	r2, [r7, #6]
	         currentDate.Month,
 8000f30:	7979      	ldrb	r1, [r7, #5]
	         currentDate.Year);
 8000f32:	79f8      	ldrb	r0, [r7, #7]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f34:	9003      	str	r0, [sp, #12]
 8000f36:	9102      	str	r1, [sp, #8]
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	462b      	mov	r3, r5
 8000f3e:	4622      	mov	r2, r4
 8000f40:	69f9      	ldr	r1, [r7, #28]
 8000f42:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <main+0x7c>)
 8000f44:	f008 f8ba 	bl	80090bc <iprintf>
	  counter++;
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
	  HAL_Delay(1000);  // Ausgabe alle 1s
 8000f4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f52:	f000 fc1b 	bl	800178c <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000f56:	bf00      	nop
 8000f58:	e7d7      	b.n	8000f0a <main+0x26>
 8000f5a:	bf00      	nop
 8000f5c:	20000334 	.word	0x20000334
 8000f60:	0800afd0 	.word	0x0800afd0

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	@ 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f008 f8f7 	bl	8009166 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fc0:	2309      	movs	r3, #9
 8000fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fd8:	2319      	movs	r3, #25
 8000fda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fdc:	23c0      	movs	r3, #192	@ 0xc0
 8000fde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fa37 	bl	8003460 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ff8:	f000 f94b 	bl	8001292 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2103      	movs	r1, #3
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fc99 	bl	8003950 <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001024:	f000 f935 	bl	8001292 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3750      	adds	r7, #80	@ 0x50
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_I2C1_Init+0x50>)
 800103e:	4a13      	ldr	r2, [pc, #76]	@ (800108c <MX_I2C1_Init+0x54>)
 8001040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001044:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_I2C1_Init+0x58>)
 8001046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001056:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800105a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001076:	f000 fe5d 	bl	8001d34 <HAL_I2C_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 f907 	bl	8001292 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200002e0 	.word	0x200002e0
 800108c:	40005400 	.word	0x40005400
 8001090:	000186a0 	.word	0x000186a0

08001094 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010a8:	2300      	movs	r3, #0
 80010aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_RTC_Init+0xac>)
 80010ae:	4a25      	ldr	r2, [pc, #148]	@ (8001144 <MX_RTC_Init+0xb0>)
 80010b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_RTC_Init+0xac>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_RTC_Init+0xac>)
 80010ba:	227f      	movs	r2, #127	@ 0x7f
 80010bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <MX_RTC_Init+0xac>)
 80010c0:	22ff      	movs	r2, #255	@ 0xff
 80010c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <MX_RTC_Init+0xac>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_RTC_Init+0xac>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_RTC_Init+0xac>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010d6:	481a      	ldr	r0, [pc, #104]	@ (8001140 <MX_RTC_Init+0xac>)
 80010d8:	f002 fef6 	bl	8003ec8 <HAL_RTC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 f8d6 	bl	8001292 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 80010e6:	230f      	movs	r3, #15
 80010e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	480f      	ldr	r0, [pc, #60]	@ (8001140 <MX_RTC_Init+0xac>)
 8001102:	f002 ff62 	bl	8003fca <HAL_RTC_SetTime>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 f8c1 	bl	8001292 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001110:	2301      	movs	r3, #1
 8001112:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001114:	2307      	movs	r3, #7
 8001116:	707b      	strb	r3, [r7, #1]
  sDate.Date = 12;
 8001118:	230c      	movs	r3, #12
 800111a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 25;
 800111c:	2319      	movs	r3, #25
 800111e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_RTC_Init+0xac>)
 8001128:	f003 f847 	bl	80041ba <HAL_RTC_SetDate>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001132:	f000 f8ae 	bl	8001292 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000334 	.word	0x20000334
 8001144:	40002800 	.word	0x40002800

08001148 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_SPI1_Init+0x64>)
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <MX_SPI1_Init+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001154:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001158:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001178:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001194:	220a      	movs	r2, #10
 8001196:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_SPI1_Init+0x64>)
 800119a:	f003 f99f 	bl	80044dc <HAL_SPI_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011a4:	f000 f875 	bl	8001292 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000354 	.word	0x20000354
 80011b0:	40013000 	.word	0x40013000

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <MX_GPIO_Init+0xb4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a25      	ldr	r2, [pc, #148]	@ (8001268 <MX_GPIO_Init+0xb4>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <MX_GPIO_Init+0xb4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <MX_GPIO_Init+0xb4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <MX_GPIO_Init+0xb4>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <MX_GPIO_Init+0xb4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_GPIO_Init+0xb4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <MX_GPIO_Init+0xb4>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_GPIO_Init+0xb4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_GPIO_Init+0xb4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <MX_GPIO_Init+0xb4>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_GPIO_Init+0xb4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAM_GPIO_Port, FRAM_Pin, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2110      	movs	r1, #16
 800123e:	480b      	ldr	r0, [pc, #44]	@ (800126c <MX_GPIO_Init+0xb8>)
 8001240:	f000 fd5e 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FRAM_Pin */
  GPIO_InitStruct.Pin = FRAM_Pin;
 8001244:	2310      	movs	r3, #16
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRAM_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <MX_GPIO_Init+0xb8>)
 800125c:	f000 fbcc 	bl	80019f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	@ 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000

08001270 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*) ptr, len); return len;}
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	b29b      	uxth	r3, r3
 8001280:	4619      	mov	r1, r3
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f006 fdb0 	bl	8007de8 <CDC_Transmit_FS>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001296:	b672      	cpsid	i
}
 8001298:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129a:	bf00      	nop
 800129c:	e7fd      	b.n	800129a <Error_Handler+0x8>
	...

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <HAL_I2C_MspInit+0x84>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12b      	bne.n	800136a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_I2C_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a17      	ldr	r2, [pc, #92]	@ (8001378 <HAL_I2C_MspInit+0x88>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_I2C_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800132e:	23c0      	movs	r3, #192	@ 0xc0
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <HAL_I2C_MspInit+0x8c>)
 800134a:	f000 fb55 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_I2C_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <HAL_I2C_MspInit+0x88>)
 8001358:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_I2C_MspInit+0x88>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40005400 	.word	0x40005400
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400

08001380 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HAL_RTC_MspInit+0x50>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d111      	bne.n	80013c8 <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013a4:	2302      	movs	r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 fc98 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80013be:	f7ff ff68 	bl	8001292 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <HAL_RTC_MspInit+0x54>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40002800 	.word	0x40002800
 80013d4:	42470e3c 	.word	0x42470e3c

080013d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	@ (800145c <HAL_SPI_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12b      	bne.n	8001452 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <HAL_SPI_MspInit+0x88>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_SPI_MspInit+0x88>)
 8001404:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001408:	6453      	str	r3, [r2, #68]	@ 0x44
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_SPI_MspInit+0x88>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <HAL_SPI_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a10      	ldr	r2, [pc, #64]	@ (8001460 <HAL_SPI_MspInit+0x88>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_SPI_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001432:	23e0      	movs	r3, #224	@ 0xe0
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001442:	2305      	movs	r3, #5
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <HAL_SPI_MspInit+0x8c>)
 800144e:	f000 fad3 	bl	80019f8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	@ 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40013000 	.word	0x40013000
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <NMI_Handler+0x4>

08001470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <MemManage_Handler+0x4>

08001480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <UsageFault_Handler+0x4>

08001490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014be:	f000 f945 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014cc:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <OTG_FS_IRQHandler+0x10>)
 80014ce:	f000 feb9 	bl	8002244 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20001894 	.word	0x20001894

080014dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return 1;
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_kill>:

int _kill(int pid, int sig)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014f6:	f007 fe89 	bl	800920c <__errno>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2216      	movs	r2, #22
 80014fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_exit>:

void _exit (int status)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffe7 	bl	80014ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800151e:	bf00      	nop
 8001520:	e7fd      	b.n	800151e <_exit+0x12>

08001522 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e00a      	b.n	800154a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001534:	f3af 8000 	nop.w
 8001538:	4601      	mov	r1, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	60ba      	str	r2, [r7, #8]
 8001540:	b2ca      	uxtb	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbf0      	blt.n	8001534 <_read+0x12>
  }

  return len;
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_close>:
  }
  return len;
}

int _close(int file)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001584:	605a      	str	r2, [r3, #4]
  return 0;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_isatty>:

int _isatty(int file)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f007 fe0a 	bl	800920c <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00000400 	.word	0x00000400
 8001628:	200003ac 	.word	0x200003ac
 800162c:	200020e8 	.word	0x200020e8

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800168c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001658:	f7ff ffea 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	@ (80016a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f007 fdc9 	bl	8009218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fc2d 	bl	8000ee4 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001698:	0800b3f4 	.word	0x0800b3f4
  ldr r2, =_sbss
 800169c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80016a0:	200020e4 	.word	0x200020e4

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f94f 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	200f      	movs	r0, #15
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fde0 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f967 	bl	80019de <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f92f 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	200003b0 	.word	0x200003b0

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200003b0 	.word	0x200003b0

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	@ (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	@ (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	@ 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e159      	b.n	8001cc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8148 	bne.w	8001cc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a2 	beq.w	8001cc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b57      	ldr	r3, [pc, #348]	@ (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	4a56      	ldr	r2, [pc, #344]	@ (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8e:	4b54      	ldr	r3, [pc, #336]	@ (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a52      	ldr	r2, [pc, #328]	@ (8001ce4 <HAL_GPIO_Init+0x2ec>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a49      	ldr	r2, [pc, #292]	@ (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x202>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a48      	ldr	r2, [pc, #288]	@ (8001cec <HAL_GPIO_Init+0x2f4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x1fe>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a47      	ldr	r2, [pc, #284]	@ (8001cf0 <HAL_GPIO_Init+0x2f8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x1fa>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a46      	ldr	r2, [pc, #280]	@ (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x1f6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a45      	ldr	r2, [pc, #276]	@ (8001cf8 <HAL_GPIO_Init+0x300>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x1f2>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0c:	4935      	ldr	r1, [pc, #212]	@ (8001ce4 <HAL_GPIO_Init+0x2ec>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b38      	ldr	r3, [pc, #224]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a24      	ldr	r2, [pc, #144]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c92:	4a1a      	ldr	r2, [pc, #104]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c98:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	f67f aea2 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e12b      	b.n	8001f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fac8 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	@ 0x24
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d98:	f001 ff92 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a81      	ldr	r2, [pc, #516]	@ (8001fa8 <HAL_I2C_Init+0x274>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d807      	bhi.n	8001db8 <HAL_I2C_Init+0x84>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a80      	ldr	r2, [pc, #512]	@ (8001fac <HAL_I2C_Init+0x278>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	bf94      	ite	ls
 8001db0:	2301      	movls	r3, #1
 8001db2:	2300      	movhi	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	e006      	b.n	8001dc6 <HAL_I2C_Init+0x92>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a7d      	ldr	r2, [pc, #500]	@ (8001fb0 <HAL_I2C_Init+0x27c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	bf94      	ite	ls
 8001dc0:	2301      	movls	r3, #1
 8001dc2:	2300      	movhi	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0e7      	b.n	8001f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4a78      	ldr	r2, [pc, #480]	@ (8001fb4 <HAL_I2C_Init+0x280>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0c9b      	lsrs	r3, r3, #18
 8001dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa8 <HAL_I2C_Init+0x274>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d802      	bhi.n	8001e08 <HAL_I2C_Init+0xd4>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3301      	adds	r3, #1
 8001e06:	e009      	b.n	8001e1c <HAL_I2C_Init+0xe8>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	4a69      	ldr	r2, [pc, #420]	@ (8001fb8 <HAL_I2C_Init+0x284>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	099b      	lsrs	r3, r3, #6
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	495c      	ldr	r1, [pc, #368]	@ (8001fa8 <HAL_I2C_Init+0x274>)
 8001e38:	428b      	cmp	r3, r1
 8001e3a:	d819      	bhi.n	8001e70 <HAL_I2C_Init+0x13c>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e59      	subs	r1, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e50:	400b      	ands	r3, r1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <HAL_I2C_Init+0x138>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1e59      	subs	r1, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6a:	e051      	b.n	8001f10 <HAL_I2C_Init+0x1dc>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e04f      	b.n	8001f10 <HAL_I2C_Init+0x1dc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d111      	bne.n	8001e9c <HAL_I2C_Init+0x168>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1e58      	subs	r0, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	440b      	add	r3, r1
 8001e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e012      	b.n	8001ec2 <HAL_I2C_Init+0x18e>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e58      	subs	r0, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	0099      	lsls	r1, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_Init+0x196>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e022      	b.n	8001f10 <HAL_I2C_Init+0x1dc>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_I2C_Init+0x1bc>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e58      	subs	r0, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	440b      	add	r3, r1
 8001ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eee:	e00f      	b.n	8001f10 <HAL_I2C_Init+0x1dc>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	0099      	lsls	r1, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	6809      	ldr	r1, [r1, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6911      	ldr	r1, [r2, #16]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68d2      	ldr	r2, [r2, #12]
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	000186a0 	.word	0x000186a0
 8001fac:	001e847f 	.word	0x001e847f
 8001fb0:	003d08ff 	.word	0x003d08ff
 8001fb4:	431bde83 	.word	0x431bde83
 8001fb8:	10624dd3 	.word	0x10624dd3

08001fbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e101      	b.n	80021d2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f006 f845 	bl	8008078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ffc:	d102      	bne.n	8002004 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fc08 	bl	800481e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7c1a      	ldrb	r2, [r3, #16]
 8002016:	f88d 2000 	strb.w	r2, [sp]
 800201a:	3304      	adds	r3, #4
 800201c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800201e:	f002 fae6 	bl	80045ee <USB_CoreInit>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0ce      	b.n	80021d2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fc00 	bl	8004840 <USB_SetCurrentMode>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0bf      	b.n	80021d2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e04a      	b.n	80020ee <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3315      	adds	r3, #21
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	3314      	adds	r3, #20
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	b298      	uxth	r0, r3
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	332e      	adds	r3, #46	@ 0x2e
 8002094:	4602      	mov	r2, r0
 8002096:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3318      	adds	r3, #24
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	331c      	adds	r3, #28
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3320      	adds	r3, #32
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3324      	adds	r3, #36	@ 0x24
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	3301      	adds	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	791b      	ldrb	r3, [r3, #4]
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d3af      	bcc.n	8002058 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e044      	b.n	8002188 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	3301      	adds	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	791b      	ldrb	r3, [r3, #4]
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	429a      	cmp	r2, r3
 8002190:	d3b5      	bcc.n	80020fe <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7c1a      	ldrb	r2, [r3, #16]
 800219a:	f88d 2000 	strb.w	r2, [sp]
 800219e:	3304      	adds	r3, #4
 80021a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a2:	f002 fb99 	bl	80048d8 <USB_DevInit>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e00c      	b.n	80021d2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 fbe3 	bl	8005996 <USB_DevDisconnect>

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_PCD_Start+0x1c>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e022      	b.n	800223c <HAL_PCD_Start+0x62>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002216:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f002 faea 	bl	80047fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fb91 	bl	8005954 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b08d      	sub	sp, #52	@ 0x34
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fc4f 	bl	8005afe <USB_GetMode>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 848c 	bne.w	8002b80 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fbb3 	bl	80059d8 <USB_ReadInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8482 	beq.w	8002b7e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fba0 	bl	80059d8 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f002 0202 	and.w	r2, r2, #2
 80022b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fb8e 	bl	80059d8 <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d161      	bne.n	800238a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0210 	bic.w	r2, r2, #16
 80022d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 020f 	and.w	r2, r3, #15
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	3304      	adds	r3, #4
 80022f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80022fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002300:	d124      	bne.n	800234c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d035      	beq.n	800237a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800231c:	b29b      	uxth	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	6a38      	ldr	r0, [r7, #32]
 8002322:	f003 f9c5 	bl	80056b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002332:	441a      	add	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002344:	441a      	add	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	615a      	str	r2, [r3, #20]
 800234a:	e016      	b.n	800237a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002352:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002356:	d110      	bne.n	800237a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800235e:	2208      	movs	r2, #8
 8002360:	4619      	mov	r1, r3
 8002362:	6a38      	ldr	r0, [r7, #32]
 8002364:	f003 f9a4 	bl	80056b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002374:	441a      	add	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0210 	orr.w	r2, r2, #16
 8002388:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fb22 	bl	80059d8 <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800239a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800239e:	f040 80a7 	bne.w	80024f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fb27 	bl	80059fe <USB_ReadDevAllOutEpInterrupt>
 80023b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80023b2:	e099      	b.n	80024e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 808e 	beq.w	80024dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fb4b 	bl	8005a66 <USB_ReadDevOutEPInterrupt>
 80023d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00c      	beq.n	80023f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e8:	461a      	mov	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fea3 	bl	800313c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00c      	beq.n	800241a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	4413      	add	r3, r2
 8002408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800240c:	461a      	mov	r2, r3
 800240e:	2308      	movs	r3, #8
 8002410:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002412:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 ff79 	bl	800330c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002430:	461a      	mov	r2, r3
 8002432:	2310      	movs	r3, #16
 8002434:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d030      	beq.n	80024a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	2b80      	cmp	r3, #128	@ 0x80
 800244a:	d109      	bne.n	8002460 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800245a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800245e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	78db      	ldrb	r3, [r3, #3]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2200      	movs	r2, #0
 8002482:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f005 fef0 	bl	8008270 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800249c:	461a      	mov	r2, r3
 800249e:	2302      	movs	r3, #2
 80024a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024b8:	461a      	mov	r2, r3
 80024ba:	2320      	movs	r3, #32
 80024bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d4:	461a      	mov	r2, r3
 80024d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	3301      	adds	r3, #1
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80024e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e4:	085b      	lsrs	r3, r3, #1
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f af62 	bne.w	80023b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fa6f 	bl	80059d8 <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002504:	f040 80db 	bne.w	80026be <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 fa90 	bl	8005a32 <USB_ReadDevAllInEpInterrupt>
 8002512:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002518:	e0cd      	b.n	80026b6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800251a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80c2 	beq.w	80026aa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f003 fab6 	bl	8005aa2 <USB_ReadDevInEPInterrupt>
 8002536:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d057      	beq.n	80025f2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	2201      	movs	r2, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	69f9      	ldr	r1, [r7, #28]
 800255e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002562:	4013      	ands	r3, r2
 8002564:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002572:	461a      	mov	r2, r3
 8002574:	2301      	movs	r3, #1
 8002576:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	799b      	ldrb	r3, [r3, #6]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d132      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3320      	adds	r3, #32
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4403      	add	r3, r0
 80025a0:	331c      	adds	r3, #28
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4419      	add	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4403      	add	r3, r0
 80025b4:	3320      	adds	r3, #32
 80025b6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d113      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x3a2>
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3324      	adds	r3, #36	@ 0x24
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d108      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025de:	461a      	mov	r2, r3
 80025e0:	2101      	movs	r1, #1
 80025e2:	f003 fabd 	bl	8005b60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	4619      	mov	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f005 fdc4 	bl	800817a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002608:	461a      	mov	r2, r3
 800260a:	2308      	movs	r3, #8
 800260c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002624:	461a      	mov	r2, r3
 8002626:	2310      	movs	r3, #16
 8002628:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002640:	461a      	mov	r2, r3
 8002642:	2340      	movs	r3, #64	@ 0x40
 8002644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d023      	beq.n	8002698 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002652:	6a38      	ldr	r0, [r7, #32]
 8002654:	f002 faa4 	bl	8004ba0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	3310      	adds	r3, #16
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	78db      	ldrb	r3, [r3, #3]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d108      	bne.n	8002686 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2200      	movs	r2, #0
 8002678:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f005 fe07 	bl	8008294 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002692:	461a      	mov	r2, r3
 8002694:	2302      	movs	r3, #2
 8002696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fcbd 	bl	8003024 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	3301      	adds	r3, #1
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80026b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f af2e 	bne.w	800251a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 f988 	bl	80059d8 <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026d2:	d122      	bne.n	800271a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d108      	bne.n	8002704 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026fa:	2100      	movs	r1, #0
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fea3 	bl	8003448 <HAL_PCDEx_LPM_Callback>
 8002702:	e002      	b.n	800270a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f005 fda5 	bl	8008254 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f95a 	bl	80059d8 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800272a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800272e:	d112      	bne.n	8002756 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d102      	bne.n	8002746 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f005 fd61 	bl	8008208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002754:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f93c 	bl	80059d8 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800276a:	f040 80b7 	bne.w	80028dc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2110      	movs	r1, #16
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fa09 	bl	8004ba0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278e:	2300      	movs	r3, #0
 8002790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002792:	e046      	b.n	8002822 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027a0:	461a      	mov	r2, r3
 80027a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027b8:	0151      	lsls	r1, r2, #5
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	440a      	add	r2, r1
 80027be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80027c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027d4:	461a      	mov	r2, r3
 80027d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ec:	0151      	lsls	r1, r2, #5
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	440a      	add	r2, r1
 80027f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800280c:	0151      	lsls	r1, r2, #5
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	440a      	add	r2, r1
 8002812:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002816:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800281a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281e:	3301      	adds	r3, #1
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	791b      	ldrb	r3, [r3, #4]
 8002826:	461a      	mov	r2, r3
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	4293      	cmp	r3, r2
 800282c:	d3b2      	bcc.n	8002794 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800283c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002840:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7bdb      	ldrb	r3, [r3, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800285a:	f043 030b 	orr.w	r3, r3, #11
 800285e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002870:	f043 030b 	orr.w	r3, r3, #11
 8002874:	6453      	str	r3, [r2, #68]	@ 0x44
 8002876:	e015      	b.n	80028a4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002886:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800288a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800288e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800289e:	f043 030b 	orr.w	r3, r3, #11
 80028a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80028b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028c6:	461a      	mov	r2, r3
 80028c8:	f003 f94a 	bl	8005b60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 f879 	bl	80059d8 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f0:	d123      	bne.n	800293a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 f90f 	bl	8005b1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f002 f9c6 	bl	8004c92 <USB_GetDevSpeed>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681c      	ldr	r4, [r3, #0]
 8002912:	f001 f9c9 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8002916:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800291c:	461a      	mov	r2, r3
 800291e:	4620      	mov	r0, r4
 8002920:	f001 feca 	bl	80046b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f005 fc50 	bl	80081ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002938:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f003 f84a 	bl	80059d8 <USB_ReadInterrupts>
 8002944:	4603      	mov	r3, r0
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b08      	cmp	r3, #8
 800294c:	d10a      	bne.n	8002964 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f005 fc2d 	bl	80081ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f002 0208 	and.w	r2, r2, #8
 8002962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f003 f835 	bl	80059d8 <USB_ReadInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002974:	2b80      	cmp	r3, #128	@ 0x80
 8002976:	d123      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002984:	2301      	movs	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
 8002988:	e014      	b.n	80029b4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fb0a 	bl	8002fc2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	3301      	adds	r3, #1
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	791b      	ldrb	r3, [r3, #4]
 80029b8:	461a      	mov	r2, r3
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	4293      	cmp	r3, r2
 80029be:	d3e4      	bcc.n	800298a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 f807 	bl	80059d8 <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029d4:	d13c      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d6:	2301      	movs	r3, #1
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029da:	e02b      	b.n	8002a34 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3318      	adds	r3, #24
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d115      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	da12      	bge.n	8002a2e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3317      	adds	r3, #23
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 faca 	bl	8002fc2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d3cd      	bcc.n	80029dc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 ffbf 	bl	80059d8 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a64:	d156      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a66:	2301      	movs	r3, #1
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6a:	e045      	b.n	8002af8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d12e      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da2b      	bge.n	8002af2 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	0c1a      	lsrs	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002aa4:	4053      	eors	r3, r2
 8002aa6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d121      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aee:	6053      	str	r3, [r2, #4]
            break;
 8002af0:	e008      	b.n	8002b04 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	3301      	adds	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	791b      	ldrb	r3, [r3, #4]
 8002afc:	461a      	mov	r2, r3
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d3b3      	bcc.n	8002a6c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f002 ff5d 	bl	80059d8 <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b28:	d10a      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f005 fbc4 	bl	80082b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 ff47 	bl	80059d8 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d115      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f005 fbb4 	bl	80082d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	e000      	b.n	8002b80 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002b7e:	bf00      	nop
    }
  }
}
 8002b80:	3734      	adds	r7, #52	@ 0x34
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd90      	pop	{r4, r7, pc}

08002b86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_PCD_SetAddress+0x1a>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e012      	b.n	8002bc6 <HAL_PCD_SetAddress+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fea6 	bl	8005908 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	4608      	mov	r0, r1
 8002bd8:	4611      	mov	r1, r2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4603      	mov	r3, r0
 8002bde:	70fb      	strb	r3, [r7, #3]
 8002be0:	460b      	mov	r3, r1
 8002be2:	803b      	strh	r3, [r7, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da0f      	bge.n	8002c14 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	3310      	adds	r3, #16
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
 8002c12:	e00f      	b.n	8002c34 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 020f 	and.w	r2, r3, #15
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002c40:	883b      	ldrh	r3, [r7, #0]
 8002c42:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	78ba      	ldrb	r2, [r7, #2]
 8002c4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d004      	beq.n	8002c62 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c62:	78bb      	ldrb	r3, [r7, #2]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d102      	bne.n	8002c6e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_PCD_EP_Open+0xae>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e00e      	b.n	8002c9a <HAL_PCD_EP_Open+0xcc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68f9      	ldr	r1, [r7, #12]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 f826 	bl	8004cdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002c98:	7afb      	ldrb	r3, [r7, #11]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da0f      	bge.n	8002cd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 020f 	and.w	r2, r3, #15
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	3310      	adds	r3, #16
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	705a      	strb	r2, [r3, #1]
 8002cd4:	e00f      	b.n	8002cf6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	f003 020f 	and.w	r2, r3, #15
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	3304      	adds	r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_PCD_EP_Close+0x6e>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e00e      	b.n	8002d2e <HAL_PCD_EP_Close+0x8c>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 f864 	bl	8004dec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	460b      	mov	r3, r1
 8002d44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	799b      	ldrb	r3, [r3, #6]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	799b      	ldrb	r3, [r3, #6]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	f002 f901 	bl	8004fa4 <USB_EPStartXfer>

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	460b      	mov	r3, r1
 8002dea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dec:	7afb      	ldrb	r3, [r7, #11]
 8002dee:	f003 020f 	and.w	r2, r3, #15
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	3310      	adds	r3, #16
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	3304      	adds	r3, #4
 8002e02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1c:	7afb      	ldrb	r3, [r7, #11]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	799b      	ldrb	r3, [r3, #6]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d102      	bne.n	8002e36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	799b      	ldrb	r3, [r3, #6]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6979      	ldr	r1, [r7, #20]
 8002e42:	f002 f8af 	bl	8004fa4 <USB_EPStartXfer>

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	7912      	ldrb	r2, [r2, #4]
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e04f      	b.n	8002f0e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	da0f      	bge.n	8002e96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 020f 	and.w	r2, r3, #15
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	3310      	adds	r3, #16
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	705a      	strb	r2, [r3, #1]
 8002e94:	e00d      	b.n	8002eb2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_PCD_EP_SetStall+0x82>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e01d      	b.n	8002f0e <HAL_PCD_EP_SetStall+0xbe>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68f9      	ldr	r1, [r7, #12]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f002 fc3d 	bl	8005760 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7999      	ldrb	r1, [r3, #6]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002efe:	461a      	mov	r2, r3
 8002f00:	f002 fe2e 	bl	8005b60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	7912      	ldrb	r2, [r2, #4]
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e042      	b.n	8002fba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da0f      	bge.n	8002f5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	3310      	adds	r3, #16
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	705a      	strb	r2, [r3, #1]
 8002f5a:	e00f      	b.n	8002f7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	3304      	adds	r3, #4
 8002f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_PCD_EP_ClrStall+0x86>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e00e      	b.n	8002fba <HAL_PCD_EP_ClrStall+0xa4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68f9      	ldr	r1, [r7, #12]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f002 fc46 	bl	800583c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	da0c      	bge.n	8002ff0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	3310      	adds	r3, #16
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e00c      	b.n	800300a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 020f 	and.w	r2, r3, #15
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	3304      	adds	r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68f9      	ldr	r1, [r7, #12]
 8003010:	4618      	mov	r0, r3
 8003012:	f002 fa65 	bl	80054e0 <USB_EPStopXfer>
 8003016:	4603      	mov	r3, r0
 8003018:	72fb      	strb	r3, [r7, #11]

  return ret;
 800301a:	7afb      	ldrb	r3, [r7, #11]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	@ 0x28
 8003028:	af02      	add	r7, sp, #8
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	3310      	adds	r3, #16
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	3304      	adds	r3, #4
 800304a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	429a      	cmp	r2, r3
 8003056:	d901      	bls.n	800305c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e06b      	b.n	8003134 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	429a      	cmp	r2, r3
 8003070:	d902      	bls.n	8003078 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3303      	adds	r3, #3
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003080:	e02a      	b.n	80030d8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	429a      	cmp	r2, r3
 8003096:	d902      	bls.n	800309e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3303      	adds	r3, #3
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68d9      	ldr	r1, [r3, #12]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4603      	mov	r3, r0
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f002 faba 	bl	8005634 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	441a      	add	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d809      	bhi.n	8003102 <PCD_WriteEmptyTxFifo+0xde>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d203      	bcs.n	8003102 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1bf      	bne.n	8003082 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	429a      	cmp	r2, r3
 800310c:	d811      	bhi.n	8003132 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	2201      	movs	r2, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	43db      	mvns	r3, r3
 8003128:	6939      	ldr	r1, [r7, #16]
 800312a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800312e:	4013      	ands	r3, r2
 8003130:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	333c      	adds	r3, #60	@ 0x3c
 8003154:	3304      	adds	r3, #4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	799b      	ldrb	r3, [r3, #6]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d17b      	bne.n	800326a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	4a61      	ldr	r2, [pc, #388]	@ (8003304 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	f240 80b9 	bls.w	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80b3 	beq.w	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800319e:	461a      	mov	r2, r3
 80031a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a4:	6093      	str	r3, [r2, #8]
 80031a6:	e0a7      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	2320      	movs	r3, #32
 80031c2:	6093      	str	r3, [r2, #8]
 80031c4:	e098      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f040 8093 	bne.w	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003304 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d90f      	bls.n	80031fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f0:	461a      	mov	r2, r3
 80031f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f6:	6093      	str	r3, [r2, #8]
 80031f8:	e07e      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	440b      	add	r3, r1
 800321c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003226:	1ad2      	subs	r2, r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d114      	bne.n	800325c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003244:	461a      	mov	r2, r3
 8003246:	2101      	movs	r1, #1
 8003248:	f002 fc8a 	bl	8005b60 <USB_EP0_OutStart>
 800324c:	e006      	b.n	800325c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f004 ff6e 	bl	8008144 <HAL_PCD_DataOutStageCallback>
 8003268:	e046      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4a26      	ldr	r2, [pc, #152]	@ (8003308 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d124      	bne.n	80032bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800328e:	6093      	str	r3, [r2, #8]
 8003290:	e032      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	2320      	movs	r3, #32
 80032ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f004 ff45 	bl	8008144 <HAL_PCD_DataOutStageCallback>
 80032ba:	e01d      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d114      	bne.n	80032ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d108      	bne.n	80032ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032e4:	461a      	mov	r2, r3
 80032e6:	2100      	movs	r1, #0
 80032e8:	f002 fc3a 	bl	8005b60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f004 ff26 	bl	8008144 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	4f54300a 	.word	0x4f54300a
 8003308:	4f54310a 	.word	0x4f54310a

0800330c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	333c      	adds	r3, #60	@ 0x3c
 8003324:	3304      	adds	r3, #4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a15      	ldr	r2, [pc, #84]	@ (8003394 <PCD_EP_OutSetupPacket_int+0x88>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d90e      	bls.n	8003360 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800335e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f004 fedd 	bl	8008120 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a0a      	ldr	r2, [pc, #40]	@ (8003394 <PCD_EP_OutSetupPacket_int+0x88>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d90c      	bls.n	8003388 <PCD_EP_OutSetupPacket_int+0x7c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	799b      	ldrb	r3, [r3, #6]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d108      	bne.n	8003388 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003380:	461a      	mov	r2, r3
 8003382:	2101      	movs	r1, #1
 8003384:	f002 fbec 	bl	8005b60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	4f54300a 	.word	0x4f54300a

08003398 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
 80033a4:	4613      	mov	r3, r2
 80033a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d107      	bne.n	80033c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033b6:	883b      	ldrh	r3, [r7, #0]
 80033b8:	0419      	lsls	r1, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80033c4:	e028      	b.n	8003418 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e00d      	b.n	80033f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	3340      	adds	r3, #64	@ 0x40
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4413      	add	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	3301      	adds	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d3ec      	bcc.n	80033da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003400:	883b      	ldrh	r3, [r7, #0]
 8003402:	0418      	lsls	r0, r3, #16
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6819      	ldr	r1, [r3, #0]
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	3b01      	subs	r3, #1
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	4302      	orrs	r2, r0
 8003410:	3340      	adds	r3, #64	@ 0x40
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e267      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d075      	beq.n	800356a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800347e:	4b88      	ldr	r3, [pc, #544]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b04      	cmp	r3, #4
 8003488:	d00c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800348a:	4b85      	ldr	r3, [pc, #532]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003492:	2b08      	cmp	r3, #8
 8003494:	d112      	bne.n	80034bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003496:	4b82      	ldr	r3, [pc, #520]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034a2:	d10b      	bne.n	80034bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	4b7e      	ldr	r3, [pc, #504]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d05b      	beq.n	8003568 <HAL_RCC_OscConfig+0x108>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d157      	bne.n	8003568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e242      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c4:	d106      	bne.n	80034d4 <HAL_RCC_OscConfig+0x74>
 80034c6:	4b76      	ldr	r3, [pc, #472]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a75      	ldr	r2, [pc, #468]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e01d      	b.n	8003510 <HAL_RCC_OscConfig+0xb0>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x98>
 80034de:	4b70      	ldr	r3, [pc, #448]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a6f      	ldr	r2, [pc, #444]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80034e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b6d      	ldr	r3, [pc, #436]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6c      	ldr	r2, [pc, #432]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0xb0>
 80034f8:	4b69      	ldr	r3, [pc, #420]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a68      	ldr	r2, [pc, #416]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b66      	ldr	r3, [pc, #408]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a65      	ldr	r2, [pc, #404]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 800350a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d013      	beq.n	8003540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe f92c 	bl	8001774 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe f928 	bl	8001774 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	@ 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e207      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b5b      	ldr	r3, [pc, #364]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0xc0>
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe f918 	bl	8001774 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe f914 	bl	8001774 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	@ 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1f3      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	4b51      	ldr	r3, [pc, #324]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0xe8>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d063      	beq.n	800363e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003576:	4b4a      	ldr	r3, [pc, #296]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003582:	4b47      	ldr	r3, [pc, #284]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800358a:	2b08      	cmp	r3, #8
 800358c:	d11c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358e:	4b44      	ldr	r3, [pc, #272]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d116      	bne.n	80035c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	4b41      	ldr	r3, [pc, #260]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_RCC_OscConfig+0x152>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e1c7      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b2:	4b3b      	ldr	r3, [pc, #236]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4937      	ldr	r1, [pc, #220]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	e03a      	b.n	800363e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d0:	4b34      	ldr	r3, [pc, #208]	@ (80036a4 <HAL_RCC_OscConfig+0x244>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fe f8cd 	bl	8001774 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035de:	f7fe f8c9 	bl	8001774 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e1a8      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b28      	ldr	r3, [pc, #160]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4925      	ldr	r1, [pc, #148]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	e015      	b.n	800363e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003612:	4b24      	ldr	r3, [pc, #144]	@ (80036a4 <HAL_RCC_OscConfig+0x244>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe f8ac 	bl	8001774 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003620:	f7fe f8a8 	bl	8001774 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e187      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	4b1b      	ldr	r3, [pc, #108]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d036      	beq.n	80036b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d016      	beq.n	8003680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003652:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <HAL_RCC_OscConfig+0x248>)
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe f88c 	bl	8001774 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7fe f888 	bl	8001774 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e167      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_RCC_OscConfig+0x240>)
 8003674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x200>
 800367e:	e01b      	b.n	80036b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003680:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <HAL_RCC_OscConfig+0x248>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fe f875 	bl	8001774 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800368c:	e00e      	b.n	80036ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fe f871 	bl	8001774 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d907      	bls.n	80036ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e150      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	42470000 	.word	0x42470000
 80036a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	4b88      	ldr	r3, [pc, #544]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ea      	bne.n	800368e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8097 	beq.w	80037f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ca:	4b81      	ldr	r3, [pc, #516]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	4b7d      	ldr	r3, [pc, #500]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	4a7c      	ldr	r2, [pc, #496]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036e6:	4b7a      	ldr	r3, [pc, #488]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	4b77      	ldr	r3, [pc, #476]	@ (80038d4 <HAL_RCC_OscConfig+0x474>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d118      	bne.n	8003734 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003702:	4b74      	ldr	r3, [pc, #464]	@ (80038d4 <HAL_RCC_OscConfig+0x474>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a73      	ldr	r2, [pc, #460]	@ (80038d4 <HAL_RCC_OscConfig+0x474>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370e:	f7fe f831 	bl	8001774 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003716:	f7fe f82d 	bl	8001774 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e10c      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <HAL_RCC_OscConfig+0x474>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x2ea>
 800373c:	4b64      	ldr	r3, [pc, #400]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003740:	4a63      	ldr	r2, [pc, #396]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6713      	str	r3, [r2, #112]	@ 0x70
 8003748:	e01c      	b.n	8003784 <HAL_RCC_OscConfig+0x324>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b05      	cmp	r3, #5
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x30c>
 8003752:	4b5f      	ldr	r3, [pc, #380]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003756:	4a5e      	ldr	r2, [pc, #376]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	6713      	str	r3, [r2, #112]	@ 0x70
 800375e:	4b5c      	ldr	r3, [pc, #368]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003762:	4a5b      	ldr	r2, [pc, #364]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6713      	str	r3, [r2, #112]	@ 0x70
 800376a:	e00b      	b.n	8003784 <HAL_RCC_OscConfig+0x324>
 800376c:	4b58      	ldr	r3, [pc, #352]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003770:	4a57      	ldr	r2, [pc, #348]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	6713      	str	r3, [r2, #112]	@ 0x70
 8003778:	4b55      	ldr	r3, [pc, #340]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377c:	4a54      	ldr	r2, [pc, #336]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 800377e:	f023 0304 	bic.w	r3, r3, #4
 8003782:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d015      	beq.n	80037b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fd fff2 	bl	8001774 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003792:	e00a      	b.n	80037aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003794:	f7fd ffee 	bl	8001774 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0cb      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037aa:	4b49      	ldr	r3, [pc, #292]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0ee      	beq.n	8003794 <HAL_RCC_OscConfig+0x334>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b8:	f7fd ffdc 	bl	8001774 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c0:	f7fd ffd8 	bl	8001774 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e0b5      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d6:	4b3e      	ldr	r3, [pc, #248]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1ee      	bne.n	80037c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d105      	bne.n	80037f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e8:	4b39      	ldr	r3, [pc, #228]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	4a38      	ldr	r2, [pc, #224]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80037ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80a1 	beq.w	8003940 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037fe:	4b34      	ldr	r3, [pc, #208]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b08      	cmp	r3, #8
 8003808:	d05c      	beq.n	80038c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d141      	bne.n	8003896 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003812:	4b31      	ldr	r3, [pc, #196]	@ (80038d8 <HAL_RCC_OscConfig+0x478>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fd ffac 	bl	8001774 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fd ffa8 	bl	8001774 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e087      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	4b27      	ldr	r3, [pc, #156]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69da      	ldr	r2, [r3, #28]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	019b      	lsls	r3, r3, #6
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	3b01      	subs	r3, #1
 8003858:	041b      	lsls	r3, r3, #16
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	061b      	lsls	r3, r3, #24
 8003862:	491b      	ldr	r1, [pc, #108]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003868:	4b1b      	ldr	r3, [pc, #108]	@ (80038d8 <HAL_RCC_OscConfig+0x478>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fd ff81 	bl	8001774 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003876:	f7fd ff7d 	bl	8001774 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e05c      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003888:	4b11      	ldr	r3, [pc, #68]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x416>
 8003894:	e054      	b.n	8003940 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <HAL_RCC_OscConfig+0x478>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fd ff6a 	bl	8001774 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd ff66 	bl	8001774 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e045      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_OscConfig+0x470>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x444>
 80038c2:	e03d      	b.n	8003940 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e038      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40007000 	.word	0x40007000
 80038d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038dc:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_RCC_OscConfig+0x4ec>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d028      	beq.n	800393c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d121      	bne.n	800393c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d11a      	bne.n	800393c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800390c:	4013      	ands	r3, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003912:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003914:	4293      	cmp	r3, r2
 8003916:	d111      	bne.n	800393c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	3b01      	subs	r3, #1
 8003926:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0cc      	b.n	8003afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b68      	ldr	r3, [pc, #416]	@ (8003b08 <HAL_RCC_ClockConfig+0x1b8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d90c      	bls.n	800398c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b65      	ldr	r3, [pc, #404]	@ (8003b08 <HAL_RCC_ClockConfig+0x1b8>)
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b63      	ldr	r3, [pc, #396]	@ (8003b08 <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0b8      	b.n	8003afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d020      	beq.n	80039da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a4:	4b59      	ldr	r3, [pc, #356]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4a58      	ldr	r2, [pc, #352]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039bc:	4b53      	ldr	r3, [pc, #332]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a52      	ldr	r2, [pc, #328]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c8:	4b50      	ldr	r3, [pc, #320]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	494d      	ldr	r1, [pc, #308]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d044      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d119      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e07f      	b.n	8003afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d003      	beq.n	8003a0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e06f      	b.n	8003afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e067      	b.n	8003afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2e:	4b37      	ldr	r3, [pc, #220]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f023 0203 	bic.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4934      	ldr	r1, [pc, #208]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a40:	f7fd fe98 	bl	8001774 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7fd fe94 	bl	8001774 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e04f      	b.n	8003afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 020c 	and.w	r2, r3, #12
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1eb      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a70:	4b25      	ldr	r3, [pc, #148]	@ (8003b08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d20c      	bcs.n	8003a98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e032      	b.n	8003afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa4:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4916      	ldr	r1, [pc, #88]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac2:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	490e      	ldr	r1, [pc, #56]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ad6:	f000 f821 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003ada:	4602      	mov	r2, r0
 8003adc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	490a      	ldr	r1, [pc, #40]	@ (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	5ccb      	ldrb	r3, [r1, r3]
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	4a09      	ldr	r2, [pc, #36]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003af2:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd fdf8 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40023c00 	.word	0x40023c00
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	0800b058 	.word	0x0800b058
 8003b14:	20000000 	.word	0x20000000
 8003b18:	20000004 	.word	0x20000004

08003b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b20:	b090      	sub	sp, #64	@ 0x40
 8003b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b34:	4b59      	ldr	r3, [pc, #356]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 030c 	and.w	r3, r3, #12
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d00d      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x40>
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	f200 80a1 	bhi.w	8003c88 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x34>
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b4e:	e09b      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b53      	ldr	r3, [pc, #332]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b54:	e09b      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b56:	4b53      	ldr	r3, [pc, #332]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b5a:	e098      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b66:	4b4d      	ldr	r3, [pc, #308]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d028      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b72:	4b4a      	ldr	r3, [pc, #296]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	2200      	movs	r2, #0
 8003b7a:	623b      	str	r3, [r7, #32]
 8003b7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b84:	2100      	movs	r1, #0
 8003b86:	4b47      	ldr	r3, [pc, #284]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b88:	fb03 f201 	mul.w	r2, r3, r1
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	fb00 f303 	mul.w	r3, r0, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	4a43      	ldr	r2, [pc, #268]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b96:	fba0 1202 	umull	r1, r2, r0, r2
 8003b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b9c:	460a      	mov	r2, r1
 8003b9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ba2:	4413      	add	r3, r2
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba8:	2200      	movs	r2, #0
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	61fa      	str	r2, [r7, #28]
 8003bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003bb6:	f7fc ffff 	bl	8000bb8 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc2:	e053      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc4:	4b35      	ldr	r3, [pc, #212]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	2200      	movs	r2, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	617a      	str	r2, [r7, #20]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bd6:	f04f 0b00 	mov.w	fp, #0
 8003bda:	4652      	mov	r2, sl
 8003bdc:	465b      	mov	r3, fp
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	0159      	lsls	r1, r3, #5
 8003be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bec:	0150      	lsls	r0, r2, #5
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	ebb2 080a 	subs.w	r8, r2, sl
 8003bf6:	eb63 090b 	sbc.w	r9, r3, fp
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c0e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c12:	eb63 0509 	sbc.w	r5, r3, r9
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	00eb      	lsls	r3, r5, #3
 8003c20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c24:	00e2      	lsls	r2, r4, #3
 8003c26:	4614      	mov	r4, r2
 8003c28:	461d      	mov	r5, r3
 8003c2a:	eb14 030a 	adds.w	r3, r4, sl
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	eb45 030b 	adc.w	r3, r5, fp
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c42:	4629      	mov	r1, r5
 8003c44:	028b      	lsls	r3, r1, #10
 8003c46:	4621      	mov	r1, r4
 8003c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	028a      	lsls	r2, r1, #10
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c56:	2200      	movs	r2, #0
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	60fa      	str	r2, [r7, #12]
 8003c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c60:	f7fc ffaa 	bl	8000bb8 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4613      	mov	r3, r2
 8003c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	3301      	adds	r3, #1
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003c7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3740      	adds	r7, #64	@ 0x40
 8003c94:	46bd      	mov	sp, r7
 8003c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	017d7840 	.word	0x017d7840

08003ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000000 	.word	0x20000000

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a9b      	lsrs	r3, r3, #10
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	@ (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	0800b068 	.word	0x0800b068

08003ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d038      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d10:	4b68      	ldr	r3, [pc, #416]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d16:	f7fd fd2d 	bl	8001774 <HAL_GetTick>
 8003d1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d1e:	f7fd fd29 	bl	8001774 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0bd      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d30:	4b61      	ldr	r3, [pc, #388]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	071b      	lsls	r3, r3, #28
 8003d4e:	495a      	ldr	r1, [pc, #360]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d56:	4b57      	ldr	r3, [pc, #348]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5c:	f7fd fd0a 	bl	8001774 <HAL_GetTick>
 8003d60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d64:	f7fd fd06 	bl	8001774 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e09a      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d76:	4b50      	ldr	r3, [pc, #320]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8083 	beq.w	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	4b48      	ldr	r3, [pc, #288]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	4a47      	ldr	r2, [pc, #284]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da0:	4b45      	ldr	r3, [pc, #276]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dac:	4b43      	ldr	r3, [pc, #268]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a42      	ldr	r2, [pc, #264]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003db8:	f7fd fcdc 	bl	8001774 <HAL_GetTick>
 8003dbc:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc0:	f7fd fcd8 	bl	8001774 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e06c      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dde:	4b36      	ldr	r3, [pc, #216]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02f      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d028      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e04:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e06:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e12:	4a29      	ldr	r2, [pc, #164]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e18:	4b27      	ldr	r3, [pc, #156]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d114      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fd fca6 	bl	8001774 <HAL_GetTick>
 8003e28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fd fca2 	bl	8001774 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e034      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ee      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e5a:	d10d      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003e5c:	4b16      	ldr	r3, [pc, #88]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e70:	4911      	ldr	r1, [pc, #68]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
 8003e76:	e005      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003e78:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e82:	6093      	str	r3, [r2, #8]
 8003e84:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e90:	4909      	ldr	r1, [pc, #36]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	7d1a      	ldrb	r2, [r3, #20]
 8003ea6:	4b07      	ldr	r3, [pc, #28]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003ea8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	42470068 	.word	0x42470068
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	42470e40 	.word	0x42470e40
 8003ec4:	424711e0 	.word	0x424711e0

08003ec8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e073      	b.n	8003fc2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7f5b      	ldrb	r3, [r3, #29]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd fa48 	bl	8001380 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d055      	beq.n	8003fb0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	22ca      	movs	r2, #202	@ 0xca
 8003f0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2253      	movs	r2, #83	@ 0x53
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fa49 	bl	80043ac <RTC_EnterInitMode>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d12c      	bne.n	8003f7e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003f32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f36:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6899      	ldr	r1, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6919      	ldr	r1, [r3, #16]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	041a      	lsls	r2, r3, #16
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fa50 	bl	800441a <RTC_ExitInitMode>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d110      	bne.n	8003fa6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f92:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	22ff      	movs	r2, #255	@ 0xff
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fae:	e001      	b.n	8003fb4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fca:	b590      	push	{r4, r7, lr}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	7f1b      	ldrb	r3, [r3, #28]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RTC_SetTime+0x1c>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e087      	b.n	80040f6 <HAL_RTC_SetTime+0x12c>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d126      	bne.n	8004046 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fa27 	bl	8004464 <RTC_ByteToBcd2>
 8004016:	4603      	mov	r3, r0
 8004018:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fa20 	bl	8004464 <RTC_ByteToBcd2>
 8004024:	4603      	mov	r3, r0
 8004026:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004028:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fa18 	bl	8004464 <RTC_ByteToBcd2>
 8004034:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004036:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	78db      	ldrb	r3, [r3, #3]
 800403e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e018      	b.n	8004078 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2200      	movs	r2, #0
 8004058:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004066:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800406c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	78db      	ldrb	r3, [r3, #3]
 8004072:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	22ca      	movs	r2, #202	@ 0xca
 800407e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2253      	movs	r2, #83	@ 0x53
 8004086:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f98f 	bl	80043ac <RTC_EnterInitMode>
 800408e:	4603      	mov	r3, r0
 8004090:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d120      	bne.n	80040da <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80040a2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80040a6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6899      	ldr	r1, [r3, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f9a2 	bl	800441a <RTC_ExitInitMode>
 80040d6:	4603      	mov	r3, r0
 80040d8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	22ff      	movs	r2, #255	@ 0xff
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]

  return status;
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}

080040fe <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004130:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004134:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004140:	b2da      	uxtb	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	0d9b      	lsrs	r3, r3, #22
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d11a      	bne.n	80041b0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f98e 	bl	80044a0 <RTC_Bcd2ToByte>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	785b      	ldrb	r3, [r3, #1]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f985 	bl	80044a0 <RTC_Bcd2ToByte>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	789b      	ldrb	r3, [r3, #2]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f97c 	bl	80044a0 <RTC_Bcd2ToByte>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041ba:	b590      	push	{r4, r7, lr}
 80041bc:	b087      	sub	sp, #28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	7f1b      	ldrb	r3, [r3, #28]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_RTC_SetDate+0x1c>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e071      	b.n	80042ba <HAL_RTC_SetDate+0x100>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2202      	movs	r2, #2
 80041e0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10e      	bne.n	8004206 <HAL_RTC_SetDate+0x4c>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	f023 0310 	bic.w	r3, r3, #16
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	330a      	adds	r3, #10
 8004200:	b2da      	uxtb	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d11c      	bne.n	8004246 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	78db      	ldrb	r3, [r3, #3]
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f927 	bl	8004464 <RTC_ByteToBcd2>
 8004216:	4603      	mov	r3, r0
 8004218:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	785b      	ldrb	r3, [r3, #1]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f920 	bl	8004464 <RTC_ByteToBcd2>
 8004224:	4603      	mov	r3, r0
 8004226:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004228:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	789b      	ldrb	r3, [r3, #2]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f918 	bl	8004464 <RTC_ByteToBcd2>
 8004234:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004236:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e00e      	b.n	8004264 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	78db      	ldrb	r3, [r3, #3]
 800424a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	785b      	ldrb	r3, [r3, #1]
 8004250:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004252:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004258:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	22ca      	movs	r2, #202	@ 0xca
 800426a:	625a      	str	r2, [r3, #36]	@ 0x24
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2253      	movs	r2, #83	@ 0x53
 8004272:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f899 	bl	80043ac <RTC_EnterInitMode>
 800427a:	4603      	mov	r3, r0
 800427c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800427e:	7cfb      	ldrb	r3, [r7, #19]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10c      	bne.n	800429e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800428e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004292:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f8c0 	bl	800441a <RTC_ExitInitMode>
 800429a:	4603      	mov	r3, r0
 800429c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	22ff      	movs	r2, #255	@ 0xff
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]

  return status;
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd90      	pop	{r4, r7, pc}

080042c2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80042e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004304:	b2da      	uxtb	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	0b5b      	lsrs	r3, r3, #13
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11a      	bne.n	8004356 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	78db      	ldrb	r3, [r3, #3]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f8bb 	bl	80044a0 <RTC_Bcd2ToByte>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f8b2 	bl	80044a0 <RTC_Bcd2ToByte>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	789b      	ldrb	r3, [r3, #2]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f8a9 	bl	80044a0 <RTC_Bcd2ToByte>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0d      	ldr	r2, [pc, #52]	@ (80043a8 <HAL_RTC_WaitForSynchro+0x48>)
 8004372:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004374:	f7fd f9fe 	bl	8001774 <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800437a:	e009      	b.n	8004390 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800437c:	f7fd f9fa 	bl	8001774 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800438a:	d901      	bls.n	8004390 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e007      	b.n	80043a0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ee      	beq.n	800437c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	00013f5f 	.word	0x00013f5f

080043ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d122      	bne.n	8004410 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043da:	f7fd f9cb 	bl	8001774 <HAL_GetTick>
 80043de:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043e0:	e00c      	b.n	80043fc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043e2:	f7fd f9c7 	bl	8001774 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043f0:	d904      	bls.n	80043fc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2204      	movs	r2, #4
 80043f6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <RTC_EnterInitMode+0x64>
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d1e8      	bne.n	80043e2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004434:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ff8b 	bl	8004360 <HAL_RTC_WaitForSynchro>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d004      	beq.n	800445a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2204      	movs	r2, #4
 8004454:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004472:	e005      	b.n	8004480 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	3b0a      	subs	r3, #10
 800447e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	2b09      	cmp	r3, #9
 8004484:	d8f6      	bhi.n	8004474 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	b2da      	uxtb	r2, r3
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	4313      	orrs	r3, r2
 8004492:	b2db      	uxtb	r3, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	b2db      	uxtb	r3, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e07b      	b.n	80045e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044fe:	d009      	beq.n	8004514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	61da      	str	r2, [r3, #28]
 8004506:	e005      	b.n	8004514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc ff52 	bl	80013d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800454a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004598:	ea42 0103 	orr.w	r1, r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f003 0104 	and.w	r1, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	f003 0210 	and.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045ee:	b084      	sub	sp, #16
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	f107 001c 	add.w	r0, r7, #28
 80045fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004600:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004604:	2b01      	cmp	r3, #1
 8004606:	d123      	bne.n	8004650 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800461c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004630:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004634:	2b01      	cmp	r3, #1
 8004636:	d105      	bne.n	8004644 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f001 fae9 	bl	8005c1c <USB_CoreReset>
 800464a:	4603      	mov	r3, r0
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	e01b      	b.n	8004688 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f001 fadd 	bl	8005c1c <USB_CoreReset>
 8004662:	4603      	mov	r3, r0
 8004664:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004666:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	639a      	str	r2, [r3, #56]	@ 0x38
 800467a:	e005      	b.n	8004688 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004688:	7fbb      	ldrb	r3, [r7, #30]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10b      	bne.n	80046a6 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f043 0206 	orr.w	r2, r3, #6
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b2:	b004      	add	sp, #16
 80046b4:	4770      	bx	lr
	...

080046b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d165      	bne.n	8004798 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4a41      	ldr	r2, [pc, #260]	@ (80047d4 <USB_SetTurnaroundTime+0x11c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d906      	bls.n	80046e2 <USB_SetTurnaroundTime+0x2a>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4a40      	ldr	r2, [pc, #256]	@ (80047d8 <USB_SetTurnaroundTime+0x120>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d202      	bcs.n	80046e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046dc:	230f      	movs	r3, #15
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e062      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4a3c      	ldr	r2, [pc, #240]	@ (80047d8 <USB_SetTurnaroundTime+0x120>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d306      	bcc.n	80046f8 <USB_SetTurnaroundTime+0x40>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4a3b      	ldr	r2, [pc, #236]	@ (80047dc <USB_SetTurnaroundTime+0x124>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d202      	bcs.n	80046f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046f2:	230e      	movs	r3, #14
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e057      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4a38      	ldr	r2, [pc, #224]	@ (80047dc <USB_SetTurnaroundTime+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d306      	bcc.n	800470e <USB_SetTurnaroundTime+0x56>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4a37      	ldr	r2, [pc, #220]	@ (80047e0 <USB_SetTurnaroundTime+0x128>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d202      	bcs.n	800470e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004708:	230d      	movs	r3, #13
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e04c      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a33      	ldr	r2, [pc, #204]	@ (80047e0 <USB_SetTurnaroundTime+0x128>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d306      	bcc.n	8004724 <USB_SetTurnaroundTime+0x6c>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4a32      	ldr	r2, [pc, #200]	@ (80047e4 <USB_SetTurnaroundTime+0x12c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d802      	bhi.n	8004724 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800471e:	230c      	movs	r3, #12
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e041      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a2f      	ldr	r2, [pc, #188]	@ (80047e4 <USB_SetTurnaroundTime+0x12c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d906      	bls.n	800473a <USB_SetTurnaroundTime+0x82>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a2e      	ldr	r2, [pc, #184]	@ (80047e8 <USB_SetTurnaroundTime+0x130>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d802      	bhi.n	800473a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004734:	230b      	movs	r3, #11
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e036      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4a2a      	ldr	r2, [pc, #168]	@ (80047e8 <USB_SetTurnaroundTime+0x130>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d906      	bls.n	8004750 <USB_SetTurnaroundTime+0x98>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4a29      	ldr	r2, [pc, #164]	@ (80047ec <USB_SetTurnaroundTime+0x134>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d802      	bhi.n	8004750 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800474a:	230a      	movs	r3, #10
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e02b      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a26      	ldr	r2, [pc, #152]	@ (80047ec <USB_SetTurnaroundTime+0x134>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d906      	bls.n	8004766 <USB_SetTurnaroundTime+0xae>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <USB_SetTurnaroundTime+0x138>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d202      	bcs.n	8004766 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004760:	2309      	movs	r3, #9
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e020      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4a21      	ldr	r2, [pc, #132]	@ (80047f0 <USB_SetTurnaroundTime+0x138>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d306      	bcc.n	800477c <USB_SetTurnaroundTime+0xc4>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4a20      	ldr	r2, [pc, #128]	@ (80047f4 <USB_SetTurnaroundTime+0x13c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d802      	bhi.n	800477c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004776:	2308      	movs	r3, #8
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e015      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4a1d      	ldr	r2, [pc, #116]	@ (80047f4 <USB_SetTurnaroundTime+0x13c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d906      	bls.n	8004792 <USB_SetTurnaroundTime+0xda>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <USB_SetTurnaroundTime+0x140>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d202      	bcs.n	8004792 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800478c:	2307      	movs	r3, #7
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e00a      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004792:	2306      	movs	r3, #6
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e007      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800479e:	2309      	movs	r3, #9
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e001      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047a4:	2309      	movs	r3, #9
 80047a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	029b      	lsls	r3, r3, #10
 80047bc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	00d8acbf 	.word	0x00d8acbf
 80047d8:	00e4e1c0 	.word	0x00e4e1c0
 80047dc:	00f42400 	.word	0x00f42400
 80047e0:	01067380 	.word	0x01067380
 80047e4:	011a499f 	.word	0x011a499f
 80047e8:	01312cff 	.word	0x01312cff
 80047ec:	014ca43f 	.word	0x014ca43f
 80047f0:	016e3600 	.word	0x016e3600
 80047f4:	01a6ab1f 	.word	0x01a6ab1f
 80047f8:	01e84800 	.word	0x01e84800

080047fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f043 0201 	orr.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 0201 	bic.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d115      	bne.n	800488e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800486e:	200a      	movs	r0, #10
 8004870:	f7fc ff8c 	bl	800178c <HAL_Delay>
      ms += 10U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	330a      	adds	r3, #10
 8004878:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f001 f93f 	bl	8005afe <USB_GetMode>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d01e      	beq.n	80048c4 <USB_SetCurrentMode+0x84>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2bc7      	cmp	r3, #199	@ 0xc7
 800488a:	d9f0      	bls.n	800486e <USB_SetCurrentMode+0x2e>
 800488c:	e01a      	b.n	80048c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d115      	bne.n	80048c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80048a0:	200a      	movs	r0, #10
 80048a2:	f7fc ff73 	bl	800178c <HAL_Delay>
      ms += 10U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	330a      	adds	r3, #10
 80048aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 f926 	bl	8005afe <USB_GetMode>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <USB_SetCurrentMode+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80048bc:	d9f0      	bls.n	80048a0 <USB_SetCurrentMode+0x60>
 80048be:	e001      	b.n	80048c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e005      	b.n	80048d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80048c8:	d101      	bne.n	80048ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048d8:	b084      	sub	sp, #16
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80048e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e009      	b.n	800490c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3340      	adds	r3, #64	@ 0x40
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	2200      	movs	r2, #0
 8004904:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3301      	adds	r3, #1
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b0e      	cmp	r3, #14
 8004910:	d9f2      	bls.n	80048f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004912:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11c      	bne.n	8004954 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004932:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	639a      	str	r2, [r3, #56]	@ 0x38
 8004952:	e00b      	b.n	800496c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004972:	461a      	mov	r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004978:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10d      	bne.n	800499c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004984:	2b00      	cmp	r3, #0
 8004986:	d104      	bne.n	8004992 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004988:	2100      	movs	r1, #0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f968 	bl	8004c60 <USB_SetDevSpeed>
 8004990:	e008      	b.n	80049a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004992:	2101      	movs	r1, #1
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f963 	bl	8004c60 <USB_SetDevSpeed>
 800499a:	e003      	b.n	80049a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800499c:	2103      	movs	r1, #3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f95e 	bl	8004c60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049a4:	2110      	movs	r1, #16
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f8fa 	bl	8004ba0 <USB_FlushTxFifo>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f924 	bl	8004c04 <USB_FlushRxFifo>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049cc:	461a      	mov	r2, r3
 80049ce:	2300      	movs	r3, #0
 80049d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d8:	461a      	mov	r2, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e4:	461a      	mov	r2, r3
 80049e6:	2300      	movs	r3, #0
 80049e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	e043      	b.n	8004a78 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a06:	d118      	bne.n	8004a3a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e013      	b.n	8004a4c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a30:	461a      	mov	r2, r3
 8004a32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	e008      	b.n	8004a4c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a46:	461a      	mov	r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3301      	adds	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d3b5      	bcc.n	80049f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	e043      	b.n	8004b12 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aa0:	d118      	bne.n	8004ad4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e013      	b.n	8004ae6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aca:	461a      	mov	r2, r3
 8004acc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e008      	b.n	8004ae6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af2:	461a      	mov	r2, r3
 8004af4:	2300      	movs	r3, #0
 8004af6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b04:	461a      	mov	r2, r3
 8004b06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b16:	461a      	mov	r2, r3
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d3b5      	bcc.n	8004a8a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004b3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f043 0210 	orr.w	r2, r3, #16
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	4b10      	ldr	r3, [pc, #64]	@ (8004b9c <USB_DevInit+0x2c4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f043 0208 	orr.w	r2, r3, #8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d107      	bne.n	8004b8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b98:	b004      	add	sp, #16
 8004b9a:	4770      	bx	lr
 8004b9c:	803c3800 	.word	0x803c3800

08004ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bba:	d901      	bls.n	8004bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e01b      	b.n	8004bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	daf2      	bge.n	8004bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	019b      	lsls	r3, r3, #6
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004be4:	d901      	bls.n	8004bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e006      	b.n	8004bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d0f0      	beq.n	8004bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3301      	adds	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c1c:	d901      	bls.n	8004c22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e018      	b.n	8004c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	daf2      	bge.n	8004c10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2210      	movs	r2, #16
 8004c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c40:	d901      	bls.n	8004c46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e006      	b.n	8004c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d0f0      	beq.n	8004c34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b087      	sub	sp, #28
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0306 	and.w	r3, r3, #6
 8004caa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]
 8004cb6:	e00a      	b.n	8004cce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d002      	beq.n	8004cc4 <USB_GetDevSpeed+0x32>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b06      	cmp	r3, #6
 8004cc2:	d102      	bne.n	8004cca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	75fb      	strb	r3, [r7, #23]
 8004cc8:	e001      	b.n	8004cce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cca:	230f      	movs	r3, #15
 8004ccc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d13a      	bne.n	8004d6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	2101      	movs	r1, #1
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	68f9      	ldr	r1, [r7, #12]
 8004d12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d155      	bne.n	8004ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	791b      	ldrb	r3, [r3, #4]
 8004d4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	059b      	lsls	r3, r3, #22
 8004d52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d54:	4313      	orrs	r3, r2
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e036      	b.n	8004ddc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	2101      	movs	r1, #1
 8004d80:	fa01 f303 	lsl.w	r3, r1, r3
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11a      	bne.n	8004ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	791b      	ldrb	r3, [r3, #4]
 8004dc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d161      	bne.n	8004ecc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e1e:	d11f      	bne.n	8004e60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	2101      	movs	r1, #1
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e80:	4013      	ands	r3, r2
 8004e82:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	0159      	lsls	r1, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	440b      	add	r3, r1
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4b35      	ldr	r3, [pc, #212]	@ (8004f9c <USB_DeactivateEndpoint+0x1b0>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]
 8004eca:	e060      	b.n	8004f8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ee2:	d11f      	bne.n	8004f24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004efe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	2101      	movs	r1, #1
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f44:	4013      	ands	r3, r2
 8004f46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	2101      	movs	r1, #1
 8004f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	43db      	mvns	r3, r3
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f68:	4013      	ands	r3, r2
 8004f6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	0159      	lsls	r1, r3, #5
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f86:	4619      	mov	r1, r3
 8004f88:	4b05      	ldr	r3, [pc, #20]	@ (8004fa0 <USB_DeactivateEndpoint+0x1b4>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	ec337800 	.word	0xec337800
 8004fa0:	eff37800 	.word	0xeff37800

08004fa4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	@ 0x28
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	f040 817f 	bne.w	80052c4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d132      	bne.n	8005034 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	0151      	lsls	r1, r2, #5
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	440a      	add	r2, r1
 8004fe4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800500c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800502c:	0cdb      	lsrs	r3, r3, #19
 800502e:	04db      	lsls	r3, r3, #19
 8005030:	6113      	str	r3, [r2, #16]
 8005032:	e097      	b.n	8005164 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800504e:	0cdb      	lsrs	r3, r3, #19
 8005050:	04db      	lsls	r3, r3, #19
 8005052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800506e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005072:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005076:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d11a      	bne.n	80050b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	d903      	bls.n	8005092 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050b0:	6113      	str	r3, [r2, #16]
 80050b2:	e044      	b.n	800513e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	1e5a      	subs	r2, r3, #1
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	8afb      	ldrh	r3, [r7, #22]
 80050da:	04d9      	lsls	r1, r3, #19
 80050dc:	4ba4      	ldr	r3, [pc, #656]	@ (8005370 <USB_EPStartXfer+0x3cc>)
 80050de:	400b      	ands	r3, r1
 80050e0:	69b9      	ldr	r1, [r7, #24]
 80050e2:	0148      	lsls	r0, r1, #5
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	4401      	add	r1, r0
 80050e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80050ec:	4313      	orrs	r3, r2
 80050ee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	791b      	ldrb	r3, [r3, #4]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d122      	bne.n	800513e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005112:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005116:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	8afb      	ldrh	r3, [r7, #22]
 8005128:	075b      	lsls	r3, r3, #29
 800512a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800512e:	69b9      	ldr	r1, [r7, #24]
 8005130:	0148      	lsls	r0, r1, #5
 8005132:	69f9      	ldr	r1, [r7, #28]
 8005134:	4401      	add	r1, r0
 8005136:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800513a:	4313      	orrs	r3, r2
 800513c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	0148      	lsls	r0, r1, #5
 8005158:	69f9      	ldr	r1, [r7, #28]
 800515a:	4401      	add	r1, r0
 800515c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005160:	4313      	orrs	r3, r2
 8005162:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d14b      	bne.n	8005202 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517e:	461a      	mov	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	791b      	ldrb	r3, [r3, #4]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d128      	bne.n	80051e0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d110      	bne.n	80051c0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	e00f      	b.n	80051e0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051de:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	e166      	b.n	80054d0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800521c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005220:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	791b      	ldrb	r3, [r3, #4]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d015      	beq.n	8005256 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 814e 	beq.w	80054d0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	2101      	movs	r1, #1
 8005246:	fa01 f303 	lsl.w	r3, r1, r3
 800524a:	69f9      	ldr	r1, [r7, #28]
 800524c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005250:	4313      	orrs	r3, r2
 8005252:	634b      	str	r3, [r1, #52]	@ 0x34
 8005254:	e13c      	b.n	80054d0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d110      	bne.n	8005288 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005280:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e00f      	b.n	80052a8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	68d9      	ldr	r1, [r3, #12]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	b298      	uxth	r0, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	4603      	mov	r3, r0
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f9b9 	bl	8005634 <USB_WritePacket>
 80052c2:	e105      	b.n	80054d0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052de:	0cdb      	lsrs	r3, r3, #19
 80052e0:	04db      	lsls	r3, r3, #19
 80052e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005302:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005306:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d132      	bne.n	8005374 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	0148      	lsls	r0, r1, #5
 8005340:	69f9      	ldr	r1, [r7, #28]
 8005342:	4401      	add	r1, r0
 8005344:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005348:	4313      	orrs	r3, r2
 800534a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005366:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800536a:	6113      	str	r3, [r2, #16]
 800536c:	e062      	b.n	8005434 <USB_EPStartXfer+0x490>
 800536e:	bf00      	nop
 8005370:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d123      	bne.n	80053c4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005392:	69b9      	ldr	r1, [r7, #24]
 8005394:	0148      	lsls	r0, r1, #5
 8005396:	69f9      	ldr	r1, [r7, #28]
 8005398:	4401      	add	r1, r0
 800539a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800539e:	4313      	orrs	r3, r2
 80053a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053c0:	6113      	str	r3, [r2, #16]
 80053c2:	e037      	b.n	8005434 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4413      	add	r3, r2
 80053ce:	1e5a      	subs	r2, r3, #1
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	8afa      	ldrh	r2, [r7, #22]
 80053e0:	fb03 f202 	mul.w	r2, r3, r2
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	8afb      	ldrh	r3, [r7, #22]
 80053f8:	04d9      	lsls	r1, r3, #19
 80053fa:	4b38      	ldr	r3, [pc, #224]	@ (80054dc <USB_EPStartXfer+0x538>)
 80053fc:	400b      	ands	r3, r1
 80053fe:	69b9      	ldr	r1, [r7, #24]
 8005400:	0148      	lsls	r0, r1, #5
 8005402:	69f9      	ldr	r1, [r7, #28]
 8005404:	4401      	add	r1, r0
 8005406:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800540a:	4313      	orrs	r3, r2
 800540c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005424:	69b9      	ldr	r1, [r7, #24]
 8005426:	0148      	lsls	r0, r1, #5
 8005428:	69f9      	ldr	r1, [r7, #28]
 800542a:	4401      	add	r1, r0
 800542c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005430:	4313      	orrs	r3, r2
 8005432:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d10d      	bne.n	8005456 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	68d9      	ldr	r1, [r3, #12]
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005452:	460a      	mov	r2, r1
 8005454:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	791b      	ldrb	r3, [r3, #4]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d128      	bne.n	80054b0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d110      	bne.n	8005490 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	440a      	add	r2, r1
 8005484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005488:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e00f      	b.n	80054b0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	1ff80000 	.word	0x1ff80000

080054e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d14a      	bne.n	8005594 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005516:	f040 8086 	bne.w	8005626 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	7812      	ldrb	r2, [r2, #0]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005538:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800553c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	7812      	ldrb	r2, [r2, #0]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800555c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005560:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800556e:	4293      	cmp	r3, r2
 8005570:	d902      	bls.n	8005578 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
          break;
 8005576:	e056      	b.n	8005626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800558c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005590:	d0e7      	beq.n	8005562 <USB_EPStopXfer+0x82>
 8005592:	e048      	b.n	8005626 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ac:	d13b      	bne.n	8005626 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005602:	4293      	cmp	r3, r2
 8005604:	d902      	bls.n	800560c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
          break;
 800560a:	e00c      	b.n	8005626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005624:	d0e7      	beq.n	80055f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
}
 8005628:	4618      	mov	r0, r3
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	@ 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4611      	mov	r1, r2
 8005640:	461a      	mov	r2, r3
 8005642:	460b      	mov	r3, r1
 8005644:	71fb      	strb	r3, [r7, #7]
 8005646:	4613      	mov	r3, r2
 8005648:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005652:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	d123      	bne.n	80056a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800565a:	88bb      	ldrh	r3, [r7, #4]
 800565c:	3303      	adds	r3, #3
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005662:	2300      	movs	r3, #0
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	e018      	b.n	800569a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	031a      	lsls	r2, r3, #12
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4413      	add	r3, r2
 8005670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005674:	461a      	mov	r2, r3
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3301      	adds	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3301      	adds	r3, #1
 800568c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3301      	adds	r3, #1
 8005692:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3301      	adds	r3, #1
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d3e2      	bcc.n	8005668 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3724      	adds	r7, #36	@ 0x24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b08b      	sub	sp, #44	@ 0x2c
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	089b      	lsrs	r3, r3, #2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	e014      	b.n	8005706 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	3301      	adds	r3, #1
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	3301      	adds	r3, #1
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	3301      	adds	r3, #1
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	3301      	adds	r3, #1
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	3301      	adds	r3, #1
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	6a3a      	ldr	r2, [r7, #32]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	429a      	cmp	r2, r3
 800570c:	d3e6      	bcc.n	80056dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800570e:	8bfb      	ldrh	r3, [r7, #30]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01e      	beq.n	8005752 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800571e:	461a      	mov	r2, r3
 8005720:	f107 0310 	add.w	r3, r7, #16
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	b2da      	uxtb	r2, r3
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	701a      	strb	r2, [r3, #0]
      i++;
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	3301      	adds	r3, #1
 800573e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	3301      	adds	r3, #1
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005746:	8bfb      	ldrh	r3, [r7, #30]
 8005748:	3b01      	subs	r3, #1
 800574a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800574c:	8bfb      	ldrh	r3, [r7, #30]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1ea      	bne.n	8005728 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005754:	4618      	mov	r0, r3
 8005756:	372c      	adds	r7, #44	@ 0x2c
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d12c      	bne.n	80057d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	db12      	blt.n	80057b4 <USB_EPSetStall+0x54>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00f      	beq.n	80057b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e02b      	b.n	800582e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	db12      	blt.n	800580e <USB_EPSetStall+0xae>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00f      	beq.n	800580e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	440a      	add	r2, r1
 8005804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005808:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800580c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800582c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d128      	bne.n	80058aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005872:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005876:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	791b      	ldrb	r3, [r3, #4]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d003      	beq.n	8005888 <USB_EPClearStall+0x4c>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	791b      	ldrb	r3, [r3, #4]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d138      	bne.n	80058fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	e027      	b.n	80058fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	791b      	ldrb	r3, [r3, #4]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d003      	beq.n	80058da <USB_EPClearStall+0x9e>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	791b      	ldrb	r3, [r3, #4]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d10f      	bne.n	80058fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005926:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800592a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005942:	4313      	orrs	r3, r2
 8005944:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005982:	f023 0302 	bic.w	r3, r3, #2
 8005986:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005996:	b480      	push	{r7}
 8005998:	b085      	sub	sp, #20
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80059b0:	f023 0303 	bic.w	r3, r3, #3
 80059b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059c4:	f043 0302 	orr.w	r3, r3, #2
 80059c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4013      	ands	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059f0:	68fb      	ldr	r3, [r7, #12]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0c1b      	lsrs	r3, r3, #16
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	4013      	ands	r3, r2
 8005a54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	b29b      	uxth	r3, r3
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a94:	68bb      	ldr	r3, [r7, #8]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b087      	sub	sp, #28
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad2:	01db      	lsls	r3, r3, #7
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4013      	ands	r3, r2
 8005aee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005af0:	68bb      	ldr	r3, [r7, #8]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b34:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005b38:	f023 0307 	bic.w	r3, r3, #7
 8005b3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	333c      	adds	r3, #60	@ 0x3c
 8005b76:	3304      	adds	r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4a26      	ldr	r2, [pc, #152]	@ (8005c18 <USB_EP0_OutStart+0xb8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d90a      	bls.n	8005b9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b94:	d101      	bne.n	8005b9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e037      	b.n	8005c0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bc8:	f043 0318 	orr.w	r3, r3, #24
 8005bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bdc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005be0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10f      	bne.n	8005c08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c02:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	4f54300a 	.word	0x4f54300a

08005c1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c34:	d901      	bls.n	8005c3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e022      	b.n	8005c80 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	daf2      	bge.n	8005c28 <USB_CoreReset+0xc>

  count = 10U;
 8005c42:	230a      	movs	r3, #10
 8005c44:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005c46:	e002      	b.n	8005c4e <USB_CoreReset+0x32>
  {
    count--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f9      	bne.n	8005c48 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f043 0201 	orr.w	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c6c:	d901      	bls.n	8005c72 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e006      	b.n	8005c80 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d0f0      	beq.n	8005c60 <USB_CoreReset+0x44>

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c98:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005c9c:	f002 fcb2 	bl	8008604 <USBD_static_malloc>
 8005ca0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	32b0      	adds	r2, #176	@ 0xb0
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e0d4      	b.n	8005e66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005cbc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f003 fa4f 	bl	8009166 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	32b0      	adds	r2, #176	@ 0xb0
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32b0      	adds	r2, #176	@ 0xb0
 8005ce2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7c1b      	ldrb	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d138      	bne.n	8005d66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005cf4:	4b5e      	ldr	r3, [pc, #376]	@ (8005e70 <USBD_CDC_Init+0x1e4>)
 8005cf6:	7819      	ldrb	r1, [r3, #0]
 8005cf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f002 fb5d 	bl	80083be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d04:	4b5a      	ldr	r3, [pc, #360]	@ (8005e70 <USBD_CDC_Init+0x1e4>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f003 020f 	and.w	r2, r3, #15
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	3323      	adds	r3, #35	@ 0x23
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d1e:	4b55      	ldr	r3, [pc, #340]	@ (8005e74 <USBD_CDC_Init+0x1e8>)
 8005d20:	7819      	ldrb	r1, [r3, #0]
 8005d22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d26:	2202      	movs	r2, #2
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f002 fb48 	bl	80083be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d2e:	4b51      	ldr	r3, [pc, #324]	@ (8005e74 <USBD_CDC_Init+0x1e8>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f003 020f 	and.w	r2, r3, #15
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005d46:	2201      	movs	r2, #1
 8005d48:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005e78 <USBD_CDC_Init+0x1ec>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f003 020f 	and.w	r2, r3, #15
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	331c      	adds	r3, #28
 8005d60:	2210      	movs	r2, #16
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e035      	b.n	8005dd2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d66:	4b42      	ldr	r3, [pc, #264]	@ (8005e70 <USBD_CDC_Init+0x1e4>)
 8005d68:	7819      	ldrb	r1, [r3, #0]
 8005d6a:	2340      	movs	r3, #64	@ 0x40
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f002 fb25 	bl	80083be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d74:	4b3e      	ldr	r3, [pc, #248]	@ (8005e70 <USBD_CDC_Init+0x1e4>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	3323      	adds	r3, #35	@ 0x23
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d8e:	4b39      	ldr	r3, [pc, #228]	@ (8005e74 <USBD_CDC_Init+0x1e8>)
 8005d90:	7819      	ldrb	r1, [r3, #0]
 8005d92:	2340      	movs	r3, #64	@ 0x40
 8005d94:	2202      	movs	r2, #2
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f002 fb11 	bl	80083be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d9c:	4b35      	ldr	r3, [pc, #212]	@ (8005e74 <USBD_CDC_Init+0x1e8>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f003 020f 	and.w	r2, r3, #15
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005db8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e78 <USBD_CDC_Init+0x1ec>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f003 020f 	and.w	r2, r3, #15
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	331c      	adds	r3, #28
 8005dce:	2210      	movs	r2, #16
 8005dd0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dd2:	4b29      	ldr	r3, [pc, #164]	@ (8005e78 <USBD_CDC_Init+0x1ec>)
 8005dd4:	7819      	ldrb	r1, [r3, #0]
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	2203      	movs	r2, #3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f002 faef 	bl	80083be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005de0:	4b25      	ldr	r3, [pc, #148]	@ (8005e78 <USBD_CDC_Init+0x1ec>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	f003 020f 	and.w	r2, r3, #15
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	3323      	adds	r3, #35	@ 0x23
 8005df6:	2201      	movs	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	33b0      	adds	r3, #176	@ 0xb0
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e018      	b.n	8005e66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	7c1b      	ldrb	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <USBD_CDC_Init+0x1e8>)
 8005e3e:	7819      	ldrb	r1, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f002 fba6 	bl	800859c <USBD_LL_PrepareReceive>
 8005e50:	e008      	b.n	8005e64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e52:	4b08      	ldr	r3, [pc, #32]	@ (8005e74 <USBD_CDC_Init+0x1e8>)
 8005e54:	7819      	ldrb	r1, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e5c:	2340      	movs	r3, #64	@ 0x40
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f002 fb9c 	bl	800859c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000093 	.word	0x20000093
 8005e74:	20000094 	.word	0x20000094
 8005e78:	20000095 	.word	0x20000095

08005e7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e88:	4b3a      	ldr	r3, [pc, #232]	@ (8005f74 <USBD_CDC_DeInit+0xf8>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f002 fabb 	bl	800840a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e94:	4b37      	ldr	r3, [pc, #220]	@ (8005f74 <USBD_CDC_DeInit+0xf8>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f003 020f 	and.w	r2, r3, #15
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	3323      	adds	r3, #35	@ 0x23
 8005eaa:	2200      	movs	r2, #0
 8005eac:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005eae:	4b32      	ldr	r3, [pc, #200]	@ (8005f78 <USBD_CDC_DeInit+0xfc>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f002 faa8 	bl	800840a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005eba:	4b2f      	ldr	r3, [pc, #188]	@ (8005f78 <USBD_CDC_DeInit+0xfc>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ed6:	4b29      	ldr	r3, [pc, #164]	@ (8005f7c <USBD_CDC_DeInit+0x100>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f002 fa94 	bl	800840a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ee2:	4b26      	ldr	r3, [pc, #152]	@ (8005f7c <USBD_CDC_DeInit+0x100>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	f003 020f 	and.w	r2, r3, #15
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3323      	adds	r3, #35	@ 0x23
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005efc:	4b1f      	ldr	r3, [pc, #124]	@ (8005f7c <USBD_CDC_DeInit+0x100>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 020f 	and.w	r2, r3, #15
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	331c      	adds	r3, #28
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	32b0      	adds	r2, #176	@ 0xb0
 8005f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01f      	beq.n	8005f68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	33b0      	adds	r3, #176	@ 0xb0
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	32b0      	adds	r2, #176	@ 0xb0
 8005f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f002 fb68 	bl	8008620 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	32b0      	adds	r2, #176	@ 0xb0
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000093 	.word	0x20000093
 8005f78:	20000094 	.word	0x20000094
 8005f7c:	20000095 	.word	0x20000095

08005f80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	32b0      	adds	r2, #176	@ 0xb0
 8005f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e0bf      	b.n	8006130 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d050      	beq.n	800605e <USBD_CDC_Setup+0xde>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	f040 80af 	bne.w	8006120 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	88db      	ldrh	r3, [r3, #6]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d03a      	beq.n	8006040 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da1b      	bge.n	800600c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	33b0      	adds	r3, #176	@ 0xb0
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005fea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	88d2      	ldrh	r2, [r2, #6]
 8005ff0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	88db      	ldrh	r3, [r3, #6]
 8005ff6:	2b07      	cmp	r3, #7
 8005ff8:	bf28      	it	cs
 8005ffa:	2307      	movcs	r3, #7
 8005ffc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	89fa      	ldrh	r2, [r7, #14]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fda9 	bl	8007b5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800600a:	e090      	b.n	800612e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	785a      	ldrb	r2, [r3, #1]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	88db      	ldrh	r3, [r3, #6]
 800601a:	2b3f      	cmp	r3, #63	@ 0x3f
 800601c:	d803      	bhi.n	8006026 <USBD_CDC_Setup+0xa6>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	88db      	ldrh	r3, [r3, #6]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	e000      	b.n	8006028 <USBD_CDC_Setup+0xa8>
 8006026:	2240      	movs	r2, #64	@ 0x40
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800602e:	6939      	ldr	r1, [r7, #16]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006036:	461a      	mov	r2, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 fdbe 	bl	8007bba <USBD_CtlPrepareRx>
      break;
 800603e:	e076      	b.n	800612e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	33b0      	adds	r3, #176	@ 0xb0
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	7850      	ldrb	r0, [r2, #1]
 8006056:	2200      	movs	r2, #0
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	4798      	blx	r3
      break;
 800605c:	e067      	b.n	800612e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	2b0b      	cmp	r3, #11
 8006064:	d851      	bhi.n	800610a <USBD_CDC_Setup+0x18a>
 8006066:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <USBD_CDC_Setup+0xec>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	0800609d 	.word	0x0800609d
 8006070:	08006119 	.word	0x08006119
 8006074:	0800610b 	.word	0x0800610b
 8006078:	0800610b 	.word	0x0800610b
 800607c:	0800610b 	.word	0x0800610b
 8006080:	0800610b 	.word	0x0800610b
 8006084:	0800610b 	.word	0x0800610b
 8006088:	0800610b 	.word	0x0800610b
 800608c:	0800610b 	.word	0x0800610b
 8006090:	0800610b 	.word	0x0800610b
 8006094:	080060c7 	.word	0x080060c7
 8006098:	080060f1 	.word	0x080060f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d107      	bne.n	80060b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060a8:	f107 030a 	add.w	r3, r7, #10
 80060ac:	2202      	movs	r2, #2
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 fd53 	bl	8007b5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060b6:	e032      	b.n	800611e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fcd1 	bl	8007a62 <USBD_CtlError>
            ret = USBD_FAIL;
 80060c0:	2303      	movs	r3, #3
 80060c2:	75fb      	strb	r3, [r7, #23]
          break;
 80060c4:	e02b      	b.n	800611e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d107      	bne.n	80060e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060d2:	f107 030d 	add.w	r3, r7, #13
 80060d6:	2201      	movs	r2, #1
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 fd3e 	bl	8007b5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060e0:	e01d      	b.n	800611e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fcbc 	bl	8007a62 <USBD_CtlError>
            ret = USBD_FAIL;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
          break;
 80060ee:	e016      	b.n	800611e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d00f      	beq.n	800611c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fcaf 	bl	8007a62 <USBD_CtlError>
            ret = USBD_FAIL;
 8006104:	2303      	movs	r3, #3
 8006106:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006108:	e008      	b.n	800611c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 fca8 	bl	8007a62 <USBD_CtlError>
          ret = USBD_FAIL;
 8006112:	2303      	movs	r3, #3
 8006114:	75fb      	strb	r3, [r7, #23]
          break;
 8006116:	e002      	b.n	800611e <USBD_CDC_Setup+0x19e>
          break;
 8006118:	bf00      	nop
 800611a:	e008      	b.n	800612e <USBD_CDC_Setup+0x1ae>
          break;
 800611c:	bf00      	nop
      }
      break;
 800611e:	e006      	b.n	800612e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fc9d 	bl	8007a62 <USBD_CtlError>
      ret = USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	75fb      	strb	r3, [r7, #23]
      break;
 800612c:	bf00      	nop
  }

  return (uint8_t)ret;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800614a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32b0      	adds	r2, #176	@ 0xb0
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800615e:	2303      	movs	r3, #3
 8006160:	e065      	b.n	800622e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	32b0      	adds	r2, #176	@ 0xb0
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	3314      	adds	r3, #20
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d02f      	beq.n	80061ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 020f 	and.w	r2, r3, #15
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	3314      	adds	r3, #20
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 010f 	and.w	r1, r3, #15
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	460b      	mov	r3, r1
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	440b      	add	r3, r1
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4403      	add	r3, r0
 80061b4:	331c      	adds	r3, #28
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d112      	bne.n	80061ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3314      	adds	r3, #20
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061de:	78f9      	ldrb	r1, [r7, #3]
 80061e0:	2300      	movs	r3, #0
 80061e2:	2200      	movs	r2, #0
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f002 f9b8 	bl	800855a <USBD_LL_Transmit>
 80061ea:	e01f      	b.n	800622c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	33b0      	adds	r3, #176	@ 0xb0
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d010      	beq.n	800622c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	33b0      	adds	r3, #176	@ 0xb0
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	32b0      	adds	r2, #176	@ 0xb0
 800624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006250:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	32b0      	adds	r2, #176	@ 0xb0
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006264:	2303      	movs	r3, #3
 8006266:	e01a      	b.n	800629e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f002 f9b6 	bl	80085de <USBD_LL_GetRxDataSize>
 8006272:	4602      	mov	r2, r0
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	33b0      	adds	r3, #176	@ 0xb0
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006298:	4611      	mov	r1, r2
 800629a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	32b0      	adds	r2, #176	@ 0xb0
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e024      	b.n	8006312 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	33b0      	adds	r3, #176	@ 0xb0
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d019      	beq.n	8006310 <USBD_CDC_EP0_RxReady+0x6a>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80062e2:	2bff      	cmp	r3, #255	@ 0xff
 80062e4:	d014      	beq.n	8006310 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	33b0      	adds	r3, #176	@ 0xb0
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80062fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006306:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	22ff      	movs	r2, #255	@ 0xff
 800630c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006324:	2182      	movs	r1, #130	@ 0x82
 8006326:	4818      	ldr	r0, [pc, #96]	@ (8006388 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006328:	f000 fd62 	bl	8006df0 <USBD_GetEpDesc>
 800632c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800632e:	2101      	movs	r1, #1
 8006330:	4815      	ldr	r0, [pc, #84]	@ (8006388 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006332:	f000 fd5d 	bl	8006df0 <USBD_GetEpDesc>
 8006336:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006338:	2181      	movs	r1, #129	@ 0x81
 800633a:	4813      	ldr	r0, [pc, #76]	@ (8006388 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800633c:	f000 fd58 	bl	8006df0 <USBD_GetEpDesc>
 8006340:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2210      	movs	r2, #16
 800634c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d006      	beq.n	8006362 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2200      	movs	r2, #0
 8006358:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800635c:	711a      	strb	r2, [r3, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d006      	beq.n	8006376 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006370:	711a      	strb	r2, [r3, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2243      	movs	r2, #67	@ 0x43
 800637a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800637c:	4b02      	ldr	r3, [pc, #8]	@ (8006388 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000050 	.word	0x20000050

0800638c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006394:	2182      	movs	r1, #130	@ 0x82
 8006396:	4818      	ldr	r0, [pc, #96]	@ (80063f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006398:	f000 fd2a 	bl	8006df0 <USBD_GetEpDesc>
 800639c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800639e:	2101      	movs	r1, #1
 80063a0:	4815      	ldr	r0, [pc, #84]	@ (80063f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063a2:	f000 fd25 	bl	8006df0 <USBD_GetEpDesc>
 80063a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063a8:	2181      	movs	r1, #129	@ 0x81
 80063aa:	4813      	ldr	r0, [pc, #76]	@ (80063f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063ac:	f000 fd20 	bl	8006df0 <USBD_GetEpDesc>
 80063b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2210      	movs	r2, #16
 80063bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d006      	beq.n	80063d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2200      	movs	r2, #0
 80063c8:	711a      	strb	r2, [r3, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f042 0202 	orr.w	r2, r2, #2
 80063d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	711a      	strb	r2, [r3, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f042 0202 	orr.w	r2, r2, #2
 80063e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2243      	movs	r2, #67	@ 0x43
 80063ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063ec:	4b02      	ldr	r3, [pc, #8]	@ (80063f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000050 	.word	0x20000050

080063fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006404:	2182      	movs	r1, #130	@ 0x82
 8006406:	4818      	ldr	r0, [pc, #96]	@ (8006468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006408:	f000 fcf2 	bl	8006df0 <USBD_GetEpDesc>
 800640c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800640e:	2101      	movs	r1, #1
 8006410:	4815      	ldr	r0, [pc, #84]	@ (8006468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006412:	f000 fced 	bl	8006df0 <USBD_GetEpDesc>
 8006416:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006418:	2181      	movs	r1, #129	@ 0x81
 800641a:	4813      	ldr	r0, [pc, #76]	@ (8006468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800641c:	f000 fce8 	bl	8006df0 <USBD_GetEpDesc>
 8006420:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2210      	movs	r2, #16
 800642c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d006      	beq.n	8006442 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2200      	movs	r2, #0
 8006438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800643c:	711a      	strb	r2, [r3, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d006      	beq.n	8006456 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006450:	711a      	strb	r2, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2243      	movs	r2, #67	@ 0x43
 800645a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800645c:	4b02      	ldr	r3, [pc, #8]	@ (8006468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000050 	.word	0x20000050

0800646c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	220a      	movs	r2, #10
 8006478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800647a:	4b03      	ldr	r3, [pc, #12]	@ (8006488 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	2000000c 	.word	0x2000000c

0800648c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800649c:	2303      	movs	r3, #3
 800649e:	e009      	b.n	80064b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	33b0      	adds	r3, #176	@ 0xb0
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	32b0      	adds	r2, #176	@ 0xb0
 80064d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e008      	b.n	80064f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	32b0      	adds	r2, #176	@ 0xb0
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006524:	2303      	movs	r3, #3
 8006526:	e004      	b.n	8006532 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	32b0      	adds	r2, #176	@ 0xb0
 8006552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006556:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006562:	2303      	movs	r3, #3
 8006564:	e025      	b.n	80065b2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800656c:	2b00      	cmp	r3, #0
 800656e:	d11f      	bne.n	80065b0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2201      	movs	r2, #1
 8006574:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006578:	4b10      	ldr	r3, [pc, #64]	@ (80065bc <USBD_CDC_TransmitPacket+0x7c>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f003 020f 	and.w	r2, r3, #15
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4403      	add	r3, r0
 8006592:	3314      	adds	r3, #20
 8006594:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006596:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <USBD_CDC_TransmitPacket+0x7c>)
 8006598:	7819      	ldrb	r1, [r3, #0]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 ffd7 	bl	800855a <USBD_LL_Transmit>

    ret = USBD_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000093 	.word	0x20000093

080065c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	32b0      	adds	r2, #176	@ 0xb0
 80065d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	32b0      	adds	r2, #176	@ 0xb0
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e018      	b.n	8006620 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	7c1b      	ldrb	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <USBD_CDC_ReceivePacket+0x68>)
 80065f8:	7819      	ldrb	r1, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006600:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 ffc9 	bl	800859c <USBD_LL_PrepareReceive>
 800660a:	e008      	b.n	800661e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800660c:	4b06      	ldr	r3, [pc, #24]	@ (8006628 <USBD_CDC_ReceivePacket+0x68>)
 800660e:	7819      	ldrb	r1, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006616:	2340      	movs	r3, #64	@ 0x40
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 ffbf 	bl	800859c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20000094 	.word	0x20000094

0800662c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	4613      	mov	r3, r2
 8006638:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006640:	2303      	movs	r3, #3
 8006642:	e01f      	b.n	8006684 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	79fa      	ldrb	r2, [r7, #7]
 8006676:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f001 fe39 	bl	80082f0 <USBD_LL_Init>
 800667e:	4603      	mov	r3, r0
 8006680:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e025      	b.n	80066f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	32ae      	adds	r2, #174	@ 0xae
 80066b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00f      	beq.n	80066e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	32ae      	adds	r2, #174	@ 0xae
 80066ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d0:	f107 020e 	add.w	r2, r7, #14
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	4602      	mov	r2, r0
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fe41 	bl	8008388 <USBD_LL_Start>
 8006706:	4603      	mov	r3, r0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	4611      	mov	r1, r2
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	4611      	mov	r1, r2
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006784:	2303      	movs	r3, #3
 8006786:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 f922 	bl	80079ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d01a      	beq.n	8006804 <USBD_LL_SetupStage+0x72>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d822      	bhi.n	8006818 <USBD_LL_SetupStage+0x86>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <USBD_LL_SetupStage+0x4a>
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d00a      	beq.n	80067f0 <USBD_LL_SetupStage+0x5e>
 80067da:	e01d      	b.n	8006818 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fb77 	bl	8006ed8 <USBD_StdDevReq>
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]
      break;
 80067ee:	e020      	b.n	8006832 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fbdf 	bl	8006fbc <USBD_StdItfReq>
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
      break;
 8006802:	e016      	b.n	8006832 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fc41 	bl	8007094 <USBD_StdEPReq>
 8006812:	4603      	mov	r3, r0
 8006814:	73fb      	strb	r3, [r7, #15]
      break;
 8006816:	e00c      	b.n	8006832 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800681e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006822:	b2db      	uxtb	r3, r3
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fe0e 	bl	8008448 <USBD_LL_StallEP>
 800682c:	4603      	mov	r3, r0
 800682e:	73fb      	strb	r3, [r7, #15]
      break;
 8006830:	bf00      	nop
  }

  return ret;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	460b      	mov	r3, r1
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d177      	bne.n	8006944 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800685a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006862:	2b03      	cmp	r3, #3
 8006864:	f040 80a1 	bne.w	80069aa <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	8992      	ldrh	r2, [r2, #12]
 8006870:	4293      	cmp	r3, r2
 8006872:	d91c      	bls.n	80068ae <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	8992      	ldrh	r2, [r2, #12]
 800687c:	1a9a      	subs	r2, r3, r2
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	8992      	ldrh	r2, [r2, #12]
 800688a:	441a      	add	r2, r3
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	6919      	ldr	r1, [r3, #16]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	899b      	ldrh	r3, [r3, #12]
 8006898:	461a      	mov	r2, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	4293      	cmp	r3, r2
 80068a0:	bf38      	it	cc
 80068a2:	4613      	movcc	r3, r2
 80068a4:	461a      	mov	r2, r3
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f001 f9a8 	bl	8007bfc <USBD_CtlContinueRx>
 80068ac:	e07d      	b.n	80069aa <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d014      	beq.n	80068e6 <USBD_LL_DataOutStage+0xaa>
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d81d      	bhi.n	80068fc <USBD_LL_DataOutStage+0xc0>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <USBD_LL_DataOutStage+0x8e>
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d003      	beq.n	80068d0 <USBD_LL_DataOutStage+0x94>
 80068c8:	e018      	b.n	80068fc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75bb      	strb	r3, [r7, #22]
            break;
 80068ce:	e018      	b.n	8006902 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	4619      	mov	r1, r3
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 fa6e 	bl	8006dbc <USBD_CoreFindIF>
 80068e0:	4603      	mov	r3, r0
 80068e2:	75bb      	strb	r3, [r7, #22]
            break;
 80068e4:	e00d      	b.n	8006902 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	4619      	mov	r1, r3
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fa70 	bl	8006dd6 <USBD_CoreFindEP>
 80068f6:	4603      	mov	r3, r0
 80068f8:	75bb      	strb	r3, [r7, #22]
            break;
 80068fa:	e002      	b.n	8006902 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006900:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006902:	7dbb      	ldrb	r3, [r7, #22]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d119      	bne.n	800693c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b03      	cmp	r3, #3
 8006912:	d113      	bne.n	800693c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006914:	7dba      	ldrb	r2, [r7, #22]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	32ae      	adds	r2, #174	@ 0xae
 800691a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006924:	7dba      	ldrb	r2, [r7, #22]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800692c:	7dba      	ldrb	r2, [r7, #22]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	32ae      	adds	r2, #174	@ 0xae
 8006932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f001 f96e 	bl	8007c1e <USBD_CtlSendStatus>
 8006942:	e032      	b.n	80069aa <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006944:	7afb      	ldrb	r3, [r7, #11]
 8006946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800694a:	b2db      	uxtb	r3, r3
 800694c:	4619      	mov	r1, r3
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fa41 	bl	8006dd6 <USBD_CoreFindEP>
 8006954:	4603      	mov	r3, r0
 8006956:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006958:	7dbb      	ldrb	r3, [r7, #22]
 800695a:	2bff      	cmp	r3, #255	@ 0xff
 800695c:	d025      	beq.n	80069aa <USBD_LL_DataOutStage+0x16e>
 800695e:	7dbb      	ldrb	r3, [r7, #22]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d122      	bne.n	80069aa <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b03      	cmp	r3, #3
 800696e:	d117      	bne.n	80069a0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006970:	7dba      	ldrb	r2, [r7, #22]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	32ae      	adds	r2, #174	@ 0xae
 8006976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00f      	beq.n	80069a0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006980:	7dba      	ldrb	r2, [r7, #22]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006988:	7dba      	ldrb	r2, [r7, #22]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	32ae      	adds	r2, #174	@ 0xae
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	7afa      	ldrb	r2, [r7, #11]
 8006996:	4611      	mov	r1, r2
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	4798      	blx	r3
 800699c:	4603      	mov	r3, r0
 800699e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	e000      	b.n	80069ac <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	460b      	mov	r3, r1
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d178      	bne.n	8006aba <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3314      	adds	r3, #20
 80069cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d163      	bne.n	8006aa0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	8992      	ldrh	r2, [r2, #12]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d91c      	bls.n	8006a1e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	8992      	ldrh	r2, [r2, #12]
 80069ec:	1a9a      	subs	r2, r3, r2
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	8992      	ldrh	r2, [r2, #12]
 80069fa:	441a      	add	r2, r3
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	6919      	ldr	r1, [r3, #16]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f001 f8c4 	bl	8007b98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a10:	2300      	movs	r3, #0
 8006a12:	2200      	movs	r2, #0
 8006a14:	2100      	movs	r1, #0
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f001 fdc0 	bl	800859c <USBD_LL_PrepareReceive>
 8006a1c:	e040      	b.n	8006aa0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	899b      	ldrh	r3, [r3, #12]
 8006a22:	461a      	mov	r2, r3
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d11c      	bne.n	8006a66 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d316      	bcc.n	8006a66 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d20f      	bcs.n	8006a66 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a46:	2200      	movs	r2, #0
 8006a48:	2100      	movs	r1, #0
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f001 f8a4 	bl	8007b98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f001 fd9c 	bl	800859c <USBD_LL_PrepareReceive>
 8006a64:	e01c      	b.n	8006aa0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d10f      	bne.n	8006a92 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a92:	2180      	movs	r1, #128	@ 0x80
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f001 fcd7 	bl	8008448 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f001 f8d2 	bl	8007c44 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d03a      	beq.n	8006b20 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f7ff fe30 	bl	8006710 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ab8:	e032      	b.n	8006b20 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f986 	bl	8006dd6 <USBD_CoreFindEP>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2bff      	cmp	r3, #255	@ 0xff
 8006ad2:	d025      	beq.n	8006b20 <USBD_LL_DataInStage+0x16c>
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d122      	bne.n	8006b20 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d11c      	bne.n	8006b20 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ae6:	7dfa      	ldrb	r2, [r7, #23]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	32ae      	adds	r2, #174	@ 0xae
 8006aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d014      	beq.n	8006b20 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006af6:	7dfa      	ldrb	r2, [r7, #23]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006afe:	7dfa      	ldrb	r2, [r7, #23]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	32ae      	adds	r2, #174	@ 0xae
 8006b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	7afa      	ldrb	r2, [r7, #11]
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	4798      	blx	r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b16:	7dbb      	ldrb	r3, [r7, #22]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006b1c:	7dbb      	ldrb	r3, [r7, #22]
 8006b1e:	e000      	b.n	8006b22 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d014      	beq.n	8006b90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00e      	beq.n	8006b90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6852      	ldr	r2, [r2, #4]
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	4611      	mov	r1, r2
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b90:	2340      	movs	r3, #64	@ 0x40
 8006b92:	2200      	movs	r2, #0
 8006b94:	2100      	movs	r1, #0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fc11 	bl	80083be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2240      	movs	r2, #64	@ 0x40
 8006ba8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bac:	2340      	movs	r3, #64	@ 0x40
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2180      	movs	r1, #128	@ 0x80
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fc03 	bl	80083be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2240      	movs	r2, #64	@ 0x40
 8006bc4:	841a      	strh	r2, [r3, #32]

  return ret;
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d006      	beq.n	8006c12 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2204      	movs	r2, #4
 8006c16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d106      	bne.n	8006c4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d110      	bne.n	8006c8e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	32ae      	adds	r2, #174	@ 0xae
 8006cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e01c      	b.n	8006cf4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d115      	bne.n	8006cf2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	32ae      	adds	r2, #174	@ 0xae
 8006cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00b      	beq.n	8006cf2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	32ae      	adds	r2, #174	@ 0xae
 8006ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	78fa      	ldrb	r2, [r7, #3]
 8006cec:	4611      	mov	r1, r2
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	32ae      	adds	r2, #174	@ 0xae
 8006d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e01c      	b.n	8006d58 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d115      	bne.n	8006d56 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	32ae      	adds	r2, #174	@ 0xae
 8006d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	32ae      	adds	r2, #174	@ 0xae
 8006d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	4611      	mov	r1, r2
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6852      	ldr	r2, [r2, #4]
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	4611      	mov	r1, r2
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006dae:	2303      	movs	r3, #3
 8006db0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006dc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006de2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	885b      	ldrh	r3, [r3, #2]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	7812      	ldrb	r2, [r2, #0]
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d91f      	bls.n	8006e56 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e1c:	e013      	b.n	8006e46 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e1e:	f107 030a 	add.w	r3, r7, #10
 8006e22:	4619      	mov	r1, r3
 8006e24:	6978      	ldr	r0, [r7, #20]
 8006e26:	f000 f81b 	bl	8006e60 <USBD_GetNextDesc>
 8006e2a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	d108      	bne.n	8006e46 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	789b      	ldrb	r3, [r3, #2]
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d008      	beq.n	8006e54 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	885b      	ldrh	r3, [r3, #2]
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	897b      	ldrh	r3, [r7, #10]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d8e5      	bhi.n	8006e1e <USBD_GetEpDesc+0x2e>
 8006e52:	e000      	b.n	8006e56 <USBD_GetEpDesc+0x66>
          break;
 8006e54:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e56:	693b      	ldr	r3, [r7, #16]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	7812      	ldrb	r2, [r2, #0]
 8006e76:	4413      	add	r3, r2
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4413      	add	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	3301      	adds	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006eb6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	b21a      	sxth	r2, r3
 8006ebe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b21b      	sxth	r3, r3
 8006ec6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ec8:	89fb      	ldrh	r3, [r7, #14]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
	...

08006ed8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006eee:	2b40      	cmp	r3, #64	@ 0x40
 8006ef0:	d005      	beq.n	8006efe <USBD_StdDevReq+0x26>
 8006ef2:	2b40      	cmp	r3, #64	@ 0x40
 8006ef4:	d857      	bhi.n	8006fa6 <USBD_StdDevReq+0xce>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00f      	beq.n	8006f1a <USBD_StdDevReq+0x42>
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	d153      	bne.n	8006fa6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	32ae      	adds	r2, #174	@ 0xae
 8006f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
      break;
 8006f18:	e04a      	b.n	8006fb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	d83b      	bhi.n	8006f9a <USBD_StdDevReq+0xc2>
 8006f22:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <USBD_StdDevReq+0x50>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f7d 	.word	0x08006f7d
 8006f2c:	08006f91 	.word	0x08006f91
 8006f30:	08006f9b 	.word	0x08006f9b
 8006f34:	08006f87 	.word	0x08006f87
 8006f38:	08006f9b 	.word	0x08006f9b
 8006f3c:	08006f5b 	.word	0x08006f5b
 8006f40:	08006f51 	.word	0x08006f51
 8006f44:	08006f9b 	.word	0x08006f9b
 8006f48:	08006f73 	.word	0x08006f73
 8006f4c:	08006f65 	.word	0x08006f65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa3e 	bl	80073d4 <USBD_GetDescriptor>
          break;
 8006f58:	e024      	b.n	8006fa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fba3 	bl	80076a8 <USBD_SetAddress>
          break;
 8006f62:	e01f      	b.n	8006fa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fbe2 	bl	8007730 <USBD_SetConfig>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
          break;
 8006f70:	e018      	b.n	8006fa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fc85 	bl	8007884 <USBD_GetConfig>
          break;
 8006f7a:	e013      	b.n	8006fa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fcb6 	bl	80078f0 <USBD_GetStatus>
          break;
 8006f84:	e00e      	b.n	8006fa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fce5 	bl	8007958 <USBD_SetFeature>
          break;
 8006f8e:	e009      	b.n	8006fa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fd09 	bl	80079aa <USBD_ClrFeature>
          break;
 8006f98:	e004      	b.n	8006fa4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fd60 	bl	8007a62 <USBD_CtlError>
          break;
 8006fa2:	bf00      	nop
      }
      break;
 8006fa4:	e004      	b.n	8006fb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fd5a 	bl	8007a62 <USBD_CtlError>
      break;
 8006fae:	bf00      	nop
  }

  return ret;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop

08006fbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fd2:	2b40      	cmp	r3, #64	@ 0x40
 8006fd4:	d005      	beq.n	8006fe2 <USBD_StdItfReq+0x26>
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d852      	bhi.n	8007080 <USBD_StdItfReq+0xc4>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <USBD_StdItfReq+0x26>
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d14e      	bne.n	8007080 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d840      	bhi.n	8007072 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	889b      	ldrh	r3, [r3, #4]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d836      	bhi.n	8007068 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	889b      	ldrh	r3, [r3, #4]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff feda 	bl	8006dbc <USBD_CoreFindIF>
 8007008:	4603      	mov	r3, r0
 800700a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2bff      	cmp	r3, #255	@ 0xff
 8007010:	d01d      	beq.n	800704e <USBD_StdItfReq+0x92>
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d11a      	bne.n	800704e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007018:	7bba      	ldrb	r2, [r7, #14]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	32ae      	adds	r2, #174	@ 0xae
 800701e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00f      	beq.n	8007048 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007028:	7bba      	ldrb	r2, [r7, #14]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007030:	7bba      	ldrb	r2, [r7, #14]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32ae      	adds	r2, #174	@ 0xae
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
 8007042:	4603      	mov	r3, r0
 8007044:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007046:	e004      	b.n	8007052 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007048:	2303      	movs	r3, #3
 800704a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800704c:	e001      	b.n	8007052 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800704e:	2303      	movs	r3, #3
 8007050:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	88db      	ldrh	r3, [r3, #6]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d110      	bne.n	800707c <USBD_StdItfReq+0xc0>
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10d      	bne.n	800707c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fddc 	bl	8007c1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007066:	e009      	b.n	800707c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fcf9 	bl	8007a62 <USBD_CtlError>
          break;
 8007070:	e004      	b.n	800707c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fcf4 	bl	8007a62 <USBD_CtlError>
          break;
 800707a:	e000      	b.n	800707e <USBD_StdItfReq+0xc2>
          break;
 800707c:	bf00      	nop
      }
      break;
 800707e:	e004      	b.n	800708a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fced 	bl	8007a62 <USBD_CtlError>
      break;
 8007088:	bf00      	nop
  }

  return ret;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	889b      	ldrh	r3, [r3, #4]
 80070a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070b0:	2b40      	cmp	r3, #64	@ 0x40
 80070b2:	d007      	beq.n	80070c4 <USBD_StdEPReq+0x30>
 80070b4:	2b40      	cmp	r3, #64	@ 0x40
 80070b6:	f200 8181 	bhi.w	80073bc <USBD_StdEPReq+0x328>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d02a      	beq.n	8007114 <USBD_StdEPReq+0x80>
 80070be:	2b20      	cmp	r3, #32
 80070c0:	f040 817c 	bne.w	80073bc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff fe84 	bl	8006dd6 <USBD_CoreFindEP>
 80070ce:	4603      	mov	r3, r0
 80070d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070d2:	7b7b      	ldrb	r3, [r7, #13]
 80070d4:	2bff      	cmp	r3, #255	@ 0xff
 80070d6:	f000 8176 	beq.w	80073c6 <USBD_StdEPReq+0x332>
 80070da:	7b7b      	ldrb	r3, [r7, #13]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8172 	bne.w	80073c6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80070e2:	7b7a      	ldrb	r2, [r7, #13]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80070ea:	7b7a      	ldrb	r2, [r7, #13]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	32ae      	adds	r2, #174	@ 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8165 	beq.w	80073c6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80070fc:	7b7a      	ldrb	r2, [r7, #13]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32ae      	adds	r2, #174	@ 0xae
 8007102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007112:	e158      	b.n	80073c6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	785b      	ldrb	r3, [r3, #1]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d008      	beq.n	800712e <USBD_StdEPReq+0x9a>
 800711c:	2b03      	cmp	r3, #3
 800711e:	f300 8147 	bgt.w	80073b0 <USBD_StdEPReq+0x31c>
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 809b 	beq.w	800725e <USBD_StdEPReq+0x1ca>
 8007128:	2b01      	cmp	r3, #1
 800712a:	d03c      	beq.n	80071a6 <USBD_StdEPReq+0x112>
 800712c:	e140      	b.n	80073b0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d002      	beq.n	8007140 <USBD_StdEPReq+0xac>
 800713a:	2b03      	cmp	r3, #3
 800713c:	d016      	beq.n	800716c <USBD_StdEPReq+0xd8>
 800713e:	e02c      	b.n	800719a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00d      	beq.n	8007162 <USBD_StdEPReq+0xce>
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	2b80      	cmp	r3, #128	@ 0x80
 800714a:	d00a      	beq.n	8007162 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f979 	bl	8008448 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007156:	2180      	movs	r1, #128	@ 0x80
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 f975 	bl	8008448 <USBD_LL_StallEP>
 800715e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007160:	e020      	b.n	80071a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fc7c 	bl	8007a62 <USBD_CtlError>
              break;
 800716a:	e01b      	b.n	80071a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	885b      	ldrh	r3, [r3, #2]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10e      	bne.n	8007192 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <USBD_StdEPReq+0xfe>
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	2b80      	cmp	r3, #128	@ 0x80
 800717e:	d008      	beq.n	8007192 <USBD_StdEPReq+0xfe>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	88db      	ldrh	r3, [r3, #6]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d104      	bne.n	8007192 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 f95b 	bl	8008448 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fd43 	bl	8007c1e <USBD_CtlSendStatus>

              break;
 8007198:	e004      	b.n	80071a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fc60 	bl	8007a62 <USBD_CtlError>
              break;
 80071a2:	bf00      	nop
          }
          break;
 80071a4:	e109      	b.n	80073ba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d002      	beq.n	80071b8 <USBD_StdEPReq+0x124>
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d016      	beq.n	80071e4 <USBD_StdEPReq+0x150>
 80071b6:	e04b      	b.n	8007250 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <USBD_StdEPReq+0x146>
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b80      	cmp	r3, #128	@ 0x80
 80071c2:	d00a      	beq.n	80071da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f93d 	bl	8008448 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ce:	2180      	movs	r1, #128	@ 0x80
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 f939 	bl	8008448 <USBD_LL_StallEP>
 80071d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071d8:	e040      	b.n	800725c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fc40 	bl	8007a62 <USBD_CtlError>
              break;
 80071e2:	e03b      	b.n	800725c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	885b      	ldrh	r3, [r3, #2]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d136      	bne.n	800725a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d004      	beq.n	8007200 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 f943 	bl	8008486 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fd0c 	bl	8007c1e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff fde3 	bl	8006dd6 <USBD_CoreFindEP>
 8007210:	4603      	mov	r3, r0
 8007212:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007214:	7b7b      	ldrb	r3, [r7, #13]
 8007216:	2bff      	cmp	r3, #255	@ 0xff
 8007218:	d01f      	beq.n	800725a <USBD_StdEPReq+0x1c6>
 800721a:	7b7b      	ldrb	r3, [r7, #13]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d11c      	bne.n	800725a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007220:	7b7a      	ldrb	r2, [r7, #13]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007228:	7b7a      	ldrb	r2, [r7, #13]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	32ae      	adds	r2, #174	@ 0xae
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d010      	beq.n	800725a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007238:	7b7a      	ldrb	r2, [r7, #13]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	32ae      	adds	r2, #174	@ 0xae
 800723e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	4798      	blx	r3
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800724e:	e004      	b.n	800725a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fc05 	bl	8007a62 <USBD_CtlError>
              break;
 8007258:	e000      	b.n	800725c <USBD_StdEPReq+0x1c8>
              break;
 800725a:	bf00      	nop
          }
          break;
 800725c:	e0ad      	b.n	80073ba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d002      	beq.n	8007270 <USBD_StdEPReq+0x1dc>
 800726a:	2b03      	cmp	r3, #3
 800726c:	d033      	beq.n	80072d6 <USBD_StdEPReq+0x242>
 800726e:	e099      	b.n	80073a4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <USBD_StdEPReq+0x1f2>
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b80      	cmp	r3, #128	@ 0x80
 800727a:	d004      	beq.n	8007286 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fbef 	bl	8007a62 <USBD_CtlError>
                break;
 8007284:	e093      	b.n	80073ae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800728a:	2b00      	cmp	r3, #0
 800728c:	da0b      	bge.n	80072a6 <USBD_StdEPReq+0x212>
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007294:	4613      	mov	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	3310      	adds	r3, #16
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	4413      	add	r3, r2
 80072a2:	3304      	adds	r3, #4
 80072a4:	e00b      	b.n	80072be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	4413      	add	r3, r2
 80072bc:	3304      	adds	r3, #4
 80072be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	330e      	adds	r3, #14
 80072ca:	2202      	movs	r2, #2
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fc44 	bl	8007b5c <USBD_CtlSendData>
              break;
 80072d4:	e06b      	b.n	80073ae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da11      	bge.n	8007302 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	3323      	adds	r3, #35	@ 0x23
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d117      	bne.n	8007328 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fbb1 	bl	8007a62 <USBD_CtlError>
                  break;
 8007300:	e055      	b.n	80073ae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	f003 020f 	and.w	r2, r3, #15
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d104      	bne.n	8007328 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fb9e 	bl	8007a62 <USBD_CtlError>
                  break;
 8007326:	e042      	b.n	80073ae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800732c:	2b00      	cmp	r3, #0
 800732e:	da0b      	bge.n	8007348 <USBD_StdEPReq+0x2b4>
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	3310      	adds	r3, #16
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	4413      	add	r3, r2
 8007344:	3304      	adds	r3, #4
 8007346:	e00b      	b.n	8007360 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4413      	add	r3, r2
 800735e:	3304      	adds	r3, #4
 8007360:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <USBD_StdEPReq+0x2da>
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	2b80      	cmp	r3, #128	@ 0x80
 800736c:	d103      	bne.n	8007376 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	739a      	strb	r2, [r3, #14]
 8007374:	e00e      	b.n	8007394 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 f8a2 	bl	80084c4 <USBD_LL_IsStallEP>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2201      	movs	r2, #1
 800738a:	739a      	strb	r2, [r3, #14]
 800738c:	e002      	b.n	8007394 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2200      	movs	r2, #0
 8007392:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	330e      	adds	r3, #14
 8007398:	2202      	movs	r2, #2
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fbdd 	bl	8007b5c <USBD_CtlSendData>
              break;
 80073a2:	e004      	b.n	80073ae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fb5b 	bl	8007a62 <USBD_CtlError>
              break;
 80073ac:	bf00      	nop
          }
          break;
 80073ae:	e004      	b.n	80073ba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fb55 	bl	8007a62 <USBD_CtlError>
          break;
 80073b8:	bf00      	nop
      }
      break;
 80073ba:	e005      	b.n	80073c8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fb4f 	bl	8007a62 <USBD_CtlError>
      break;
 80073c4:	e000      	b.n	80073c8 <USBD_StdEPReq+0x334>
      break;
 80073c6:	bf00      	nop
  }

  return ret;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	885b      	ldrh	r3, [r3, #2]
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	2b06      	cmp	r3, #6
 80073f6:	f200 8128 	bhi.w	800764a <USBD_GetDescriptor+0x276>
 80073fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007400 <USBD_GetDescriptor+0x2c>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	0800741d 	.word	0x0800741d
 8007404:	08007435 	.word	0x08007435
 8007408:	08007475 	.word	0x08007475
 800740c:	0800764b 	.word	0x0800764b
 8007410:	0800764b 	.word	0x0800764b
 8007414:	080075eb 	.word	0x080075eb
 8007418:	08007617 	.word	0x08007617
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	7c12      	ldrb	r2, [r2, #16]
 8007428:	f107 0108 	add.w	r1, r7, #8
 800742c:	4610      	mov	r0, r2
 800742e:	4798      	blx	r3
 8007430:	60f8      	str	r0, [r7, #12]
      break;
 8007432:	e112      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7c1b      	ldrb	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10d      	bne.n	8007458 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007444:	f107 0208 	add.w	r2, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	2202      	movs	r2, #2
 8007454:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007456:	e100      	b.n	800765a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	f107 0208 	add.w	r2, r7, #8
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
 8007468:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	2202      	movs	r2, #2
 8007470:	701a      	strb	r2, [r3, #0]
      break;
 8007472:	e0f2      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	885b      	ldrh	r3, [r3, #2]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b05      	cmp	r3, #5
 800747c:	f200 80ac 	bhi.w	80075d8 <USBD_GetDescriptor+0x204>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <USBD_GetDescriptor+0xb4>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074a1 	.word	0x080074a1
 800748c:	080074d5 	.word	0x080074d5
 8007490:	08007509 	.word	0x08007509
 8007494:	0800753d 	.word	0x0800753d
 8007498:	08007571 	.word	0x08007571
 800749c:	080075a5 	.word	0x080075a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7c12      	ldrb	r2, [r2, #16]
 80074b8:	f107 0108 	add.w	r1, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074c2:	e091      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 facb 	bl	8007a62 <USBD_CtlError>
            err++;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	3301      	adds	r3, #1
 80074d0:	72fb      	strb	r3, [r7, #11]
          break;
 80074d2:	e089      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	7c12      	ldrb	r2, [r2, #16]
 80074ec:	f107 0108 	add.w	r1, r7, #8
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074f6:	e077      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fab1 	bl	8007a62 <USBD_CtlError>
            err++;
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	3301      	adds	r3, #1
 8007504:	72fb      	strb	r3, [r7, #11]
          break;
 8007506:	e06f      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	7c12      	ldrb	r2, [r2, #16]
 8007520:	f107 0108 	add.w	r1, r7, #8
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800752a:	e05d      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa97 	bl	8007a62 <USBD_CtlError>
            err++;
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	3301      	adds	r3, #1
 8007538:	72fb      	strb	r3, [r7, #11]
          break;
 800753a:	e055      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	7c12      	ldrb	r2, [r2, #16]
 8007554:	f107 0108 	add.w	r1, r7, #8
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
 800755c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800755e:	e043      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa7d 	bl	8007a62 <USBD_CtlError>
            err++;
 8007568:	7afb      	ldrb	r3, [r7, #11]
 800756a:	3301      	adds	r3, #1
 800756c:	72fb      	strb	r3, [r7, #11]
          break;
 800756e:	e03b      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	7c12      	ldrb	r2, [r2, #16]
 8007588:	f107 0108 	add.w	r1, r7, #8
 800758c:	4610      	mov	r0, r2
 800758e:	4798      	blx	r3
 8007590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007592:	e029      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fa63 	bl	8007a62 <USBD_CtlError>
            err++;
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	3301      	adds	r3, #1
 80075a0:	72fb      	strb	r3, [r7, #11]
          break;
 80075a2:	e021      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	7c12      	ldrb	r2, [r2, #16]
 80075bc:	f107 0108 	add.w	r1, r7, #8
 80075c0:	4610      	mov	r0, r2
 80075c2:	4798      	blx	r3
 80075c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c6:	e00f      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa49 	bl	8007a62 <USBD_CtlError>
            err++;
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	3301      	adds	r3, #1
 80075d4:	72fb      	strb	r3, [r7, #11]
          break;
 80075d6:	e007      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa41 	bl	8007a62 <USBD_CtlError>
          err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80075e6:	bf00      	nop
      }
      break;
 80075e8:	e037      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7c1b      	ldrb	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fa:	f107 0208 	add.w	r2, r7, #8
 80075fe:	4610      	mov	r0, r2
 8007600:	4798      	blx	r3
 8007602:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007604:	e029      	b.n	800765a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fa2a 	bl	8007a62 <USBD_CtlError>
        err++;
 800760e:	7afb      	ldrb	r3, [r7, #11]
 8007610:	3301      	adds	r3, #1
 8007612:	72fb      	strb	r3, [r7, #11]
      break;
 8007614:	e021      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7c1b      	ldrb	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007626:	f107 0208 	add.w	r2, r7, #8
 800762a:	4610      	mov	r0, r2
 800762c:	4798      	blx	r3
 800762e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3301      	adds	r3, #1
 8007634:	2207      	movs	r2, #7
 8007636:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007638:	e00f      	b.n	800765a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fa10 	bl	8007a62 <USBD_CtlError>
        err++;
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	3301      	adds	r3, #1
 8007646:	72fb      	strb	r3, [r7, #11]
      break;
 8007648:	e007      	b.n	800765a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa08 	bl	8007a62 <USBD_CtlError>
      err++;
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	3301      	adds	r3, #1
 8007656:	72fb      	strb	r3, [r7, #11]
      break;
 8007658:	bf00      	nop
  }

  if (err != 0U)
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11e      	bne.n	800769e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	88db      	ldrh	r3, [r3, #6]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d016      	beq.n	8007696 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007668:	893b      	ldrh	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00e      	beq.n	800768c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88da      	ldrh	r2, [r3, #6]
 8007672:	893b      	ldrh	r3, [r7, #8]
 8007674:	4293      	cmp	r3, r2
 8007676:	bf28      	it	cs
 8007678:	4613      	movcs	r3, r2
 800767a:	b29b      	uxth	r3, r3
 800767c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800767e:	893b      	ldrh	r3, [r7, #8]
 8007680:	461a      	mov	r2, r3
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fa69 	bl	8007b5c <USBD_CtlSendData>
 800768a:	e009      	b.n	80076a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9e7 	bl	8007a62 <USBD_CtlError>
 8007694:	e004      	b.n	80076a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fac1 	bl	8007c1e <USBD_CtlSendStatus>
 800769c:	e000      	b.n	80076a0 <USBD_GetDescriptor+0x2cc>
    return;
 800769e:	bf00      	nop
  }
}
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop

080076a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	889b      	ldrh	r3, [r3, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d131      	bne.n	800771e <USBD_SetAddress+0x76>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	88db      	ldrh	r3, [r3, #6]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d12d      	bne.n	800771e <USBD_SetAddress+0x76>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	885b      	ldrh	r3, [r3, #2]
 80076c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80076c8:	d829      	bhi.n	800771e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	885b      	ldrh	r3, [r3, #2]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d104      	bne.n	80076ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f9bc 	bl	8007a62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ea:	e01d      	b.n	8007728 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	7bfa      	ldrb	r2, [r7, #15]
 80076f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 ff0f 	bl	800851c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa8d 	bl	8007c1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2202      	movs	r2, #2
 800770e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	e009      	b.n	8007728 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771c:	e004      	b.n	8007728 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f99e 	bl	8007a62 <USBD_CtlError>
  }
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	885b      	ldrh	r3, [r3, #2]
 8007742:	b2da      	uxtb	r2, r3
 8007744:	4b4e      	ldr	r3, [pc, #312]	@ (8007880 <USBD_SetConfig+0x150>)
 8007746:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007748:	4b4d      	ldr	r3, [pc, #308]	@ (8007880 <USBD_SetConfig+0x150>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d905      	bls.n	800775c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f985 	bl	8007a62 <USBD_CtlError>
    return USBD_FAIL;
 8007758:	2303      	movs	r3, #3
 800775a:	e08c      	b.n	8007876 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d002      	beq.n	800776e <USBD_SetConfig+0x3e>
 8007768:	2b03      	cmp	r3, #3
 800776a:	d029      	beq.n	80077c0 <USBD_SetConfig+0x90>
 800776c:	e075      	b.n	800785a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800776e:	4b44      	ldr	r3, [pc, #272]	@ (8007880 <USBD_SetConfig+0x150>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d020      	beq.n	80077b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007776:	4b42      	ldr	r3, [pc, #264]	@ (8007880 <USBD_SetConfig+0x150>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007780:	4b3f      	ldr	r3, [pc, #252]	@ (8007880 <USBD_SetConfig+0x150>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fe ffcd 	bl	8006726 <USBD_SetClassConfig>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d008      	beq.n	80077a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f962 	bl	8007a62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077a6:	e065      	b.n	8007874 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fa38 	bl	8007c1e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2203      	movs	r2, #3
 80077b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80077b6:	e05d      	b.n	8007874 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa30 	bl	8007c1e <USBD_CtlSendStatus>
      break;
 80077be:	e059      	b.n	8007874 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077c0:	4b2f      	ldr	r3, [pc, #188]	@ (8007880 <USBD_SetConfig+0x150>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d112      	bne.n	80077ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80077d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007880 <USBD_SetConfig+0x150>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077da:	4b29      	ldr	r3, [pc, #164]	@ (8007880 <USBD_SetConfig+0x150>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7fe ffbc 	bl	800675e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa19 	bl	8007c1e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077ec:	e042      	b.n	8007874 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80077ee:	4b24      	ldr	r3, [pc, #144]	@ (8007880 <USBD_SetConfig+0x150>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d02a      	beq.n	8007852 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fe ffaa 	bl	800675e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800780a:	4b1d      	ldr	r3, [pc, #116]	@ (8007880 <USBD_SetConfig+0x150>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007814:	4b1a      	ldr	r3, [pc, #104]	@ (8007880 <USBD_SetConfig+0x150>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fe ff83 	bl	8006726 <USBD_SetClassConfig>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00f      	beq.n	800784a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f918 	bl	8007a62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fe ff8f 	bl	800675e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007848:	e014      	b.n	8007874 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9e7 	bl	8007c1e <USBD_CtlSendStatus>
      break;
 8007850:	e010      	b.n	8007874 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9e3 	bl	8007c1e <USBD_CtlSendStatus>
      break;
 8007858:	e00c      	b.n	8007874 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f900 	bl	8007a62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007862:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <USBD_SetConfig+0x150>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fe ff78 	bl	800675e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800786e:	2303      	movs	r3, #3
 8007870:	73fb      	strb	r3, [r7, #15]
      break;
 8007872:	bf00      	nop
  }

  return ret;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200003b4 	.word	0x200003b4

08007884 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	88db      	ldrh	r3, [r3, #6]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d004      	beq.n	80078a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f8e2 	bl	8007a62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800789e:	e023      	b.n	80078e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	dc02      	bgt.n	80078b2 <USBD_GetConfig+0x2e>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dc03      	bgt.n	80078b8 <USBD_GetConfig+0x34>
 80078b0:	e015      	b.n	80078de <USBD_GetConfig+0x5a>
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d00b      	beq.n	80078ce <USBD_GetConfig+0x4a>
 80078b6:	e012      	b.n	80078de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3308      	adds	r3, #8
 80078c2:	2201      	movs	r2, #1
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f948 	bl	8007b5c <USBD_CtlSendData>
        break;
 80078cc:	e00c      	b.n	80078e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3304      	adds	r3, #4
 80078d2:	2201      	movs	r2, #1
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f940 	bl	8007b5c <USBD_CtlSendData>
        break;
 80078dc:	e004      	b.n	80078e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f8be 	bl	8007a62 <USBD_CtlError>
        break;
 80078e6:	bf00      	nop
}
 80078e8:	bf00      	nop
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007900:	b2db      	uxtb	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	2b02      	cmp	r3, #2
 8007906:	d81e      	bhi.n	8007946 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	88db      	ldrh	r3, [r3, #6]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d004      	beq.n	800791a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8a5 	bl	8007a62 <USBD_CtlError>
        break;
 8007918:	e01a      	b.n	8007950 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f043 0202 	orr.w	r2, r3, #2
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	330c      	adds	r3, #12
 800793a:	2202      	movs	r2, #2
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f90c 	bl	8007b5c <USBD_CtlSendData>
      break;
 8007944:	e004      	b.n	8007950 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f88a 	bl	8007a62 <USBD_CtlError>
      break;
 800794e:	bf00      	nop
  }
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	885b      	ldrh	r3, [r3, #2]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d107      	bne.n	800797a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f953 	bl	8007c1e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007978:	e013      	b.n	80079a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	885b      	ldrh	r3, [r3, #2]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d10b      	bne.n	800799a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	889b      	ldrh	r3, [r3, #4]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	b29b      	uxth	r3, r3
 800798a:	b2da      	uxtb	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f943 	bl	8007c1e <USBD_CtlSendStatus>
}
 8007998:	e003      	b.n	80079a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f860 	bl	8007a62 <USBD_CtlError>
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d80b      	bhi.n	80079da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10c      	bne.n	80079e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f923 	bl	8007c1e <USBD_CtlSendStatus>
      }
      break;
 80079d8:	e004      	b.n	80079e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f840 	bl	8007a62 <USBD_CtlError>
      break;
 80079e2:	e000      	b.n	80079e6 <USBD_ClrFeature+0x3c>
      break;
 80079e4:	bf00      	nop
  }
}
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	781a      	ldrb	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	781a      	ldrb	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3301      	adds	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff fa3d 	bl	8006e98 <SWAPBYTE>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff fa30 	bl	8006e98 <SWAPBYTE>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3301      	adds	r3, #1
 8007a44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7ff fa23 	bl	8006e98 <SWAPBYTE>
 8007a52:	4603      	mov	r3, r0
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	80da      	strh	r2, [r3, #6]
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a6c:	2180      	movs	r1, #128	@ 0x80
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fcea 	bl	8008448 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a74:	2100      	movs	r1, #0
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fce6 	bl	8008448 <USBD_LL_StallEP>
}
 8007a7c:	bf00      	nop
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d042      	beq.n	8007b20 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007a9e:	6938      	ldr	r0, [r7, #16]
 8007aa0:	f000 f842 	bl	8007b28 <USBD_GetLen>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aae:	d808      	bhi.n	8007ac2 <USBD_GetString+0x3e>
 8007ab0:	6938      	ldr	r0, [r7, #16]
 8007ab2:	f000 f839 	bl	8007b28 <USBD_GetLen>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	3301      	adds	r3, #1
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	e001      	b.n	8007ac6 <USBD_GetString+0x42>
 8007ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	4413      	add	r3, r2
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7812      	ldrb	r2, [r2, #0]
 8007ad4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007aec:	e013      	b.n	8007b16 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	4413      	add	r3, r2
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	7812      	ldrb	r2, [r2, #0]
 8007af8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3301      	adds	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
    idx++;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	3301      	adds	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	3301      	adds	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e7      	bne.n	8007aee <USBD_GetString+0x6a>
 8007b1e:	e000      	b.n	8007b22 <USBD_GetString+0x9e>
    return;
 8007b20:	bf00      	nop
  }
}
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b38:	e005      	b.n	8007b46 <USBD_GetLen+0x1e>
  {
    len++;
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	3301      	adds	r3, #1
 8007b44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1f5      	bne.n	8007b3a <USBD_GetLen+0x12>
  }

  return len;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	2100      	movs	r1, #0
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fce6 	bl	800855a <USBD_LL_Transmit>

  return USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	2100      	movs	r1, #0
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fcd5 	bl	800855a <USBD_LL_Transmit>

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2203      	movs	r2, #3
 8007bca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	2100      	movs	r1, #0
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fcd5 	bl	800859c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fcc4 	bl	800859c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2204      	movs	r2, #4
 8007c2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2200      	movs	r2, #0
 8007c32:	2100      	movs	r1, #0
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fc90 	bl	800855a <USBD_LL_Transmit>

  return USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2205      	movs	r2, #5
 8007c50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c54:	2300      	movs	r3, #0
 8007c56:	2200      	movs	r2, #0
 8007c58:	2100      	movs	r1, #0
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fc9e 	bl	800859c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c70:	2200      	movs	r2, #0
 8007c72:	4912      	ldr	r1, [pc, #72]	@ (8007cbc <MX_USB_DEVICE_Init+0x50>)
 8007c74:	4812      	ldr	r0, [pc, #72]	@ (8007cc0 <MX_USB_DEVICE_Init+0x54>)
 8007c76:	f7fe fcd9 	bl	800662c <USBD_Init>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c80:	f7f9 fb07 	bl	8001292 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c84:	490f      	ldr	r1, [pc, #60]	@ (8007cc4 <MX_USB_DEVICE_Init+0x58>)
 8007c86:	480e      	ldr	r0, [pc, #56]	@ (8007cc0 <MX_USB_DEVICE_Init+0x54>)
 8007c88:	f7fe fd00 	bl	800668c <USBD_RegisterClass>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c92:	f7f9 fafe 	bl	8001292 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c96:	490c      	ldr	r1, [pc, #48]	@ (8007cc8 <MX_USB_DEVICE_Init+0x5c>)
 8007c98:	4809      	ldr	r0, [pc, #36]	@ (8007cc0 <MX_USB_DEVICE_Init+0x54>)
 8007c9a:	f7fe fbf7 	bl	800648c <USBD_CDC_RegisterInterface>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ca4:	f7f9 faf5 	bl	8001292 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ca8:	4805      	ldr	r0, [pc, #20]	@ (8007cc0 <MX_USB_DEVICE_Init+0x54>)
 8007caa:	f7fe fd25 	bl	80066f8 <USBD_Start>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cb4:	f7f9 faed 	bl	8001292 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cb8:	bf00      	nop
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	200000ac 	.word	0x200000ac
 8007cc0:	200003b8 	.word	0x200003b8
 8007cc4:	20000018 	.word	0x20000018
 8007cc8:	20000098 	.word	0x20000098

08007ccc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4905      	ldr	r1, [pc, #20]	@ (8007ce8 <CDC_Init_FS+0x1c>)
 8007cd4:	4805      	ldr	r0, [pc, #20]	@ (8007cec <CDC_Init_FS+0x20>)
 8007cd6:	f7fe fbf3 	bl	80064c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cda:	4905      	ldr	r1, [pc, #20]	@ (8007cf0 <CDC_Init_FS+0x24>)
 8007cdc:	4803      	ldr	r0, [pc, #12]	@ (8007cec <CDC_Init_FS+0x20>)
 8007cde:	f7fe fc11 	bl	8006504 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ce2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000e94 	.word	0x20000e94
 8007cec:	200003b8 	.word	0x200003b8
 8007cf0:	20000694 	.word	0x20000694

08007cf4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	6039      	str	r1, [r7, #0]
 8007d0e:	71fb      	strb	r3, [r7, #7]
 8007d10:	4613      	mov	r3, r2
 8007d12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b23      	cmp	r3, #35	@ 0x23
 8007d18:	d84a      	bhi.n	8007db0 <CDC_Control_FS+0xac>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <CDC_Control_FS+0x1c>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007db1 	.word	0x08007db1
 8007d24:	08007db1 	.word	0x08007db1
 8007d28:	08007db1 	.word	0x08007db1
 8007d2c:	08007db1 	.word	0x08007db1
 8007d30:	08007db1 	.word	0x08007db1
 8007d34:	08007db1 	.word	0x08007db1
 8007d38:	08007db1 	.word	0x08007db1
 8007d3c:	08007db1 	.word	0x08007db1
 8007d40:	08007db1 	.word	0x08007db1
 8007d44:	08007db1 	.word	0x08007db1
 8007d48:	08007db1 	.word	0x08007db1
 8007d4c:	08007db1 	.word	0x08007db1
 8007d50:	08007db1 	.word	0x08007db1
 8007d54:	08007db1 	.word	0x08007db1
 8007d58:	08007db1 	.word	0x08007db1
 8007d5c:	08007db1 	.word	0x08007db1
 8007d60:	08007db1 	.word	0x08007db1
 8007d64:	08007db1 	.word	0x08007db1
 8007d68:	08007db1 	.word	0x08007db1
 8007d6c:	08007db1 	.word	0x08007db1
 8007d70:	08007db1 	.word	0x08007db1
 8007d74:	08007db1 	.word	0x08007db1
 8007d78:	08007db1 	.word	0x08007db1
 8007d7c:	08007db1 	.word	0x08007db1
 8007d80:	08007db1 	.word	0x08007db1
 8007d84:	08007db1 	.word	0x08007db1
 8007d88:	08007db1 	.word	0x08007db1
 8007d8c:	08007db1 	.word	0x08007db1
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007db1 	.word	0x08007db1
 8007d98:	08007db1 	.word	0x08007db1
 8007d9c:	08007db1 	.word	0x08007db1
 8007da0:	08007db1 	.word	0x08007db1
 8007da4:	08007db1 	.word	0x08007db1
 8007da8:	08007db1 	.word	0x08007db1
 8007dac:	08007db1 	.word	0x08007db1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007db0:	bf00      	nop
  }

  return (USBD_OK);
 8007db2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4805      	ldr	r0, [pc, #20]	@ (8007de4 <CDC_Receive_FS+0x24>)
 8007dce:	f7fe fb99 	bl	8006504 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dd2:	4804      	ldr	r0, [pc, #16]	@ (8007de4 <CDC_Receive_FS+0x24>)
 8007dd4:	f7fe fbf4 	bl	80065c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200003b8 	.word	0x200003b8

08007de8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007df8:	4b0d      	ldr	r3, [pc, #52]	@ (8007e30 <CDC_Transmit_FS+0x48>)
 8007dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e00b      	b.n	8007e26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e0e:	887b      	ldrh	r3, [r7, #2]
 8007e10:	461a      	mov	r2, r3
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	4806      	ldr	r0, [pc, #24]	@ (8007e30 <CDC_Transmit_FS+0x48>)
 8007e16:	f7fe fb53 	bl	80064c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e1a:	4805      	ldr	r0, [pc, #20]	@ (8007e30 <CDC_Transmit_FS+0x48>)
 8007e1c:	f7fe fb90 	bl	8006540 <USBD_CDC_TransmitPacket>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200003b8 	.word	0x200003b8

08007e34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
	...

08007e58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2212      	movs	r2, #18
 8007e68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e6a:	4b03      	ldr	r3, [pc, #12]	@ (8007e78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	200000c8 	.word	0x200000c8

08007e7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	6039      	str	r1, [r7, #0]
 8007e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e8e:	4b03      	ldr	r3, [pc, #12]	@ (8007e9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	200000dc 	.word	0x200000dc

08007ea0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4907      	ldr	r1, [pc, #28]	@ (8007ed4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007eb6:	4808      	ldr	r0, [pc, #32]	@ (8007ed8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007eb8:	f7ff fde4 	bl	8007a84 <USBD_GetString>
 8007ebc:	e004      	b.n	8007ec8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	4904      	ldr	r1, [pc, #16]	@ (8007ed4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ec2:	4805      	ldr	r0, [pc, #20]	@ (8007ed8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ec4:	f7ff fdde 	bl	8007a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ec8:	4b02      	ldr	r3, [pc, #8]	@ (8007ed4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20001694 	.word	0x20001694
 8007ed8:	0800b010 	.word	0x0800b010

08007edc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	4904      	ldr	r1, [pc, #16]	@ (8007efc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007eec:	4804      	ldr	r0, [pc, #16]	@ (8007f00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007eee:	f7ff fdc9 	bl	8007a84 <USBD_GetString>
  return USBD_StrDesc;
 8007ef2:	4b02      	ldr	r3, [pc, #8]	@ (8007efc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20001694 	.word	0x20001694
 8007f00:	0800b028 	.word	0x0800b028

08007f04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	221a      	movs	r2, #26
 8007f14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f16:	f000 f843 	bl	8007fa0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f1a:	4b02      	ldr	r3, [pc, #8]	@ (8007f24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	200000e0 	.word	0x200000e0

08007f28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	6039      	str	r1, [r7, #0]
 8007f32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d105      	bne.n	8007f46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	4907      	ldr	r1, [pc, #28]	@ (8007f5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f3e:	4808      	ldr	r0, [pc, #32]	@ (8007f60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f40:	f7ff fda0 	bl	8007a84 <USBD_GetString>
 8007f44:	e004      	b.n	8007f50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	4904      	ldr	r1, [pc, #16]	@ (8007f5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f4a:	4805      	ldr	r0, [pc, #20]	@ (8007f60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f4c:	f7ff fd9a 	bl	8007a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f50:	4b02      	ldr	r3, [pc, #8]	@ (8007f5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20001694 	.word	0x20001694
 8007f60:	0800b03c 	.word	0x0800b03c

08007f64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	6039      	str	r1, [r7, #0]
 8007f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d105      	bne.n	8007f82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4907      	ldr	r1, [pc, #28]	@ (8007f98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f7a:	4808      	ldr	r0, [pc, #32]	@ (8007f9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f7c:	f7ff fd82 	bl	8007a84 <USBD_GetString>
 8007f80:	e004      	b.n	8007f8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	4904      	ldr	r1, [pc, #16]	@ (8007f98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f86:	4805      	ldr	r0, [pc, #20]	@ (8007f9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f88:	f7ff fd7c 	bl	8007a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f8c:	4b02      	ldr	r3, [pc, #8]	@ (8007f98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20001694 	.word	0x20001694
 8007f9c:	0800b048 	.word	0x0800b048

08007fa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe4 <Get_SerialNum+0x44>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fac:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe8 <Get_SerialNum+0x48>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8007fec <Get_SerialNum+0x4c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fc6:	2208      	movs	r2, #8
 8007fc8:	4909      	ldr	r1, [pc, #36]	@ (8007ff0 <Get_SerialNum+0x50>)
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 f814 	bl	8007ff8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	4908      	ldr	r1, [pc, #32]	@ (8007ff4 <Get_SerialNum+0x54>)
 8007fd4:	68b8      	ldr	r0, [r7, #8]
 8007fd6:	f000 f80f 	bl	8007ff8 <IntToUnicode>
  }
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	1fff7a10 	.word	0x1fff7a10
 8007fe8:	1fff7a14 	.word	0x1fff7a14
 8007fec:	1fff7a18 	.word	0x1fff7a18
 8007ff0:	200000e2 	.word	0x200000e2
 8007ff4:	200000f2 	.word	0x200000f2

08007ff8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800800a:	2300      	movs	r3, #0
 800800c:	75fb      	strb	r3, [r7, #23]
 800800e:	e027      	b.n	8008060 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	0f1b      	lsrs	r3, r3, #28
 8008014:	2b09      	cmp	r3, #9
 8008016:	d80b      	bhi.n	8008030 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	0f1b      	lsrs	r3, r3, #28
 800801c:	b2da      	uxtb	r2, r3
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	4619      	mov	r1, r3
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	440b      	add	r3, r1
 8008028:	3230      	adds	r2, #48	@ 0x30
 800802a:	b2d2      	uxtb	r2, r2
 800802c:	701a      	strb	r2, [r3, #0]
 800802e:	e00a      	b.n	8008046 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	0f1b      	lsrs	r3, r3, #28
 8008034:	b2da      	uxtb	r2, r3
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	4619      	mov	r1, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	440b      	add	r3, r1
 8008040:	3237      	adds	r2, #55	@ 0x37
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	011b      	lsls	r3, r3, #4
 800804a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	3301      	adds	r3, #1
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	4413      	add	r3, r2
 8008056:	2200      	movs	r2, #0
 8008058:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	3301      	adds	r3, #1
 800805e:	75fb      	strb	r3, [r7, #23]
 8008060:	7dfa      	ldrb	r2, [r7, #23]
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	429a      	cmp	r2, r3
 8008066:	d3d3      	bcc.n	8008010 <IntToUnicode+0x18>
  }
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08a      	sub	sp, #40	@ 0x28
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008080:	f107 0314 	add.w	r3, r7, #20
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	605a      	str	r2, [r3, #4]
 800808a:	609a      	str	r2, [r3, #8]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008098:	d13a      	bne.n	8008110 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800809a:	2300      	movs	r3, #0
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	4b1e      	ldr	r3, [pc, #120]	@ (8008118 <HAL_PCD_MspInit+0xa0>)
 80080a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008118 <HAL_PCD_MspInit+0xa0>)
 80080a4:	f043 0301 	orr.w	r3, r3, #1
 80080a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80080aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008118 <HAL_PCD_MspInit+0xa0>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	613b      	str	r3, [r7, #16]
 80080b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80080ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080bc:	2302      	movs	r3, #2
 80080be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080c4:	2303      	movs	r3, #3
 80080c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080c8:	230a      	movs	r3, #10
 80080ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080cc:	f107 0314 	add.w	r3, r7, #20
 80080d0:	4619      	mov	r1, r3
 80080d2:	4812      	ldr	r0, [pc, #72]	@ (800811c <HAL_PCD_MspInit+0xa4>)
 80080d4:	f7f9 fc90 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008118 <HAL_PCD_MspInit+0xa0>)
 80080da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080dc:	4a0e      	ldr	r2, [pc, #56]	@ (8008118 <HAL_PCD_MspInit+0xa0>)
 80080de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008118 <HAL_PCD_MspInit+0xa0>)
 80080ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008118 <HAL_PCD_MspInit+0xa0>)
 80080ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80080f4:	4b08      	ldr	r3, [pc, #32]	@ (8008118 <HAL_PCD_MspInit+0xa0>)
 80080f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008100:	2200      	movs	r2, #0
 8008102:	2100      	movs	r1, #0
 8008104:	2043      	movs	r0, #67	@ 0x43
 8008106:	f7f9 fc40 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800810a:	2043      	movs	r0, #67	@ 0x43
 800810c:	f7f9 fc59 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008110:	bf00      	nop
 8008112:	3728      	adds	r7, #40	@ 0x28
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	40023800 	.word	0x40023800
 800811c:	40020000 	.word	0x40020000

08008120 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7fe fb2b 	bl	8006792 <USBD_LL_SetupStage>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008156:	78fa      	ldrb	r2, [r7, #3]
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	4619      	mov	r1, r3
 800816e:	f7fe fb65 	bl	800683c <USBD_LL_DataOutStage>
}
 8008172:	bf00      	nop
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800818c:	78fa      	ldrb	r2, [r7, #3]
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	4613      	mov	r3, r2
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	440b      	add	r3, r1
 800819a:	3320      	adds	r3, #32
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f7fe fc07 	bl	80069b4 <USBD_LL_DataInStage>
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe fd4b 	bl	8006c58 <USBD_LL_SOF>
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081d2:	2301      	movs	r3, #1
 80081d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	79db      	ldrb	r3, [r3, #7]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d001      	beq.n	80081e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80081de:	f7f9 f858 	bl	8001292 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081e8:	7bfa      	ldrb	r2, [r7, #15]
 80081ea:	4611      	mov	r1, r2
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fcef 	bl	8006bd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe fc96 	bl	8006b2a <USBD_LL_Reset>
}
 80081fe:	bf00      	nop
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fcea 	bl	8006bf0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6812      	ldr	r2, [r2, #0]
 800822a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	7adb      	ldrb	r3, [r3, #11]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d005      	beq.n	8008248 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800823c:	4b04      	ldr	r3, [pc, #16]	@ (8008250 <HAL_PCD_SuspendCallback+0x48>)
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	4a03      	ldr	r2, [pc, #12]	@ (8008250 <HAL_PCD_SuspendCallback+0x48>)
 8008242:	f043 0306 	orr.w	r3, r3, #6
 8008246:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	e000ed00 	.word	0xe000ed00

08008254 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe fce0 	bl	8006c28 <USBD_LL_Resume>
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fd38 	bl	8006cfc <USBD_LL_IsoOUTIncomplete>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fcf4 	bl	8006c98 <USBD_LL_IsoINIncomplete>
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fd4a 	bl	8006d60 <USBD_LL_DevConnected>
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fd47 	bl	8006d76 <USBD_LL_DevDisconnected>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d13c      	bne.n	800837a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008300:	4a20      	ldr	r2, [pc, #128]	@ (8008384 <USBD_LL_Init+0x94>)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a1e      	ldr	r2, [pc, #120]	@ (8008384 <USBD_LL_Init+0x94>)
 800830c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008310:	4b1c      	ldr	r3, [pc, #112]	@ (8008384 <USBD_LL_Init+0x94>)
 8008312:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008316:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008318:	4b1a      	ldr	r3, [pc, #104]	@ (8008384 <USBD_LL_Init+0x94>)
 800831a:	2204      	movs	r2, #4
 800831c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800831e:	4b19      	ldr	r3, [pc, #100]	@ (8008384 <USBD_LL_Init+0x94>)
 8008320:	2202      	movs	r2, #2
 8008322:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008324:	4b17      	ldr	r3, [pc, #92]	@ (8008384 <USBD_LL_Init+0x94>)
 8008326:	2200      	movs	r2, #0
 8008328:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800832a:	4b16      	ldr	r3, [pc, #88]	@ (8008384 <USBD_LL_Init+0x94>)
 800832c:	2202      	movs	r2, #2
 800832e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008330:	4b14      	ldr	r3, [pc, #80]	@ (8008384 <USBD_LL_Init+0x94>)
 8008332:	2200      	movs	r2, #0
 8008334:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008336:	4b13      	ldr	r3, [pc, #76]	@ (8008384 <USBD_LL_Init+0x94>)
 8008338:	2200      	movs	r2, #0
 800833a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800833c:	4b11      	ldr	r3, [pc, #68]	@ (8008384 <USBD_LL_Init+0x94>)
 800833e:	2200      	movs	r2, #0
 8008340:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008342:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <USBD_LL_Init+0x94>)
 8008344:	2200      	movs	r2, #0
 8008346:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008348:	4b0e      	ldr	r3, [pc, #56]	@ (8008384 <USBD_LL_Init+0x94>)
 800834a:	2200      	movs	r2, #0
 800834c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800834e:	480d      	ldr	r0, [pc, #52]	@ (8008384 <USBD_LL_Init+0x94>)
 8008350:	f7f9 fe34 	bl	8001fbc <HAL_PCD_Init>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800835a:	f7f8 ff9a 	bl	8001292 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800835e:	2180      	movs	r1, #128	@ 0x80
 8008360:	4808      	ldr	r0, [pc, #32]	@ (8008384 <USBD_LL_Init+0x94>)
 8008362:	f7fb f860 	bl	8003426 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008366:	2240      	movs	r2, #64	@ 0x40
 8008368:	2100      	movs	r1, #0
 800836a:	4806      	ldr	r0, [pc, #24]	@ (8008384 <USBD_LL_Init+0x94>)
 800836c:	f7fb f814 	bl	8003398 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008370:	2280      	movs	r2, #128	@ 0x80
 8008372:	2101      	movs	r1, #1
 8008374:	4803      	ldr	r0, [pc, #12]	@ (8008384 <USBD_LL_Init+0x94>)
 8008376:	f7fb f80f 	bl	8003398 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20001894 	.word	0x20001894

08008388 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800839e:	4618      	mov	r0, r3
 80083a0:	f7f9 ff1b 	bl	80021da <HAL_PCD_Start>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 f942 	bl	8008634 <USBD_Get_USB_Status>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	4608      	mov	r0, r1
 80083c8:	4611      	mov	r1, r2
 80083ca:	461a      	mov	r2, r3
 80083cc:	4603      	mov	r3, r0
 80083ce:	70fb      	strb	r3, [r7, #3]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70bb      	strb	r3, [r7, #2]
 80083d4:	4613      	mov	r3, r2
 80083d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80083e6:	78bb      	ldrb	r3, [r7, #2]
 80083e8:	883a      	ldrh	r2, [r7, #0]
 80083ea:	78f9      	ldrb	r1, [r7, #3]
 80083ec:	f7fa fbef 	bl	8002bce <HAL_PCD_EP_Open>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 f91c 	bl	8008634 <USBD_Get_USB_Status>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008400:	7bbb      	ldrb	r3, [r7, #14]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	4611      	mov	r1, r2
 8008428:	4618      	mov	r0, r3
 800842a:	f7fa fc3a 	bl	8002ca2 <HAL_PCD_EP_Close>
 800842e:	4603      	mov	r3, r0
 8008430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	4618      	mov	r0, r3
 8008436:	f000 f8fd 	bl	8008634 <USBD_Get_USB_Status>
 800843a:	4603      	mov	r3, r0
 800843c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800843e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008462:	78fa      	ldrb	r2, [r7, #3]
 8008464:	4611      	mov	r1, r2
 8008466:	4618      	mov	r0, r3
 8008468:	f7fa fcf2 	bl	8002e50 <HAL_PCD_EP_SetStall>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 f8de 	bl	8008634 <USBD_Get_USB_Status>
 8008478:	4603      	mov	r3, r0
 800847a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800847c:	7bbb      	ldrb	r3, [r7, #14]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b084      	sub	sp, #16
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084a0:	78fa      	ldrb	r2, [r7, #3]
 80084a2:	4611      	mov	r1, r2
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fa fd36 	bl	8002f16 <HAL_PCD_EP_ClrStall>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 f8bf 	bl	8008634 <USBD_Get_USB_Status>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	da0b      	bge.n	80084f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084e6:	68f9      	ldr	r1, [r7, #12]
 80084e8:	4613      	mov	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	3316      	adds	r3, #22
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	e00b      	b.n	8008510 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084fe:	68f9      	ldr	r1, [r7, #12]
 8008500:	4613      	mov	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800850e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f7fa fb23 	bl	8002b86 <HAL_PCD_SetAddress>
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f874 	bl	8008634 <USBD_Get_USB_Status>
 800854c:	4603      	mov	r3, r0
 800854e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008550:	7bbb      	ldrb	r3, [r7, #14]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b086      	sub	sp, #24
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
 8008566:	460b      	mov	r3, r1
 8008568:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008578:	7af9      	ldrb	r1, [r7, #11]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	f7fa fc2d 	bl	8002ddc <HAL_PCD_EP_Transmit>
 8008582:	4603      	mov	r3, r0
 8008584:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	4618      	mov	r0, r3
 800858a:	f000 f853 	bl	8008634 <USBD_Get_USB_Status>
 800858e:	4603      	mov	r3, r0
 8008590:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008592:	7dbb      	ldrb	r3, [r7, #22]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	607a      	str	r2, [r7, #4]
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	460b      	mov	r3, r1
 80085aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085ba:	7af9      	ldrb	r1, [r7, #11]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	f7fa fbb9 	bl	8002d36 <HAL_PCD_EP_Receive>
 80085c4:	4603      	mov	r3, r0
 80085c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f832 	bl	8008634 <USBD_Get_USB_Status>
 80085d0:	4603      	mov	r3, r0
 80085d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	4611      	mov	r1, r2
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fa fbd9 	bl	8002dac <HAL_PCD_EP_GetRxCount>
 80085fa:	4603      	mov	r3, r0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800860c:	4b03      	ldr	r3, [pc, #12]	@ (800861c <USBD_static_malloc+0x18>)
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	20001d78 	.word	0x20001d78

08008620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]

}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	2b03      	cmp	r3, #3
 8008646:	d817      	bhi.n	8008678 <USBD_Get_USB_Status+0x44>
 8008648:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <USBD_Get_USB_Status+0x1c>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	08008661 	.word	0x08008661
 8008654:	08008667 	.word	0x08008667
 8008658:	0800866d 	.word	0x0800866d
 800865c:	08008673 	.word	0x08008673
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	73fb      	strb	r3, [r7, #15]
    break;
 8008664:	e00b      	b.n	800867e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008666:	2303      	movs	r3, #3
 8008668:	73fb      	strb	r3, [r7, #15]
    break;
 800866a:	e008      	b.n	800867e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]
    break;
 8008670:	e005      	b.n	800867e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008672:	2303      	movs	r3, #3
 8008674:	73fb      	strb	r3, [r7, #15]
    break;
 8008676:	e002      	b.n	800867e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008678:	2303      	movs	r3, #3
 800867a:	73fb      	strb	r3, [r7, #15]
    break;
 800867c:	bf00      	nop
  }
  return usb_status;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <__cvt>:
 800868c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008690:	ec57 6b10 	vmov	r6, r7, d0
 8008694:	2f00      	cmp	r7, #0
 8008696:	460c      	mov	r4, r1
 8008698:	4619      	mov	r1, r3
 800869a:	463b      	mov	r3, r7
 800869c:	bfbb      	ittet	lt
 800869e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80086a2:	461f      	movlt	r7, r3
 80086a4:	2300      	movge	r3, #0
 80086a6:	232d      	movlt	r3, #45	@ 0x2d
 80086a8:	700b      	strb	r3, [r1, #0]
 80086aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80086b0:	4691      	mov	r9, r2
 80086b2:	f023 0820 	bic.w	r8, r3, #32
 80086b6:	bfbc      	itt	lt
 80086b8:	4632      	movlt	r2, r6
 80086ba:	4616      	movlt	r6, r2
 80086bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80086c0:	d005      	beq.n	80086ce <__cvt+0x42>
 80086c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80086c6:	d100      	bne.n	80086ca <__cvt+0x3e>
 80086c8:	3401      	adds	r4, #1
 80086ca:	2102      	movs	r1, #2
 80086cc:	e000      	b.n	80086d0 <__cvt+0x44>
 80086ce:	2103      	movs	r1, #3
 80086d0:	ab03      	add	r3, sp, #12
 80086d2:	9301      	str	r3, [sp, #4]
 80086d4:	ab02      	add	r3, sp, #8
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	ec47 6b10 	vmov	d0, r6, r7
 80086dc:	4653      	mov	r3, sl
 80086de:	4622      	mov	r2, r4
 80086e0:	f000 fe5a 	bl	8009398 <_dtoa_r>
 80086e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80086e8:	4605      	mov	r5, r0
 80086ea:	d119      	bne.n	8008720 <__cvt+0x94>
 80086ec:	f019 0f01 	tst.w	r9, #1
 80086f0:	d00e      	beq.n	8008710 <__cvt+0x84>
 80086f2:	eb00 0904 	add.w	r9, r0, r4
 80086f6:	2200      	movs	r2, #0
 80086f8:	2300      	movs	r3, #0
 80086fa:	4630      	mov	r0, r6
 80086fc:	4639      	mov	r1, r7
 80086fe:	f7f8 f9eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008702:	b108      	cbz	r0, 8008708 <__cvt+0x7c>
 8008704:	f8cd 900c 	str.w	r9, [sp, #12]
 8008708:	2230      	movs	r2, #48	@ 0x30
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	454b      	cmp	r3, r9
 800870e:	d31e      	bcc.n	800874e <__cvt+0xc2>
 8008710:	9b03      	ldr	r3, [sp, #12]
 8008712:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008714:	1b5b      	subs	r3, r3, r5
 8008716:	4628      	mov	r0, r5
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	b004      	add	sp, #16
 800871c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008720:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008724:	eb00 0904 	add.w	r9, r0, r4
 8008728:	d1e5      	bne.n	80086f6 <__cvt+0x6a>
 800872a:	7803      	ldrb	r3, [r0, #0]
 800872c:	2b30      	cmp	r3, #48	@ 0x30
 800872e:	d10a      	bne.n	8008746 <__cvt+0xba>
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	4630      	mov	r0, r6
 8008736:	4639      	mov	r1, r7
 8008738:	f7f8 f9ce 	bl	8000ad8 <__aeabi_dcmpeq>
 800873c:	b918      	cbnz	r0, 8008746 <__cvt+0xba>
 800873e:	f1c4 0401 	rsb	r4, r4, #1
 8008742:	f8ca 4000 	str.w	r4, [sl]
 8008746:	f8da 3000 	ldr.w	r3, [sl]
 800874a:	4499      	add	r9, r3
 800874c:	e7d3      	b.n	80086f6 <__cvt+0x6a>
 800874e:	1c59      	adds	r1, r3, #1
 8008750:	9103      	str	r1, [sp, #12]
 8008752:	701a      	strb	r2, [r3, #0]
 8008754:	e7d9      	b.n	800870a <__cvt+0x7e>

08008756 <__exponent>:
 8008756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008758:	2900      	cmp	r1, #0
 800875a:	bfba      	itte	lt
 800875c:	4249      	neglt	r1, r1
 800875e:	232d      	movlt	r3, #45	@ 0x2d
 8008760:	232b      	movge	r3, #43	@ 0x2b
 8008762:	2909      	cmp	r1, #9
 8008764:	7002      	strb	r2, [r0, #0]
 8008766:	7043      	strb	r3, [r0, #1]
 8008768:	dd29      	ble.n	80087be <__exponent+0x68>
 800876a:	f10d 0307 	add.w	r3, sp, #7
 800876e:	461d      	mov	r5, r3
 8008770:	270a      	movs	r7, #10
 8008772:	461a      	mov	r2, r3
 8008774:	fbb1 f6f7 	udiv	r6, r1, r7
 8008778:	fb07 1416 	mls	r4, r7, r6, r1
 800877c:	3430      	adds	r4, #48	@ 0x30
 800877e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008782:	460c      	mov	r4, r1
 8008784:	2c63      	cmp	r4, #99	@ 0x63
 8008786:	f103 33ff 	add.w	r3, r3, #4294967295
 800878a:	4631      	mov	r1, r6
 800878c:	dcf1      	bgt.n	8008772 <__exponent+0x1c>
 800878e:	3130      	adds	r1, #48	@ 0x30
 8008790:	1e94      	subs	r4, r2, #2
 8008792:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008796:	1c41      	adds	r1, r0, #1
 8008798:	4623      	mov	r3, r4
 800879a:	42ab      	cmp	r3, r5
 800879c:	d30a      	bcc.n	80087b4 <__exponent+0x5e>
 800879e:	f10d 0309 	add.w	r3, sp, #9
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	42ac      	cmp	r4, r5
 80087a6:	bf88      	it	hi
 80087a8:	2300      	movhi	r3, #0
 80087aa:	3302      	adds	r3, #2
 80087ac:	4403      	add	r3, r0
 80087ae:	1a18      	subs	r0, r3, r0
 80087b0:	b003      	add	sp, #12
 80087b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80087b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80087bc:	e7ed      	b.n	800879a <__exponent+0x44>
 80087be:	2330      	movs	r3, #48	@ 0x30
 80087c0:	3130      	adds	r1, #48	@ 0x30
 80087c2:	7083      	strb	r3, [r0, #2]
 80087c4:	70c1      	strb	r1, [r0, #3]
 80087c6:	1d03      	adds	r3, r0, #4
 80087c8:	e7f1      	b.n	80087ae <__exponent+0x58>
	...

080087cc <_printf_float>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	b08d      	sub	sp, #52	@ 0x34
 80087d2:	460c      	mov	r4, r1
 80087d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80087d8:	4616      	mov	r6, r2
 80087da:	461f      	mov	r7, r3
 80087dc:	4605      	mov	r5, r0
 80087de:	f000 fccb 	bl	8009178 <_localeconv_r>
 80087e2:	6803      	ldr	r3, [r0, #0]
 80087e4:	9304      	str	r3, [sp, #16]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7f7 fd4a 	bl	8000280 <strlen>
 80087ec:	2300      	movs	r3, #0
 80087ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f0:	f8d8 3000 	ldr.w	r3, [r8]
 80087f4:	9005      	str	r0, [sp, #20]
 80087f6:	3307      	adds	r3, #7
 80087f8:	f023 0307 	bic.w	r3, r3, #7
 80087fc:	f103 0208 	add.w	r2, r3, #8
 8008800:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008804:	f8d4 b000 	ldr.w	fp, [r4]
 8008808:	f8c8 2000 	str.w	r2, [r8]
 800880c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008810:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008814:	9307      	str	r3, [sp, #28]
 8008816:	f8cd 8018 	str.w	r8, [sp, #24]
 800881a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800881e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008822:	4b9c      	ldr	r3, [pc, #624]	@ (8008a94 <_printf_float+0x2c8>)
 8008824:	f04f 32ff 	mov.w	r2, #4294967295
 8008828:	f7f8 f988 	bl	8000b3c <__aeabi_dcmpun>
 800882c:	bb70      	cbnz	r0, 800888c <_printf_float+0xc0>
 800882e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008832:	4b98      	ldr	r3, [pc, #608]	@ (8008a94 <_printf_float+0x2c8>)
 8008834:	f04f 32ff 	mov.w	r2, #4294967295
 8008838:	f7f8 f962 	bl	8000b00 <__aeabi_dcmple>
 800883c:	bb30      	cbnz	r0, 800888c <_printf_float+0xc0>
 800883e:	2200      	movs	r2, #0
 8008840:	2300      	movs	r3, #0
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	f7f8 f951 	bl	8000aec <__aeabi_dcmplt>
 800884a:	b110      	cbz	r0, 8008852 <_printf_float+0x86>
 800884c:	232d      	movs	r3, #45	@ 0x2d
 800884e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008852:	4a91      	ldr	r2, [pc, #580]	@ (8008a98 <_printf_float+0x2cc>)
 8008854:	4b91      	ldr	r3, [pc, #580]	@ (8008a9c <_printf_float+0x2d0>)
 8008856:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800885a:	bf8c      	ite	hi
 800885c:	4690      	movhi	r8, r2
 800885e:	4698      	movls	r8, r3
 8008860:	2303      	movs	r3, #3
 8008862:	6123      	str	r3, [r4, #16]
 8008864:	f02b 0304 	bic.w	r3, fp, #4
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	9700      	str	r7, [sp, #0]
 8008870:	4633      	mov	r3, r6
 8008872:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008874:	4621      	mov	r1, r4
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f9d2 	bl	8008c20 <_printf_common>
 800887c:	3001      	adds	r0, #1
 800887e:	f040 808d 	bne.w	800899c <_printf_float+0x1d0>
 8008882:	f04f 30ff 	mov.w	r0, #4294967295
 8008886:	b00d      	add	sp, #52	@ 0x34
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	4642      	mov	r2, r8
 800888e:	464b      	mov	r3, r9
 8008890:	4640      	mov	r0, r8
 8008892:	4649      	mov	r1, r9
 8008894:	f7f8 f952 	bl	8000b3c <__aeabi_dcmpun>
 8008898:	b140      	cbz	r0, 80088ac <_printf_float+0xe0>
 800889a:	464b      	mov	r3, r9
 800889c:	2b00      	cmp	r3, #0
 800889e:	bfbc      	itt	lt
 80088a0:	232d      	movlt	r3, #45	@ 0x2d
 80088a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80088a6:	4a7e      	ldr	r2, [pc, #504]	@ (8008aa0 <_printf_float+0x2d4>)
 80088a8:	4b7e      	ldr	r3, [pc, #504]	@ (8008aa4 <_printf_float+0x2d8>)
 80088aa:	e7d4      	b.n	8008856 <_printf_float+0x8a>
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80088b2:	9206      	str	r2, [sp, #24]
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	d13b      	bne.n	8008930 <_printf_float+0x164>
 80088b8:	2306      	movs	r3, #6
 80088ba:	6063      	str	r3, [r4, #4]
 80088bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80088c0:	2300      	movs	r3, #0
 80088c2:	6022      	str	r2, [r4, #0]
 80088c4:	9303      	str	r3, [sp, #12]
 80088c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80088c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80088cc:	ab09      	add	r3, sp, #36	@ 0x24
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	6861      	ldr	r1, [r4, #4]
 80088d2:	ec49 8b10 	vmov	d0, r8, r9
 80088d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80088da:	4628      	mov	r0, r5
 80088dc:	f7ff fed6 	bl	800868c <__cvt>
 80088e0:	9b06      	ldr	r3, [sp, #24]
 80088e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088e4:	2b47      	cmp	r3, #71	@ 0x47
 80088e6:	4680      	mov	r8, r0
 80088e8:	d129      	bne.n	800893e <_printf_float+0x172>
 80088ea:	1cc8      	adds	r0, r1, #3
 80088ec:	db02      	blt.n	80088f4 <_printf_float+0x128>
 80088ee:	6863      	ldr	r3, [r4, #4]
 80088f0:	4299      	cmp	r1, r3
 80088f2:	dd41      	ble.n	8008978 <_printf_float+0x1ac>
 80088f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80088f8:	fa5f fa8a 	uxtb.w	sl, sl
 80088fc:	3901      	subs	r1, #1
 80088fe:	4652      	mov	r2, sl
 8008900:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008904:	9109      	str	r1, [sp, #36]	@ 0x24
 8008906:	f7ff ff26 	bl	8008756 <__exponent>
 800890a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800890c:	1813      	adds	r3, r2, r0
 800890e:	2a01      	cmp	r2, #1
 8008910:	4681      	mov	r9, r0
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	dc02      	bgt.n	800891c <_printf_float+0x150>
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	07d2      	lsls	r2, r2, #31
 800891a:	d501      	bpl.n	8008920 <_printf_float+0x154>
 800891c:	3301      	adds	r3, #1
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0a2      	beq.n	800886e <_printf_float+0xa2>
 8008928:	232d      	movs	r3, #45	@ 0x2d
 800892a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800892e:	e79e      	b.n	800886e <_printf_float+0xa2>
 8008930:	9a06      	ldr	r2, [sp, #24]
 8008932:	2a47      	cmp	r2, #71	@ 0x47
 8008934:	d1c2      	bne.n	80088bc <_printf_float+0xf0>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1c0      	bne.n	80088bc <_printf_float+0xf0>
 800893a:	2301      	movs	r3, #1
 800893c:	e7bd      	b.n	80088ba <_printf_float+0xee>
 800893e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008942:	d9db      	bls.n	80088fc <_printf_float+0x130>
 8008944:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008948:	d118      	bne.n	800897c <_printf_float+0x1b0>
 800894a:	2900      	cmp	r1, #0
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	dd0b      	ble.n	8008968 <_printf_float+0x19c>
 8008950:	6121      	str	r1, [r4, #16]
 8008952:	b913      	cbnz	r3, 800895a <_printf_float+0x18e>
 8008954:	6822      	ldr	r2, [r4, #0]
 8008956:	07d0      	lsls	r0, r2, #31
 8008958:	d502      	bpl.n	8008960 <_printf_float+0x194>
 800895a:	3301      	adds	r3, #1
 800895c:	440b      	add	r3, r1
 800895e:	6123      	str	r3, [r4, #16]
 8008960:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008962:	f04f 0900 	mov.w	r9, #0
 8008966:	e7db      	b.n	8008920 <_printf_float+0x154>
 8008968:	b913      	cbnz	r3, 8008970 <_printf_float+0x1a4>
 800896a:	6822      	ldr	r2, [r4, #0]
 800896c:	07d2      	lsls	r2, r2, #31
 800896e:	d501      	bpl.n	8008974 <_printf_float+0x1a8>
 8008970:	3302      	adds	r3, #2
 8008972:	e7f4      	b.n	800895e <_printf_float+0x192>
 8008974:	2301      	movs	r3, #1
 8008976:	e7f2      	b.n	800895e <_printf_float+0x192>
 8008978:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800897c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800897e:	4299      	cmp	r1, r3
 8008980:	db05      	blt.n	800898e <_printf_float+0x1c2>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	6121      	str	r1, [r4, #16]
 8008986:	07d8      	lsls	r0, r3, #31
 8008988:	d5ea      	bpl.n	8008960 <_printf_float+0x194>
 800898a:	1c4b      	adds	r3, r1, #1
 800898c:	e7e7      	b.n	800895e <_printf_float+0x192>
 800898e:	2900      	cmp	r1, #0
 8008990:	bfd4      	ite	le
 8008992:	f1c1 0202 	rsble	r2, r1, #2
 8008996:	2201      	movgt	r2, #1
 8008998:	4413      	add	r3, r2
 800899a:	e7e0      	b.n	800895e <_printf_float+0x192>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	055a      	lsls	r2, r3, #21
 80089a0:	d407      	bmi.n	80089b2 <_printf_float+0x1e6>
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	4642      	mov	r2, r8
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	d12b      	bne.n	8008a08 <_printf_float+0x23c>
 80089b0:	e767      	b.n	8008882 <_printf_float+0xb6>
 80089b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089b6:	f240 80dd 	bls.w	8008b74 <_printf_float+0x3a8>
 80089ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80089be:	2200      	movs	r2, #0
 80089c0:	2300      	movs	r3, #0
 80089c2:	f7f8 f889 	bl	8000ad8 <__aeabi_dcmpeq>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d033      	beq.n	8008a32 <_printf_float+0x266>
 80089ca:	4a37      	ldr	r2, [pc, #220]	@ (8008aa8 <_printf_float+0x2dc>)
 80089cc:	2301      	movs	r3, #1
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	47b8      	blx	r7
 80089d4:	3001      	adds	r0, #1
 80089d6:	f43f af54 	beq.w	8008882 <_printf_float+0xb6>
 80089da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80089de:	4543      	cmp	r3, r8
 80089e0:	db02      	blt.n	80089e8 <_printf_float+0x21c>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	07d8      	lsls	r0, r3, #31
 80089e6:	d50f      	bpl.n	8008a08 <_printf_float+0x23c>
 80089e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ec:	4631      	mov	r1, r6
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b8      	blx	r7
 80089f2:	3001      	adds	r0, #1
 80089f4:	f43f af45 	beq.w	8008882 <_printf_float+0xb6>
 80089f8:	f04f 0900 	mov.w	r9, #0
 80089fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a00:	f104 0a1a 	add.w	sl, r4, #26
 8008a04:	45c8      	cmp	r8, r9
 8008a06:	dc09      	bgt.n	8008a1c <_printf_float+0x250>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	079b      	lsls	r3, r3, #30
 8008a0c:	f100 8103 	bmi.w	8008c16 <_printf_float+0x44a>
 8008a10:	68e0      	ldr	r0, [r4, #12]
 8008a12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a14:	4298      	cmp	r0, r3
 8008a16:	bfb8      	it	lt
 8008a18:	4618      	movlt	r0, r3
 8008a1a:	e734      	b.n	8008886 <_printf_float+0xba>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	4652      	mov	r2, sl
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f af2b 	beq.w	8008882 <_printf_float+0xb6>
 8008a2c:	f109 0901 	add.w	r9, r9, #1
 8008a30:	e7e8      	b.n	8008a04 <_printf_float+0x238>
 8008a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	dc39      	bgt.n	8008aac <_printf_float+0x2e0>
 8008a38:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa8 <_printf_float+0x2dc>)
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	f43f af1d 	beq.w	8008882 <_printf_float+0xb6>
 8008a48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008a4c:	ea59 0303 	orrs.w	r3, r9, r3
 8008a50:	d102      	bne.n	8008a58 <_printf_float+0x28c>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	07d9      	lsls	r1, r3, #31
 8008a56:	d5d7      	bpl.n	8008a08 <_printf_float+0x23c>
 8008a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b8      	blx	r7
 8008a62:	3001      	adds	r0, #1
 8008a64:	f43f af0d 	beq.w	8008882 <_printf_float+0xb6>
 8008a68:	f04f 0a00 	mov.w	sl, #0
 8008a6c:	f104 0b1a 	add.w	fp, r4, #26
 8008a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a72:	425b      	negs	r3, r3
 8008a74:	4553      	cmp	r3, sl
 8008a76:	dc01      	bgt.n	8008a7c <_printf_float+0x2b0>
 8008a78:	464b      	mov	r3, r9
 8008a7a:	e793      	b.n	80089a4 <_printf_float+0x1d8>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	465a      	mov	r2, fp
 8008a80:	4631      	mov	r1, r6
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	f43f aefb 	beq.w	8008882 <_printf_float+0xb6>
 8008a8c:	f10a 0a01 	add.w	sl, sl, #1
 8008a90:	e7ee      	b.n	8008a70 <_printf_float+0x2a4>
 8008a92:	bf00      	nop
 8008a94:	7fefffff 	.word	0x7fefffff
 8008a98:	0800b074 	.word	0x0800b074
 8008a9c:	0800b070 	.word	0x0800b070
 8008aa0:	0800b07c 	.word	0x0800b07c
 8008aa4:	0800b078 	.word	0x0800b078
 8008aa8:	0800b080 	.word	0x0800b080
 8008aac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008aae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ab2:	4553      	cmp	r3, sl
 8008ab4:	bfa8      	it	ge
 8008ab6:	4653      	movge	r3, sl
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	4699      	mov	r9, r3
 8008abc:	dc36      	bgt.n	8008b2c <_printf_float+0x360>
 8008abe:	f04f 0b00 	mov.w	fp, #0
 8008ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ac6:	f104 021a 	add.w	r2, r4, #26
 8008aca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008acc:	9306      	str	r3, [sp, #24]
 8008ace:	eba3 0309 	sub.w	r3, r3, r9
 8008ad2:	455b      	cmp	r3, fp
 8008ad4:	dc31      	bgt.n	8008b3a <_printf_float+0x36e>
 8008ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad8:	459a      	cmp	sl, r3
 8008ada:	dc3a      	bgt.n	8008b52 <_printf_float+0x386>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	07da      	lsls	r2, r3, #31
 8008ae0:	d437      	bmi.n	8008b52 <_printf_float+0x386>
 8008ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae4:	ebaa 0903 	sub.w	r9, sl, r3
 8008ae8:	9b06      	ldr	r3, [sp, #24]
 8008aea:	ebaa 0303 	sub.w	r3, sl, r3
 8008aee:	4599      	cmp	r9, r3
 8008af0:	bfa8      	it	ge
 8008af2:	4699      	movge	r9, r3
 8008af4:	f1b9 0f00 	cmp.w	r9, #0
 8008af8:	dc33      	bgt.n	8008b62 <_printf_float+0x396>
 8008afa:	f04f 0800 	mov.w	r8, #0
 8008afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b02:	f104 0b1a 	add.w	fp, r4, #26
 8008b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b08:	ebaa 0303 	sub.w	r3, sl, r3
 8008b0c:	eba3 0309 	sub.w	r3, r3, r9
 8008b10:	4543      	cmp	r3, r8
 8008b12:	f77f af79 	ble.w	8008a08 <_printf_float+0x23c>
 8008b16:	2301      	movs	r3, #1
 8008b18:	465a      	mov	r2, fp
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	47b8      	blx	r7
 8008b20:	3001      	adds	r0, #1
 8008b22:	f43f aeae 	beq.w	8008882 <_printf_float+0xb6>
 8008b26:	f108 0801 	add.w	r8, r8, #1
 8008b2a:	e7ec      	b.n	8008b06 <_printf_float+0x33a>
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4628      	mov	r0, r5
 8008b32:	47b8      	blx	r7
 8008b34:	3001      	adds	r0, #1
 8008b36:	d1c2      	bne.n	8008abe <_printf_float+0x2f2>
 8008b38:	e6a3      	b.n	8008882 <_printf_float+0xb6>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4628      	mov	r0, r5
 8008b40:	9206      	str	r2, [sp, #24]
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	f43f ae9c 	beq.w	8008882 <_printf_float+0xb6>
 8008b4a:	9a06      	ldr	r2, [sp, #24]
 8008b4c:	f10b 0b01 	add.w	fp, fp, #1
 8008b50:	e7bb      	b.n	8008aca <_printf_float+0x2fe>
 8008b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d1c0      	bne.n	8008ae2 <_printf_float+0x316>
 8008b60:	e68f      	b.n	8008882 <_printf_float+0xb6>
 8008b62:	9a06      	ldr	r2, [sp, #24]
 8008b64:	464b      	mov	r3, r9
 8008b66:	4442      	add	r2, r8
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b8      	blx	r7
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d1c3      	bne.n	8008afa <_printf_float+0x32e>
 8008b72:	e686      	b.n	8008882 <_printf_float+0xb6>
 8008b74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b78:	f1ba 0f01 	cmp.w	sl, #1
 8008b7c:	dc01      	bgt.n	8008b82 <_printf_float+0x3b6>
 8008b7e:	07db      	lsls	r3, r3, #31
 8008b80:	d536      	bpl.n	8008bf0 <_printf_float+0x424>
 8008b82:	2301      	movs	r3, #1
 8008b84:	4642      	mov	r2, r8
 8008b86:	4631      	mov	r1, r6
 8008b88:	4628      	mov	r0, r5
 8008b8a:	47b8      	blx	r7
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	f43f ae78 	beq.w	8008882 <_printf_float+0xb6>
 8008b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b96:	4631      	mov	r1, r6
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b8      	blx	r7
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	f43f ae70 	beq.w	8008882 <_printf_float+0xb6>
 8008ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bae:	f7f7 ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bb2:	b9c0      	cbnz	r0, 8008be6 <_printf_float+0x41a>
 8008bb4:	4653      	mov	r3, sl
 8008bb6:	f108 0201 	add.w	r2, r8, #1
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d10c      	bne.n	8008bde <_printf_float+0x412>
 8008bc4:	e65d      	b.n	8008882 <_printf_float+0xb6>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	465a      	mov	r2, fp
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4628      	mov	r0, r5
 8008bce:	47b8      	blx	r7
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	f43f ae56 	beq.w	8008882 <_printf_float+0xb6>
 8008bd6:	f108 0801 	add.w	r8, r8, #1
 8008bda:	45d0      	cmp	r8, sl
 8008bdc:	dbf3      	blt.n	8008bc6 <_printf_float+0x3fa>
 8008bde:	464b      	mov	r3, r9
 8008be0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008be4:	e6df      	b.n	80089a6 <_printf_float+0x1da>
 8008be6:	f04f 0800 	mov.w	r8, #0
 8008bea:	f104 0b1a 	add.w	fp, r4, #26
 8008bee:	e7f4      	b.n	8008bda <_printf_float+0x40e>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	4642      	mov	r2, r8
 8008bf4:	e7e1      	b.n	8008bba <_printf_float+0x3ee>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	464a      	mov	r2, r9
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	f43f ae3e 	beq.w	8008882 <_printf_float+0xb6>
 8008c06:	f108 0801 	add.w	r8, r8, #1
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c0e:	1a5b      	subs	r3, r3, r1
 8008c10:	4543      	cmp	r3, r8
 8008c12:	dcf0      	bgt.n	8008bf6 <_printf_float+0x42a>
 8008c14:	e6fc      	b.n	8008a10 <_printf_float+0x244>
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	f104 0919 	add.w	r9, r4, #25
 8008c1e:	e7f4      	b.n	8008c0a <_printf_float+0x43e>

08008c20 <_printf_common>:
 8008c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c24:	4616      	mov	r6, r2
 8008c26:	4698      	mov	r8, r3
 8008c28:	688a      	ldr	r2, [r1, #8]
 8008c2a:	690b      	ldr	r3, [r1, #16]
 8008c2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c30:	4293      	cmp	r3, r2
 8008c32:	bfb8      	it	lt
 8008c34:	4613      	movlt	r3, r2
 8008c36:	6033      	str	r3, [r6, #0]
 8008c38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	b10a      	cbz	r2, 8008c46 <_printf_common+0x26>
 8008c42:	3301      	adds	r3, #1
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	0699      	lsls	r1, r3, #26
 8008c4a:	bf42      	ittt	mi
 8008c4c:	6833      	ldrmi	r3, [r6, #0]
 8008c4e:	3302      	addmi	r3, #2
 8008c50:	6033      	strmi	r3, [r6, #0]
 8008c52:	6825      	ldr	r5, [r4, #0]
 8008c54:	f015 0506 	ands.w	r5, r5, #6
 8008c58:	d106      	bne.n	8008c68 <_printf_common+0x48>
 8008c5a:	f104 0a19 	add.w	sl, r4, #25
 8008c5e:	68e3      	ldr	r3, [r4, #12]
 8008c60:	6832      	ldr	r2, [r6, #0]
 8008c62:	1a9b      	subs	r3, r3, r2
 8008c64:	42ab      	cmp	r3, r5
 8008c66:	dc26      	bgt.n	8008cb6 <_printf_common+0x96>
 8008c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c6c:	6822      	ldr	r2, [r4, #0]
 8008c6e:	3b00      	subs	r3, #0
 8008c70:	bf18      	it	ne
 8008c72:	2301      	movne	r3, #1
 8008c74:	0692      	lsls	r2, r2, #26
 8008c76:	d42b      	bmi.n	8008cd0 <_printf_common+0xb0>
 8008c78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	4638      	mov	r0, r7
 8008c80:	47c8      	blx	r9
 8008c82:	3001      	adds	r0, #1
 8008c84:	d01e      	beq.n	8008cc4 <_printf_common+0xa4>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	6922      	ldr	r2, [r4, #16]
 8008c8a:	f003 0306 	and.w	r3, r3, #6
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	bf02      	ittt	eq
 8008c92:	68e5      	ldreq	r5, [r4, #12]
 8008c94:	6833      	ldreq	r3, [r6, #0]
 8008c96:	1aed      	subeq	r5, r5, r3
 8008c98:	68a3      	ldr	r3, [r4, #8]
 8008c9a:	bf0c      	ite	eq
 8008c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ca0:	2500      	movne	r5, #0
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	bfc4      	itt	gt
 8008ca6:	1a9b      	subgt	r3, r3, r2
 8008ca8:	18ed      	addgt	r5, r5, r3
 8008caa:	2600      	movs	r6, #0
 8008cac:	341a      	adds	r4, #26
 8008cae:	42b5      	cmp	r5, r6
 8008cb0:	d11a      	bne.n	8008ce8 <_printf_common+0xc8>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e008      	b.n	8008cc8 <_printf_common+0xa8>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	4652      	mov	r2, sl
 8008cba:	4641      	mov	r1, r8
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	47c8      	blx	r9
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d103      	bne.n	8008ccc <_printf_common+0xac>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ccc:	3501      	adds	r5, #1
 8008cce:	e7c6      	b.n	8008c5e <_printf_common+0x3e>
 8008cd0:	18e1      	adds	r1, r4, r3
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	2030      	movs	r0, #48	@ 0x30
 8008cd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cda:	4422      	add	r2, r4
 8008cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ce0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	e7c7      	b.n	8008c78 <_printf_common+0x58>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	4622      	mov	r2, r4
 8008cec:	4641      	mov	r1, r8
 8008cee:	4638      	mov	r0, r7
 8008cf0:	47c8      	blx	r9
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	d0e6      	beq.n	8008cc4 <_printf_common+0xa4>
 8008cf6:	3601      	adds	r6, #1
 8008cf8:	e7d9      	b.n	8008cae <_printf_common+0x8e>
	...

08008cfc <_printf_i>:
 8008cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	7e0f      	ldrb	r7, [r1, #24]
 8008d02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d04:	2f78      	cmp	r7, #120	@ 0x78
 8008d06:	4691      	mov	r9, r2
 8008d08:	4680      	mov	r8, r0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	469a      	mov	sl, r3
 8008d0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d12:	d807      	bhi.n	8008d24 <_printf_i+0x28>
 8008d14:	2f62      	cmp	r7, #98	@ 0x62
 8008d16:	d80a      	bhi.n	8008d2e <_printf_i+0x32>
 8008d18:	2f00      	cmp	r7, #0
 8008d1a:	f000 80d1 	beq.w	8008ec0 <_printf_i+0x1c4>
 8008d1e:	2f58      	cmp	r7, #88	@ 0x58
 8008d20:	f000 80b8 	beq.w	8008e94 <_printf_i+0x198>
 8008d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d2c:	e03a      	b.n	8008da4 <_printf_i+0xa8>
 8008d2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d32:	2b15      	cmp	r3, #21
 8008d34:	d8f6      	bhi.n	8008d24 <_printf_i+0x28>
 8008d36:	a101      	add	r1, pc, #4	@ (adr r1, 8008d3c <_printf_i+0x40>)
 8008d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d3c:	08008d95 	.word	0x08008d95
 8008d40:	08008da9 	.word	0x08008da9
 8008d44:	08008d25 	.word	0x08008d25
 8008d48:	08008d25 	.word	0x08008d25
 8008d4c:	08008d25 	.word	0x08008d25
 8008d50:	08008d25 	.word	0x08008d25
 8008d54:	08008da9 	.word	0x08008da9
 8008d58:	08008d25 	.word	0x08008d25
 8008d5c:	08008d25 	.word	0x08008d25
 8008d60:	08008d25 	.word	0x08008d25
 8008d64:	08008d25 	.word	0x08008d25
 8008d68:	08008ea7 	.word	0x08008ea7
 8008d6c:	08008dd3 	.word	0x08008dd3
 8008d70:	08008e61 	.word	0x08008e61
 8008d74:	08008d25 	.word	0x08008d25
 8008d78:	08008d25 	.word	0x08008d25
 8008d7c:	08008ec9 	.word	0x08008ec9
 8008d80:	08008d25 	.word	0x08008d25
 8008d84:	08008dd3 	.word	0x08008dd3
 8008d88:	08008d25 	.word	0x08008d25
 8008d8c:	08008d25 	.word	0x08008d25
 8008d90:	08008e69 	.word	0x08008e69
 8008d94:	6833      	ldr	r3, [r6, #0]
 8008d96:	1d1a      	adds	r2, r3, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6032      	str	r2, [r6, #0]
 8008d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008da0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008da4:	2301      	movs	r3, #1
 8008da6:	e09c      	b.n	8008ee2 <_printf_i+0x1e6>
 8008da8:	6833      	ldr	r3, [r6, #0]
 8008daa:	6820      	ldr	r0, [r4, #0]
 8008dac:	1d19      	adds	r1, r3, #4
 8008dae:	6031      	str	r1, [r6, #0]
 8008db0:	0606      	lsls	r6, r0, #24
 8008db2:	d501      	bpl.n	8008db8 <_printf_i+0xbc>
 8008db4:	681d      	ldr	r5, [r3, #0]
 8008db6:	e003      	b.n	8008dc0 <_printf_i+0xc4>
 8008db8:	0645      	lsls	r5, r0, #25
 8008dba:	d5fb      	bpl.n	8008db4 <_printf_i+0xb8>
 8008dbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008dc0:	2d00      	cmp	r5, #0
 8008dc2:	da03      	bge.n	8008dcc <_printf_i+0xd0>
 8008dc4:	232d      	movs	r3, #45	@ 0x2d
 8008dc6:	426d      	negs	r5, r5
 8008dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dcc:	4858      	ldr	r0, [pc, #352]	@ (8008f30 <_printf_i+0x234>)
 8008dce:	230a      	movs	r3, #10
 8008dd0:	e011      	b.n	8008df6 <_printf_i+0xfa>
 8008dd2:	6821      	ldr	r1, [r4, #0]
 8008dd4:	6833      	ldr	r3, [r6, #0]
 8008dd6:	0608      	lsls	r0, r1, #24
 8008dd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ddc:	d402      	bmi.n	8008de4 <_printf_i+0xe8>
 8008dde:	0649      	lsls	r1, r1, #25
 8008de0:	bf48      	it	mi
 8008de2:	b2ad      	uxthmi	r5, r5
 8008de4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008de6:	4852      	ldr	r0, [pc, #328]	@ (8008f30 <_printf_i+0x234>)
 8008de8:	6033      	str	r3, [r6, #0]
 8008dea:	bf14      	ite	ne
 8008dec:	230a      	movne	r3, #10
 8008dee:	2308      	moveq	r3, #8
 8008df0:	2100      	movs	r1, #0
 8008df2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008df6:	6866      	ldr	r6, [r4, #4]
 8008df8:	60a6      	str	r6, [r4, #8]
 8008dfa:	2e00      	cmp	r6, #0
 8008dfc:	db05      	blt.n	8008e0a <_printf_i+0x10e>
 8008dfe:	6821      	ldr	r1, [r4, #0]
 8008e00:	432e      	orrs	r6, r5
 8008e02:	f021 0104 	bic.w	r1, r1, #4
 8008e06:	6021      	str	r1, [r4, #0]
 8008e08:	d04b      	beq.n	8008ea2 <_printf_i+0x1a6>
 8008e0a:	4616      	mov	r6, r2
 8008e0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e10:	fb03 5711 	mls	r7, r3, r1, r5
 8008e14:	5dc7      	ldrb	r7, [r0, r7]
 8008e16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e1a:	462f      	mov	r7, r5
 8008e1c:	42bb      	cmp	r3, r7
 8008e1e:	460d      	mov	r5, r1
 8008e20:	d9f4      	bls.n	8008e0c <_printf_i+0x110>
 8008e22:	2b08      	cmp	r3, #8
 8008e24:	d10b      	bne.n	8008e3e <_printf_i+0x142>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	07df      	lsls	r7, r3, #31
 8008e2a:	d508      	bpl.n	8008e3e <_printf_i+0x142>
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	6861      	ldr	r1, [r4, #4]
 8008e30:	4299      	cmp	r1, r3
 8008e32:	bfde      	ittt	le
 8008e34:	2330      	movle	r3, #48	@ 0x30
 8008e36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e3e:	1b92      	subs	r2, r2, r6
 8008e40:	6122      	str	r2, [r4, #16]
 8008e42:	f8cd a000 	str.w	sl, [sp]
 8008e46:	464b      	mov	r3, r9
 8008e48:	aa03      	add	r2, sp, #12
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	f7ff fee7 	bl	8008c20 <_printf_common>
 8008e52:	3001      	adds	r0, #1
 8008e54:	d14a      	bne.n	8008eec <_printf_i+0x1f0>
 8008e56:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5a:	b004      	add	sp, #16
 8008e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	f043 0320 	orr.w	r3, r3, #32
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	4832      	ldr	r0, [pc, #200]	@ (8008f34 <_printf_i+0x238>)
 8008e6a:	2778      	movs	r7, #120	@ 0x78
 8008e6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	6831      	ldr	r1, [r6, #0]
 8008e74:	061f      	lsls	r7, r3, #24
 8008e76:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e7a:	d402      	bmi.n	8008e82 <_printf_i+0x186>
 8008e7c:	065f      	lsls	r7, r3, #25
 8008e7e:	bf48      	it	mi
 8008e80:	b2ad      	uxthmi	r5, r5
 8008e82:	6031      	str	r1, [r6, #0]
 8008e84:	07d9      	lsls	r1, r3, #31
 8008e86:	bf44      	itt	mi
 8008e88:	f043 0320 	orrmi.w	r3, r3, #32
 8008e8c:	6023      	strmi	r3, [r4, #0]
 8008e8e:	b11d      	cbz	r5, 8008e98 <_printf_i+0x19c>
 8008e90:	2310      	movs	r3, #16
 8008e92:	e7ad      	b.n	8008df0 <_printf_i+0xf4>
 8008e94:	4826      	ldr	r0, [pc, #152]	@ (8008f30 <_printf_i+0x234>)
 8008e96:	e7e9      	b.n	8008e6c <_printf_i+0x170>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	f023 0320 	bic.w	r3, r3, #32
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	e7f6      	b.n	8008e90 <_printf_i+0x194>
 8008ea2:	4616      	mov	r6, r2
 8008ea4:	e7bd      	b.n	8008e22 <_printf_i+0x126>
 8008ea6:	6833      	ldr	r3, [r6, #0]
 8008ea8:	6825      	ldr	r5, [r4, #0]
 8008eaa:	6961      	ldr	r1, [r4, #20]
 8008eac:	1d18      	adds	r0, r3, #4
 8008eae:	6030      	str	r0, [r6, #0]
 8008eb0:	062e      	lsls	r6, r5, #24
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	d501      	bpl.n	8008eba <_printf_i+0x1be>
 8008eb6:	6019      	str	r1, [r3, #0]
 8008eb8:	e002      	b.n	8008ec0 <_printf_i+0x1c4>
 8008eba:	0668      	lsls	r0, r5, #25
 8008ebc:	d5fb      	bpl.n	8008eb6 <_printf_i+0x1ba>
 8008ebe:	8019      	strh	r1, [r3, #0]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	4616      	mov	r6, r2
 8008ec6:	e7bc      	b.n	8008e42 <_printf_i+0x146>
 8008ec8:	6833      	ldr	r3, [r6, #0]
 8008eca:	1d1a      	adds	r2, r3, #4
 8008ecc:	6032      	str	r2, [r6, #0]
 8008ece:	681e      	ldr	r6, [r3, #0]
 8008ed0:	6862      	ldr	r2, [r4, #4]
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f7f7 f983 	bl	80001e0 <memchr>
 8008eda:	b108      	cbz	r0, 8008ee0 <_printf_i+0x1e4>
 8008edc:	1b80      	subs	r0, r0, r6
 8008ede:	6060      	str	r0, [r4, #4]
 8008ee0:	6863      	ldr	r3, [r4, #4]
 8008ee2:	6123      	str	r3, [r4, #16]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eea:	e7aa      	b.n	8008e42 <_printf_i+0x146>
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	4632      	mov	r2, r6
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	47d0      	blx	sl
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d0ad      	beq.n	8008e56 <_printf_i+0x15a>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	079b      	lsls	r3, r3, #30
 8008efe:	d413      	bmi.n	8008f28 <_printf_i+0x22c>
 8008f00:	68e0      	ldr	r0, [r4, #12]
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	4298      	cmp	r0, r3
 8008f06:	bfb8      	it	lt
 8008f08:	4618      	movlt	r0, r3
 8008f0a:	e7a6      	b.n	8008e5a <_printf_i+0x15e>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	4632      	mov	r2, r6
 8008f10:	4649      	mov	r1, r9
 8008f12:	4640      	mov	r0, r8
 8008f14:	47d0      	blx	sl
 8008f16:	3001      	adds	r0, #1
 8008f18:	d09d      	beq.n	8008e56 <_printf_i+0x15a>
 8008f1a:	3501      	adds	r5, #1
 8008f1c:	68e3      	ldr	r3, [r4, #12]
 8008f1e:	9903      	ldr	r1, [sp, #12]
 8008f20:	1a5b      	subs	r3, r3, r1
 8008f22:	42ab      	cmp	r3, r5
 8008f24:	dcf2      	bgt.n	8008f0c <_printf_i+0x210>
 8008f26:	e7eb      	b.n	8008f00 <_printf_i+0x204>
 8008f28:	2500      	movs	r5, #0
 8008f2a:	f104 0619 	add.w	r6, r4, #25
 8008f2e:	e7f5      	b.n	8008f1c <_printf_i+0x220>
 8008f30:	0800b082 	.word	0x0800b082
 8008f34:	0800b093 	.word	0x0800b093

08008f38 <std>:
 8008f38:	2300      	movs	r3, #0
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f46:	6083      	str	r3, [r0, #8]
 8008f48:	8181      	strh	r1, [r0, #12]
 8008f4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f4c:	81c2      	strh	r2, [r0, #14]
 8008f4e:	6183      	str	r3, [r0, #24]
 8008f50:	4619      	mov	r1, r3
 8008f52:	2208      	movs	r2, #8
 8008f54:	305c      	adds	r0, #92	@ 0x5c
 8008f56:	f000 f906 	bl	8009166 <memset>
 8008f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f90 <std+0x58>)
 8008f5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f94 <std+0x5c>)
 8008f60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f62:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <std+0x60>)
 8008f64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f66:	4b0d      	ldr	r3, [pc, #52]	@ (8008f9c <std+0x64>)
 8008f68:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa0 <std+0x68>)
 8008f6c:	6224      	str	r4, [r4, #32]
 8008f6e:	429c      	cmp	r4, r3
 8008f70:	d006      	beq.n	8008f80 <std+0x48>
 8008f72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f76:	4294      	cmp	r4, r2
 8008f78:	d002      	beq.n	8008f80 <std+0x48>
 8008f7a:	33d0      	adds	r3, #208	@ 0xd0
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d105      	bne.n	8008f8c <std+0x54>
 8008f80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f88:	f000 b96a 	b.w	8009260 <__retarget_lock_init_recursive>
 8008f8c:	bd10      	pop	{r4, pc}
 8008f8e:	bf00      	nop
 8008f90:	080090e1 	.word	0x080090e1
 8008f94:	08009103 	.word	0x08009103
 8008f98:	0800913b 	.word	0x0800913b
 8008f9c:	0800915f 	.word	0x0800915f
 8008fa0:	20001f98 	.word	0x20001f98

08008fa4 <stdio_exit_handler>:
 8008fa4:	4a02      	ldr	r2, [pc, #8]	@ (8008fb0 <stdio_exit_handler+0xc>)
 8008fa6:	4903      	ldr	r1, [pc, #12]	@ (8008fb4 <stdio_exit_handler+0x10>)
 8008fa8:	4803      	ldr	r0, [pc, #12]	@ (8008fb8 <stdio_exit_handler+0x14>)
 8008faa:	f000 b869 	b.w	8009080 <_fwalk_sglue>
 8008fae:	bf00      	nop
 8008fb0:	200000fc 	.word	0x200000fc
 8008fb4:	0800abb9 	.word	0x0800abb9
 8008fb8:	2000010c 	.word	0x2000010c

08008fbc <cleanup_stdio>:
 8008fbc:	6841      	ldr	r1, [r0, #4]
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff0 <cleanup_stdio+0x34>)
 8008fc0:	4299      	cmp	r1, r3
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	d001      	beq.n	8008fcc <cleanup_stdio+0x10>
 8008fc8:	f001 fdf6 	bl	800abb8 <_fflush_r>
 8008fcc:	68a1      	ldr	r1, [r4, #8]
 8008fce:	4b09      	ldr	r3, [pc, #36]	@ (8008ff4 <cleanup_stdio+0x38>)
 8008fd0:	4299      	cmp	r1, r3
 8008fd2:	d002      	beq.n	8008fda <cleanup_stdio+0x1e>
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f001 fdef 	bl	800abb8 <_fflush_r>
 8008fda:	68e1      	ldr	r1, [r4, #12]
 8008fdc:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <cleanup_stdio+0x3c>)
 8008fde:	4299      	cmp	r1, r3
 8008fe0:	d004      	beq.n	8008fec <cleanup_stdio+0x30>
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe8:	f001 bde6 	b.w	800abb8 <_fflush_r>
 8008fec:	bd10      	pop	{r4, pc}
 8008fee:	bf00      	nop
 8008ff0:	20001f98 	.word	0x20001f98
 8008ff4:	20002000 	.word	0x20002000
 8008ff8:	20002068 	.word	0x20002068

08008ffc <global_stdio_init.part.0>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800902c <global_stdio_init.part.0+0x30>)
 8009000:	4c0b      	ldr	r4, [pc, #44]	@ (8009030 <global_stdio_init.part.0+0x34>)
 8009002:	4a0c      	ldr	r2, [pc, #48]	@ (8009034 <global_stdio_init.part.0+0x38>)
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	4620      	mov	r0, r4
 8009008:	2200      	movs	r2, #0
 800900a:	2104      	movs	r1, #4
 800900c:	f7ff ff94 	bl	8008f38 <std>
 8009010:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009014:	2201      	movs	r2, #1
 8009016:	2109      	movs	r1, #9
 8009018:	f7ff ff8e 	bl	8008f38 <std>
 800901c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009020:	2202      	movs	r2, #2
 8009022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009026:	2112      	movs	r1, #18
 8009028:	f7ff bf86 	b.w	8008f38 <std>
 800902c:	200020d0 	.word	0x200020d0
 8009030:	20001f98 	.word	0x20001f98
 8009034:	08008fa5 	.word	0x08008fa5

08009038 <__sfp_lock_acquire>:
 8009038:	4801      	ldr	r0, [pc, #4]	@ (8009040 <__sfp_lock_acquire+0x8>)
 800903a:	f000 b912 	b.w	8009262 <__retarget_lock_acquire_recursive>
 800903e:	bf00      	nop
 8009040:	200020d9 	.word	0x200020d9

08009044 <__sfp_lock_release>:
 8009044:	4801      	ldr	r0, [pc, #4]	@ (800904c <__sfp_lock_release+0x8>)
 8009046:	f000 b90d 	b.w	8009264 <__retarget_lock_release_recursive>
 800904a:	bf00      	nop
 800904c:	200020d9 	.word	0x200020d9

08009050 <__sinit>:
 8009050:	b510      	push	{r4, lr}
 8009052:	4604      	mov	r4, r0
 8009054:	f7ff fff0 	bl	8009038 <__sfp_lock_acquire>
 8009058:	6a23      	ldr	r3, [r4, #32]
 800905a:	b11b      	cbz	r3, 8009064 <__sinit+0x14>
 800905c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009060:	f7ff bff0 	b.w	8009044 <__sfp_lock_release>
 8009064:	4b04      	ldr	r3, [pc, #16]	@ (8009078 <__sinit+0x28>)
 8009066:	6223      	str	r3, [r4, #32]
 8009068:	4b04      	ldr	r3, [pc, #16]	@ (800907c <__sinit+0x2c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1f5      	bne.n	800905c <__sinit+0xc>
 8009070:	f7ff ffc4 	bl	8008ffc <global_stdio_init.part.0>
 8009074:	e7f2      	b.n	800905c <__sinit+0xc>
 8009076:	bf00      	nop
 8009078:	08008fbd 	.word	0x08008fbd
 800907c:	200020d0 	.word	0x200020d0

08009080 <_fwalk_sglue>:
 8009080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009084:	4607      	mov	r7, r0
 8009086:	4688      	mov	r8, r1
 8009088:	4614      	mov	r4, r2
 800908a:	2600      	movs	r6, #0
 800908c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009090:	f1b9 0901 	subs.w	r9, r9, #1
 8009094:	d505      	bpl.n	80090a2 <_fwalk_sglue+0x22>
 8009096:	6824      	ldr	r4, [r4, #0]
 8009098:	2c00      	cmp	r4, #0
 800909a:	d1f7      	bne.n	800908c <_fwalk_sglue+0xc>
 800909c:	4630      	mov	r0, r6
 800909e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d907      	bls.n	80090b8 <_fwalk_sglue+0x38>
 80090a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090ac:	3301      	adds	r3, #1
 80090ae:	d003      	beq.n	80090b8 <_fwalk_sglue+0x38>
 80090b0:	4629      	mov	r1, r5
 80090b2:	4638      	mov	r0, r7
 80090b4:	47c0      	blx	r8
 80090b6:	4306      	orrs	r6, r0
 80090b8:	3568      	adds	r5, #104	@ 0x68
 80090ba:	e7e9      	b.n	8009090 <_fwalk_sglue+0x10>

080090bc <iprintf>:
 80090bc:	b40f      	push	{r0, r1, r2, r3}
 80090be:	b507      	push	{r0, r1, r2, lr}
 80090c0:	4906      	ldr	r1, [pc, #24]	@ (80090dc <iprintf+0x20>)
 80090c2:	ab04      	add	r3, sp, #16
 80090c4:	6808      	ldr	r0, [r1, #0]
 80090c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ca:	6881      	ldr	r1, [r0, #8]
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	f001 fbd7 	bl	800a880 <_vfiprintf_r>
 80090d2:	b003      	add	sp, #12
 80090d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d8:	b004      	add	sp, #16
 80090da:	4770      	bx	lr
 80090dc:	20000108 	.word	0x20000108

080090e0 <__sread>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	460c      	mov	r4, r1
 80090e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e8:	f000 f86c 	bl	80091c4 <_read_r>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	bfab      	itete	ge
 80090f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090f2:	89a3      	ldrhlt	r3, [r4, #12]
 80090f4:	181b      	addge	r3, r3, r0
 80090f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090fa:	bfac      	ite	ge
 80090fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090fe:	81a3      	strhlt	r3, [r4, #12]
 8009100:	bd10      	pop	{r4, pc}

08009102 <__swrite>:
 8009102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009106:	461f      	mov	r7, r3
 8009108:	898b      	ldrh	r3, [r1, #12]
 800910a:	05db      	lsls	r3, r3, #23
 800910c:	4605      	mov	r5, r0
 800910e:	460c      	mov	r4, r1
 8009110:	4616      	mov	r6, r2
 8009112:	d505      	bpl.n	8009120 <__swrite+0x1e>
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	2302      	movs	r3, #2
 800911a:	2200      	movs	r2, #0
 800911c:	f000 f840 	bl	80091a0 <_lseek_r>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	4632      	mov	r2, r6
 800912e:	463b      	mov	r3, r7
 8009130:	4628      	mov	r0, r5
 8009132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009136:	f000 b857 	b.w	80091e8 <_write_r>

0800913a <__sseek>:
 800913a:	b510      	push	{r4, lr}
 800913c:	460c      	mov	r4, r1
 800913e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009142:	f000 f82d 	bl	80091a0 <_lseek_r>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	bf15      	itete	ne
 800914c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800914e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009156:	81a3      	strheq	r3, [r4, #12]
 8009158:	bf18      	it	ne
 800915a:	81a3      	strhne	r3, [r4, #12]
 800915c:	bd10      	pop	{r4, pc}

0800915e <__sclose>:
 800915e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009162:	f000 b80d 	b.w	8009180 <_close_r>

08009166 <memset>:
 8009166:	4402      	add	r2, r0
 8009168:	4603      	mov	r3, r0
 800916a:	4293      	cmp	r3, r2
 800916c:	d100      	bne.n	8009170 <memset+0xa>
 800916e:	4770      	bx	lr
 8009170:	f803 1b01 	strb.w	r1, [r3], #1
 8009174:	e7f9      	b.n	800916a <memset+0x4>
	...

08009178 <_localeconv_r>:
 8009178:	4800      	ldr	r0, [pc, #0]	@ (800917c <_localeconv_r+0x4>)
 800917a:	4770      	bx	lr
 800917c:	20000248 	.word	0x20000248

08009180 <_close_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4d06      	ldr	r5, [pc, #24]	@ (800919c <_close_r+0x1c>)
 8009184:	2300      	movs	r3, #0
 8009186:	4604      	mov	r4, r0
 8009188:	4608      	mov	r0, r1
 800918a:	602b      	str	r3, [r5, #0]
 800918c:	f7f8 f9e6 	bl	800155c <_close>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_close_r+0x1a>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_close_r+0x1a>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	200020d4 	.word	0x200020d4

080091a0 <_lseek_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4d07      	ldr	r5, [pc, #28]	@ (80091c0 <_lseek_r+0x20>)
 80091a4:	4604      	mov	r4, r0
 80091a6:	4608      	mov	r0, r1
 80091a8:	4611      	mov	r1, r2
 80091aa:	2200      	movs	r2, #0
 80091ac:	602a      	str	r2, [r5, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f7f8 f9fb 	bl	80015aa <_lseek>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_lseek_r+0x1e>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_lseek_r+0x1e>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	200020d4 	.word	0x200020d4

080091c4 <_read_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d07      	ldr	r5, [pc, #28]	@ (80091e4 <_read_r+0x20>)
 80091c8:	4604      	mov	r4, r0
 80091ca:	4608      	mov	r0, r1
 80091cc:	4611      	mov	r1, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	602a      	str	r2, [r5, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f7f8 f9a5 	bl	8001522 <_read>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_read_r+0x1e>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_read_r+0x1e>
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	200020d4 	.word	0x200020d4

080091e8 <_write_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d07      	ldr	r5, [pc, #28]	@ (8009208 <_write_r+0x20>)
 80091ec:	4604      	mov	r4, r0
 80091ee:	4608      	mov	r0, r1
 80091f0:	4611      	mov	r1, r2
 80091f2:	2200      	movs	r2, #0
 80091f4:	602a      	str	r2, [r5, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	f7f8 f83a 	bl	8001270 <_write>
 80091fc:	1c43      	adds	r3, r0, #1
 80091fe:	d102      	bne.n	8009206 <_write_r+0x1e>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	b103      	cbz	r3, 8009206 <_write_r+0x1e>
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	bd38      	pop	{r3, r4, r5, pc}
 8009208:	200020d4 	.word	0x200020d4

0800920c <__errno>:
 800920c:	4b01      	ldr	r3, [pc, #4]	@ (8009214 <__errno+0x8>)
 800920e:	6818      	ldr	r0, [r3, #0]
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20000108 	.word	0x20000108

08009218 <__libc_init_array>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	4d0d      	ldr	r5, [pc, #52]	@ (8009250 <__libc_init_array+0x38>)
 800921c:	4c0d      	ldr	r4, [pc, #52]	@ (8009254 <__libc_init_array+0x3c>)
 800921e:	1b64      	subs	r4, r4, r5
 8009220:	10a4      	asrs	r4, r4, #2
 8009222:	2600      	movs	r6, #0
 8009224:	42a6      	cmp	r6, r4
 8009226:	d109      	bne.n	800923c <__libc_init_array+0x24>
 8009228:	4d0b      	ldr	r5, [pc, #44]	@ (8009258 <__libc_init_array+0x40>)
 800922a:	4c0c      	ldr	r4, [pc, #48]	@ (800925c <__libc_init_array+0x44>)
 800922c:	f001 fec4 	bl	800afb8 <_init>
 8009230:	1b64      	subs	r4, r4, r5
 8009232:	10a4      	asrs	r4, r4, #2
 8009234:	2600      	movs	r6, #0
 8009236:	42a6      	cmp	r6, r4
 8009238:	d105      	bne.n	8009246 <__libc_init_array+0x2e>
 800923a:	bd70      	pop	{r4, r5, r6, pc}
 800923c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009240:	4798      	blx	r3
 8009242:	3601      	adds	r6, #1
 8009244:	e7ee      	b.n	8009224 <__libc_init_array+0xc>
 8009246:	f855 3b04 	ldr.w	r3, [r5], #4
 800924a:	4798      	blx	r3
 800924c:	3601      	adds	r6, #1
 800924e:	e7f2      	b.n	8009236 <__libc_init_array+0x1e>
 8009250:	0800b3ec 	.word	0x0800b3ec
 8009254:	0800b3ec 	.word	0x0800b3ec
 8009258:	0800b3ec 	.word	0x0800b3ec
 800925c:	0800b3f0 	.word	0x0800b3f0

08009260 <__retarget_lock_init_recursive>:
 8009260:	4770      	bx	lr

08009262 <__retarget_lock_acquire_recursive>:
 8009262:	4770      	bx	lr

08009264 <__retarget_lock_release_recursive>:
 8009264:	4770      	bx	lr

08009266 <memcpy>:
 8009266:	440a      	add	r2, r1
 8009268:	4291      	cmp	r1, r2
 800926a:	f100 33ff 	add.w	r3, r0, #4294967295
 800926e:	d100      	bne.n	8009272 <memcpy+0xc>
 8009270:	4770      	bx	lr
 8009272:	b510      	push	{r4, lr}
 8009274:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800927c:	4291      	cmp	r1, r2
 800927e:	d1f9      	bne.n	8009274 <memcpy+0xe>
 8009280:	bd10      	pop	{r4, pc}

08009282 <quorem>:
 8009282:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009286:	6903      	ldr	r3, [r0, #16]
 8009288:	690c      	ldr	r4, [r1, #16]
 800928a:	42a3      	cmp	r3, r4
 800928c:	4607      	mov	r7, r0
 800928e:	db7e      	blt.n	800938e <quorem+0x10c>
 8009290:	3c01      	subs	r4, #1
 8009292:	f101 0814 	add.w	r8, r1, #20
 8009296:	00a3      	lsls	r3, r4, #2
 8009298:	f100 0514 	add.w	r5, r0, #20
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092ac:	3301      	adds	r3, #1
 80092ae:	429a      	cmp	r2, r3
 80092b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80092b8:	d32e      	bcc.n	8009318 <quorem+0x96>
 80092ba:	f04f 0a00 	mov.w	sl, #0
 80092be:	46c4      	mov	ip, r8
 80092c0:	46ae      	mov	lr, r5
 80092c2:	46d3      	mov	fp, sl
 80092c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092c8:	b298      	uxth	r0, r3
 80092ca:	fb06 a000 	mla	r0, r6, r0, sl
 80092ce:	0c02      	lsrs	r2, r0, #16
 80092d0:	0c1b      	lsrs	r3, r3, #16
 80092d2:	fb06 2303 	mla	r3, r6, r3, r2
 80092d6:	f8de 2000 	ldr.w	r2, [lr]
 80092da:	b280      	uxth	r0, r0
 80092dc:	b292      	uxth	r2, r2
 80092de:	1a12      	subs	r2, r2, r0
 80092e0:	445a      	add	r2, fp
 80092e2:	f8de 0000 	ldr.w	r0, [lr]
 80092e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092f4:	b292      	uxth	r2, r2
 80092f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092fa:	45e1      	cmp	r9, ip
 80092fc:	f84e 2b04 	str.w	r2, [lr], #4
 8009300:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009304:	d2de      	bcs.n	80092c4 <quorem+0x42>
 8009306:	9b00      	ldr	r3, [sp, #0]
 8009308:	58eb      	ldr	r3, [r5, r3]
 800930a:	b92b      	cbnz	r3, 8009318 <quorem+0x96>
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	3b04      	subs	r3, #4
 8009310:	429d      	cmp	r5, r3
 8009312:	461a      	mov	r2, r3
 8009314:	d32f      	bcc.n	8009376 <quorem+0xf4>
 8009316:	613c      	str	r4, [r7, #16]
 8009318:	4638      	mov	r0, r7
 800931a:	f001 f97f 	bl	800a61c <__mcmp>
 800931e:	2800      	cmp	r0, #0
 8009320:	db25      	blt.n	800936e <quorem+0xec>
 8009322:	4629      	mov	r1, r5
 8009324:	2000      	movs	r0, #0
 8009326:	f858 2b04 	ldr.w	r2, [r8], #4
 800932a:	f8d1 c000 	ldr.w	ip, [r1]
 800932e:	fa1f fe82 	uxth.w	lr, r2
 8009332:	fa1f f38c 	uxth.w	r3, ip
 8009336:	eba3 030e 	sub.w	r3, r3, lr
 800933a:	4403      	add	r3, r0
 800933c:	0c12      	lsrs	r2, r2, #16
 800933e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009342:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009346:	b29b      	uxth	r3, r3
 8009348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800934c:	45c1      	cmp	r9, r8
 800934e:	f841 3b04 	str.w	r3, [r1], #4
 8009352:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009356:	d2e6      	bcs.n	8009326 <quorem+0xa4>
 8009358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800935c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009360:	b922      	cbnz	r2, 800936c <quorem+0xea>
 8009362:	3b04      	subs	r3, #4
 8009364:	429d      	cmp	r5, r3
 8009366:	461a      	mov	r2, r3
 8009368:	d30b      	bcc.n	8009382 <quorem+0x100>
 800936a:	613c      	str	r4, [r7, #16]
 800936c:	3601      	adds	r6, #1
 800936e:	4630      	mov	r0, r6
 8009370:	b003      	add	sp, #12
 8009372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009376:	6812      	ldr	r2, [r2, #0]
 8009378:	3b04      	subs	r3, #4
 800937a:	2a00      	cmp	r2, #0
 800937c:	d1cb      	bne.n	8009316 <quorem+0x94>
 800937e:	3c01      	subs	r4, #1
 8009380:	e7c6      	b.n	8009310 <quorem+0x8e>
 8009382:	6812      	ldr	r2, [r2, #0]
 8009384:	3b04      	subs	r3, #4
 8009386:	2a00      	cmp	r2, #0
 8009388:	d1ef      	bne.n	800936a <quorem+0xe8>
 800938a:	3c01      	subs	r4, #1
 800938c:	e7ea      	b.n	8009364 <quorem+0xe2>
 800938e:	2000      	movs	r0, #0
 8009390:	e7ee      	b.n	8009370 <quorem+0xee>
 8009392:	0000      	movs	r0, r0
 8009394:	0000      	movs	r0, r0
	...

08009398 <_dtoa_r>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	69c7      	ldr	r7, [r0, #28]
 800939e:	b097      	sub	sp, #92	@ 0x5c
 80093a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80093a4:	ec55 4b10 	vmov	r4, r5, d0
 80093a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80093aa:	9107      	str	r1, [sp, #28]
 80093ac:	4681      	mov	r9, r0
 80093ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80093b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80093b2:	b97f      	cbnz	r7, 80093d4 <_dtoa_r+0x3c>
 80093b4:	2010      	movs	r0, #16
 80093b6:	f000 fe09 	bl	8009fcc <malloc>
 80093ba:	4602      	mov	r2, r0
 80093bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80093c0:	b920      	cbnz	r0, 80093cc <_dtoa_r+0x34>
 80093c2:	4ba9      	ldr	r3, [pc, #676]	@ (8009668 <_dtoa_r+0x2d0>)
 80093c4:	21ef      	movs	r1, #239	@ 0xef
 80093c6:	48a9      	ldr	r0, [pc, #676]	@ (800966c <_dtoa_r+0x2d4>)
 80093c8:	f001 fcc2 	bl	800ad50 <__assert_func>
 80093cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80093d0:	6007      	str	r7, [r0, #0]
 80093d2:	60c7      	str	r7, [r0, #12]
 80093d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093d8:	6819      	ldr	r1, [r3, #0]
 80093da:	b159      	cbz	r1, 80093f4 <_dtoa_r+0x5c>
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	604a      	str	r2, [r1, #4]
 80093e0:	2301      	movs	r3, #1
 80093e2:	4093      	lsls	r3, r2
 80093e4:	608b      	str	r3, [r1, #8]
 80093e6:	4648      	mov	r0, r9
 80093e8:	f000 fee6 	bl	800a1b8 <_Bfree>
 80093ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	1e2b      	subs	r3, r5, #0
 80093f6:	bfb9      	ittee	lt
 80093f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093fc:	9305      	strlt	r3, [sp, #20]
 80093fe:	2300      	movge	r3, #0
 8009400:	6033      	strge	r3, [r6, #0]
 8009402:	9f05      	ldr	r7, [sp, #20]
 8009404:	4b9a      	ldr	r3, [pc, #616]	@ (8009670 <_dtoa_r+0x2d8>)
 8009406:	bfbc      	itt	lt
 8009408:	2201      	movlt	r2, #1
 800940a:	6032      	strlt	r2, [r6, #0]
 800940c:	43bb      	bics	r3, r7
 800940e:	d112      	bne.n	8009436 <_dtoa_r+0x9e>
 8009410:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009412:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800941c:	4323      	orrs	r3, r4
 800941e:	f000 855a 	beq.w	8009ed6 <_dtoa_r+0xb3e>
 8009422:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009424:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009684 <_dtoa_r+0x2ec>
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 855c 	beq.w	8009ee6 <_dtoa_r+0xb4e>
 800942e:	f10a 0303 	add.w	r3, sl, #3
 8009432:	f000 bd56 	b.w	8009ee2 <_dtoa_r+0xb4a>
 8009436:	ed9d 7b04 	vldr	d7, [sp, #16]
 800943a:	2200      	movs	r2, #0
 800943c:	ec51 0b17 	vmov	r0, r1, d7
 8009440:	2300      	movs	r3, #0
 8009442:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009446:	f7f7 fb47 	bl	8000ad8 <__aeabi_dcmpeq>
 800944a:	4680      	mov	r8, r0
 800944c:	b158      	cbz	r0, 8009466 <_dtoa_r+0xce>
 800944e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009450:	2301      	movs	r3, #1
 8009452:	6013      	str	r3, [r2, #0]
 8009454:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009456:	b113      	cbz	r3, 800945e <_dtoa_r+0xc6>
 8009458:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800945a:	4b86      	ldr	r3, [pc, #536]	@ (8009674 <_dtoa_r+0x2dc>)
 800945c:	6013      	str	r3, [r2, #0]
 800945e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009688 <_dtoa_r+0x2f0>
 8009462:	f000 bd40 	b.w	8009ee6 <_dtoa_r+0xb4e>
 8009466:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800946a:	aa14      	add	r2, sp, #80	@ 0x50
 800946c:	a915      	add	r1, sp, #84	@ 0x54
 800946e:	4648      	mov	r0, r9
 8009470:	f001 f984 	bl	800a77c <__d2b>
 8009474:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009478:	9002      	str	r0, [sp, #8]
 800947a:	2e00      	cmp	r6, #0
 800947c:	d078      	beq.n	8009570 <_dtoa_r+0x1d8>
 800947e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009480:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800948c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009490:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009494:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009498:	4619      	mov	r1, r3
 800949a:	2200      	movs	r2, #0
 800949c:	4b76      	ldr	r3, [pc, #472]	@ (8009678 <_dtoa_r+0x2e0>)
 800949e:	f7f6 fefb 	bl	8000298 <__aeabi_dsub>
 80094a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009650 <_dtoa_r+0x2b8>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f7f7 f8ae 	bl	8000608 <__aeabi_dmul>
 80094ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8009658 <_dtoa_r+0x2c0>)
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	f7f6 fef3 	bl	800029c <__adddf3>
 80094b6:	4604      	mov	r4, r0
 80094b8:	4630      	mov	r0, r6
 80094ba:	460d      	mov	r5, r1
 80094bc:	f7f7 f83a 	bl	8000534 <__aeabi_i2d>
 80094c0:	a367      	add	r3, pc, #412	@ (adr r3, 8009660 <_dtoa_r+0x2c8>)
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	f7f7 f89f 	bl	8000608 <__aeabi_dmul>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4620      	mov	r0, r4
 80094d0:	4629      	mov	r1, r5
 80094d2:	f7f6 fee3 	bl	800029c <__adddf3>
 80094d6:	4604      	mov	r4, r0
 80094d8:	460d      	mov	r5, r1
 80094da:	f7f7 fb45 	bl	8000b68 <__aeabi_d2iz>
 80094de:	2200      	movs	r2, #0
 80094e0:	4607      	mov	r7, r0
 80094e2:	2300      	movs	r3, #0
 80094e4:	4620      	mov	r0, r4
 80094e6:	4629      	mov	r1, r5
 80094e8:	f7f7 fb00 	bl	8000aec <__aeabi_dcmplt>
 80094ec:	b140      	cbz	r0, 8009500 <_dtoa_r+0x168>
 80094ee:	4638      	mov	r0, r7
 80094f0:	f7f7 f820 	bl	8000534 <__aeabi_i2d>
 80094f4:	4622      	mov	r2, r4
 80094f6:	462b      	mov	r3, r5
 80094f8:	f7f7 faee 	bl	8000ad8 <__aeabi_dcmpeq>
 80094fc:	b900      	cbnz	r0, 8009500 <_dtoa_r+0x168>
 80094fe:	3f01      	subs	r7, #1
 8009500:	2f16      	cmp	r7, #22
 8009502:	d852      	bhi.n	80095aa <_dtoa_r+0x212>
 8009504:	4b5d      	ldr	r3, [pc, #372]	@ (800967c <_dtoa_r+0x2e4>)
 8009506:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009512:	f7f7 faeb 	bl	8000aec <__aeabi_dcmplt>
 8009516:	2800      	cmp	r0, #0
 8009518:	d049      	beq.n	80095ae <_dtoa_r+0x216>
 800951a:	3f01      	subs	r7, #1
 800951c:	2300      	movs	r3, #0
 800951e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009520:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009522:	1b9b      	subs	r3, r3, r6
 8009524:	1e5a      	subs	r2, r3, #1
 8009526:	bf45      	ittet	mi
 8009528:	f1c3 0301 	rsbmi	r3, r3, #1
 800952c:	9300      	strmi	r3, [sp, #0]
 800952e:	2300      	movpl	r3, #0
 8009530:	2300      	movmi	r3, #0
 8009532:	9206      	str	r2, [sp, #24]
 8009534:	bf54      	ite	pl
 8009536:	9300      	strpl	r3, [sp, #0]
 8009538:	9306      	strmi	r3, [sp, #24]
 800953a:	2f00      	cmp	r7, #0
 800953c:	db39      	blt.n	80095b2 <_dtoa_r+0x21a>
 800953e:	9b06      	ldr	r3, [sp, #24]
 8009540:	970d      	str	r7, [sp, #52]	@ 0x34
 8009542:	443b      	add	r3, r7
 8009544:	9306      	str	r3, [sp, #24]
 8009546:	2300      	movs	r3, #0
 8009548:	9308      	str	r3, [sp, #32]
 800954a:	9b07      	ldr	r3, [sp, #28]
 800954c:	2b09      	cmp	r3, #9
 800954e:	d863      	bhi.n	8009618 <_dtoa_r+0x280>
 8009550:	2b05      	cmp	r3, #5
 8009552:	bfc4      	itt	gt
 8009554:	3b04      	subgt	r3, #4
 8009556:	9307      	strgt	r3, [sp, #28]
 8009558:	9b07      	ldr	r3, [sp, #28]
 800955a:	f1a3 0302 	sub.w	r3, r3, #2
 800955e:	bfcc      	ite	gt
 8009560:	2400      	movgt	r4, #0
 8009562:	2401      	movle	r4, #1
 8009564:	2b03      	cmp	r3, #3
 8009566:	d863      	bhi.n	8009630 <_dtoa_r+0x298>
 8009568:	e8df f003 	tbb	[pc, r3]
 800956c:	2b375452 	.word	0x2b375452
 8009570:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009574:	441e      	add	r6, r3
 8009576:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800957a:	2b20      	cmp	r3, #32
 800957c:	bfc1      	itttt	gt
 800957e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009582:	409f      	lslgt	r7, r3
 8009584:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009588:	fa24 f303 	lsrgt.w	r3, r4, r3
 800958c:	bfd6      	itet	le
 800958e:	f1c3 0320 	rsble	r3, r3, #32
 8009592:	ea47 0003 	orrgt.w	r0, r7, r3
 8009596:	fa04 f003 	lslle.w	r0, r4, r3
 800959a:	f7f6 ffbb 	bl	8000514 <__aeabi_ui2d>
 800959e:	2201      	movs	r2, #1
 80095a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80095a4:	3e01      	subs	r6, #1
 80095a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80095a8:	e776      	b.n	8009498 <_dtoa_r+0x100>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e7b7      	b.n	800951e <_dtoa_r+0x186>
 80095ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80095b0:	e7b6      	b.n	8009520 <_dtoa_r+0x188>
 80095b2:	9b00      	ldr	r3, [sp, #0]
 80095b4:	1bdb      	subs	r3, r3, r7
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	427b      	negs	r3, r7
 80095ba:	9308      	str	r3, [sp, #32]
 80095bc:	2300      	movs	r3, #0
 80095be:	930d      	str	r3, [sp, #52]	@ 0x34
 80095c0:	e7c3      	b.n	800954a <_dtoa_r+0x1b2>
 80095c2:	2301      	movs	r3, #1
 80095c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095c8:	eb07 0b03 	add.w	fp, r7, r3
 80095cc:	f10b 0301 	add.w	r3, fp, #1
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	9303      	str	r3, [sp, #12]
 80095d4:	bfb8      	it	lt
 80095d6:	2301      	movlt	r3, #1
 80095d8:	e006      	b.n	80095e8 <_dtoa_r+0x250>
 80095da:	2301      	movs	r3, #1
 80095dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	dd28      	ble.n	8009636 <_dtoa_r+0x29e>
 80095e4:	469b      	mov	fp, r3
 80095e6:	9303      	str	r3, [sp, #12]
 80095e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80095ec:	2100      	movs	r1, #0
 80095ee:	2204      	movs	r2, #4
 80095f0:	f102 0514 	add.w	r5, r2, #20
 80095f4:	429d      	cmp	r5, r3
 80095f6:	d926      	bls.n	8009646 <_dtoa_r+0x2ae>
 80095f8:	6041      	str	r1, [r0, #4]
 80095fa:	4648      	mov	r0, r9
 80095fc:	f000 fd9c 	bl	800a138 <_Balloc>
 8009600:	4682      	mov	sl, r0
 8009602:	2800      	cmp	r0, #0
 8009604:	d142      	bne.n	800968c <_dtoa_r+0x2f4>
 8009606:	4b1e      	ldr	r3, [pc, #120]	@ (8009680 <_dtoa_r+0x2e8>)
 8009608:	4602      	mov	r2, r0
 800960a:	f240 11af 	movw	r1, #431	@ 0x1af
 800960e:	e6da      	b.n	80093c6 <_dtoa_r+0x2e>
 8009610:	2300      	movs	r3, #0
 8009612:	e7e3      	b.n	80095dc <_dtoa_r+0x244>
 8009614:	2300      	movs	r3, #0
 8009616:	e7d5      	b.n	80095c4 <_dtoa_r+0x22c>
 8009618:	2401      	movs	r4, #1
 800961a:	2300      	movs	r3, #0
 800961c:	9307      	str	r3, [sp, #28]
 800961e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009620:	f04f 3bff 	mov.w	fp, #4294967295
 8009624:	2200      	movs	r2, #0
 8009626:	f8cd b00c 	str.w	fp, [sp, #12]
 800962a:	2312      	movs	r3, #18
 800962c:	920c      	str	r2, [sp, #48]	@ 0x30
 800962e:	e7db      	b.n	80095e8 <_dtoa_r+0x250>
 8009630:	2301      	movs	r3, #1
 8009632:	9309      	str	r3, [sp, #36]	@ 0x24
 8009634:	e7f4      	b.n	8009620 <_dtoa_r+0x288>
 8009636:	f04f 0b01 	mov.w	fp, #1
 800963a:	f8cd b00c 	str.w	fp, [sp, #12]
 800963e:	465b      	mov	r3, fp
 8009640:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009644:	e7d0      	b.n	80095e8 <_dtoa_r+0x250>
 8009646:	3101      	adds	r1, #1
 8009648:	0052      	lsls	r2, r2, #1
 800964a:	e7d1      	b.n	80095f0 <_dtoa_r+0x258>
 800964c:	f3af 8000 	nop.w
 8009650:	636f4361 	.word	0x636f4361
 8009654:	3fd287a7 	.word	0x3fd287a7
 8009658:	8b60c8b3 	.word	0x8b60c8b3
 800965c:	3fc68a28 	.word	0x3fc68a28
 8009660:	509f79fb 	.word	0x509f79fb
 8009664:	3fd34413 	.word	0x3fd34413
 8009668:	0800b0b1 	.word	0x0800b0b1
 800966c:	0800b0c8 	.word	0x0800b0c8
 8009670:	7ff00000 	.word	0x7ff00000
 8009674:	0800b081 	.word	0x0800b081
 8009678:	3ff80000 	.word	0x3ff80000
 800967c:	0800b218 	.word	0x0800b218
 8009680:	0800b120 	.word	0x0800b120
 8009684:	0800b0ad 	.word	0x0800b0ad
 8009688:	0800b080 	.word	0x0800b080
 800968c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009690:	6018      	str	r0, [r3, #0]
 8009692:	9b03      	ldr	r3, [sp, #12]
 8009694:	2b0e      	cmp	r3, #14
 8009696:	f200 80a1 	bhi.w	80097dc <_dtoa_r+0x444>
 800969a:	2c00      	cmp	r4, #0
 800969c:	f000 809e 	beq.w	80097dc <_dtoa_r+0x444>
 80096a0:	2f00      	cmp	r7, #0
 80096a2:	dd33      	ble.n	800970c <_dtoa_r+0x374>
 80096a4:	4b9c      	ldr	r3, [pc, #624]	@ (8009918 <_dtoa_r+0x580>)
 80096a6:	f007 020f 	and.w	r2, r7, #15
 80096aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ae:	ed93 7b00 	vldr	d7, [r3]
 80096b2:	05f8      	lsls	r0, r7, #23
 80096b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80096b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80096bc:	d516      	bpl.n	80096ec <_dtoa_r+0x354>
 80096be:	4b97      	ldr	r3, [pc, #604]	@ (800991c <_dtoa_r+0x584>)
 80096c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096c8:	f7f7 f8c8 	bl	800085c <__aeabi_ddiv>
 80096cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096d0:	f004 040f 	and.w	r4, r4, #15
 80096d4:	2603      	movs	r6, #3
 80096d6:	4d91      	ldr	r5, [pc, #580]	@ (800991c <_dtoa_r+0x584>)
 80096d8:	b954      	cbnz	r4, 80096f0 <_dtoa_r+0x358>
 80096da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096e2:	f7f7 f8bb 	bl	800085c <__aeabi_ddiv>
 80096e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096ea:	e028      	b.n	800973e <_dtoa_r+0x3a6>
 80096ec:	2602      	movs	r6, #2
 80096ee:	e7f2      	b.n	80096d6 <_dtoa_r+0x33e>
 80096f0:	07e1      	lsls	r1, r4, #31
 80096f2:	d508      	bpl.n	8009706 <_dtoa_r+0x36e>
 80096f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096fc:	f7f6 ff84 	bl	8000608 <__aeabi_dmul>
 8009700:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009704:	3601      	adds	r6, #1
 8009706:	1064      	asrs	r4, r4, #1
 8009708:	3508      	adds	r5, #8
 800970a:	e7e5      	b.n	80096d8 <_dtoa_r+0x340>
 800970c:	f000 80af 	beq.w	800986e <_dtoa_r+0x4d6>
 8009710:	427c      	negs	r4, r7
 8009712:	4b81      	ldr	r3, [pc, #516]	@ (8009918 <_dtoa_r+0x580>)
 8009714:	4d81      	ldr	r5, [pc, #516]	@ (800991c <_dtoa_r+0x584>)
 8009716:	f004 020f 	and.w	r2, r4, #15
 800971a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009726:	f7f6 ff6f 	bl	8000608 <__aeabi_dmul>
 800972a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800972e:	1124      	asrs	r4, r4, #4
 8009730:	2300      	movs	r3, #0
 8009732:	2602      	movs	r6, #2
 8009734:	2c00      	cmp	r4, #0
 8009736:	f040 808f 	bne.w	8009858 <_dtoa_r+0x4c0>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1d3      	bne.n	80096e6 <_dtoa_r+0x34e>
 800973e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009740:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 8094 	beq.w	8009872 <_dtoa_r+0x4da>
 800974a:	4b75      	ldr	r3, [pc, #468]	@ (8009920 <_dtoa_r+0x588>)
 800974c:	2200      	movs	r2, #0
 800974e:	4620      	mov	r0, r4
 8009750:	4629      	mov	r1, r5
 8009752:	f7f7 f9cb 	bl	8000aec <__aeabi_dcmplt>
 8009756:	2800      	cmp	r0, #0
 8009758:	f000 808b 	beq.w	8009872 <_dtoa_r+0x4da>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 8087 	beq.w	8009872 <_dtoa_r+0x4da>
 8009764:	f1bb 0f00 	cmp.w	fp, #0
 8009768:	dd34      	ble.n	80097d4 <_dtoa_r+0x43c>
 800976a:	4620      	mov	r0, r4
 800976c:	4b6d      	ldr	r3, [pc, #436]	@ (8009924 <_dtoa_r+0x58c>)
 800976e:	2200      	movs	r2, #0
 8009770:	4629      	mov	r1, r5
 8009772:	f7f6 ff49 	bl	8000608 <__aeabi_dmul>
 8009776:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800977a:	f107 38ff 	add.w	r8, r7, #4294967295
 800977e:	3601      	adds	r6, #1
 8009780:	465c      	mov	r4, fp
 8009782:	4630      	mov	r0, r6
 8009784:	f7f6 fed6 	bl	8000534 <__aeabi_i2d>
 8009788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800978c:	f7f6 ff3c 	bl	8000608 <__aeabi_dmul>
 8009790:	4b65      	ldr	r3, [pc, #404]	@ (8009928 <_dtoa_r+0x590>)
 8009792:	2200      	movs	r2, #0
 8009794:	f7f6 fd82 	bl	800029c <__adddf3>
 8009798:	4605      	mov	r5, r0
 800979a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800979e:	2c00      	cmp	r4, #0
 80097a0:	d16a      	bne.n	8009878 <_dtoa_r+0x4e0>
 80097a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097a6:	4b61      	ldr	r3, [pc, #388]	@ (800992c <_dtoa_r+0x594>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	f7f6 fd75 	bl	8000298 <__aeabi_dsub>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097b6:	462a      	mov	r2, r5
 80097b8:	4633      	mov	r3, r6
 80097ba:	f7f7 f9b5 	bl	8000b28 <__aeabi_dcmpgt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	f040 8298 	bne.w	8009cf4 <_dtoa_r+0x95c>
 80097c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097c8:	462a      	mov	r2, r5
 80097ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80097ce:	f7f7 f98d 	bl	8000aec <__aeabi_dcmplt>
 80097d2:	bb38      	cbnz	r0, 8009824 <_dtoa_r+0x48c>
 80097d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80097d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f2c0 8157 	blt.w	8009a92 <_dtoa_r+0x6fa>
 80097e4:	2f0e      	cmp	r7, #14
 80097e6:	f300 8154 	bgt.w	8009a92 <_dtoa_r+0x6fa>
 80097ea:	4b4b      	ldr	r3, [pc, #300]	@ (8009918 <_dtoa_r+0x580>)
 80097ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097f0:	ed93 7b00 	vldr	d7, [r3]
 80097f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	ed8d 7b00 	vstr	d7, [sp]
 80097fc:	f280 80e5 	bge.w	80099ca <_dtoa_r+0x632>
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f300 80e1 	bgt.w	80099ca <_dtoa_r+0x632>
 8009808:	d10c      	bne.n	8009824 <_dtoa_r+0x48c>
 800980a:	4b48      	ldr	r3, [pc, #288]	@ (800992c <_dtoa_r+0x594>)
 800980c:	2200      	movs	r2, #0
 800980e:	ec51 0b17 	vmov	r0, r1, d7
 8009812:	f7f6 fef9 	bl	8000608 <__aeabi_dmul>
 8009816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800981a:	f7f7 f97b 	bl	8000b14 <__aeabi_dcmpge>
 800981e:	2800      	cmp	r0, #0
 8009820:	f000 8266 	beq.w	8009cf0 <_dtoa_r+0x958>
 8009824:	2400      	movs	r4, #0
 8009826:	4625      	mov	r5, r4
 8009828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800982a:	4656      	mov	r6, sl
 800982c:	ea6f 0803 	mvn.w	r8, r3
 8009830:	2700      	movs	r7, #0
 8009832:	4621      	mov	r1, r4
 8009834:	4648      	mov	r0, r9
 8009836:	f000 fcbf 	bl	800a1b8 <_Bfree>
 800983a:	2d00      	cmp	r5, #0
 800983c:	f000 80bd 	beq.w	80099ba <_dtoa_r+0x622>
 8009840:	b12f      	cbz	r7, 800984e <_dtoa_r+0x4b6>
 8009842:	42af      	cmp	r7, r5
 8009844:	d003      	beq.n	800984e <_dtoa_r+0x4b6>
 8009846:	4639      	mov	r1, r7
 8009848:	4648      	mov	r0, r9
 800984a:	f000 fcb5 	bl	800a1b8 <_Bfree>
 800984e:	4629      	mov	r1, r5
 8009850:	4648      	mov	r0, r9
 8009852:	f000 fcb1 	bl	800a1b8 <_Bfree>
 8009856:	e0b0      	b.n	80099ba <_dtoa_r+0x622>
 8009858:	07e2      	lsls	r2, r4, #31
 800985a:	d505      	bpl.n	8009868 <_dtoa_r+0x4d0>
 800985c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009860:	f7f6 fed2 	bl	8000608 <__aeabi_dmul>
 8009864:	3601      	adds	r6, #1
 8009866:	2301      	movs	r3, #1
 8009868:	1064      	asrs	r4, r4, #1
 800986a:	3508      	adds	r5, #8
 800986c:	e762      	b.n	8009734 <_dtoa_r+0x39c>
 800986e:	2602      	movs	r6, #2
 8009870:	e765      	b.n	800973e <_dtoa_r+0x3a6>
 8009872:	9c03      	ldr	r4, [sp, #12]
 8009874:	46b8      	mov	r8, r7
 8009876:	e784      	b.n	8009782 <_dtoa_r+0x3ea>
 8009878:	4b27      	ldr	r3, [pc, #156]	@ (8009918 <_dtoa_r+0x580>)
 800987a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800987c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009880:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009884:	4454      	add	r4, sl
 8009886:	2900      	cmp	r1, #0
 8009888:	d054      	beq.n	8009934 <_dtoa_r+0x59c>
 800988a:	4929      	ldr	r1, [pc, #164]	@ (8009930 <_dtoa_r+0x598>)
 800988c:	2000      	movs	r0, #0
 800988e:	f7f6 ffe5 	bl	800085c <__aeabi_ddiv>
 8009892:	4633      	mov	r3, r6
 8009894:	462a      	mov	r2, r5
 8009896:	f7f6 fcff 	bl	8000298 <__aeabi_dsub>
 800989a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800989e:	4656      	mov	r6, sl
 80098a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098a4:	f7f7 f960 	bl	8000b68 <__aeabi_d2iz>
 80098a8:	4605      	mov	r5, r0
 80098aa:	f7f6 fe43 	bl	8000534 <__aeabi_i2d>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098b6:	f7f6 fcef 	bl	8000298 <__aeabi_dsub>
 80098ba:	3530      	adds	r5, #48	@ 0x30
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098c4:	f806 5b01 	strb.w	r5, [r6], #1
 80098c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098cc:	f7f7 f90e 	bl	8000aec <__aeabi_dcmplt>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d172      	bne.n	80099ba <_dtoa_r+0x622>
 80098d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098d8:	4911      	ldr	r1, [pc, #68]	@ (8009920 <_dtoa_r+0x588>)
 80098da:	2000      	movs	r0, #0
 80098dc:	f7f6 fcdc 	bl	8000298 <__aeabi_dsub>
 80098e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098e4:	f7f7 f902 	bl	8000aec <__aeabi_dcmplt>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f040 80b4 	bne.w	8009a56 <_dtoa_r+0x6be>
 80098ee:	42a6      	cmp	r6, r4
 80098f0:	f43f af70 	beq.w	80097d4 <_dtoa_r+0x43c>
 80098f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009924 <_dtoa_r+0x58c>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	f7f6 fe84 	bl	8000608 <__aeabi_dmul>
 8009900:	4b08      	ldr	r3, [pc, #32]	@ (8009924 <_dtoa_r+0x58c>)
 8009902:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009906:	2200      	movs	r2, #0
 8009908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800990c:	f7f6 fe7c 	bl	8000608 <__aeabi_dmul>
 8009910:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009914:	e7c4      	b.n	80098a0 <_dtoa_r+0x508>
 8009916:	bf00      	nop
 8009918:	0800b218 	.word	0x0800b218
 800991c:	0800b1f0 	.word	0x0800b1f0
 8009920:	3ff00000 	.word	0x3ff00000
 8009924:	40240000 	.word	0x40240000
 8009928:	401c0000 	.word	0x401c0000
 800992c:	40140000 	.word	0x40140000
 8009930:	3fe00000 	.word	0x3fe00000
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	f7f6 fe66 	bl	8000608 <__aeabi_dmul>
 800993c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009940:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009942:	4656      	mov	r6, sl
 8009944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009948:	f7f7 f90e 	bl	8000b68 <__aeabi_d2iz>
 800994c:	4605      	mov	r5, r0
 800994e:	f7f6 fdf1 	bl	8000534 <__aeabi_i2d>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800995a:	f7f6 fc9d 	bl	8000298 <__aeabi_dsub>
 800995e:	3530      	adds	r5, #48	@ 0x30
 8009960:	f806 5b01 	strb.w	r5, [r6], #1
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	42a6      	cmp	r6, r4
 800996a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800996e:	f04f 0200 	mov.w	r2, #0
 8009972:	d124      	bne.n	80099be <_dtoa_r+0x626>
 8009974:	4baf      	ldr	r3, [pc, #700]	@ (8009c34 <_dtoa_r+0x89c>)
 8009976:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800997a:	f7f6 fc8f 	bl	800029c <__adddf3>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009986:	f7f7 f8cf 	bl	8000b28 <__aeabi_dcmpgt>
 800998a:	2800      	cmp	r0, #0
 800998c:	d163      	bne.n	8009a56 <_dtoa_r+0x6be>
 800998e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009992:	49a8      	ldr	r1, [pc, #672]	@ (8009c34 <_dtoa_r+0x89c>)
 8009994:	2000      	movs	r0, #0
 8009996:	f7f6 fc7f 	bl	8000298 <__aeabi_dsub>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099a2:	f7f7 f8a3 	bl	8000aec <__aeabi_dcmplt>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f43f af14 	beq.w	80097d4 <_dtoa_r+0x43c>
 80099ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80099ae:	1e73      	subs	r3, r6, #1
 80099b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099b6:	2b30      	cmp	r3, #48	@ 0x30
 80099b8:	d0f8      	beq.n	80099ac <_dtoa_r+0x614>
 80099ba:	4647      	mov	r7, r8
 80099bc:	e03b      	b.n	8009a36 <_dtoa_r+0x69e>
 80099be:	4b9e      	ldr	r3, [pc, #632]	@ (8009c38 <_dtoa_r+0x8a0>)
 80099c0:	f7f6 fe22 	bl	8000608 <__aeabi_dmul>
 80099c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099c8:	e7bc      	b.n	8009944 <_dtoa_r+0x5ac>
 80099ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80099ce:	4656      	mov	r6, sl
 80099d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7f6 ff40 	bl	800085c <__aeabi_ddiv>
 80099dc:	f7f7 f8c4 	bl	8000b68 <__aeabi_d2iz>
 80099e0:	4680      	mov	r8, r0
 80099e2:	f7f6 fda7 	bl	8000534 <__aeabi_i2d>
 80099e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099ea:	f7f6 fe0d 	bl	8000608 <__aeabi_dmul>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4620      	mov	r0, r4
 80099f4:	4629      	mov	r1, r5
 80099f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099fa:	f7f6 fc4d 	bl	8000298 <__aeabi_dsub>
 80099fe:	f806 4b01 	strb.w	r4, [r6], #1
 8009a02:	9d03      	ldr	r5, [sp, #12]
 8009a04:	eba6 040a 	sub.w	r4, r6, sl
 8009a08:	42a5      	cmp	r5, r4
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	d133      	bne.n	8009a78 <_dtoa_r+0x6e0>
 8009a10:	f7f6 fc44 	bl	800029c <__adddf3>
 8009a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a18:	4604      	mov	r4, r0
 8009a1a:	460d      	mov	r5, r1
 8009a1c:	f7f7 f884 	bl	8000b28 <__aeabi_dcmpgt>
 8009a20:	b9c0      	cbnz	r0, 8009a54 <_dtoa_r+0x6bc>
 8009a22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a26:	4620      	mov	r0, r4
 8009a28:	4629      	mov	r1, r5
 8009a2a:	f7f7 f855 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a2e:	b110      	cbz	r0, 8009a36 <_dtoa_r+0x69e>
 8009a30:	f018 0f01 	tst.w	r8, #1
 8009a34:	d10e      	bne.n	8009a54 <_dtoa_r+0x6bc>
 8009a36:	9902      	ldr	r1, [sp, #8]
 8009a38:	4648      	mov	r0, r9
 8009a3a:	f000 fbbd 	bl	800a1b8 <_Bfree>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	7033      	strb	r3, [r6, #0]
 8009a42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a44:	3701      	adds	r7, #1
 8009a46:	601f      	str	r7, [r3, #0]
 8009a48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 824b 	beq.w	8009ee6 <_dtoa_r+0xb4e>
 8009a50:	601e      	str	r6, [r3, #0]
 8009a52:	e248      	b.n	8009ee6 <_dtoa_r+0xb4e>
 8009a54:	46b8      	mov	r8, r7
 8009a56:	4633      	mov	r3, r6
 8009a58:	461e      	mov	r6, r3
 8009a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a5e:	2a39      	cmp	r2, #57	@ 0x39
 8009a60:	d106      	bne.n	8009a70 <_dtoa_r+0x6d8>
 8009a62:	459a      	cmp	sl, r3
 8009a64:	d1f8      	bne.n	8009a58 <_dtoa_r+0x6c0>
 8009a66:	2230      	movs	r2, #48	@ 0x30
 8009a68:	f108 0801 	add.w	r8, r8, #1
 8009a6c:	f88a 2000 	strb.w	r2, [sl]
 8009a70:	781a      	ldrb	r2, [r3, #0]
 8009a72:	3201      	adds	r2, #1
 8009a74:	701a      	strb	r2, [r3, #0]
 8009a76:	e7a0      	b.n	80099ba <_dtoa_r+0x622>
 8009a78:	4b6f      	ldr	r3, [pc, #444]	@ (8009c38 <_dtoa_r+0x8a0>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f7f6 fdc4 	bl	8000608 <__aeabi_dmul>
 8009a80:	2200      	movs	r2, #0
 8009a82:	2300      	movs	r3, #0
 8009a84:	4604      	mov	r4, r0
 8009a86:	460d      	mov	r5, r1
 8009a88:	f7f7 f826 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d09f      	beq.n	80099d0 <_dtoa_r+0x638>
 8009a90:	e7d1      	b.n	8009a36 <_dtoa_r+0x69e>
 8009a92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a94:	2a00      	cmp	r2, #0
 8009a96:	f000 80ea 	beq.w	8009c6e <_dtoa_r+0x8d6>
 8009a9a:	9a07      	ldr	r2, [sp, #28]
 8009a9c:	2a01      	cmp	r2, #1
 8009a9e:	f300 80cd 	bgt.w	8009c3c <_dtoa_r+0x8a4>
 8009aa2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009aa4:	2a00      	cmp	r2, #0
 8009aa6:	f000 80c1 	beq.w	8009c2c <_dtoa_r+0x894>
 8009aaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009aae:	9c08      	ldr	r4, [sp, #32]
 8009ab0:	9e00      	ldr	r6, [sp, #0]
 8009ab2:	9a00      	ldr	r2, [sp, #0]
 8009ab4:	441a      	add	r2, r3
 8009ab6:	9200      	str	r2, [sp, #0]
 8009ab8:	9a06      	ldr	r2, [sp, #24]
 8009aba:	2101      	movs	r1, #1
 8009abc:	441a      	add	r2, r3
 8009abe:	4648      	mov	r0, r9
 8009ac0:	9206      	str	r2, [sp, #24]
 8009ac2:	f000 fc2d 	bl	800a320 <__i2b>
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b166      	cbz	r6, 8009ae4 <_dtoa_r+0x74c>
 8009aca:	9b06      	ldr	r3, [sp, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	dd09      	ble.n	8009ae4 <_dtoa_r+0x74c>
 8009ad0:	42b3      	cmp	r3, r6
 8009ad2:	9a00      	ldr	r2, [sp, #0]
 8009ad4:	bfa8      	it	ge
 8009ad6:	4633      	movge	r3, r6
 8009ad8:	1ad2      	subs	r2, r2, r3
 8009ada:	9200      	str	r2, [sp, #0]
 8009adc:	9a06      	ldr	r2, [sp, #24]
 8009ade:	1af6      	subs	r6, r6, r3
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	9306      	str	r3, [sp, #24]
 8009ae4:	9b08      	ldr	r3, [sp, #32]
 8009ae6:	b30b      	cbz	r3, 8009b2c <_dtoa_r+0x794>
 8009ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 80c6 	beq.w	8009c7c <_dtoa_r+0x8e4>
 8009af0:	2c00      	cmp	r4, #0
 8009af2:	f000 80c0 	beq.w	8009c76 <_dtoa_r+0x8de>
 8009af6:	4629      	mov	r1, r5
 8009af8:	4622      	mov	r2, r4
 8009afa:	4648      	mov	r0, r9
 8009afc:	f000 fcc8 	bl	800a490 <__pow5mult>
 8009b00:	9a02      	ldr	r2, [sp, #8]
 8009b02:	4601      	mov	r1, r0
 8009b04:	4605      	mov	r5, r0
 8009b06:	4648      	mov	r0, r9
 8009b08:	f000 fc20 	bl	800a34c <__multiply>
 8009b0c:	9902      	ldr	r1, [sp, #8]
 8009b0e:	4680      	mov	r8, r0
 8009b10:	4648      	mov	r0, r9
 8009b12:	f000 fb51 	bl	800a1b8 <_Bfree>
 8009b16:	9b08      	ldr	r3, [sp, #32]
 8009b18:	1b1b      	subs	r3, r3, r4
 8009b1a:	9308      	str	r3, [sp, #32]
 8009b1c:	f000 80b1 	beq.w	8009c82 <_dtoa_r+0x8ea>
 8009b20:	9a08      	ldr	r2, [sp, #32]
 8009b22:	4641      	mov	r1, r8
 8009b24:	4648      	mov	r0, r9
 8009b26:	f000 fcb3 	bl	800a490 <__pow5mult>
 8009b2a:	9002      	str	r0, [sp, #8]
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	4648      	mov	r0, r9
 8009b30:	f000 fbf6 	bl	800a320 <__i2b>
 8009b34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b36:	4604      	mov	r4, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 81d8 	beq.w	8009eee <_dtoa_r+0xb56>
 8009b3e:	461a      	mov	r2, r3
 8009b40:	4601      	mov	r1, r0
 8009b42:	4648      	mov	r0, r9
 8009b44:	f000 fca4 	bl	800a490 <__pow5mult>
 8009b48:	9b07      	ldr	r3, [sp, #28]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	f300 809f 	bgt.w	8009c90 <_dtoa_r+0x8f8>
 8009b52:	9b04      	ldr	r3, [sp, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f040 8097 	bne.w	8009c88 <_dtoa_r+0x8f0>
 8009b5a:	9b05      	ldr	r3, [sp, #20]
 8009b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f040 8093 	bne.w	8009c8c <_dtoa_r+0x8f4>
 8009b66:	9b05      	ldr	r3, [sp, #20]
 8009b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b6c:	0d1b      	lsrs	r3, r3, #20
 8009b6e:	051b      	lsls	r3, r3, #20
 8009b70:	b133      	cbz	r3, 8009b80 <_dtoa_r+0x7e8>
 8009b72:	9b00      	ldr	r3, [sp, #0]
 8009b74:	3301      	adds	r3, #1
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	9b06      	ldr	r3, [sp, #24]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	9306      	str	r3, [sp, #24]
 8009b7e:	2301      	movs	r3, #1
 8009b80:	9308      	str	r3, [sp, #32]
 8009b82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 81b8 	beq.w	8009efa <_dtoa_r+0xb62>
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b90:	6918      	ldr	r0, [r3, #16]
 8009b92:	f000 fb79 	bl	800a288 <__hi0bits>
 8009b96:	f1c0 0020 	rsb	r0, r0, #32
 8009b9a:	9b06      	ldr	r3, [sp, #24]
 8009b9c:	4418      	add	r0, r3
 8009b9e:	f010 001f 	ands.w	r0, r0, #31
 8009ba2:	f000 8082 	beq.w	8009caa <_dtoa_r+0x912>
 8009ba6:	f1c0 0320 	rsb	r3, r0, #32
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	dd73      	ble.n	8009c96 <_dtoa_r+0x8fe>
 8009bae:	9b00      	ldr	r3, [sp, #0]
 8009bb0:	f1c0 001c 	rsb	r0, r0, #28
 8009bb4:	4403      	add	r3, r0
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	9b06      	ldr	r3, [sp, #24]
 8009bba:	4403      	add	r3, r0
 8009bbc:	4406      	add	r6, r0
 8009bbe:	9306      	str	r3, [sp, #24]
 8009bc0:	9b00      	ldr	r3, [sp, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	dd05      	ble.n	8009bd2 <_dtoa_r+0x83a>
 8009bc6:	9902      	ldr	r1, [sp, #8]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4648      	mov	r0, r9
 8009bcc:	f000 fcba 	bl	800a544 <__lshift>
 8009bd0:	9002      	str	r0, [sp, #8]
 8009bd2:	9b06      	ldr	r3, [sp, #24]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	dd05      	ble.n	8009be4 <_dtoa_r+0x84c>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	461a      	mov	r2, r3
 8009bdc:	4648      	mov	r0, r9
 8009bde:	f000 fcb1 	bl	800a544 <__lshift>
 8009be2:	4604      	mov	r4, r0
 8009be4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d061      	beq.n	8009cae <_dtoa_r+0x916>
 8009bea:	9802      	ldr	r0, [sp, #8]
 8009bec:	4621      	mov	r1, r4
 8009bee:	f000 fd15 	bl	800a61c <__mcmp>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	da5b      	bge.n	8009cae <_dtoa_r+0x916>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	9902      	ldr	r1, [sp, #8]
 8009bfa:	220a      	movs	r2, #10
 8009bfc:	4648      	mov	r0, r9
 8009bfe:	f000 fafd 	bl	800a1fc <__multadd>
 8009c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c04:	9002      	str	r0, [sp, #8]
 8009c06:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 8177 	beq.w	8009efe <_dtoa_r+0xb66>
 8009c10:	4629      	mov	r1, r5
 8009c12:	2300      	movs	r3, #0
 8009c14:	220a      	movs	r2, #10
 8009c16:	4648      	mov	r0, r9
 8009c18:	f000 faf0 	bl	800a1fc <__multadd>
 8009c1c:	f1bb 0f00 	cmp.w	fp, #0
 8009c20:	4605      	mov	r5, r0
 8009c22:	dc6f      	bgt.n	8009d04 <_dtoa_r+0x96c>
 8009c24:	9b07      	ldr	r3, [sp, #28]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	dc49      	bgt.n	8009cbe <_dtoa_r+0x926>
 8009c2a:	e06b      	b.n	8009d04 <_dtoa_r+0x96c>
 8009c2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c32:	e73c      	b.n	8009aae <_dtoa_r+0x716>
 8009c34:	3fe00000 	.word	0x3fe00000
 8009c38:	40240000 	.word	0x40240000
 8009c3c:	9b03      	ldr	r3, [sp, #12]
 8009c3e:	1e5c      	subs	r4, r3, #1
 8009c40:	9b08      	ldr	r3, [sp, #32]
 8009c42:	42a3      	cmp	r3, r4
 8009c44:	db09      	blt.n	8009c5a <_dtoa_r+0x8c2>
 8009c46:	1b1c      	subs	r4, r3, r4
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f6bf af30 	bge.w	8009ab0 <_dtoa_r+0x718>
 8009c50:	9b00      	ldr	r3, [sp, #0]
 8009c52:	9a03      	ldr	r2, [sp, #12]
 8009c54:	1a9e      	subs	r6, r3, r2
 8009c56:	2300      	movs	r3, #0
 8009c58:	e72b      	b.n	8009ab2 <_dtoa_r+0x71a>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c5e:	9408      	str	r4, [sp, #32]
 8009c60:	1ae3      	subs	r3, r4, r3
 8009c62:	441a      	add	r2, r3
 8009c64:	9e00      	ldr	r6, [sp, #0]
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	920d      	str	r2, [sp, #52]	@ 0x34
 8009c6a:	2400      	movs	r4, #0
 8009c6c:	e721      	b.n	8009ab2 <_dtoa_r+0x71a>
 8009c6e:	9c08      	ldr	r4, [sp, #32]
 8009c70:	9e00      	ldr	r6, [sp, #0]
 8009c72:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009c74:	e728      	b.n	8009ac8 <_dtoa_r+0x730>
 8009c76:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009c7a:	e751      	b.n	8009b20 <_dtoa_r+0x788>
 8009c7c:	9a08      	ldr	r2, [sp, #32]
 8009c7e:	9902      	ldr	r1, [sp, #8]
 8009c80:	e750      	b.n	8009b24 <_dtoa_r+0x78c>
 8009c82:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c86:	e751      	b.n	8009b2c <_dtoa_r+0x794>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	e779      	b.n	8009b80 <_dtoa_r+0x7e8>
 8009c8c:	9b04      	ldr	r3, [sp, #16]
 8009c8e:	e777      	b.n	8009b80 <_dtoa_r+0x7e8>
 8009c90:	2300      	movs	r3, #0
 8009c92:	9308      	str	r3, [sp, #32]
 8009c94:	e779      	b.n	8009b8a <_dtoa_r+0x7f2>
 8009c96:	d093      	beq.n	8009bc0 <_dtoa_r+0x828>
 8009c98:	9a00      	ldr	r2, [sp, #0]
 8009c9a:	331c      	adds	r3, #28
 8009c9c:	441a      	add	r2, r3
 8009c9e:	9200      	str	r2, [sp, #0]
 8009ca0:	9a06      	ldr	r2, [sp, #24]
 8009ca2:	441a      	add	r2, r3
 8009ca4:	441e      	add	r6, r3
 8009ca6:	9206      	str	r2, [sp, #24]
 8009ca8:	e78a      	b.n	8009bc0 <_dtoa_r+0x828>
 8009caa:	4603      	mov	r3, r0
 8009cac:	e7f4      	b.n	8009c98 <_dtoa_r+0x900>
 8009cae:	9b03      	ldr	r3, [sp, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	46b8      	mov	r8, r7
 8009cb4:	dc20      	bgt.n	8009cf8 <_dtoa_r+0x960>
 8009cb6:	469b      	mov	fp, r3
 8009cb8:	9b07      	ldr	r3, [sp, #28]
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	dd1e      	ble.n	8009cfc <_dtoa_r+0x964>
 8009cbe:	f1bb 0f00 	cmp.w	fp, #0
 8009cc2:	f47f adb1 	bne.w	8009828 <_dtoa_r+0x490>
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	465b      	mov	r3, fp
 8009cca:	2205      	movs	r2, #5
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f000 fa95 	bl	800a1fc <__multadd>
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	9802      	ldr	r0, [sp, #8]
 8009cd8:	f000 fca0 	bl	800a61c <__mcmp>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	f77f ada3 	ble.w	8009828 <_dtoa_r+0x490>
 8009ce2:	4656      	mov	r6, sl
 8009ce4:	2331      	movs	r3, #49	@ 0x31
 8009ce6:	f806 3b01 	strb.w	r3, [r6], #1
 8009cea:	f108 0801 	add.w	r8, r8, #1
 8009cee:	e59f      	b.n	8009830 <_dtoa_r+0x498>
 8009cf0:	9c03      	ldr	r4, [sp, #12]
 8009cf2:	46b8      	mov	r8, r7
 8009cf4:	4625      	mov	r5, r4
 8009cf6:	e7f4      	b.n	8009ce2 <_dtoa_r+0x94a>
 8009cf8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 8101 	beq.w	8009f06 <_dtoa_r+0xb6e>
 8009d04:	2e00      	cmp	r6, #0
 8009d06:	dd05      	ble.n	8009d14 <_dtoa_r+0x97c>
 8009d08:	4629      	mov	r1, r5
 8009d0a:	4632      	mov	r2, r6
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	f000 fc19 	bl	800a544 <__lshift>
 8009d12:	4605      	mov	r5, r0
 8009d14:	9b08      	ldr	r3, [sp, #32]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d05c      	beq.n	8009dd4 <_dtoa_r+0xa3c>
 8009d1a:	6869      	ldr	r1, [r5, #4]
 8009d1c:	4648      	mov	r0, r9
 8009d1e:	f000 fa0b 	bl	800a138 <_Balloc>
 8009d22:	4606      	mov	r6, r0
 8009d24:	b928      	cbnz	r0, 8009d32 <_dtoa_r+0x99a>
 8009d26:	4b82      	ldr	r3, [pc, #520]	@ (8009f30 <_dtoa_r+0xb98>)
 8009d28:	4602      	mov	r2, r0
 8009d2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d2e:	f7ff bb4a 	b.w	80093c6 <_dtoa_r+0x2e>
 8009d32:	692a      	ldr	r2, [r5, #16]
 8009d34:	3202      	adds	r2, #2
 8009d36:	0092      	lsls	r2, r2, #2
 8009d38:	f105 010c 	add.w	r1, r5, #12
 8009d3c:	300c      	adds	r0, #12
 8009d3e:	f7ff fa92 	bl	8009266 <memcpy>
 8009d42:	2201      	movs	r2, #1
 8009d44:	4631      	mov	r1, r6
 8009d46:	4648      	mov	r0, r9
 8009d48:	f000 fbfc 	bl	800a544 <__lshift>
 8009d4c:	f10a 0301 	add.w	r3, sl, #1
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	eb0a 030b 	add.w	r3, sl, fp
 8009d56:	9308      	str	r3, [sp, #32]
 8009d58:	9b04      	ldr	r3, [sp, #16]
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	462f      	mov	r7, r5
 8009d60:	9306      	str	r3, [sp, #24]
 8009d62:	4605      	mov	r5, r0
 8009d64:	9b00      	ldr	r3, [sp, #0]
 8009d66:	9802      	ldr	r0, [sp, #8]
 8009d68:	4621      	mov	r1, r4
 8009d6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009d6e:	f7ff fa88 	bl	8009282 <quorem>
 8009d72:	4603      	mov	r3, r0
 8009d74:	3330      	adds	r3, #48	@ 0x30
 8009d76:	9003      	str	r0, [sp, #12]
 8009d78:	4639      	mov	r1, r7
 8009d7a:	9802      	ldr	r0, [sp, #8]
 8009d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d7e:	f000 fc4d 	bl	800a61c <__mcmp>
 8009d82:	462a      	mov	r2, r5
 8009d84:	9004      	str	r0, [sp, #16]
 8009d86:	4621      	mov	r1, r4
 8009d88:	4648      	mov	r0, r9
 8009d8a:	f000 fc63 	bl	800a654 <__mdiff>
 8009d8e:	68c2      	ldr	r2, [r0, #12]
 8009d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d92:	4606      	mov	r6, r0
 8009d94:	bb02      	cbnz	r2, 8009dd8 <_dtoa_r+0xa40>
 8009d96:	4601      	mov	r1, r0
 8009d98:	9802      	ldr	r0, [sp, #8]
 8009d9a:	f000 fc3f 	bl	800a61c <__mcmp>
 8009d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da0:	4602      	mov	r2, r0
 8009da2:	4631      	mov	r1, r6
 8009da4:	4648      	mov	r0, r9
 8009da6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009daa:	f000 fa05 	bl	800a1b8 <_Bfree>
 8009dae:	9b07      	ldr	r3, [sp, #28]
 8009db0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009db2:	9e00      	ldr	r6, [sp, #0]
 8009db4:	ea42 0103 	orr.w	r1, r2, r3
 8009db8:	9b06      	ldr	r3, [sp, #24]
 8009dba:	4319      	orrs	r1, r3
 8009dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbe:	d10d      	bne.n	8009ddc <_dtoa_r+0xa44>
 8009dc0:	2b39      	cmp	r3, #57	@ 0x39
 8009dc2:	d027      	beq.n	8009e14 <_dtoa_r+0xa7c>
 8009dc4:	9a04      	ldr	r2, [sp, #16]
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	dd01      	ble.n	8009dce <_dtoa_r+0xa36>
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	3331      	adds	r3, #49	@ 0x31
 8009dce:	f88b 3000 	strb.w	r3, [fp]
 8009dd2:	e52e      	b.n	8009832 <_dtoa_r+0x49a>
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	e7b9      	b.n	8009d4c <_dtoa_r+0x9b4>
 8009dd8:	2201      	movs	r2, #1
 8009dda:	e7e2      	b.n	8009da2 <_dtoa_r+0xa0a>
 8009ddc:	9904      	ldr	r1, [sp, #16]
 8009dde:	2900      	cmp	r1, #0
 8009de0:	db04      	blt.n	8009dec <_dtoa_r+0xa54>
 8009de2:	9807      	ldr	r0, [sp, #28]
 8009de4:	4301      	orrs	r1, r0
 8009de6:	9806      	ldr	r0, [sp, #24]
 8009de8:	4301      	orrs	r1, r0
 8009dea:	d120      	bne.n	8009e2e <_dtoa_r+0xa96>
 8009dec:	2a00      	cmp	r2, #0
 8009dee:	ddee      	ble.n	8009dce <_dtoa_r+0xa36>
 8009df0:	9902      	ldr	r1, [sp, #8]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	2201      	movs	r2, #1
 8009df6:	4648      	mov	r0, r9
 8009df8:	f000 fba4 	bl	800a544 <__lshift>
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	9002      	str	r0, [sp, #8]
 8009e00:	f000 fc0c 	bl	800a61c <__mcmp>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	9b00      	ldr	r3, [sp, #0]
 8009e08:	dc02      	bgt.n	8009e10 <_dtoa_r+0xa78>
 8009e0a:	d1e0      	bne.n	8009dce <_dtoa_r+0xa36>
 8009e0c:	07da      	lsls	r2, r3, #31
 8009e0e:	d5de      	bpl.n	8009dce <_dtoa_r+0xa36>
 8009e10:	2b39      	cmp	r3, #57	@ 0x39
 8009e12:	d1da      	bne.n	8009dca <_dtoa_r+0xa32>
 8009e14:	2339      	movs	r3, #57	@ 0x39
 8009e16:	f88b 3000 	strb.w	r3, [fp]
 8009e1a:	4633      	mov	r3, r6
 8009e1c:	461e      	mov	r6, r3
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e24:	2a39      	cmp	r2, #57	@ 0x39
 8009e26:	d04e      	beq.n	8009ec6 <_dtoa_r+0xb2e>
 8009e28:	3201      	adds	r2, #1
 8009e2a:	701a      	strb	r2, [r3, #0]
 8009e2c:	e501      	b.n	8009832 <_dtoa_r+0x49a>
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	dd03      	ble.n	8009e3a <_dtoa_r+0xaa2>
 8009e32:	2b39      	cmp	r3, #57	@ 0x39
 8009e34:	d0ee      	beq.n	8009e14 <_dtoa_r+0xa7c>
 8009e36:	3301      	adds	r3, #1
 8009e38:	e7c9      	b.n	8009dce <_dtoa_r+0xa36>
 8009e3a:	9a00      	ldr	r2, [sp, #0]
 8009e3c:	9908      	ldr	r1, [sp, #32]
 8009e3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e42:	428a      	cmp	r2, r1
 8009e44:	d028      	beq.n	8009e98 <_dtoa_r+0xb00>
 8009e46:	9902      	ldr	r1, [sp, #8]
 8009e48:	2300      	movs	r3, #0
 8009e4a:	220a      	movs	r2, #10
 8009e4c:	4648      	mov	r0, r9
 8009e4e:	f000 f9d5 	bl	800a1fc <__multadd>
 8009e52:	42af      	cmp	r7, r5
 8009e54:	9002      	str	r0, [sp, #8]
 8009e56:	f04f 0300 	mov.w	r3, #0
 8009e5a:	f04f 020a 	mov.w	r2, #10
 8009e5e:	4639      	mov	r1, r7
 8009e60:	4648      	mov	r0, r9
 8009e62:	d107      	bne.n	8009e74 <_dtoa_r+0xadc>
 8009e64:	f000 f9ca 	bl	800a1fc <__multadd>
 8009e68:	4607      	mov	r7, r0
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	9b00      	ldr	r3, [sp, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	e777      	b.n	8009d64 <_dtoa_r+0x9cc>
 8009e74:	f000 f9c2 	bl	800a1fc <__multadd>
 8009e78:	4629      	mov	r1, r5
 8009e7a:	4607      	mov	r7, r0
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	220a      	movs	r2, #10
 8009e80:	4648      	mov	r0, r9
 8009e82:	f000 f9bb 	bl	800a1fc <__multadd>
 8009e86:	4605      	mov	r5, r0
 8009e88:	e7f0      	b.n	8009e6c <_dtoa_r+0xad4>
 8009e8a:	f1bb 0f00 	cmp.w	fp, #0
 8009e8e:	bfcc      	ite	gt
 8009e90:	465e      	movgt	r6, fp
 8009e92:	2601      	movle	r6, #1
 8009e94:	4456      	add	r6, sl
 8009e96:	2700      	movs	r7, #0
 8009e98:	9902      	ldr	r1, [sp, #8]
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	4648      	mov	r0, r9
 8009ea0:	f000 fb50 	bl	800a544 <__lshift>
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	9002      	str	r0, [sp, #8]
 8009ea8:	f000 fbb8 	bl	800a61c <__mcmp>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	dcb4      	bgt.n	8009e1a <_dtoa_r+0xa82>
 8009eb0:	d102      	bne.n	8009eb8 <_dtoa_r+0xb20>
 8009eb2:	9b00      	ldr	r3, [sp, #0]
 8009eb4:	07db      	lsls	r3, r3, #31
 8009eb6:	d4b0      	bmi.n	8009e1a <_dtoa_r+0xa82>
 8009eb8:	4633      	mov	r3, r6
 8009eba:	461e      	mov	r6, r3
 8009ebc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ec0:	2a30      	cmp	r2, #48	@ 0x30
 8009ec2:	d0fa      	beq.n	8009eba <_dtoa_r+0xb22>
 8009ec4:	e4b5      	b.n	8009832 <_dtoa_r+0x49a>
 8009ec6:	459a      	cmp	sl, r3
 8009ec8:	d1a8      	bne.n	8009e1c <_dtoa_r+0xa84>
 8009eca:	2331      	movs	r3, #49	@ 0x31
 8009ecc:	f108 0801 	add.w	r8, r8, #1
 8009ed0:	f88a 3000 	strb.w	r3, [sl]
 8009ed4:	e4ad      	b.n	8009832 <_dtoa_r+0x49a>
 8009ed6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ed8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009f34 <_dtoa_r+0xb9c>
 8009edc:	b11b      	cbz	r3, 8009ee6 <_dtoa_r+0xb4e>
 8009ede:	f10a 0308 	add.w	r3, sl, #8
 8009ee2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	b017      	add	sp, #92	@ 0x5c
 8009eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eee:	9b07      	ldr	r3, [sp, #28]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	f77f ae2e 	ble.w	8009b52 <_dtoa_r+0x7ba>
 8009ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ef8:	9308      	str	r3, [sp, #32]
 8009efa:	2001      	movs	r0, #1
 8009efc:	e64d      	b.n	8009b9a <_dtoa_r+0x802>
 8009efe:	f1bb 0f00 	cmp.w	fp, #0
 8009f02:	f77f aed9 	ble.w	8009cb8 <_dtoa_r+0x920>
 8009f06:	4656      	mov	r6, sl
 8009f08:	9802      	ldr	r0, [sp, #8]
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	f7ff f9b9 	bl	8009282 <quorem>
 8009f10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009f14:	f806 3b01 	strb.w	r3, [r6], #1
 8009f18:	eba6 020a 	sub.w	r2, r6, sl
 8009f1c:	4593      	cmp	fp, r2
 8009f1e:	ddb4      	ble.n	8009e8a <_dtoa_r+0xaf2>
 8009f20:	9902      	ldr	r1, [sp, #8]
 8009f22:	2300      	movs	r3, #0
 8009f24:	220a      	movs	r2, #10
 8009f26:	4648      	mov	r0, r9
 8009f28:	f000 f968 	bl	800a1fc <__multadd>
 8009f2c:	9002      	str	r0, [sp, #8]
 8009f2e:	e7eb      	b.n	8009f08 <_dtoa_r+0xb70>
 8009f30:	0800b120 	.word	0x0800b120
 8009f34:	0800b0a4 	.word	0x0800b0a4

08009f38 <_free_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	d041      	beq.n	8009fc4 <_free_r+0x8c>
 8009f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f44:	1f0c      	subs	r4, r1, #4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	bfb8      	it	lt
 8009f4a:	18e4      	addlt	r4, r4, r3
 8009f4c:	f000 f8e8 	bl	800a120 <__malloc_lock>
 8009f50:	4a1d      	ldr	r2, [pc, #116]	@ (8009fc8 <_free_r+0x90>)
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	b933      	cbnz	r3, 8009f64 <_free_r+0x2c>
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	6014      	str	r4, [r2, #0]
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f60:	f000 b8e4 	b.w	800a12c <__malloc_unlock>
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d908      	bls.n	8009f7a <_free_r+0x42>
 8009f68:	6820      	ldr	r0, [r4, #0]
 8009f6a:	1821      	adds	r1, r4, r0
 8009f6c:	428b      	cmp	r3, r1
 8009f6e:	bf01      	itttt	eq
 8009f70:	6819      	ldreq	r1, [r3, #0]
 8009f72:	685b      	ldreq	r3, [r3, #4]
 8009f74:	1809      	addeq	r1, r1, r0
 8009f76:	6021      	streq	r1, [r4, #0]
 8009f78:	e7ed      	b.n	8009f56 <_free_r+0x1e>
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	b10b      	cbz	r3, 8009f84 <_free_r+0x4c>
 8009f80:	42a3      	cmp	r3, r4
 8009f82:	d9fa      	bls.n	8009f7a <_free_r+0x42>
 8009f84:	6811      	ldr	r1, [r2, #0]
 8009f86:	1850      	adds	r0, r2, r1
 8009f88:	42a0      	cmp	r0, r4
 8009f8a:	d10b      	bne.n	8009fa4 <_free_r+0x6c>
 8009f8c:	6820      	ldr	r0, [r4, #0]
 8009f8e:	4401      	add	r1, r0
 8009f90:	1850      	adds	r0, r2, r1
 8009f92:	4283      	cmp	r3, r0
 8009f94:	6011      	str	r1, [r2, #0]
 8009f96:	d1e0      	bne.n	8009f5a <_free_r+0x22>
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	6053      	str	r3, [r2, #4]
 8009f9e:	4408      	add	r0, r1
 8009fa0:	6010      	str	r0, [r2, #0]
 8009fa2:	e7da      	b.n	8009f5a <_free_r+0x22>
 8009fa4:	d902      	bls.n	8009fac <_free_r+0x74>
 8009fa6:	230c      	movs	r3, #12
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	e7d6      	b.n	8009f5a <_free_r+0x22>
 8009fac:	6820      	ldr	r0, [r4, #0]
 8009fae:	1821      	adds	r1, r4, r0
 8009fb0:	428b      	cmp	r3, r1
 8009fb2:	bf04      	itt	eq
 8009fb4:	6819      	ldreq	r1, [r3, #0]
 8009fb6:	685b      	ldreq	r3, [r3, #4]
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	bf04      	itt	eq
 8009fbc:	1809      	addeq	r1, r1, r0
 8009fbe:	6021      	streq	r1, [r4, #0]
 8009fc0:	6054      	str	r4, [r2, #4]
 8009fc2:	e7ca      	b.n	8009f5a <_free_r+0x22>
 8009fc4:	bd38      	pop	{r3, r4, r5, pc}
 8009fc6:	bf00      	nop
 8009fc8:	200020e0 	.word	0x200020e0

08009fcc <malloc>:
 8009fcc:	4b02      	ldr	r3, [pc, #8]	@ (8009fd8 <malloc+0xc>)
 8009fce:	4601      	mov	r1, r0
 8009fd0:	6818      	ldr	r0, [r3, #0]
 8009fd2:	f000 b825 	b.w	800a020 <_malloc_r>
 8009fd6:	bf00      	nop
 8009fd8:	20000108 	.word	0x20000108

08009fdc <sbrk_aligned>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	4e0f      	ldr	r6, [pc, #60]	@ (800a01c <sbrk_aligned+0x40>)
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	6831      	ldr	r1, [r6, #0]
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	b911      	cbnz	r1, 8009fee <sbrk_aligned+0x12>
 8009fe8:	f000 fea2 	bl	800ad30 <_sbrk_r>
 8009fec:	6030      	str	r0, [r6, #0]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 fe9d 	bl	800ad30 <_sbrk_r>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d103      	bne.n	800a002 <sbrk_aligned+0x26>
 8009ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8009ffe:	4620      	mov	r0, r4
 800a000:	bd70      	pop	{r4, r5, r6, pc}
 800a002:	1cc4      	adds	r4, r0, #3
 800a004:	f024 0403 	bic.w	r4, r4, #3
 800a008:	42a0      	cmp	r0, r4
 800a00a:	d0f8      	beq.n	8009ffe <sbrk_aligned+0x22>
 800a00c:	1a21      	subs	r1, r4, r0
 800a00e:	4628      	mov	r0, r5
 800a010:	f000 fe8e 	bl	800ad30 <_sbrk_r>
 800a014:	3001      	adds	r0, #1
 800a016:	d1f2      	bne.n	8009ffe <sbrk_aligned+0x22>
 800a018:	e7ef      	b.n	8009ffa <sbrk_aligned+0x1e>
 800a01a:	bf00      	nop
 800a01c:	200020dc 	.word	0x200020dc

0800a020 <_malloc_r>:
 800a020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a024:	1ccd      	adds	r5, r1, #3
 800a026:	f025 0503 	bic.w	r5, r5, #3
 800a02a:	3508      	adds	r5, #8
 800a02c:	2d0c      	cmp	r5, #12
 800a02e:	bf38      	it	cc
 800a030:	250c      	movcc	r5, #12
 800a032:	2d00      	cmp	r5, #0
 800a034:	4606      	mov	r6, r0
 800a036:	db01      	blt.n	800a03c <_malloc_r+0x1c>
 800a038:	42a9      	cmp	r1, r5
 800a03a:	d904      	bls.n	800a046 <_malloc_r+0x26>
 800a03c:	230c      	movs	r3, #12
 800a03e:	6033      	str	r3, [r6, #0]
 800a040:	2000      	movs	r0, #0
 800a042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a11c <_malloc_r+0xfc>
 800a04a:	f000 f869 	bl	800a120 <__malloc_lock>
 800a04e:	f8d8 3000 	ldr.w	r3, [r8]
 800a052:	461c      	mov	r4, r3
 800a054:	bb44      	cbnz	r4, 800a0a8 <_malloc_r+0x88>
 800a056:	4629      	mov	r1, r5
 800a058:	4630      	mov	r0, r6
 800a05a:	f7ff ffbf 	bl	8009fdc <sbrk_aligned>
 800a05e:	1c43      	adds	r3, r0, #1
 800a060:	4604      	mov	r4, r0
 800a062:	d158      	bne.n	800a116 <_malloc_r+0xf6>
 800a064:	f8d8 4000 	ldr.w	r4, [r8]
 800a068:	4627      	mov	r7, r4
 800a06a:	2f00      	cmp	r7, #0
 800a06c:	d143      	bne.n	800a0f6 <_malloc_r+0xd6>
 800a06e:	2c00      	cmp	r4, #0
 800a070:	d04b      	beq.n	800a10a <_malloc_r+0xea>
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	4639      	mov	r1, r7
 800a076:	4630      	mov	r0, r6
 800a078:	eb04 0903 	add.w	r9, r4, r3
 800a07c:	f000 fe58 	bl	800ad30 <_sbrk_r>
 800a080:	4581      	cmp	r9, r0
 800a082:	d142      	bne.n	800a10a <_malloc_r+0xea>
 800a084:	6821      	ldr	r1, [r4, #0]
 800a086:	1a6d      	subs	r5, r5, r1
 800a088:	4629      	mov	r1, r5
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff ffa6 	bl	8009fdc <sbrk_aligned>
 800a090:	3001      	adds	r0, #1
 800a092:	d03a      	beq.n	800a10a <_malloc_r+0xea>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	442b      	add	r3, r5
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	f8d8 3000 	ldr.w	r3, [r8]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	bb62      	cbnz	r2, 800a0fc <_malloc_r+0xdc>
 800a0a2:	f8c8 7000 	str.w	r7, [r8]
 800a0a6:	e00f      	b.n	800a0c8 <_malloc_r+0xa8>
 800a0a8:	6822      	ldr	r2, [r4, #0]
 800a0aa:	1b52      	subs	r2, r2, r5
 800a0ac:	d420      	bmi.n	800a0f0 <_malloc_r+0xd0>
 800a0ae:	2a0b      	cmp	r2, #11
 800a0b0:	d917      	bls.n	800a0e2 <_malloc_r+0xc2>
 800a0b2:	1961      	adds	r1, r4, r5
 800a0b4:	42a3      	cmp	r3, r4
 800a0b6:	6025      	str	r5, [r4, #0]
 800a0b8:	bf18      	it	ne
 800a0ba:	6059      	strne	r1, [r3, #4]
 800a0bc:	6863      	ldr	r3, [r4, #4]
 800a0be:	bf08      	it	eq
 800a0c0:	f8c8 1000 	streq.w	r1, [r8]
 800a0c4:	5162      	str	r2, [r4, r5]
 800a0c6:	604b      	str	r3, [r1, #4]
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f000 f82f 	bl	800a12c <__malloc_unlock>
 800a0ce:	f104 000b 	add.w	r0, r4, #11
 800a0d2:	1d23      	adds	r3, r4, #4
 800a0d4:	f020 0007 	bic.w	r0, r0, #7
 800a0d8:	1ac2      	subs	r2, r0, r3
 800a0da:	bf1c      	itt	ne
 800a0dc:	1a1b      	subne	r3, r3, r0
 800a0de:	50a3      	strne	r3, [r4, r2]
 800a0e0:	e7af      	b.n	800a042 <_malloc_r+0x22>
 800a0e2:	6862      	ldr	r2, [r4, #4]
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	bf0c      	ite	eq
 800a0e8:	f8c8 2000 	streq.w	r2, [r8]
 800a0ec:	605a      	strne	r2, [r3, #4]
 800a0ee:	e7eb      	b.n	800a0c8 <_malloc_r+0xa8>
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	6864      	ldr	r4, [r4, #4]
 800a0f4:	e7ae      	b.n	800a054 <_malloc_r+0x34>
 800a0f6:	463c      	mov	r4, r7
 800a0f8:	687f      	ldr	r7, [r7, #4]
 800a0fa:	e7b6      	b.n	800a06a <_malloc_r+0x4a>
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	42a3      	cmp	r3, r4
 800a102:	d1fb      	bne.n	800a0fc <_malloc_r+0xdc>
 800a104:	2300      	movs	r3, #0
 800a106:	6053      	str	r3, [r2, #4]
 800a108:	e7de      	b.n	800a0c8 <_malloc_r+0xa8>
 800a10a:	230c      	movs	r3, #12
 800a10c:	6033      	str	r3, [r6, #0]
 800a10e:	4630      	mov	r0, r6
 800a110:	f000 f80c 	bl	800a12c <__malloc_unlock>
 800a114:	e794      	b.n	800a040 <_malloc_r+0x20>
 800a116:	6005      	str	r5, [r0, #0]
 800a118:	e7d6      	b.n	800a0c8 <_malloc_r+0xa8>
 800a11a:	bf00      	nop
 800a11c:	200020e0 	.word	0x200020e0

0800a120 <__malloc_lock>:
 800a120:	4801      	ldr	r0, [pc, #4]	@ (800a128 <__malloc_lock+0x8>)
 800a122:	f7ff b89e 	b.w	8009262 <__retarget_lock_acquire_recursive>
 800a126:	bf00      	nop
 800a128:	200020d8 	.word	0x200020d8

0800a12c <__malloc_unlock>:
 800a12c:	4801      	ldr	r0, [pc, #4]	@ (800a134 <__malloc_unlock+0x8>)
 800a12e:	f7ff b899 	b.w	8009264 <__retarget_lock_release_recursive>
 800a132:	bf00      	nop
 800a134:	200020d8 	.word	0x200020d8

0800a138 <_Balloc>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	69c6      	ldr	r6, [r0, #28]
 800a13c:	4604      	mov	r4, r0
 800a13e:	460d      	mov	r5, r1
 800a140:	b976      	cbnz	r6, 800a160 <_Balloc+0x28>
 800a142:	2010      	movs	r0, #16
 800a144:	f7ff ff42 	bl	8009fcc <malloc>
 800a148:	4602      	mov	r2, r0
 800a14a:	61e0      	str	r0, [r4, #28]
 800a14c:	b920      	cbnz	r0, 800a158 <_Balloc+0x20>
 800a14e:	4b18      	ldr	r3, [pc, #96]	@ (800a1b0 <_Balloc+0x78>)
 800a150:	4818      	ldr	r0, [pc, #96]	@ (800a1b4 <_Balloc+0x7c>)
 800a152:	216b      	movs	r1, #107	@ 0x6b
 800a154:	f000 fdfc 	bl	800ad50 <__assert_func>
 800a158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a15c:	6006      	str	r6, [r0, #0]
 800a15e:	60c6      	str	r6, [r0, #12]
 800a160:	69e6      	ldr	r6, [r4, #28]
 800a162:	68f3      	ldr	r3, [r6, #12]
 800a164:	b183      	cbz	r3, 800a188 <_Balloc+0x50>
 800a166:	69e3      	ldr	r3, [r4, #28]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a16e:	b9b8      	cbnz	r0, 800a1a0 <_Balloc+0x68>
 800a170:	2101      	movs	r1, #1
 800a172:	fa01 f605 	lsl.w	r6, r1, r5
 800a176:	1d72      	adds	r2, r6, #5
 800a178:	0092      	lsls	r2, r2, #2
 800a17a:	4620      	mov	r0, r4
 800a17c:	f000 fe06 	bl	800ad8c <_calloc_r>
 800a180:	b160      	cbz	r0, 800a19c <_Balloc+0x64>
 800a182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a186:	e00e      	b.n	800a1a6 <_Balloc+0x6e>
 800a188:	2221      	movs	r2, #33	@ 0x21
 800a18a:	2104      	movs	r1, #4
 800a18c:	4620      	mov	r0, r4
 800a18e:	f000 fdfd 	bl	800ad8c <_calloc_r>
 800a192:	69e3      	ldr	r3, [r4, #28]
 800a194:	60f0      	str	r0, [r6, #12]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e4      	bne.n	800a166 <_Balloc+0x2e>
 800a19c:	2000      	movs	r0, #0
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	6802      	ldr	r2, [r0, #0]
 800a1a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1ac:	e7f7      	b.n	800a19e <_Balloc+0x66>
 800a1ae:	bf00      	nop
 800a1b0:	0800b0b1 	.word	0x0800b0b1
 800a1b4:	0800b131 	.word	0x0800b131

0800a1b8 <_Bfree>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	69c6      	ldr	r6, [r0, #28]
 800a1bc:	4605      	mov	r5, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	b976      	cbnz	r6, 800a1e0 <_Bfree+0x28>
 800a1c2:	2010      	movs	r0, #16
 800a1c4:	f7ff ff02 	bl	8009fcc <malloc>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	61e8      	str	r0, [r5, #28]
 800a1cc:	b920      	cbnz	r0, 800a1d8 <_Bfree+0x20>
 800a1ce:	4b09      	ldr	r3, [pc, #36]	@ (800a1f4 <_Bfree+0x3c>)
 800a1d0:	4809      	ldr	r0, [pc, #36]	@ (800a1f8 <_Bfree+0x40>)
 800a1d2:	218f      	movs	r1, #143	@ 0x8f
 800a1d4:	f000 fdbc 	bl	800ad50 <__assert_func>
 800a1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1dc:	6006      	str	r6, [r0, #0]
 800a1de:	60c6      	str	r6, [r0, #12]
 800a1e0:	b13c      	cbz	r4, 800a1f2 <_Bfree+0x3a>
 800a1e2:	69eb      	ldr	r3, [r5, #28]
 800a1e4:	6862      	ldr	r2, [r4, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1ec:	6021      	str	r1, [r4, #0]
 800a1ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	0800b0b1 	.word	0x0800b0b1
 800a1f8:	0800b131 	.word	0x0800b131

0800a1fc <__multadd>:
 800a1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a200:	690d      	ldr	r5, [r1, #16]
 800a202:	4607      	mov	r7, r0
 800a204:	460c      	mov	r4, r1
 800a206:	461e      	mov	r6, r3
 800a208:	f101 0c14 	add.w	ip, r1, #20
 800a20c:	2000      	movs	r0, #0
 800a20e:	f8dc 3000 	ldr.w	r3, [ip]
 800a212:	b299      	uxth	r1, r3
 800a214:	fb02 6101 	mla	r1, r2, r1, r6
 800a218:	0c1e      	lsrs	r6, r3, #16
 800a21a:	0c0b      	lsrs	r3, r1, #16
 800a21c:	fb02 3306 	mla	r3, r2, r6, r3
 800a220:	b289      	uxth	r1, r1
 800a222:	3001      	adds	r0, #1
 800a224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a228:	4285      	cmp	r5, r0
 800a22a:	f84c 1b04 	str.w	r1, [ip], #4
 800a22e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a232:	dcec      	bgt.n	800a20e <__multadd+0x12>
 800a234:	b30e      	cbz	r6, 800a27a <__multadd+0x7e>
 800a236:	68a3      	ldr	r3, [r4, #8]
 800a238:	42ab      	cmp	r3, r5
 800a23a:	dc19      	bgt.n	800a270 <__multadd+0x74>
 800a23c:	6861      	ldr	r1, [r4, #4]
 800a23e:	4638      	mov	r0, r7
 800a240:	3101      	adds	r1, #1
 800a242:	f7ff ff79 	bl	800a138 <_Balloc>
 800a246:	4680      	mov	r8, r0
 800a248:	b928      	cbnz	r0, 800a256 <__multadd+0x5a>
 800a24a:	4602      	mov	r2, r0
 800a24c:	4b0c      	ldr	r3, [pc, #48]	@ (800a280 <__multadd+0x84>)
 800a24e:	480d      	ldr	r0, [pc, #52]	@ (800a284 <__multadd+0x88>)
 800a250:	21ba      	movs	r1, #186	@ 0xba
 800a252:	f000 fd7d 	bl	800ad50 <__assert_func>
 800a256:	6922      	ldr	r2, [r4, #16]
 800a258:	3202      	adds	r2, #2
 800a25a:	f104 010c 	add.w	r1, r4, #12
 800a25e:	0092      	lsls	r2, r2, #2
 800a260:	300c      	adds	r0, #12
 800a262:	f7ff f800 	bl	8009266 <memcpy>
 800a266:	4621      	mov	r1, r4
 800a268:	4638      	mov	r0, r7
 800a26a:	f7ff ffa5 	bl	800a1b8 <_Bfree>
 800a26e:	4644      	mov	r4, r8
 800a270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a274:	3501      	adds	r5, #1
 800a276:	615e      	str	r6, [r3, #20]
 800a278:	6125      	str	r5, [r4, #16]
 800a27a:	4620      	mov	r0, r4
 800a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a280:	0800b120 	.word	0x0800b120
 800a284:	0800b131 	.word	0x0800b131

0800a288 <__hi0bits>:
 800a288:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a28c:	4603      	mov	r3, r0
 800a28e:	bf36      	itet	cc
 800a290:	0403      	lslcc	r3, r0, #16
 800a292:	2000      	movcs	r0, #0
 800a294:	2010      	movcc	r0, #16
 800a296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a29a:	bf3c      	itt	cc
 800a29c:	021b      	lslcc	r3, r3, #8
 800a29e:	3008      	addcc	r0, #8
 800a2a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2a4:	bf3c      	itt	cc
 800a2a6:	011b      	lslcc	r3, r3, #4
 800a2a8:	3004      	addcc	r0, #4
 800a2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ae:	bf3c      	itt	cc
 800a2b0:	009b      	lslcc	r3, r3, #2
 800a2b2:	3002      	addcc	r0, #2
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	db05      	blt.n	800a2c4 <__hi0bits+0x3c>
 800a2b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2bc:	f100 0001 	add.w	r0, r0, #1
 800a2c0:	bf08      	it	eq
 800a2c2:	2020      	moveq	r0, #32
 800a2c4:	4770      	bx	lr

0800a2c6 <__lo0bits>:
 800a2c6:	6803      	ldr	r3, [r0, #0]
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	f013 0007 	ands.w	r0, r3, #7
 800a2ce:	d00b      	beq.n	800a2e8 <__lo0bits+0x22>
 800a2d0:	07d9      	lsls	r1, r3, #31
 800a2d2:	d421      	bmi.n	800a318 <__lo0bits+0x52>
 800a2d4:	0798      	lsls	r0, r3, #30
 800a2d6:	bf49      	itett	mi
 800a2d8:	085b      	lsrmi	r3, r3, #1
 800a2da:	089b      	lsrpl	r3, r3, #2
 800a2dc:	2001      	movmi	r0, #1
 800a2de:	6013      	strmi	r3, [r2, #0]
 800a2e0:	bf5c      	itt	pl
 800a2e2:	6013      	strpl	r3, [r2, #0]
 800a2e4:	2002      	movpl	r0, #2
 800a2e6:	4770      	bx	lr
 800a2e8:	b299      	uxth	r1, r3
 800a2ea:	b909      	cbnz	r1, 800a2f0 <__lo0bits+0x2a>
 800a2ec:	0c1b      	lsrs	r3, r3, #16
 800a2ee:	2010      	movs	r0, #16
 800a2f0:	b2d9      	uxtb	r1, r3
 800a2f2:	b909      	cbnz	r1, 800a2f8 <__lo0bits+0x32>
 800a2f4:	3008      	adds	r0, #8
 800a2f6:	0a1b      	lsrs	r3, r3, #8
 800a2f8:	0719      	lsls	r1, r3, #28
 800a2fa:	bf04      	itt	eq
 800a2fc:	091b      	lsreq	r3, r3, #4
 800a2fe:	3004      	addeq	r0, #4
 800a300:	0799      	lsls	r1, r3, #30
 800a302:	bf04      	itt	eq
 800a304:	089b      	lsreq	r3, r3, #2
 800a306:	3002      	addeq	r0, #2
 800a308:	07d9      	lsls	r1, r3, #31
 800a30a:	d403      	bmi.n	800a314 <__lo0bits+0x4e>
 800a30c:	085b      	lsrs	r3, r3, #1
 800a30e:	f100 0001 	add.w	r0, r0, #1
 800a312:	d003      	beq.n	800a31c <__lo0bits+0x56>
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	4770      	bx	lr
 800a318:	2000      	movs	r0, #0
 800a31a:	4770      	bx	lr
 800a31c:	2020      	movs	r0, #32
 800a31e:	4770      	bx	lr

0800a320 <__i2b>:
 800a320:	b510      	push	{r4, lr}
 800a322:	460c      	mov	r4, r1
 800a324:	2101      	movs	r1, #1
 800a326:	f7ff ff07 	bl	800a138 <_Balloc>
 800a32a:	4602      	mov	r2, r0
 800a32c:	b928      	cbnz	r0, 800a33a <__i2b+0x1a>
 800a32e:	4b05      	ldr	r3, [pc, #20]	@ (800a344 <__i2b+0x24>)
 800a330:	4805      	ldr	r0, [pc, #20]	@ (800a348 <__i2b+0x28>)
 800a332:	f240 1145 	movw	r1, #325	@ 0x145
 800a336:	f000 fd0b 	bl	800ad50 <__assert_func>
 800a33a:	2301      	movs	r3, #1
 800a33c:	6144      	str	r4, [r0, #20]
 800a33e:	6103      	str	r3, [r0, #16]
 800a340:	bd10      	pop	{r4, pc}
 800a342:	bf00      	nop
 800a344:	0800b120 	.word	0x0800b120
 800a348:	0800b131 	.word	0x0800b131

0800a34c <__multiply>:
 800a34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a350:	4617      	mov	r7, r2
 800a352:	690a      	ldr	r2, [r1, #16]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	429a      	cmp	r2, r3
 800a358:	bfa8      	it	ge
 800a35a:	463b      	movge	r3, r7
 800a35c:	4689      	mov	r9, r1
 800a35e:	bfa4      	itt	ge
 800a360:	460f      	movge	r7, r1
 800a362:	4699      	movge	r9, r3
 800a364:	693d      	ldr	r5, [r7, #16]
 800a366:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	eb05 060a 	add.w	r6, r5, sl
 800a372:	42b3      	cmp	r3, r6
 800a374:	b085      	sub	sp, #20
 800a376:	bfb8      	it	lt
 800a378:	3101      	addlt	r1, #1
 800a37a:	f7ff fedd 	bl	800a138 <_Balloc>
 800a37e:	b930      	cbnz	r0, 800a38e <__multiply+0x42>
 800a380:	4602      	mov	r2, r0
 800a382:	4b41      	ldr	r3, [pc, #260]	@ (800a488 <__multiply+0x13c>)
 800a384:	4841      	ldr	r0, [pc, #260]	@ (800a48c <__multiply+0x140>)
 800a386:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a38a:	f000 fce1 	bl	800ad50 <__assert_func>
 800a38e:	f100 0414 	add.w	r4, r0, #20
 800a392:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a396:	4623      	mov	r3, r4
 800a398:	2200      	movs	r2, #0
 800a39a:	4573      	cmp	r3, lr
 800a39c:	d320      	bcc.n	800a3e0 <__multiply+0x94>
 800a39e:	f107 0814 	add.w	r8, r7, #20
 800a3a2:	f109 0114 	add.w	r1, r9, #20
 800a3a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a3aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a3ae:	9302      	str	r3, [sp, #8]
 800a3b0:	1beb      	subs	r3, r5, r7
 800a3b2:	3b15      	subs	r3, #21
 800a3b4:	f023 0303 	bic.w	r3, r3, #3
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	3715      	adds	r7, #21
 800a3bc:	42bd      	cmp	r5, r7
 800a3be:	bf38      	it	cc
 800a3c0:	2304      	movcc	r3, #4
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	9b02      	ldr	r3, [sp, #8]
 800a3c6:	9103      	str	r1, [sp, #12]
 800a3c8:	428b      	cmp	r3, r1
 800a3ca:	d80c      	bhi.n	800a3e6 <__multiply+0x9a>
 800a3cc:	2e00      	cmp	r6, #0
 800a3ce:	dd03      	ble.n	800a3d8 <__multiply+0x8c>
 800a3d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d055      	beq.n	800a484 <__multiply+0x138>
 800a3d8:	6106      	str	r6, [r0, #16]
 800a3da:	b005      	add	sp, #20
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	f843 2b04 	str.w	r2, [r3], #4
 800a3e4:	e7d9      	b.n	800a39a <__multiply+0x4e>
 800a3e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a3ea:	f1ba 0f00 	cmp.w	sl, #0
 800a3ee:	d01f      	beq.n	800a430 <__multiply+0xe4>
 800a3f0:	46c4      	mov	ip, r8
 800a3f2:	46a1      	mov	r9, r4
 800a3f4:	2700      	movs	r7, #0
 800a3f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3fa:	f8d9 3000 	ldr.w	r3, [r9]
 800a3fe:	fa1f fb82 	uxth.w	fp, r2
 800a402:	b29b      	uxth	r3, r3
 800a404:	fb0a 330b 	mla	r3, sl, fp, r3
 800a408:	443b      	add	r3, r7
 800a40a:	f8d9 7000 	ldr.w	r7, [r9]
 800a40e:	0c12      	lsrs	r2, r2, #16
 800a410:	0c3f      	lsrs	r7, r7, #16
 800a412:	fb0a 7202 	mla	r2, sl, r2, r7
 800a416:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a420:	4565      	cmp	r5, ip
 800a422:	f849 3b04 	str.w	r3, [r9], #4
 800a426:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a42a:	d8e4      	bhi.n	800a3f6 <__multiply+0xaa>
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	50e7      	str	r7, [r4, r3]
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a436:	3104      	adds	r1, #4
 800a438:	f1b9 0f00 	cmp.w	r9, #0
 800a43c:	d020      	beq.n	800a480 <__multiply+0x134>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	4647      	mov	r7, r8
 800a442:	46a4      	mov	ip, r4
 800a444:	f04f 0a00 	mov.w	sl, #0
 800a448:	f8b7 b000 	ldrh.w	fp, [r7]
 800a44c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a450:	fb09 220b 	mla	r2, r9, fp, r2
 800a454:	4452      	add	r2, sl
 800a456:	b29b      	uxth	r3, r3
 800a458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a45c:	f84c 3b04 	str.w	r3, [ip], #4
 800a460:	f857 3b04 	ldr.w	r3, [r7], #4
 800a464:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a468:	f8bc 3000 	ldrh.w	r3, [ip]
 800a46c:	fb09 330a 	mla	r3, r9, sl, r3
 800a470:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a474:	42bd      	cmp	r5, r7
 800a476:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a47a:	d8e5      	bhi.n	800a448 <__multiply+0xfc>
 800a47c:	9a01      	ldr	r2, [sp, #4]
 800a47e:	50a3      	str	r3, [r4, r2]
 800a480:	3404      	adds	r4, #4
 800a482:	e79f      	b.n	800a3c4 <__multiply+0x78>
 800a484:	3e01      	subs	r6, #1
 800a486:	e7a1      	b.n	800a3cc <__multiply+0x80>
 800a488:	0800b120 	.word	0x0800b120
 800a48c:	0800b131 	.word	0x0800b131

0800a490 <__pow5mult>:
 800a490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a494:	4615      	mov	r5, r2
 800a496:	f012 0203 	ands.w	r2, r2, #3
 800a49a:	4607      	mov	r7, r0
 800a49c:	460e      	mov	r6, r1
 800a49e:	d007      	beq.n	800a4b0 <__pow5mult+0x20>
 800a4a0:	4c25      	ldr	r4, [pc, #148]	@ (800a538 <__pow5mult+0xa8>)
 800a4a2:	3a01      	subs	r2, #1
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4aa:	f7ff fea7 	bl	800a1fc <__multadd>
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	10ad      	asrs	r5, r5, #2
 800a4b2:	d03d      	beq.n	800a530 <__pow5mult+0xa0>
 800a4b4:	69fc      	ldr	r4, [r7, #28]
 800a4b6:	b97c      	cbnz	r4, 800a4d8 <__pow5mult+0x48>
 800a4b8:	2010      	movs	r0, #16
 800a4ba:	f7ff fd87 	bl	8009fcc <malloc>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	61f8      	str	r0, [r7, #28]
 800a4c2:	b928      	cbnz	r0, 800a4d0 <__pow5mult+0x40>
 800a4c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a53c <__pow5mult+0xac>)
 800a4c6:	481e      	ldr	r0, [pc, #120]	@ (800a540 <__pow5mult+0xb0>)
 800a4c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a4cc:	f000 fc40 	bl	800ad50 <__assert_func>
 800a4d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4d4:	6004      	str	r4, [r0, #0]
 800a4d6:	60c4      	str	r4, [r0, #12]
 800a4d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a4dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4e0:	b94c      	cbnz	r4, 800a4f6 <__pow5mult+0x66>
 800a4e2:	f240 2171 	movw	r1, #625	@ 0x271
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f7ff ff1a 	bl	800a320 <__i2b>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	6003      	str	r3, [r0, #0]
 800a4f6:	f04f 0900 	mov.w	r9, #0
 800a4fa:	07eb      	lsls	r3, r5, #31
 800a4fc:	d50a      	bpl.n	800a514 <__pow5mult+0x84>
 800a4fe:	4631      	mov	r1, r6
 800a500:	4622      	mov	r2, r4
 800a502:	4638      	mov	r0, r7
 800a504:	f7ff ff22 	bl	800a34c <__multiply>
 800a508:	4631      	mov	r1, r6
 800a50a:	4680      	mov	r8, r0
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff fe53 	bl	800a1b8 <_Bfree>
 800a512:	4646      	mov	r6, r8
 800a514:	106d      	asrs	r5, r5, #1
 800a516:	d00b      	beq.n	800a530 <__pow5mult+0xa0>
 800a518:	6820      	ldr	r0, [r4, #0]
 800a51a:	b938      	cbnz	r0, 800a52c <__pow5mult+0x9c>
 800a51c:	4622      	mov	r2, r4
 800a51e:	4621      	mov	r1, r4
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff ff13 	bl	800a34c <__multiply>
 800a526:	6020      	str	r0, [r4, #0]
 800a528:	f8c0 9000 	str.w	r9, [r0]
 800a52c:	4604      	mov	r4, r0
 800a52e:	e7e4      	b.n	800a4fa <__pow5mult+0x6a>
 800a530:	4630      	mov	r0, r6
 800a532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a536:	bf00      	nop
 800a538:	0800b1e4 	.word	0x0800b1e4
 800a53c:	0800b0b1 	.word	0x0800b0b1
 800a540:	0800b131 	.word	0x0800b131

0800a544 <__lshift>:
 800a544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a548:	460c      	mov	r4, r1
 800a54a:	6849      	ldr	r1, [r1, #4]
 800a54c:	6923      	ldr	r3, [r4, #16]
 800a54e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a552:	68a3      	ldr	r3, [r4, #8]
 800a554:	4607      	mov	r7, r0
 800a556:	4691      	mov	r9, r2
 800a558:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a55c:	f108 0601 	add.w	r6, r8, #1
 800a560:	42b3      	cmp	r3, r6
 800a562:	db0b      	blt.n	800a57c <__lshift+0x38>
 800a564:	4638      	mov	r0, r7
 800a566:	f7ff fde7 	bl	800a138 <_Balloc>
 800a56a:	4605      	mov	r5, r0
 800a56c:	b948      	cbnz	r0, 800a582 <__lshift+0x3e>
 800a56e:	4602      	mov	r2, r0
 800a570:	4b28      	ldr	r3, [pc, #160]	@ (800a614 <__lshift+0xd0>)
 800a572:	4829      	ldr	r0, [pc, #164]	@ (800a618 <__lshift+0xd4>)
 800a574:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a578:	f000 fbea 	bl	800ad50 <__assert_func>
 800a57c:	3101      	adds	r1, #1
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	e7ee      	b.n	800a560 <__lshift+0x1c>
 800a582:	2300      	movs	r3, #0
 800a584:	f100 0114 	add.w	r1, r0, #20
 800a588:	f100 0210 	add.w	r2, r0, #16
 800a58c:	4618      	mov	r0, r3
 800a58e:	4553      	cmp	r3, sl
 800a590:	db33      	blt.n	800a5fa <__lshift+0xb6>
 800a592:	6920      	ldr	r0, [r4, #16]
 800a594:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a598:	f104 0314 	add.w	r3, r4, #20
 800a59c:	f019 091f 	ands.w	r9, r9, #31
 800a5a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5a8:	d02b      	beq.n	800a602 <__lshift+0xbe>
 800a5aa:	f1c9 0e20 	rsb	lr, r9, #32
 800a5ae:	468a      	mov	sl, r1
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	fa00 f009 	lsl.w	r0, r0, r9
 800a5b8:	4310      	orrs	r0, r2
 800a5ba:	f84a 0b04 	str.w	r0, [sl], #4
 800a5be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c2:	459c      	cmp	ip, r3
 800a5c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5c8:	d8f3      	bhi.n	800a5b2 <__lshift+0x6e>
 800a5ca:	ebac 0304 	sub.w	r3, ip, r4
 800a5ce:	3b15      	subs	r3, #21
 800a5d0:	f023 0303 	bic.w	r3, r3, #3
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	f104 0015 	add.w	r0, r4, #21
 800a5da:	4560      	cmp	r0, ip
 800a5dc:	bf88      	it	hi
 800a5de:	2304      	movhi	r3, #4
 800a5e0:	50ca      	str	r2, [r1, r3]
 800a5e2:	b10a      	cbz	r2, 800a5e8 <__lshift+0xa4>
 800a5e4:	f108 0602 	add.w	r6, r8, #2
 800a5e8:	3e01      	subs	r6, #1
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	612e      	str	r6, [r5, #16]
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	f7ff fde2 	bl	800a1b8 <_Bfree>
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5fe:	3301      	adds	r3, #1
 800a600:	e7c5      	b.n	800a58e <__lshift+0x4a>
 800a602:	3904      	subs	r1, #4
 800a604:	f853 2b04 	ldr.w	r2, [r3], #4
 800a608:	f841 2f04 	str.w	r2, [r1, #4]!
 800a60c:	459c      	cmp	ip, r3
 800a60e:	d8f9      	bhi.n	800a604 <__lshift+0xc0>
 800a610:	e7ea      	b.n	800a5e8 <__lshift+0xa4>
 800a612:	bf00      	nop
 800a614:	0800b120 	.word	0x0800b120
 800a618:	0800b131 	.word	0x0800b131

0800a61c <__mcmp>:
 800a61c:	690a      	ldr	r2, [r1, #16]
 800a61e:	4603      	mov	r3, r0
 800a620:	6900      	ldr	r0, [r0, #16]
 800a622:	1a80      	subs	r0, r0, r2
 800a624:	b530      	push	{r4, r5, lr}
 800a626:	d10e      	bne.n	800a646 <__mcmp+0x2a>
 800a628:	3314      	adds	r3, #20
 800a62a:	3114      	adds	r1, #20
 800a62c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a630:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a634:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a638:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a63c:	4295      	cmp	r5, r2
 800a63e:	d003      	beq.n	800a648 <__mcmp+0x2c>
 800a640:	d205      	bcs.n	800a64e <__mcmp+0x32>
 800a642:	f04f 30ff 	mov.w	r0, #4294967295
 800a646:	bd30      	pop	{r4, r5, pc}
 800a648:	42a3      	cmp	r3, r4
 800a64a:	d3f3      	bcc.n	800a634 <__mcmp+0x18>
 800a64c:	e7fb      	b.n	800a646 <__mcmp+0x2a>
 800a64e:	2001      	movs	r0, #1
 800a650:	e7f9      	b.n	800a646 <__mcmp+0x2a>
	...

0800a654 <__mdiff>:
 800a654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	4689      	mov	r9, r1
 800a65a:	4606      	mov	r6, r0
 800a65c:	4611      	mov	r1, r2
 800a65e:	4648      	mov	r0, r9
 800a660:	4614      	mov	r4, r2
 800a662:	f7ff ffdb 	bl	800a61c <__mcmp>
 800a666:	1e05      	subs	r5, r0, #0
 800a668:	d112      	bne.n	800a690 <__mdiff+0x3c>
 800a66a:	4629      	mov	r1, r5
 800a66c:	4630      	mov	r0, r6
 800a66e:	f7ff fd63 	bl	800a138 <_Balloc>
 800a672:	4602      	mov	r2, r0
 800a674:	b928      	cbnz	r0, 800a682 <__mdiff+0x2e>
 800a676:	4b3f      	ldr	r3, [pc, #252]	@ (800a774 <__mdiff+0x120>)
 800a678:	f240 2137 	movw	r1, #567	@ 0x237
 800a67c:	483e      	ldr	r0, [pc, #248]	@ (800a778 <__mdiff+0x124>)
 800a67e:	f000 fb67 	bl	800ad50 <__assert_func>
 800a682:	2301      	movs	r3, #1
 800a684:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a688:	4610      	mov	r0, r2
 800a68a:	b003      	add	sp, #12
 800a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a690:	bfbc      	itt	lt
 800a692:	464b      	movlt	r3, r9
 800a694:	46a1      	movlt	r9, r4
 800a696:	4630      	mov	r0, r6
 800a698:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a69c:	bfba      	itte	lt
 800a69e:	461c      	movlt	r4, r3
 800a6a0:	2501      	movlt	r5, #1
 800a6a2:	2500      	movge	r5, #0
 800a6a4:	f7ff fd48 	bl	800a138 <_Balloc>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	b918      	cbnz	r0, 800a6b4 <__mdiff+0x60>
 800a6ac:	4b31      	ldr	r3, [pc, #196]	@ (800a774 <__mdiff+0x120>)
 800a6ae:	f240 2145 	movw	r1, #581	@ 0x245
 800a6b2:	e7e3      	b.n	800a67c <__mdiff+0x28>
 800a6b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6b8:	6926      	ldr	r6, [r4, #16]
 800a6ba:	60c5      	str	r5, [r0, #12]
 800a6bc:	f109 0310 	add.w	r3, r9, #16
 800a6c0:	f109 0514 	add.w	r5, r9, #20
 800a6c4:	f104 0e14 	add.w	lr, r4, #20
 800a6c8:	f100 0b14 	add.w	fp, r0, #20
 800a6cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a6d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	46d9      	mov	r9, fp
 800a6d8:	f04f 0c00 	mov.w	ip, #0
 800a6dc:	9b01      	ldr	r3, [sp, #4]
 800a6de:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a6e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	fa1f f38a 	uxth.w	r3, sl
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	b283      	uxth	r3, r0
 800a6f0:	1acb      	subs	r3, r1, r3
 800a6f2:	0c00      	lsrs	r0, r0, #16
 800a6f4:	4463      	add	r3, ip
 800a6f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a6fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a704:	4576      	cmp	r6, lr
 800a706:	f849 3b04 	str.w	r3, [r9], #4
 800a70a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a70e:	d8e5      	bhi.n	800a6dc <__mdiff+0x88>
 800a710:	1b33      	subs	r3, r6, r4
 800a712:	3b15      	subs	r3, #21
 800a714:	f023 0303 	bic.w	r3, r3, #3
 800a718:	3415      	adds	r4, #21
 800a71a:	3304      	adds	r3, #4
 800a71c:	42a6      	cmp	r6, r4
 800a71e:	bf38      	it	cc
 800a720:	2304      	movcc	r3, #4
 800a722:	441d      	add	r5, r3
 800a724:	445b      	add	r3, fp
 800a726:	461e      	mov	r6, r3
 800a728:	462c      	mov	r4, r5
 800a72a:	4544      	cmp	r4, r8
 800a72c:	d30e      	bcc.n	800a74c <__mdiff+0xf8>
 800a72e:	f108 0103 	add.w	r1, r8, #3
 800a732:	1b49      	subs	r1, r1, r5
 800a734:	f021 0103 	bic.w	r1, r1, #3
 800a738:	3d03      	subs	r5, #3
 800a73a:	45a8      	cmp	r8, r5
 800a73c:	bf38      	it	cc
 800a73e:	2100      	movcc	r1, #0
 800a740:	440b      	add	r3, r1
 800a742:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a746:	b191      	cbz	r1, 800a76e <__mdiff+0x11a>
 800a748:	6117      	str	r7, [r2, #16]
 800a74a:	e79d      	b.n	800a688 <__mdiff+0x34>
 800a74c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a750:	46e6      	mov	lr, ip
 800a752:	0c08      	lsrs	r0, r1, #16
 800a754:	fa1c fc81 	uxtah	ip, ip, r1
 800a758:	4471      	add	r1, lr
 800a75a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a75e:	b289      	uxth	r1, r1
 800a760:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a764:	f846 1b04 	str.w	r1, [r6], #4
 800a768:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a76c:	e7dd      	b.n	800a72a <__mdiff+0xd6>
 800a76e:	3f01      	subs	r7, #1
 800a770:	e7e7      	b.n	800a742 <__mdiff+0xee>
 800a772:	bf00      	nop
 800a774:	0800b120 	.word	0x0800b120
 800a778:	0800b131 	.word	0x0800b131

0800a77c <__d2b>:
 800a77c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a780:	460f      	mov	r7, r1
 800a782:	2101      	movs	r1, #1
 800a784:	ec59 8b10 	vmov	r8, r9, d0
 800a788:	4616      	mov	r6, r2
 800a78a:	f7ff fcd5 	bl	800a138 <_Balloc>
 800a78e:	4604      	mov	r4, r0
 800a790:	b930      	cbnz	r0, 800a7a0 <__d2b+0x24>
 800a792:	4602      	mov	r2, r0
 800a794:	4b23      	ldr	r3, [pc, #140]	@ (800a824 <__d2b+0xa8>)
 800a796:	4824      	ldr	r0, [pc, #144]	@ (800a828 <__d2b+0xac>)
 800a798:	f240 310f 	movw	r1, #783	@ 0x30f
 800a79c:	f000 fad8 	bl	800ad50 <__assert_func>
 800a7a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7a8:	b10d      	cbz	r5, 800a7ae <__d2b+0x32>
 800a7aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	f1b8 0300 	subs.w	r3, r8, #0
 800a7b4:	d023      	beq.n	800a7fe <__d2b+0x82>
 800a7b6:	4668      	mov	r0, sp
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	f7ff fd84 	bl	800a2c6 <__lo0bits>
 800a7be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7c2:	b1d0      	cbz	r0, 800a7fa <__d2b+0x7e>
 800a7c4:	f1c0 0320 	rsb	r3, r0, #32
 800a7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7cc:	430b      	orrs	r3, r1
 800a7ce:	40c2      	lsrs	r2, r0
 800a7d0:	6163      	str	r3, [r4, #20]
 800a7d2:	9201      	str	r2, [sp, #4]
 800a7d4:	9b01      	ldr	r3, [sp, #4]
 800a7d6:	61a3      	str	r3, [r4, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bf0c      	ite	eq
 800a7dc:	2201      	moveq	r2, #1
 800a7de:	2202      	movne	r2, #2
 800a7e0:	6122      	str	r2, [r4, #16]
 800a7e2:	b1a5      	cbz	r5, 800a80e <__d2b+0x92>
 800a7e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7e8:	4405      	add	r5, r0
 800a7ea:	603d      	str	r5, [r7, #0]
 800a7ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7f0:	6030      	str	r0, [r6, #0]
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	b003      	add	sp, #12
 800a7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7fa:	6161      	str	r1, [r4, #20]
 800a7fc:	e7ea      	b.n	800a7d4 <__d2b+0x58>
 800a7fe:	a801      	add	r0, sp, #4
 800a800:	f7ff fd61 	bl	800a2c6 <__lo0bits>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	6163      	str	r3, [r4, #20]
 800a808:	3020      	adds	r0, #32
 800a80a:	2201      	movs	r2, #1
 800a80c:	e7e8      	b.n	800a7e0 <__d2b+0x64>
 800a80e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a812:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a816:	6038      	str	r0, [r7, #0]
 800a818:	6918      	ldr	r0, [r3, #16]
 800a81a:	f7ff fd35 	bl	800a288 <__hi0bits>
 800a81e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a822:	e7e5      	b.n	800a7f0 <__d2b+0x74>
 800a824:	0800b120 	.word	0x0800b120
 800a828:	0800b131 	.word	0x0800b131

0800a82c <__sfputc_r>:
 800a82c:	6893      	ldr	r3, [r2, #8]
 800a82e:	3b01      	subs	r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	b410      	push	{r4}
 800a834:	6093      	str	r3, [r2, #8]
 800a836:	da08      	bge.n	800a84a <__sfputc_r+0x1e>
 800a838:	6994      	ldr	r4, [r2, #24]
 800a83a:	42a3      	cmp	r3, r4
 800a83c:	db01      	blt.n	800a842 <__sfputc_r+0x16>
 800a83e:	290a      	cmp	r1, #10
 800a840:	d103      	bne.n	800a84a <__sfputc_r+0x1e>
 800a842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a846:	f000 b9df 	b.w	800ac08 <__swbuf_r>
 800a84a:	6813      	ldr	r3, [r2, #0]
 800a84c:	1c58      	adds	r0, r3, #1
 800a84e:	6010      	str	r0, [r2, #0]
 800a850:	7019      	strb	r1, [r3, #0]
 800a852:	4608      	mov	r0, r1
 800a854:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <__sfputs_r>:
 800a85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85c:	4606      	mov	r6, r0
 800a85e:	460f      	mov	r7, r1
 800a860:	4614      	mov	r4, r2
 800a862:	18d5      	adds	r5, r2, r3
 800a864:	42ac      	cmp	r4, r5
 800a866:	d101      	bne.n	800a86c <__sfputs_r+0x12>
 800a868:	2000      	movs	r0, #0
 800a86a:	e007      	b.n	800a87c <__sfputs_r+0x22>
 800a86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a870:	463a      	mov	r2, r7
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ffda 	bl	800a82c <__sfputc_r>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d1f3      	bne.n	800a864 <__sfputs_r+0xa>
 800a87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a880 <_vfiprintf_r>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	460d      	mov	r5, r1
 800a886:	b09d      	sub	sp, #116	@ 0x74
 800a888:	4614      	mov	r4, r2
 800a88a:	4698      	mov	r8, r3
 800a88c:	4606      	mov	r6, r0
 800a88e:	b118      	cbz	r0, 800a898 <_vfiprintf_r+0x18>
 800a890:	6a03      	ldr	r3, [r0, #32]
 800a892:	b90b      	cbnz	r3, 800a898 <_vfiprintf_r+0x18>
 800a894:	f7fe fbdc 	bl	8009050 <__sinit>
 800a898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a89a:	07d9      	lsls	r1, r3, #31
 800a89c:	d405      	bmi.n	800a8aa <_vfiprintf_r+0x2a>
 800a89e:	89ab      	ldrh	r3, [r5, #12]
 800a8a0:	059a      	lsls	r2, r3, #22
 800a8a2:	d402      	bmi.n	800a8aa <_vfiprintf_r+0x2a>
 800a8a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8a6:	f7fe fcdc 	bl	8009262 <__retarget_lock_acquire_recursive>
 800a8aa:	89ab      	ldrh	r3, [r5, #12]
 800a8ac:	071b      	lsls	r3, r3, #28
 800a8ae:	d501      	bpl.n	800a8b4 <_vfiprintf_r+0x34>
 800a8b0:	692b      	ldr	r3, [r5, #16]
 800a8b2:	b99b      	cbnz	r3, 800a8dc <_vfiprintf_r+0x5c>
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f000 f9e4 	bl	800ac84 <__swsetup_r>
 800a8bc:	b170      	cbz	r0, 800a8dc <_vfiprintf_r+0x5c>
 800a8be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8c0:	07dc      	lsls	r4, r3, #31
 800a8c2:	d504      	bpl.n	800a8ce <_vfiprintf_r+0x4e>
 800a8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c8:	b01d      	add	sp, #116	@ 0x74
 800a8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ce:	89ab      	ldrh	r3, [r5, #12]
 800a8d0:	0598      	lsls	r0, r3, #22
 800a8d2:	d4f7      	bmi.n	800a8c4 <_vfiprintf_r+0x44>
 800a8d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8d6:	f7fe fcc5 	bl	8009264 <__retarget_lock_release_recursive>
 800a8da:	e7f3      	b.n	800a8c4 <_vfiprintf_r+0x44>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8e0:	2320      	movs	r3, #32
 800a8e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ea:	2330      	movs	r3, #48	@ 0x30
 800a8ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa9c <_vfiprintf_r+0x21c>
 800a8f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8f4:	f04f 0901 	mov.w	r9, #1
 800a8f8:	4623      	mov	r3, r4
 800a8fa:	469a      	mov	sl, r3
 800a8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a900:	b10a      	cbz	r2, 800a906 <_vfiprintf_r+0x86>
 800a902:	2a25      	cmp	r2, #37	@ 0x25
 800a904:	d1f9      	bne.n	800a8fa <_vfiprintf_r+0x7a>
 800a906:	ebba 0b04 	subs.w	fp, sl, r4
 800a90a:	d00b      	beq.n	800a924 <_vfiprintf_r+0xa4>
 800a90c:	465b      	mov	r3, fp
 800a90e:	4622      	mov	r2, r4
 800a910:	4629      	mov	r1, r5
 800a912:	4630      	mov	r0, r6
 800a914:	f7ff ffa1 	bl	800a85a <__sfputs_r>
 800a918:	3001      	adds	r0, #1
 800a91a:	f000 80a7 	beq.w	800aa6c <_vfiprintf_r+0x1ec>
 800a91e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a920:	445a      	add	r2, fp
 800a922:	9209      	str	r2, [sp, #36]	@ 0x24
 800a924:	f89a 3000 	ldrb.w	r3, [sl]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 809f 	beq.w	800aa6c <_vfiprintf_r+0x1ec>
 800a92e:	2300      	movs	r3, #0
 800a930:	f04f 32ff 	mov.w	r2, #4294967295
 800a934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a938:	f10a 0a01 	add.w	sl, sl, #1
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	9307      	str	r3, [sp, #28]
 800a940:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a944:	931a      	str	r3, [sp, #104]	@ 0x68
 800a946:	4654      	mov	r4, sl
 800a948:	2205      	movs	r2, #5
 800a94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94e:	4853      	ldr	r0, [pc, #332]	@ (800aa9c <_vfiprintf_r+0x21c>)
 800a950:	f7f5 fc46 	bl	80001e0 <memchr>
 800a954:	9a04      	ldr	r2, [sp, #16]
 800a956:	b9d8      	cbnz	r0, 800a990 <_vfiprintf_r+0x110>
 800a958:	06d1      	lsls	r1, r2, #27
 800a95a:	bf44      	itt	mi
 800a95c:	2320      	movmi	r3, #32
 800a95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a962:	0713      	lsls	r3, r2, #28
 800a964:	bf44      	itt	mi
 800a966:	232b      	movmi	r3, #43	@ 0x2b
 800a968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a96c:	f89a 3000 	ldrb.w	r3, [sl]
 800a970:	2b2a      	cmp	r3, #42	@ 0x2a
 800a972:	d015      	beq.n	800a9a0 <_vfiprintf_r+0x120>
 800a974:	9a07      	ldr	r2, [sp, #28]
 800a976:	4654      	mov	r4, sl
 800a978:	2000      	movs	r0, #0
 800a97a:	f04f 0c0a 	mov.w	ip, #10
 800a97e:	4621      	mov	r1, r4
 800a980:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a984:	3b30      	subs	r3, #48	@ 0x30
 800a986:	2b09      	cmp	r3, #9
 800a988:	d94b      	bls.n	800aa22 <_vfiprintf_r+0x1a2>
 800a98a:	b1b0      	cbz	r0, 800a9ba <_vfiprintf_r+0x13a>
 800a98c:	9207      	str	r2, [sp, #28]
 800a98e:	e014      	b.n	800a9ba <_vfiprintf_r+0x13a>
 800a990:	eba0 0308 	sub.w	r3, r0, r8
 800a994:	fa09 f303 	lsl.w	r3, r9, r3
 800a998:	4313      	orrs	r3, r2
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	46a2      	mov	sl, r4
 800a99e:	e7d2      	b.n	800a946 <_vfiprintf_r+0xc6>
 800a9a0:	9b03      	ldr	r3, [sp, #12]
 800a9a2:	1d19      	adds	r1, r3, #4
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	9103      	str	r1, [sp, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bfbb      	ittet	lt
 800a9ac:	425b      	neglt	r3, r3
 800a9ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a9b2:	9307      	strge	r3, [sp, #28]
 800a9b4:	9307      	strlt	r3, [sp, #28]
 800a9b6:	bfb8      	it	lt
 800a9b8:	9204      	strlt	r2, [sp, #16]
 800a9ba:	7823      	ldrb	r3, [r4, #0]
 800a9bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9be:	d10a      	bne.n	800a9d6 <_vfiprintf_r+0x156>
 800a9c0:	7863      	ldrb	r3, [r4, #1]
 800a9c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9c4:	d132      	bne.n	800aa2c <_vfiprintf_r+0x1ac>
 800a9c6:	9b03      	ldr	r3, [sp, #12]
 800a9c8:	1d1a      	adds	r2, r3, #4
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	9203      	str	r2, [sp, #12]
 800a9ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9d2:	3402      	adds	r4, #2
 800a9d4:	9305      	str	r3, [sp, #20]
 800a9d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aaac <_vfiprintf_r+0x22c>
 800a9da:	7821      	ldrb	r1, [r4, #0]
 800a9dc:	2203      	movs	r2, #3
 800a9de:	4650      	mov	r0, sl
 800a9e0:	f7f5 fbfe 	bl	80001e0 <memchr>
 800a9e4:	b138      	cbz	r0, 800a9f6 <_vfiprintf_r+0x176>
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	eba0 000a 	sub.w	r0, r0, sl
 800a9ec:	2240      	movs	r2, #64	@ 0x40
 800a9ee:	4082      	lsls	r2, r0
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	3401      	adds	r4, #1
 800a9f4:	9304      	str	r3, [sp, #16]
 800a9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fa:	4829      	ldr	r0, [pc, #164]	@ (800aaa0 <_vfiprintf_r+0x220>)
 800a9fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa00:	2206      	movs	r2, #6
 800aa02:	f7f5 fbed 	bl	80001e0 <memchr>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d03f      	beq.n	800aa8a <_vfiprintf_r+0x20a>
 800aa0a:	4b26      	ldr	r3, [pc, #152]	@ (800aaa4 <_vfiprintf_r+0x224>)
 800aa0c:	bb1b      	cbnz	r3, 800aa56 <_vfiprintf_r+0x1d6>
 800aa0e:	9b03      	ldr	r3, [sp, #12]
 800aa10:	3307      	adds	r3, #7
 800aa12:	f023 0307 	bic.w	r3, r3, #7
 800aa16:	3308      	adds	r3, #8
 800aa18:	9303      	str	r3, [sp, #12]
 800aa1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa1c:	443b      	add	r3, r7
 800aa1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa20:	e76a      	b.n	800a8f8 <_vfiprintf_r+0x78>
 800aa22:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa26:	460c      	mov	r4, r1
 800aa28:	2001      	movs	r0, #1
 800aa2a:	e7a8      	b.n	800a97e <_vfiprintf_r+0xfe>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	3401      	adds	r4, #1
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	4619      	mov	r1, r3
 800aa34:	f04f 0c0a 	mov.w	ip, #10
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa3e:	3a30      	subs	r2, #48	@ 0x30
 800aa40:	2a09      	cmp	r2, #9
 800aa42:	d903      	bls.n	800aa4c <_vfiprintf_r+0x1cc>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0c6      	beq.n	800a9d6 <_vfiprintf_r+0x156>
 800aa48:	9105      	str	r1, [sp, #20]
 800aa4a:	e7c4      	b.n	800a9d6 <_vfiprintf_r+0x156>
 800aa4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa50:	4604      	mov	r4, r0
 800aa52:	2301      	movs	r3, #1
 800aa54:	e7f0      	b.n	800aa38 <_vfiprintf_r+0x1b8>
 800aa56:	ab03      	add	r3, sp, #12
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	462a      	mov	r2, r5
 800aa5c:	4b12      	ldr	r3, [pc, #72]	@ (800aaa8 <_vfiprintf_r+0x228>)
 800aa5e:	a904      	add	r1, sp, #16
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7fd feb3 	bl	80087cc <_printf_float>
 800aa66:	4607      	mov	r7, r0
 800aa68:	1c78      	adds	r0, r7, #1
 800aa6a:	d1d6      	bne.n	800aa1a <_vfiprintf_r+0x19a>
 800aa6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa6e:	07d9      	lsls	r1, r3, #31
 800aa70:	d405      	bmi.n	800aa7e <_vfiprintf_r+0x1fe>
 800aa72:	89ab      	ldrh	r3, [r5, #12]
 800aa74:	059a      	lsls	r2, r3, #22
 800aa76:	d402      	bmi.n	800aa7e <_vfiprintf_r+0x1fe>
 800aa78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa7a:	f7fe fbf3 	bl	8009264 <__retarget_lock_release_recursive>
 800aa7e:	89ab      	ldrh	r3, [r5, #12]
 800aa80:	065b      	lsls	r3, r3, #25
 800aa82:	f53f af1f 	bmi.w	800a8c4 <_vfiprintf_r+0x44>
 800aa86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa88:	e71e      	b.n	800a8c8 <_vfiprintf_r+0x48>
 800aa8a:	ab03      	add	r3, sp, #12
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	462a      	mov	r2, r5
 800aa90:	4b05      	ldr	r3, [pc, #20]	@ (800aaa8 <_vfiprintf_r+0x228>)
 800aa92:	a904      	add	r1, sp, #16
 800aa94:	4630      	mov	r0, r6
 800aa96:	f7fe f931 	bl	8008cfc <_printf_i>
 800aa9a:	e7e4      	b.n	800aa66 <_vfiprintf_r+0x1e6>
 800aa9c:	0800b18a 	.word	0x0800b18a
 800aaa0:	0800b194 	.word	0x0800b194
 800aaa4:	080087cd 	.word	0x080087cd
 800aaa8:	0800a85b 	.word	0x0800a85b
 800aaac:	0800b190 	.word	0x0800b190

0800aab0 <__sflush_r>:
 800aab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	0716      	lsls	r6, r2, #28
 800aaba:	4605      	mov	r5, r0
 800aabc:	460c      	mov	r4, r1
 800aabe:	d454      	bmi.n	800ab6a <__sflush_r+0xba>
 800aac0:	684b      	ldr	r3, [r1, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dc02      	bgt.n	800aacc <__sflush_r+0x1c>
 800aac6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	dd48      	ble.n	800ab5e <__sflush_r+0xae>
 800aacc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aace:	2e00      	cmp	r6, #0
 800aad0:	d045      	beq.n	800ab5e <__sflush_r+0xae>
 800aad2:	2300      	movs	r3, #0
 800aad4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aad8:	682f      	ldr	r7, [r5, #0]
 800aada:	6a21      	ldr	r1, [r4, #32]
 800aadc:	602b      	str	r3, [r5, #0]
 800aade:	d030      	beq.n	800ab42 <__sflush_r+0x92>
 800aae0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	0759      	lsls	r1, r3, #29
 800aae6:	d505      	bpl.n	800aaf4 <__sflush_r+0x44>
 800aae8:	6863      	ldr	r3, [r4, #4]
 800aaea:	1ad2      	subs	r2, r2, r3
 800aaec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aaee:	b10b      	cbz	r3, 800aaf4 <__sflush_r+0x44>
 800aaf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aaf2:	1ad2      	subs	r2, r2, r3
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aaf8:	6a21      	ldr	r1, [r4, #32]
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b0      	blx	r6
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	d106      	bne.n	800ab12 <__sflush_r+0x62>
 800ab04:	6829      	ldr	r1, [r5, #0]
 800ab06:	291d      	cmp	r1, #29
 800ab08:	d82b      	bhi.n	800ab62 <__sflush_r+0xb2>
 800ab0a:	4a2a      	ldr	r2, [pc, #168]	@ (800abb4 <__sflush_r+0x104>)
 800ab0c:	40ca      	lsrs	r2, r1
 800ab0e:	07d6      	lsls	r6, r2, #31
 800ab10:	d527      	bpl.n	800ab62 <__sflush_r+0xb2>
 800ab12:	2200      	movs	r2, #0
 800ab14:	6062      	str	r2, [r4, #4]
 800ab16:	04d9      	lsls	r1, r3, #19
 800ab18:	6922      	ldr	r2, [r4, #16]
 800ab1a:	6022      	str	r2, [r4, #0]
 800ab1c:	d504      	bpl.n	800ab28 <__sflush_r+0x78>
 800ab1e:	1c42      	adds	r2, r0, #1
 800ab20:	d101      	bne.n	800ab26 <__sflush_r+0x76>
 800ab22:	682b      	ldr	r3, [r5, #0]
 800ab24:	b903      	cbnz	r3, 800ab28 <__sflush_r+0x78>
 800ab26:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab2a:	602f      	str	r7, [r5, #0]
 800ab2c:	b1b9      	cbz	r1, 800ab5e <__sflush_r+0xae>
 800ab2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab32:	4299      	cmp	r1, r3
 800ab34:	d002      	beq.n	800ab3c <__sflush_r+0x8c>
 800ab36:	4628      	mov	r0, r5
 800ab38:	f7ff f9fe 	bl	8009f38 <_free_r>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab40:	e00d      	b.n	800ab5e <__sflush_r+0xae>
 800ab42:	2301      	movs	r3, #1
 800ab44:	4628      	mov	r0, r5
 800ab46:	47b0      	blx	r6
 800ab48:	4602      	mov	r2, r0
 800ab4a:	1c50      	adds	r0, r2, #1
 800ab4c:	d1c9      	bne.n	800aae2 <__sflush_r+0x32>
 800ab4e:	682b      	ldr	r3, [r5, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0c6      	beq.n	800aae2 <__sflush_r+0x32>
 800ab54:	2b1d      	cmp	r3, #29
 800ab56:	d001      	beq.n	800ab5c <__sflush_r+0xac>
 800ab58:	2b16      	cmp	r3, #22
 800ab5a:	d11e      	bne.n	800ab9a <__sflush_r+0xea>
 800ab5c:	602f      	str	r7, [r5, #0]
 800ab5e:	2000      	movs	r0, #0
 800ab60:	e022      	b.n	800aba8 <__sflush_r+0xf8>
 800ab62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab66:	b21b      	sxth	r3, r3
 800ab68:	e01b      	b.n	800aba2 <__sflush_r+0xf2>
 800ab6a:	690f      	ldr	r7, [r1, #16]
 800ab6c:	2f00      	cmp	r7, #0
 800ab6e:	d0f6      	beq.n	800ab5e <__sflush_r+0xae>
 800ab70:	0793      	lsls	r3, r2, #30
 800ab72:	680e      	ldr	r6, [r1, #0]
 800ab74:	bf08      	it	eq
 800ab76:	694b      	ldreq	r3, [r1, #20]
 800ab78:	600f      	str	r7, [r1, #0]
 800ab7a:	bf18      	it	ne
 800ab7c:	2300      	movne	r3, #0
 800ab7e:	eba6 0807 	sub.w	r8, r6, r7
 800ab82:	608b      	str	r3, [r1, #8]
 800ab84:	f1b8 0f00 	cmp.w	r8, #0
 800ab88:	dde9      	ble.n	800ab5e <__sflush_r+0xae>
 800ab8a:	6a21      	ldr	r1, [r4, #32]
 800ab8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab8e:	4643      	mov	r3, r8
 800ab90:	463a      	mov	r2, r7
 800ab92:	4628      	mov	r0, r5
 800ab94:	47b0      	blx	r6
 800ab96:	2800      	cmp	r0, #0
 800ab98:	dc08      	bgt.n	800abac <__sflush_r+0xfc>
 800ab9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abac:	4407      	add	r7, r0
 800abae:	eba8 0800 	sub.w	r8, r8, r0
 800abb2:	e7e7      	b.n	800ab84 <__sflush_r+0xd4>
 800abb4:	20400001 	.word	0x20400001

0800abb8 <_fflush_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	690b      	ldr	r3, [r1, #16]
 800abbc:	4605      	mov	r5, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	b913      	cbnz	r3, 800abc8 <_fflush_r+0x10>
 800abc2:	2500      	movs	r5, #0
 800abc4:	4628      	mov	r0, r5
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	b118      	cbz	r0, 800abd2 <_fflush_r+0x1a>
 800abca:	6a03      	ldr	r3, [r0, #32]
 800abcc:	b90b      	cbnz	r3, 800abd2 <_fflush_r+0x1a>
 800abce:	f7fe fa3f 	bl	8009050 <__sinit>
 800abd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d0f3      	beq.n	800abc2 <_fflush_r+0xa>
 800abda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abdc:	07d0      	lsls	r0, r2, #31
 800abde:	d404      	bmi.n	800abea <_fflush_r+0x32>
 800abe0:	0599      	lsls	r1, r3, #22
 800abe2:	d402      	bmi.n	800abea <_fflush_r+0x32>
 800abe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abe6:	f7fe fb3c 	bl	8009262 <__retarget_lock_acquire_recursive>
 800abea:	4628      	mov	r0, r5
 800abec:	4621      	mov	r1, r4
 800abee:	f7ff ff5f 	bl	800aab0 <__sflush_r>
 800abf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abf4:	07da      	lsls	r2, r3, #31
 800abf6:	4605      	mov	r5, r0
 800abf8:	d4e4      	bmi.n	800abc4 <_fflush_r+0xc>
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	059b      	lsls	r3, r3, #22
 800abfe:	d4e1      	bmi.n	800abc4 <_fflush_r+0xc>
 800ac00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac02:	f7fe fb2f 	bl	8009264 <__retarget_lock_release_recursive>
 800ac06:	e7dd      	b.n	800abc4 <_fflush_r+0xc>

0800ac08 <__swbuf_r>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	460e      	mov	r6, r1
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b118      	cbz	r0, 800ac1a <__swbuf_r+0x12>
 800ac12:	6a03      	ldr	r3, [r0, #32]
 800ac14:	b90b      	cbnz	r3, 800ac1a <__swbuf_r+0x12>
 800ac16:	f7fe fa1b 	bl	8009050 <__sinit>
 800ac1a:	69a3      	ldr	r3, [r4, #24]
 800ac1c:	60a3      	str	r3, [r4, #8]
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	071a      	lsls	r2, r3, #28
 800ac22:	d501      	bpl.n	800ac28 <__swbuf_r+0x20>
 800ac24:	6923      	ldr	r3, [r4, #16]
 800ac26:	b943      	cbnz	r3, 800ac3a <__swbuf_r+0x32>
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f000 f82a 	bl	800ac84 <__swsetup_r>
 800ac30:	b118      	cbz	r0, 800ac3a <__swbuf_r+0x32>
 800ac32:	f04f 37ff 	mov.w	r7, #4294967295
 800ac36:	4638      	mov	r0, r7
 800ac38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	6922      	ldr	r2, [r4, #16]
 800ac3e:	1a98      	subs	r0, r3, r2
 800ac40:	6963      	ldr	r3, [r4, #20]
 800ac42:	b2f6      	uxtb	r6, r6
 800ac44:	4283      	cmp	r3, r0
 800ac46:	4637      	mov	r7, r6
 800ac48:	dc05      	bgt.n	800ac56 <__swbuf_r+0x4e>
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f7ff ffb3 	bl	800abb8 <_fflush_r>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d1ed      	bne.n	800ac32 <__swbuf_r+0x2a>
 800ac56:	68a3      	ldr	r3, [r4, #8]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	60a3      	str	r3, [r4, #8]
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	6022      	str	r2, [r4, #0]
 800ac62:	701e      	strb	r6, [r3, #0]
 800ac64:	6962      	ldr	r2, [r4, #20]
 800ac66:	1c43      	adds	r3, r0, #1
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d004      	beq.n	800ac76 <__swbuf_r+0x6e>
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	07db      	lsls	r3, r3, #31
 800ac70:	d5e1      	bpl.n	800ac36 <__swbuf_r+0x2e>
 800ac72:	2e0a      	cmp	r6, #10
 800ac74:	d1df      	bne.n	800ac36 <__swbuf_r+0x2e>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f7ff ff9d 	bl	800abb8 <_fflush_r>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d0d9      	beq.n	800ac36 <__swbuf_r+0x2e>
 800ac82:	e7d6      	b.n	800ac32 <__swbuf_r+0x2a>

0800ac84 <__swsetup_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4b29      	ldr	r3, [pc, #164]	@ (800ad2c <__swsetup_r+0xa8>)
 800ac88:	4605      	mov	r5, r0
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	b118      	cbz	r0, 800ac98 <__swsetup_r+0x14>
 800ac90:	6a03      	ldr	r3, [r0, #32]
 800ac92:	b90b      	cbnz	r3, 800ac98 <__swsetup_r+0x14>
 800ac94:	f7fe f9dc 	bl	8009050 <__sinit>
 800ac98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac9c:	0719      	lsls	r1, r3, #28
 800ac9e:	d422      	bmi.n	800ace6 <__swsetup_r+0x62>
 800aca0:	06da      	lsls	r2, r3, #27
 800aca2:	d407      	bmi.n	800acb4 <__swsetup_r+0x30>
 800aca4:	2209      	movs	r2, #9
 800aca6:	602a      	str	r2, [r5, #0]
 800aca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acac:	81a3      	strh	r3, [r4, #12]
 800acae:	f04f 30ff 	mov.w	r0, #4294967295
 800acb2:	e033      	b.n	800ad1c <__swsetup_r+0x98>
 800acb4:	0758      	lsls	r0, r3, #29
 800acb6:	d512      	bpl.n	800acde <__swsetup_r+0x5a>
 800acb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acba:	b141      	cbz	r1, 800acce <__swsetup_r+0x4a>
 800acbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acc0:	4299      	cmp	r1, r3
 800acc2:	d002      	beq.n	800acca <__swsetup_r+0x46>
 800acc4:	4628      	mov	r0, r5
 800acc6:	f7ff f937 	bl	8009f38 <_free_r>
 800acca:	2300      	movs	r3, #0
 800accc:	6363      	str	r3, [r4, #52]	@ 0x34
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800acd4:	81a3      	strh	r3, [r4, #12]
 800acd6:	2300      	movs	r3, #0
 800acd8:	6063      	str	r3, [r4, #4]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f043 0308 	orr.w	r3, r3, #8
 800ace4:	81a3      	strh	r3, [r4, #12]
 800ace6:	6923      	ldr	r3, [r4, #16]
 800ace8:	b94b      	cbnz	r3, 800acfe <__swsetup_r+0x7a>
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800acf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acf4:	d003      	beq.n	800acfe <__swsetup_r+0x7a>
 800acf6:	4621      	mov	r1, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	f000 f8b3 	bl	800ae64 <__smakebuf_r>
 800acfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad02:	f013 0201 	ands.w	r2, r3, #1
 800ad06:	d00a      	beq.n	800ad1e <__swsetup_r+0x9a>
 800ad08:	2200      	movs	r2, #0
 800ad0a:	60a2      	str	r2, [r4, #8]
 800ad0c:	6962      	ldr	r2, [r4, #20]
 800ad0e:	4252      	negs	r2, r2
 800ad10:	61a2      	str	r2, [r4, #24]
 800ad12:	6922      	ldr	r2, [r4, #16]
 800ad14:	b942      	cbnz	r2, 800ad28 <__swsetup_r+0xa4>
 800ad16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad1a:	d1c5      	bne.n	800aca8 <__swsetup_r+0x24>
 800ad1c:	bd38      	pop	{r3, r4, r5, pc}
 800ad1e:	0799      	lsls	r1, r3, #30
 800ad20:	bf58      	it	pl
 800ad22:	6962      	ldrpl	r2, [r4, #20]
 800ad24:	60a2      	str	r2, [r4, #8]
 800ad26:	e7f4      	b.n	800ad12 <__swsetup_r+0x8e>
 800ad28:	2000      	movs	r0, #0
 800ad2a:	e7f7      	b.n	800ad1c <__swsetup_r+0x98>
 800ad2c:	20000108 	.word	0x20000108

0800ad30 <_sbrk_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d06      	ldr	r5, [pc, #24]	@ (800ad4c <_sbrk_r+0x1c>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7f6 fc42 	bl	80015c4 <_sbrk>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d102      	bne.n	800ad4a <_sbrk_r+0x1a>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	b103      	cbz	r3, 800ad4a <_sbrk_r+0x1a>
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	200020d4 	.word	0x200020d4

0800ad50 <__assert_func>:
 800ad50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad52:	4614      	mov	r4, r2
 800ad54:	461a      	mov	r2, r3
 800ad56:	4b09      	ldr	r3, [pc, #36]	@ (800ad7c <__assert_func+0x2c>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	68d8      	ldr	r0, [r3, #12]
 800ad5e:	b14c      	cbz	r4, 800ad74 <__assert_func+0x24>
 800ad60:	4b07      	ldr	r3, [pc, #28]	@ (800ad80 <__assert_func+0x30>)
 800ad62:	9100      	str	r1, [sp, #0]
 800ad64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad68:	4906      	ldr	r1, [pc, #24]	@ (800ad84 <__assert_func+0x34>)
 800ad6a:	462b      	mov	r3, r5
 800ad6c:	f000 f842 	bl	800adf4 <fiprintf>
 800ad70:	f000 f8d6 	bl	800af20 <abort>
 800ad74:	4b04      	ldr	r3, [pc, #16]	@ (800ad88 <__assert_func+0x38>)
 800ad76:	461c      	mov	r4, r3
 800ad78:	e7f3      	b.n	800ad62 <__assert_func+0x12>
 800ad7a:	bf00      	nop
 800ad7c:	20000108 	.word	0x20000108
 800ad80:	0800b1a5 	.word	0x0800b1a5
 800ad84:	0800b1b2 	.word	0x0800b1b2
 800ad88:	0800b1e0 	.word	0x0800b1e0

0800ad8c <_calloc_r>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	fba1 5402 	umull	r5, r4, r1, r2
 800ad92:	b934      	cbnz	r4, 800ada2 <_calloc_r+0x16>
 800ad94:	4629      	mov	r1, r5
 800ad96:	f7ff f943 	bl	800a020 <_malloc_r>
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	b928      	cbnz	r0, 800adaa <_calloc_r+0x1e>
 800ad9e:	4630      	mov	r0, r6
 800ada0:	bd70      	pop	{r4, r5, r6, pc}
 800ada2:	220c      	movs	r2, #12
 800ada4:	6002      	str	r2, [r0, #0]
 800ada6:	2600      	movs	r6, #0
 800ada8:	e7f9      	b.n	800ad9e <_calloc_r+0x12>
 800adaa:	462a      	mov	r2, r5
 800adac:	4621      	mov	r1, r4
 800adae:	f7fe f9da 	bl	8009166 <memset>
 800adb2:	e7f4      	b.n	800ad9e <_calloc_r+0x12>

0800adb4 <__ascii_mbtowc>:
 800adb4:	b082      	sub	sp, #8
 800adb6:	b901      	cbnz	r1, 800adba <__ascii_mbtowc+0x6>
 800adb8:	a901      	add	r1, sp, #4
 800adba:	b142      	cbz	r2, 800adce <__ascii_mbtowc+0x1a>
 800adbc:	b14b      	cbz	r3, 800add2 <__ascii_mbtowc+0x1e>
 800adbe:	7813      	ldrb	r3, [r2, #0]
 800adc0:	600b      	str	r3, [r1, #0]
 800adc2:	7812      	ldrb	r2, [r2, #0]
 800adc4:	1e10      	subs	r0, r2, #0
 800adc6:	bf18      	it	ne
 800adc8:	2001      	movne	r0, #1
 800adca:	b002      	add	sp, #8
 800adcc:	4770      	bx	lr
 800adce:	4610      	mov	r0, r2
 800add0:	e7fb      	b.n	800adca <__ascii_mbtowc+0x16>
 800add2:	f06f 0001 	mvn.w	r0, #1
 800add6:	e7f8      	b.n	800adca <__ascii_mbtowc+0x16>

0800add8 <__ascii_wctomb>:
 800add8:	4603      	mov	r3, r0
 800adda:	4608      	mov	r0, r1
 800addc:	b141      	cbz	r1, 800adf0 <__ascii_wctomb+0x18>
 800adde:	2aff      	cmp	r2, #255	@ 0xff
 800ade0:	d904      	bls.n	800adec <__ascii_wctomb+0x14>
 800ade2:	228a      	movs	r2, #138	@ 0x8a
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	f04f 30ff 	mov.w	r0, #4294967295
 800adea:	4770      	bx	lr
 800adec:	700a      	strb	r2, [r1, #0]
 800adee:	2001      	movs	r0, #1
 800adf0:	4770      	bx	lr
	...

0800adf4 <fiprintf>:
 800adf4:	b40e      	push	{r1, r2, r3}
 800adf6:	b503      	push	{r0, r1, lr}
 800adf8:	4601      	mov	r1, r0
 800adfa:	ab03      	add	r3, sp, #12
 800adfc:	4805      	ldr	r0, [pc, #20]	@ (800ae14 <fiprintf+0x20>)
 800adfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae02:	6800      	ldr	r0, [r0, #0]
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	f7ff fd3b 	bl	800a880 <_vfiprintf_r>
 800ae0a:	b002      	add	sp, #8
 800ae0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae10:	b003      	add	sp, #12
 800ae12:	4770      	bx	lr
 800ae14:	20000108 	.word	0x20000108

0800ae18 <__swhatbuf_r>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae20:	2900      	cmp	r1, #0
 800ae22:	b096      	sub	sp, #88	@ 0x58
 800ae24:	4615      	mov	r5, r2
 800ae26:	461e      	mov	r6, r3
 800ae28:	da0d      	bge.n	800ae46 <__swhatbuf_r+0x2e>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae30:	f04f 0100 	mov.w	r1, #0
 800ae34:	bf14      	ite	ne
 800ae36:	2340      	movne	r3, #64	@ 0x40
 800ae38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	6031      	str	r1, [r6, #0]
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	b016      	add	sp, #88	@ 0x58
 800ae44:	bd70      	pop	{r4, r5, r6, pc}
 800ae46:	466a      	mov	r2, sp
 800ae48:	f000 f848 	bl	800aedc <_fstat_r>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	dbec      	blt.n	800ae2a <__swhatbuf_r+0x12>
 800ae50:	9901      	ldr	r1, [sp, #4]
 800ae52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae5a:	4259      	negs	r1, r3
 800ae5c:	4159      	adcs	r1, r3
 800ae5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae62:	e7eb      	b.n	800ae3c <__swhatbuf_r+0x24>

0800ae64 <__smakebuf_r>:
 800ae64:	898b      	ldrh	r3, [r1, #12]
 800ae66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae68:	079d      	lsls	r5, r3, #30
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	d507      	bpl.n	800ae80 <__smakebuf_r+0x1c>
 800ae70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	6123      	str	r3, [r4, #16]
 800ae78:	2301      	movs	r3, #1
 800ae7a:	6163      	str	r3, [r4, #20]
 800ae7c:	b003      	add	sp, #12
 800ae7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae80:	ab01      	add	r3, sp, #4
 800ae82:	466a      	mov	r2, sp
 800ae84:	f7ff ffc8 	bl	800ae18 <__swhatbuf_r>
 800ae88:	9f00      	ldr	r7, [sp, #0]
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f7ff f8c6 	bl	800a020 <_malloc_r>
 800ae94:	b948      	cbnz	r0, 800aeaa <__smakebuf_r+0x46>
 800ae96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9a:	059a      	lsls	r2, r3, #22
 800ae9c:	d4ee      	bmi.n	800ae7c <__smakebuf_r+0x18>
 800ae9e:	f023 0303 	bic.w	r3, r3, #3
 800aea2:	f043 0302 	orr.w	r3, r3, #2
 800aea6:	81a3      	strh	r3, [r4, #12]
 800aea8:	e7e2      	b.n	800ae70 <__smakebuf_r+0xc>
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	6020      	str	r0, [r4, #0]
 800aeae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aeba:	b15b      	cbz	r3, 800aed4 <__smakebuf_r+0x70>
 800aebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aec0:	4630      	mov	r0, r6
 800aec2:	f000 f81d 	bl	800af00 <_isatty_r>
 800aec6:	b128      	cbz	r0, 800aed4 <__smakebuf_r+0x70>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	f023 0303 	bic.w	r3, r3, #3
 800aece:	f043 0301 	orr.w	r3, r3, #1
 800aed2:	81a3      	strh	r3, [r4, #12]
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	431d      	orrs	r5, r3
 800aed8:	81a5      	strh	r5, [r4, #12]
 800aeda:	e7cf      	b.n	800ae7c <__smakebuf_r+0x18>

0800aedc <_fstat_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4d07      	ldr	r5, [pc, #28]	@ (800aefc <_fstat_r+0x20>)
 800aee0:	2300      	movs	r3, #0
 800aee2:	4604      	mov	r4, r0
 800aee4:	4608      	mov	r0, r1
 800aee6:	4611      	mov	r1, r2
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	f7f6 fb43 	bl	8001574 <_fstat>
 800aeee:	1c43      	adds	r3, r0, #1
 800aef0:	d102      	bne.n	800aef8 <_fstat_r+0x1c>
 800aef2:	682b      	ldr	r3, [r5, #0]
 800aef4:	b103      	cbz	r3, 800aef8 <_fstat_r+0x1c>
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	bd38      	pop	{r3, r4, r5, pc}
 800aefa:	bf00      	nop
 800aefc:	200020d4 	.word	0x200020d4

0800af00 <_isatty_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d06      	ldr	r5, [pc, #24]	@ (800af1c <_isatty_r+0x1c>)
 800af04:	2300      	movs	r3, #0
 800af06:	4604      	mov	r4, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	602b      	str	r3, [r5, #0]
 800af0c:	f7f6 fb42 	bl	8001594 <_isatty>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_isatty_r+0x1a>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_isatty_r+0x1a>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	200020d4 	.word	0x200020d4

0800af20 <abort>:
 800af20:	b508      	push	{r3, lr}
 800af22:	2006      	movs	r0, #6
 800af24:	f000 f82c 	bl	800af80 <raise>
 800af28:	2001      	movs	r0, #1
 800af2a:	f7f6 faef 	bl	800150c <_exit>

0800af2e <_raise_r>:
 800af2e:	291f      	cmp	r1, #31
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4605      	mov	r5, r0
 800af34:	460c      	mov	r4, r1
 800af36:	d904      	bls.n	800af42 <_raise_r+0x14>
 800af38:	2316      	movs	r3, #22
 800af3a:	6003      	str	r3, [r0, #0]
 800af3c:	f04f 30ff 	mov.w	r0, #4294967295
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af44:	b112      	cbz	r2, 800af4c <_raise_r+0x1e>
 800af46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af4a:	b94b      	cbnz	r3, 800af60 <_raise_r+0x32>
 800af4c:	4628      	mov	r0, r5
 800af4e:	f000 f831 	bl	800afb4 <_getpid_r>
 800af52:	4622      	mov	r2, r4
 800af54:	4601      	mov	r1, r0
 800af56:	4628      	mov	r0, r5
 800af58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af5c:	f000 b818 	b.w	800af90 <_kill_r>
 800af60:	2b01      	cmp	r3, #1
 800af62:	d00a      	beq.n	800af7a <_raise_r+0x4c>
 800af64:	1c59      	adds	r1, r3, #1
 800af66:	d103      	bne.n	800af70 <_raise_r+0x42>
 800af68:	2316      	movs	r3, #22
 800af6a:	6003      	str	r3, [r0, #0]
 800af6c:	2001      	movs	r0, #1
 800af6e:	e7e7      	b.n	800af40 <_raise_r+0x12>
 800af70:	2100      	movs	r1, #0
 800af72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af76:	4620      	mov	r0, r4
 800af78:	4798      	blx	r3
 800af7a:	2000      	movs	r0, #0
 800af7c:	e7e0      	b.n	800af40 <_raise_r+0x12>
	...

0800af80 <raise>:
 800af80:	4b02      	ldr	r3, [pc, #8]	@ (800af8c <raise+0xc>)
 800af82:	4601      	mov	r1, r0
 800af84:	6818      	ldr	r0, [r3, #0]
 800af86:	f7ff bfd2 	b.w	800af2e <_raise_r>
 800af8a:	bf00      	nop
 800af8c:	20000108 	.word	0x20000108

0800af90 <_kill_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d07      	ldr	r5, [pc, #28]	@ (800afb0 <_kill_r+0x20>)
 800af94:	2300      	movs	r3, #0
 800af96:	4604      	mov	r4, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	4611      	mov	r1, r2
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	f7f6 faa5 	bl	80014ec <_kill>
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	d102      	bne.n	800afac <_kill_r+0x1c>
 800afa6:	682b      	ldr	r3, [r5, #0]
 800afa8:	b103      	cbz	r3, 800afac <_kill_r+0x1c>
 800afaa:	6023      	str	r3, [r4, #0]
 800afac:	bd38      	pop	{r3, r4, r5, pc}
 800afae:	bf00      	nop
 800afb0:	200020d4 	.word	0x200020d4

0800afb4 <_getpid_r>:
 800afb4:	f7f6 ba92 	b.w	80014dc <_getpid>

0800afb8 <_init>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	bf00      	nop
 800afbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afbe:	bc08      	pop	{r3}
 800afc0:	469e      	mov	lr, r3
 800afc2:	4770      	bx	lr

0800afc4 <_fini>:
 800afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc6:	bf00      	nop
 800afc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afca:	bc08      	pop	{r3}
 800afcc:	469e      	mov	lr, r3
 800afce:	4770      	bx	lr
