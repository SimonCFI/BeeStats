
BeeStats.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080070f0  080070f0  000080f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800751c  0800751c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800751c  0800751c  0000851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007524  08007524  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007524  08007524  00008524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007528  08007528  00008528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800752c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001d4  08007700  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08007700  0000945c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4eb  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002183  00000000  00000000  000176ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00019878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a57  00000000  00000000  0001a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f1e  00000000  00000000  0001b017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a7d  00000000  00000000  0001df35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c36  00000000  00000000  0002e9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c05e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047cc  00000000  00000000  000c062c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c4df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070d8 	.word	0x080070d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080070d8 	.word	0x080070d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b08f      	sub	sp, #60	@ 0x3c
 8000ee8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fc8d 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f87d 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 f9cd 	bl	8001290 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef6:	f000 f8e3 	bl	80010c0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000efa:	f000 f90f 	bl	800111c <MX_RTC_Init>
  MX_SPI1_Init();
 8000efe:	f000 f967 	bl	80011d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f02:	f000 f99b 	bl	800123c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;

  FRAMindex = FRAM_ReadIndex();
 8000f06:	f003 fc1b 	bl	8004740 <FRAM_ReadIndex>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b33      	ldr	r3, [pc, #204]	@ (8000fdc <main+0xf8>)
 8000f10:	801a      	strh	r2, [r3, #0]
  printf("Letzter Index aus FRAM: %u\r\n", FRAMindex);
 8000f12:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <main+0xf8>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4831      	ldr	r0, [pc, #196]	@ (8000fe0 <main+0xfc>)
 8000f1a:	f004 f95f 	bl	80051dc <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

for(int i1=0;i1<11;i1++){
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f22:	e04a      	b.n	8000fba <main+0xd6>

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	482d      	ldr	r0, [pc, #180]	@ (8000fe4 <main+0x100>)
 8000f2e:	f001 ff2c 	bl	8002d8a <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);  // Muss nach GetTime!
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482a      	ldr	r0, [pc, #168]	@ (8000fe4 <main+0x100>)
 8000f3c:	f002 f807 	bl	8002f4e <HAL_RTC_GetDate>

	  SensorData data;
	  data.year = currentDate.Year;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	713b      	strb	r3, [r7, #4]
	  data.month = currentDate.Month;
 8000f44:	7b7b      	ldrb	r3, [r7, #13]
 8000f46:	717b      	strb	r3, [r7, #5]
	  data.day = currentDate.Date;
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	71bb      	strb	r3, [r7, #6]
	  data.hour = currentTime.Hours;
 8000f4c:	7c3b      	ldrb	r3, [r7, #16]
 8000f4e:	71fb      	strb	r3, [r7, #7]
	  data.minute = currentTime.Minutes;
 8000f50:	7c7b      	ldrb	r3, [r7, #17]
 8000f52:	723b      	strb	r3, [r7, #8]
	  data.second = currentTime.Seconds;
 8000f54:	7cbb      	ldrb	r3, [r7, #18]
 8000f56:	727b      	strb	r3, [r7, #9]
	  data.weight = FRAMindex;
 8000f58:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <main+0xf8>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	817b      	strh	r3, [r7, #10]

	  FRAM_WriteEntry(FRAMindex,&data);
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <main+0xf8>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	1d3a      	adds	r2, r7, #4
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fb64 	bl	8004634 <FRAM_WriteEntry>

	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <main+0xf8>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	461c      	mov	r4, r3
			  FRAMindex,
			 currentTime.Hours,
 8000f72:	7c3b      	ldrb	r3, [r7, #16]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f74:	461d      	mov	r5, r3
	         currentTime.Minutes,
 8000f76:	7c7b      	ldrb	r3, [r7, #17]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f78:	461e      	mov	r6, r3
	         currentTime.Seconds,
 8000f7a:	7cbb      	ldrb	r3, [r7, #18]
	         currentDate.Date,
 8000f7c:	7bba      	ldrb	r2, [r7, #14]
	         currentDate.Month,
 8000f7e:	7b79      	ldrb	r1, [r7, #13]
	         currentDate.Year);
 8000f80:	7bf8      	ldrb	r0, [r7, #15]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8000f82:	9003      	str	r0, [sp, #12]
 8000f84:	9102      	str	r1, [sp, #8]
 8000f86:	9201      	str	r2, [sp, #4]
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4633      	mov	r3, r6
 8000f8c:	462a      	mov	r2, r5
 8000f8e:	4621      	mov	r1, r4
 8000f90:	4815      	ldr	r0, [pc, #84]	@ (8000fe8 <main+0x104>)
 8000f92:	f004 f923 	bl	80051dc <iprintf>

	  FRAMindex++;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <main+0xf8>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <main+0xf8>)
 8000fa0:	801a      	strh	r2, [r3, #0]
	  FRAM_WriteIndex(FRAMindex);
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <main+0xf8>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fb9a 	bl	80046e0 <FRAM_WriteIndex>
	  HAL_Delay(1000);  // Ausgabe alle 1s
 8000fac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb0:	f000 fc9c 	bl	80018ec <HAL_Delay>
for(int i1=0;i1<11;i1++){
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbc:	2b0a      	cmp	r3, #10
 8000fbe:	ddb1      	ble.n	8000f24 <main+0x40>


}

FRAM_PrintEntry(15);
 8000fc0:	200f      	movs	r0, #15
 8000fc2:	f003 fb67 	bl	8004694 <FRAM_PrintEntry>
FRAM_PrintEntry(6);
 8000fc6:	2006      	movs	r0, #6
 8000fc8:	f003 fb64 	bl	8004694 <FRAM_PrintEntry>
FRAM_PrintEntry(7);
 8000fcc:	2007      	movs	r0, #7
 8000fce:	f003 fb61 	bl	8004694 <FRAM_PrintEntry>
 8000fd2:	2300      	movs	r3, #0


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	372c      	adds	r7, #44	@ 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fdc:	2000030c 	.word	0x2000030c
 8000fe0:	080070f0 	.word	0x080070f0
 8000fe4:	20000244 	.word	0x20000244
 8000fe8:	08007110 	.word	0x08007110

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	@ 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	2230      	movs	r2, #48	@ 0x30
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 f943 	bl	8005286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	4a27      	ldr	r2, [pc, #156]	@ (80010b8 <SystemClock_Config+0xcc>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001020:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <SystemClock_Config+0xd0>)
 8001036:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001048:	2309      	movs	r3, #9
 800104a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800104c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001052:	2301      	movs	r3, #1
 8001054:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800105e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001060:	2319      	movs	r3, #25
 8001062:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001064:	23c0      	movs	r3, #192	@ 0xc0
 8001066:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800106c:	2304      	movs	r3, #4
 800106e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f001 f825 	bl	80020c4 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001080:	f000 f97a 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2103      	movs	r1, #3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fa87 	bl	80025b4 <HAL_RCC_ClockConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010ac:	f000 f964 	bl	8001378 <Error_Handler>
  }
}
 80010b0:	bf00      	nop
 80010b2:	3750      	adds	r7, #80	@ 0x50
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f000 fe9d 	bl	8001e3c <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 f936 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200001f0 	.word	0x200001f0
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001130:	2300      	movs	r3, #0
 8001132:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001134:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <MX_RTC_Init+0xac>)
 8001136:	4a25      	ldr	r2, [pc, #148]	@ (80011cc <MX_RTC_Init+0xb0>)
 8001138:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <MX_RTC_Init+0xac>)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001140:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_RTC_Init+0xac>)
 8001142:	227f      	movs	r2, #127	@ 0x7f
 8001144:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <MX_RTC_Init+0xac>)
 8001148:	22ff      	movs	r2, #255	@ 0xff
 800114a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_RTC_Init+0xac>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <MX_RTC_Init+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <MX_RTC_Init+0xac>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800115e:	481a      	ldr	r0, [pc, #104]	@ (80011c8 <MX_RTC_Init+0xac>)
 8001160:	f001 fcf8 	bl	8002b54 <HAL_RTC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800116a:	f000 f905 	bl	8001378 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 19;
 800116e:	2313      	movs	r3, #19
 8001170:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001172:	2300      	movs	r3, #0
 8001174:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001176:	2300      	movs	r3, #0
 8001178:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	480f      	ldr	r0, [pc, #60]	@ (80011c8 <MX_RTC_Init+0xac>)
 800118a:	f001 fd64 	bl	8002c56 <HAL_RTC_SetTime>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001194:	f000 f8f0 	bl	8001378 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001198:	2306      	movs	r3, #6
 800119a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 800119c:	2307      	movs	r3, #7
 800119e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 12;
 80011a0:	230c      	movs	r3, #12
 80011a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 25;
 80011a4:	2319      	movs	r3, #25
 80011a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_RTC_Init+0xac>)
 80011b0:	f001 fe49 	bl	8002e46 <HAL_RTC_SetDate>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011ba:	f000 f8dd 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000244 	.word	0x20000244
 80011cc:	40002800 	.word	0x40002800

080011d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <MX_SPI1_Init+0x64>)
 80011d6:	4a18      	ldr	r2, [pc, #96]	@ (8001238 <MX_SPI1_Init+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MX_SPI1_Init+0x64>)
 80011dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <MX_SPI1_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <MX_SPI1_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_SPI1_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_SPI1_Init+0x64>)
 80011fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001200:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  //geändert wegen Problemen, vorher wars 2
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_SPI1_Init+0x64>)
 8001204:	2210      	movs	r2, #16
 8001206:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <MX_SPI1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_SPI1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_SPI1_Init+0x64>)
 800121c:	220a      	movs	r2, #10
 800121e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <MX_SPI1_Init+0x64>)
 8001222:	f001 ffa1 	bl	8003168 <HAL_SPI_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800122c:	f000 f8a4 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000264 	.word	0x20000264
 8001238:	40013000 	.word	0x40013000

0800123c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_USART1_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <MX_USART1_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <MX_USART1_UART_Init+0x4c>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_USART1_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_USART1_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_USART1_UART_Init+0x4c>)
 8001274:	f002 fd4a 	bl	8003d0c <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f87b 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200002bc 	.word	0x200002bc
 800128c:	40011000 	.word	0x40011000

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <MX_GPIO_Init+0xb4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a25      	ldr	r2, [pc, #148]	@ (8001344 <MX_GPIO_Init+0xb4>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <MX_GPIO_Init+0xb4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_GPIO_Init+0xb4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001344 <MX_GPIO_Init+0xb4>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_GPIO_Init+0xb4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_GPIO_Init+0xb4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <MX_GPIO_Init+0xb4>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <MX_GPIO_Init+0xb4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_GPIO_Init+0xb4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a10      	ldr	r2, [pc, #64]	@ (8001344 <MX_GPIO_Init+0xb4>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_GPIO_Init+0xb4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAM_GPIO_Port, FRAM_Pin, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	2110      	movs	r1, #16
 800131a:	480b      	ldr	r0, [pc, #44]	@ (8001348 <MX_GPIO_Init+0xb8>)
 800131c:	f000 fd74 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FRAM_Pin */
  GPIO_InitStruct.Pin = FRAM_Pin;
 8001320:	2310      	movs	r3, #16
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRAM_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4804      	ldr	r0, [pc, #16]	@ (8001348 <MX_GPIO_Init+0xb8>)
 8001338:	f000 fbe2 	bl	8001b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	@ 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	b29a      	uxth	r2, r3
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	4804      	ldr	r0, [pc, #16]	@ (8001374 <_write+0x28>)
 8001364:	f002 fd22 	bl	8003dac <HAL_UART_Transmit>
    return len;}
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200002bc 	.word	0x200002bc

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <HAL_MspInit+0x4c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	4a0f      	ldr	r2, [pc, #60]	@ (80013d0 <HAL_MspInit+0x4c>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001398:	6453      	str	r3, [r2, #68]	@ 0x44
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <HAL_MspInit+0x4c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <HAL_MspInit+0x4c>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	4a08      	ldr	r2, [pc, #32]	@ (80013d0 <HAL_MspInit+0x4c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	@ (8001458 <HAL_I2C_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_I2C_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a17      	ldr	r2, [pc, #92]	@ (800145c <HAL_I2C_MspInit+0x88>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_I2C_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001412:	23c0      	movs	r3, #192	@ 0xc0
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001416:	2312      	movs	r3, #18
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001422:	2304      	movs	r3, #4
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <HAL_I2C_MspInit+0x8c>)
 800142e:	f000 fb67 	bl	8001b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_I2C_MspInit+0x88>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_I2C_MspInit+0x88>)
 800143c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_I2C_MspInit+0x88>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	@ 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40005400 	.word	0x40005400
 800145c:	40023800 	.word	0x40023800
 8001460:	40020400 	.word	0x40020400

08001464 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a0c      	ldr	r2, [pc, #48]	@ (80014b4 <HAL_RTC_MspInit+0x50>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d111      	bne.n	80014ac <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001488:	2302      	movs	r3, #2
 800148a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800148c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001490:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4618      	mov	r0, r3
 8001498:	f001 fa6c 	bl	8002974 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014a2:	f7ff ff69 	bl	8001378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <HAL_RTC_MspInit+0x54>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40002800 	.word	0x40002800
 80014b8:	42470e3c 	.word	0x42470e3c

080014bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <HAL_SPI_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12b      	bne.n	8001536 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001516:	23e0      	movs	r3, #224	@ 0xe0
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001526:	2305      	movs	r3, #5
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <HAL_SPI_MspInit+0x8c>)
 8001532:	f000 fae5 	bl	8001b00 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	@ 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40013000 	.word	0x40013000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000

0800154c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <HAL_UART_MspInit+0x84>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12c      	bne.n	80015c8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_UART_MspInit+0x88>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a17      	ldr	r2, [pc, #92]	@ (80015d4 <HAL_UART_MspInit+0x88>)
 8001578:	f043 0310 	orr.w	r3, r3, #16
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_UART_MspInit+0x88>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_UART_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a10      	ldr	r2, [pc, #64]	@ (80015d4 <HAL_UART_MspInit+0x88>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_UART_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b8:	2307      	movs	r3, #7
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <HAL_UART_MspInit+0x8c>)
 80015c4:	f000 fa9c 	bl	8001b00 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	@ 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40011000 	.word	0x40011000
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001632:	f000 f93b 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}

0800163a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  return 1;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_kill>:

int _kill(int pid, int sig)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001654:	f003 fe6a 	bl	800532c <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	2216      	movs	r2, #22
 800165c:	601a      	str	r2, [r3, #0]
  return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_exit>:

void _exit (int status)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001672:	f04f 31ff 	mov.w	r1, #4294967295
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffe7 	bl	800164a <_kill>
  while (1) {}    /* Make sure we hang here */
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <_exit+0x12>

08001680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00a      	b.n	80016a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001692:	f3af 8000 	nop.w
 8001696:	4601      	mov	r1, r0
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	b2ca      	uxtb	r2, r1
 80016a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf0      	blt.n	8001692 <_read+0x12>
  }

  return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e2:	605a      	str	r2, [r3, #4]
  return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_isatty>:

int _isatty(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	@ (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f003 fdea 	bl	800532c <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20020000 	.word	0x20020000
 8001784:	00000400 	.word	0x00000400
 8001788:	20000304 	.word	0x20000304
 800178c:	20000460 	.word	0x20000460

08001790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b8:	f7ff ffea 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	@ (80017f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e2:	f003 fda9 	bl	8005338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e6:	f7ff fb7d 	bl	8000ee4 <main>
  bx  lr    
 80017ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017f8:	0800752c 	.word	0x0800752c
  ldr r2, =_sbss
 80017fc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001800:	2000045c 	.word	0x2000045c

08001804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800180c:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <HAL_Init+0x40>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <HAL_Init+0x40>)
 800181e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	@ (8001848 <HAL_Init+0x40>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f931 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	200f      	movs	r0, #15
 8001838:	f000 f808 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff fda2 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f93b 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f911 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	@ (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000308 	.word	0x20000308

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000308 	.word	0x20000308

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff ffee 	bl	80018d4 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d005      	beq.n	8001912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_Delay+0x44>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001912:	bf00      	nop
 8001914:	f7ff ffde 	bl	80018d4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d8f7      	bhi.n	8001914 <HAL_Delay+0x28>
  {
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	@ (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	@ (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff47 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff5c 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff8e 	bl	80019ec <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffb0 	bl	8001a54 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e159      	b.n	8001dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 8148 	bne.w	8001dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d005      	beq.n	8001b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d130      	bne.n	8001bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 0201 	and.w	r2, r3, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d017      	beq.n	8001bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d123      	bne.n	8001c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80a2 	beq.w	8001dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b57      	ldr	r3, [pc, #348]	@ (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a56      	ldr	r2, [pc, #344]	@ (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b54      	ldr	r3, [pc, #336]	@ (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca2:	4a52      	ldr	r2, [pc, #328]	@ (8001dec <HAL_GPIO_Init+0x2ec>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a49      	ldr	r2, [pc, #292]	@ (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d019      	beq.n	8001d02 <HAL_GPIO_Init+0x202>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a48      	ldr	r2, [pc, #288]	@ (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_GPIO_Init+0x1fe>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a47      	ldr	r2, [pc, #284]	@ (8001df8 <HAL_GPIO_Init+0x2f8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <HAL_GPIO_Init+0x1fa>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a46      	ldr	r2, [pc, #280]	@ (8001dfc <HAL_GPIO_Init+0x2fc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <HAL_GPIO_Init+0x1f6>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a45      	ldr	r2, [pc, #276]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_GPIO_Init+0x1f2>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e008      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001d02:	2300      	movs	r3, #0
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d14:	4935      	ldr	r1, [pc, #212]	@ (8001dec <HAL_GPIO_Init+0x2ec>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d22:	4b38      	ldr	r3, [pc, #224]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d46:	4a2f      	ldr	r2, [pc, #188]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d70:	4a24      	ldr	r2, [pc, #144]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d76:	4b23      	ldr	r3, [pc, #140]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da0:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b0f      	cmp	r3, #15
 8001dd4:	f67f aea2 	bls.w	8001b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3724      	adds	r7, #36	@ 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40013c00 	.word	0x40013c00

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e12b      	b.n	80020a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fab6 	bl	80013d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2224      	movs	r2, #36	@ 0x24
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea0:	f000 fd40 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8001ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a81      	ldr	r2, [pc, #516]	@ (80020b0 <HAL_I2C_Init+0x274>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d807      	bhi.n	8001ec0 <HAL_I2C_Init+0x84>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a80      	ldr	r2, [pc, #512]	@ (80020b4 <HAL_I2C_Init+0x278>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bf94      	ite	ls
 8001eb8:	2301      	movls	r3, #1
 8001eba:	2300      	movhi	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e006      	b.n	8001ece <HAL_I2C_Init+0x92>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a7d      	ldr	r2, [pc, #500]	@ (80020b8 <HAL_I2C_Init+0x27c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	bf94      	ite	ls
 8001ec8:	2301      	movls	r3, #1
 8001eca:	2300      	movhi	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0e7      	b.n	80020a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a78      	ldr	r2, [pc, #480]	@ (80020bc <HAL_I2C_Init+0x280>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0c9b      	lsrs	r3, r3, #18
 8001ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a6a      	ldr	r2, [pc, #424]	@ (80020b0 <HAL_I2C_Init+0x274>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d802      	bhi.n	8001f10 <HAL_I2C_Init+0xd4>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	e009      	b.n	8001f24 <HAL_I2C_Init+0xe8>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	4a69      	ldr	r2, [pc, #420]	@ (80020c0 <HAL_I2C_Init+0x284>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	3301      	adds	r3, #1
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	495c      	ldr	r1, [pc, #368]	@ (80020b0 <HAL_I2C_Init+0x274>)
 8001f40:	428b      	cmp	r3, r1
 8001f42:	d819      	bhi.n	8001f78 <HAL_I2C_Init+0x13c>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e59      	subs	r1, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f52:	1c59      	adds	r1, r3, #1
 8001f54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f58:	400b      	ands	r3, r1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_I2C_Init+0x138>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1e59      	subs	r1, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f72:	e051      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001f74:	2304      	movs	r3, #4
 8001f76:	e04f      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d111      	bne.n	8001fa4 <HAL_I2C_Init+0x168>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	440b      	add	r3, r1
 8001f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f92:	3301      	adds	r3, #1
 8001f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e012      	b.n	8001fca <HAL_I2C_Init+0x18e>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e58      	subs	r0, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	0099      	lsls	r1, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Init+0x196>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e022      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_I2C_Init+0x1bc>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1e58      	subs	r0, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	440b      	add	r3, r1
 8001fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ff6:	e00f      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e58      	subs	r0, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	0099      	lsls	r1, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	fbb0 f3f3 	udiv	r3, r0, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	6809      	ldr	r1, [r1, #0]
 800201c:	4313      	orrs	r3, r2
 800201e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002046:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6911      	ldr	r1, [r2, #16]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68d2      	ldr	r2, [r2, #12]
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	430b      	orrs	r3, r1
 800205a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	000186a0 	.word	0x000186a0
 80020b4:	001e847f 	.word	0x001e847f
 80020b8:	003d08ff 	.word	0x003d08ff
 80020bc:	431bde83 	.word	0x431bde83
 80020c0:	10624dd3 	.word	0x10624dd3

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e267      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d075      	beq.n	80021ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020e2:	4b88      	ldr	r3, [pc, #544]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d00c      	beq.n	8002108 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b85      	ldr	r3, [pc, #532]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d112      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b82      	ldr	r3, [pc, #520]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b7e      	ldr	r3, [pc, #504]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05b      	beq.n	80021cc <HAL_RCC_OscConfig+0x108>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d157      	bne.n	80021cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e242      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x74>
 800212a:	4b76      	ldr	r3, [pc, #472]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a75      	ldr	r2, [pc, #468]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x98>
 8002142:	4b70      	ldr	r3, [pc, #448]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6f      	ldr	r2, [pc, #444]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6d      	ldr	r3, [pc, #436]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6c      	ldr	r2, [pc, #432]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 800215c:	4b69      	ldr	r3, [pc, #420]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a68      	ldr	r2, [pc, #416]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a65      	ldr	r2, [pc, #404]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fbaa 	bl	80018d4 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fba6 	bl	80018d4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e207      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5b      	ldr	r3, [pc, #364]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xc0>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fb96 	bl	80018d4 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff fb92 	bl	80018d4 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	@ 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1f3      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b51      	ldr	r3, [pc, #324]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0xe8>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021da:	4b4a      	ldr	r3, [pc, #296]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b47      	ldr	r3, [pc, #284]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f2:	4b44      	ldr	r3, [pc, #272]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b41      	ldr	r3, [pc, #260]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1c7      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4937      	ldr	r1, [pc, #220]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_OscConfig+0x244>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7ff fb4b 	bl	80018d4 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff fb47 	bl	80018d4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1a8      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b28      	ldr	r3, [pc, #160]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4925      	ldr	r1, [pc, #148]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <HAL_RCC_OscConfig+0x244>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff fb2a 	bl	80018d4 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff fb26 	bl	80018d4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e187      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d036      	beq.n	800231c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <HAL_RCC_OscConfig+0x248>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff fb0a 	bl	80018d4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fb06 	bl	80018d4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e167      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x200>
 80022e2:	e01b      	b.n	800231c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_OscConfig+0x248>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff faf3 	bl	80018d4 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	e00e      	b.n	8002310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f2:	f7ff faef 	bl	80018d4 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d907      	bls.n	8002310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e150      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
 8002304:	40023800 	.word	0x40023800
 8002308:	42470000 	.word	0x42470000
 800230c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4b88      	ldr	r3, [pc, #544]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ea      	bne.n	80022f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8097 	beq.w	8002458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b81      	ldr	r3, [pc, #516]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10f      	bne.n	800235a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b7d      	ldr	r3, [pc, #500]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	4a7c      	ldr	r2, [pc, #496]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	@ 0x40
 800234a:	4b7a      	ldr	r3, [pc, #488]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b77      	ldr	r3, [pc, #476]	@ (8002538 <HAL_RCC_OscConfig+0x474>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002366:	4b74      	ldr	r3, [pc, #464]	@ (8002538 <HAL_RCC_OscConfig+0x474>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a73      	ldr	r2, [pc, #460]	@ (8002538 <HAL_RCC_OscConfig+0x474>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7ff faaf 	bl	80018d4 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7ff faab 	bl	80018d4 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e10c      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b6a      	ldr	r3, [pc, #424]	@ (8002538 <HAL_RCC_OscConfig+0x474>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x2ea>
 80023a0:	4b64      	ldr	r3, [pc, #400]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a4:	4a63      	ldr	r2, [pc, #396]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ac:	e01c      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x30c>
 80023b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023d0:	4b58      	ldr	r3, [pc, #352]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	4a57      	ldr	r2, [pc, #348]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	@ 0x70
 80023dc:	4b55      	ldr	r3, [pc, #340]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4a54      	ldr	r2, [pc, #336]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f023 0304 	bic.w	r3, r3, #4
 80023e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7ff fa70 	bl	80018d4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7ff fa6c 	bl	80018d4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0cb      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	4b49      	ldr	r3, [pc, #292]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ee      	beq.n	80023f8 <HAL_RCC_OscConfig+0x334>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7ff fa5a 	bl	80018d4 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7ff fa56 	bl	80018d4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0b5      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	4b3e      	ldr	r3, [pc, #248]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1ee      	bne.n	8002424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244c:	4b39      	ldr	r3, [pc, #228]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	4a38      	ldr	r2, [pc, #224]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80a1 	beq.w	80025a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002462:	4b34      	ldr	r3, [pc, #208]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d05c      	beq.n	8002528 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d141      	bne.n	80024fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b31      	ldr	r3, [pc, #196]	@ (800253c <HAL_RCC_OscConfig+0x478>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff fa2a 	bl	80018d4 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7ff fa26 	bl	80018d4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e087      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	4b27      	ldr	r3, [pc, #156]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	491b      	ldr	r1, [pc, #108]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x478>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff f9ff 	bl	80018d4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff f9fb 	bl	80018d4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e05c      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x416>
 80024f8:	e054      	b.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	4b10      	ldr	r3, [pc, #64]	@ (800253c <HAL_RCC_OscConfig+0x478>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f9e8 	bl	80018d4 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7ff f9e4 	bl	80018d4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e045      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x444>
 8002526:	e03d      	b.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e038      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000
 800253c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002540:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x4ec>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d028      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d121      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d11a      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	4293      	cmp	r3, r2
 800257a:	d111      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	3b01      	subs	r3, #1
 800258a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0cc      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b68      	ldr	r3, [pc, #416]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d90c      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b65      	ldr	r3, [pc, #404]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a58      	ldr	r2, [pc, #352]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a52      	ldr	r2, [pc, #328]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800262a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d044      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d119      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d003      	beq.n	8002672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266e:	2b03      	cmp	r3, #3
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b3f      	ldr	r3, [pc, #252]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3b      	ldr	r3, [pc, #236]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e067      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b37      	ldr	r3, [pc, #220]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4934      	ldr	r1, [pc, #208]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7ff f916 	bl	80018d4 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7ff f912 	bl	80018d4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e04f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b25      	ldr	r3, [pc, #148]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d20c      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b22      	ldr	r3, [pc, #136]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002726:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f876 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00
 8002770:	40023800 	.word	0x40023800
 8002774:	0800718c 	.word	0x0800718c
 8002778:	20000000 	.word	0x20000000
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002784:	b090      	sub	sp, #64	@ 0x40
 8002786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002798:	4b59      	ldr	r3, [pc, #356]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d00d      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x40>
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	f200 80a1 	bhi.w	80028ec <HAL_RCC_GetSysClockFreq+0x16c>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x34>
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x3a>
 80027b2:	e09b      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b53      	ldr	r3, [pc, #332]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x184>)
 80027b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027b8:	e09b      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ba:	4b53      	ldr	r3, [pc, #332]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x188>)
 80027bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027be:	e098      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d028      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	2200      	movs	r2, #0
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027e8:	2100      	movs	r1, #0
 80027ea:	4b47      	ldr	r3, [pc, #284]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x188>)
 80027ec:	fb03 f201 	mul.w	r2, r3, r1
 80027f0:	2300      	movs	r3, #0
 80027f2:	fb00 f303 	mul.w	r3, r0, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	4a43      	ldr	r2, [pc, #268]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x188>)
 80027fa:	fba0 1202 	umull	r1, r2, r0, r2
 80027fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002800:	460a      	mov	r2, r1
 8002802:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002806:	4413      	add	r3, r2
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800280a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280c:	2200      	movs	r2, #0
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	61fa      	str	r2, [r7, #28]
 8002812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800281a:	f7fe f9cd 	bl	8000bb8 <__aeabi_uldivmod>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4613      	mov	r3, r2
 8002824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002826:	e053      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002828:	4b35      	ldr	r3, [pc, #212]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	2200      	movs	r2, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	617a      	str	r2, [r7, #20]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800283a:	f04f 0b00 	mov.w	fp, #0
 800283e:	4652      	mov	r2, sl
 8002840:	465b      	mov	r3, fp
 8002842:	f04f 0000 	mov.w	r0, #0
 8002846:	f04f 0100 	mov.w	r1, #0
 800284a:	0159      	lsls	r1, r3, #5
 800284c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002850:	0150      	lsls	r0, r2, #5
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	ebb2 080a 	subs.w	r8, r2, sl
 800285a:	eb63 090b 	sbc.w	r9, r3, fp
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800286a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800286e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002872:	ebb2 0408 	subs.w	r4, r2, r8
 8002876:	eb63 0509 	sbc.w	r5, r3, r9
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	00eb      	lsls	r3, r5, #3
 8002884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002888:	00e2      	lsls	r2, r4, #3
 800288a:	4614      	mov	r4, r2
 800288c:	461d      	mov	r5, r3
 800288e:	eb14 030a 	adds.w	r3, r4, sl
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	eb45 030b 	adc.w	r3, r5, fp
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028a6:	4629      	mov	r1, r5
 80028a8:	028b      	lsls	r3, r1, #10
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b0:	4621      	mov	r1, r4
 80028b2:	028a      	lsls	r2, r1, #10
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ba:	2200      	movs	r2, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	60fa      	str	r2, [r7, #12]
 80028c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028c4:	f7fe f978 	bl	8000bb8 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4613      	mov	r3, r2
 80028ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80028e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x184>)
 80028ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3740      	adds	r7, #64	@ 0x40
 80028f8:	46bd      	mov	sp, r7
 80028fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	00f42400 	.word	0x00f42400
 8002908:	017d7840 	.word	0x017d7840

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <HAL_RCC_GetHCLKFreq+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002928:	f7ff fff0 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0a9b      	lsrs	r3, r3, #10
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	0800719c 	.word	0x0800719c

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002950:	f7ff ffdc 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0b5b      	lsrs	r3, r3, #13
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	@ (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	0800719c 	.word	0x0800719c

08002974 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d038      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800299c:	4b68      	ldr	r3, [pc, #416]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029a2:	f7fe ff97 	bl	80018d4 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029aa:	f7fe ff93 	bl	80018d4 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0bd      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029bc:	4b61      	ldr	r3, [pc, #388]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	019b      	lsls	r3, r3, #6
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	071b      	lsls	r3, r3, #28
 80029da:	495a      	ldr	r1, [pc, #360]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029e2:	4b57      	ldr	r3, [pc, #348]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe ff74 	bl	80018d4 <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029f0:	f7fe ff70 	bl	80018d4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e09a      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a02:	4b50      	ldr	r3, [pc, #320]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8083 	beq.w	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4b48      	ldr	r3, [pc, #288]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	4a47      	ldr	r2, [pc, #284]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2c:	4b45      	ldr	r3, [pc, #276]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a38:	4b43      	ldr	r3, [pc, #268]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a42:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a44:	f7fe ff46 	bl	80018d4 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fe ff42 	bl	80018d4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e06c      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a6a:	4b36      	ldr	r3, [pc, #216]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a72:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d02f      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d028      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a88:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a90:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a92:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a98:	4b2c      	ldr	r3, [pc, #176]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a9e:	4a29      	ldr	r2, [pc, #164]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002aa4:	4b27      	ldr	r3, [pc, #156]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d114      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe ff10 	bl	80018d4 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe ff0c 	bl	80018d4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e034      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ee      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002ae8:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002afc:	4911      	ldr	r1, [pc, #68]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
 8002b02:	e005      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a0e      	ldr	r2, [pc, #56]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b0e:	6093      	str	r3, [r2, #8]
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	4909      	ldr	r1, [pc, #36]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7d1a      	ldrb	r2, [r3, #20]
 8002b32:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002b34:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	42470068 	.word	0x42470068
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42470e40 	.word	0x42470e40
 8002b50:	424711e0 	.word	0x424711e0

08002b54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e073      	b.n	8002c4e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7f5b      	ldrb	r3, [r3, #29]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fc74 	bl	8001464 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d055      	beq.n	8002c3c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	22ca      	movs	r2, #202	@ 0xca
 8002b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2253      	movs	r2, #83	@ 0x53
 8002b9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fa49 	bl	8003038 <RTC_EnterInitMode>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d12c      	bne.n	8002c0a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6919      	ldr	r1, [r3, #16]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	041a      	lsls	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fa50 	bl	80030a6 <RTC_ExitInitMode>
 8002c06:	4603      	mov	r3, r0
 8002c08:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d110      	bne.n	8002c32 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c1e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	22ff      	movs	r2, #255	@ 0xff
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c3a:	e001      	b.n	8002c40 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c56:	b590      	push	{r4, r7, lr}
 8002c58:	b087      	sub	sp, #28
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	7f1b      	ldrb	r3, [r3, #28]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_RTC_SetTime+0x1c>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e087      	b.n	8002d82 <HAL_RTC_SetTime+0x12c>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d126      	bne.n	8002cd2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2200      	movs	r2, #0
 8002c96:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fa27 	bl	80030f0 <RTC_ByteToBcd2>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fa20 	bl	80030f0 <RTC_ByteToBcd2>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002cb4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	789b      	ldrb	r3, [r3, #2]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fa18 	bl	80030f0 <RTC_ByteToBcd2>
 8002cc0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cc2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	78db      	ldrb	r3, [r3, #3]
 8002cca:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e018      	b.n	8002d04 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	785b      	ldrb	r3, [r3, #1]
 8002cf0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002cf2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002cf8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	78db      	ldrb	r3, [r3, #3]
 8002cfe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	22ca      	movs	r2, #202	@ 0xca
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2253      	movs	r2, #83	@ 0x53
 8002d12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f98f 	bl	8003038 <RTC_EnterInitMode>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d120      	bne.n	8002d66 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002d2e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002d32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f9a2 	bl	80030a6 <RTC_ExitInitMode>
 8002d62:	4603      	mov	r3, r0
 8002d64:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	22ff      	movs	r2, #255	@ 0xff
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]

  return status;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}

08002d8a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002dbc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	0d9b      	lsrs	r3, r3, #22
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11a      	bne.n	8002e3c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f98e 	bl	800312c <RTC_Bcd2ToByte>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 f985 	bl	800312c <RTC_Bcd2ToByte>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	789b      	ldrb	r3, [r3, #2]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f97c 	bl	800312c <RTC_Bcd2ToByte>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e46:	b590      	push	{r4, r7, lr}
 8002e48:	b087      	sub	sp, #28
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	7f1b      	ldrb	r3, [r3, #28]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_RTC_SetDate+0x1c>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e071      	b.n	8002f46 <HAL_RTC_SetDate+0x100>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10e      	bne.n	8002e92 <HAL_RTC_SetDate+0x4c>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	785b      	ldrb	r3, [r3, #1]
 8002e84:	f023 0310 	bic.w	r3, r3, #16
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	330a      	adds	r3, #10
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d11c      	bne.n	8002ed2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	78db      	ldrb	r3, [r3, #3]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f927 	bl	80030f0 <RTC_ByteToBcd2>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	785b      	ldrb	r3, [r3, #1]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f920 	bl	80030f0 <RTC_ByteToBcd2>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002eb4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	789b      	ldrb	r3, [r3, #2]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f918 	bl	80030f0 <RTC_ByteToBcd2>
 8002ec0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ec2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e00e      	b.n	8002ef0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	78db      	ldrb	r3, [r3, #3]
 8002ed6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	785b      	ldrb	r3, [r3, #1]
 8002edc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ede:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ee4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	22ca      	movs	r2, #202	@ 0xca
 8002ef6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2253      	movs	r2, #83	@ 0x53
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f899 	bl	8003038 <RTC_EnterInitMode>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002f1e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f8c0 	bl	80030a6 <RTC_ExitInitMode>
 8002f26:	4603      	mov	r3, r0
 8002f28:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	22ff      	movs	r2, #255	@ 0xff
 8002f3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]

  return status;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}

08002f4e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	0b5b      	lsrs	r3, r3, #13
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11a      	bne.n	8002fe2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	78db      	ldrb	r3, [r3, #3]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f8bb 	bl	800312c <RTC_Bcd2ToByte>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f8b2 	bl	800312c <RTC_Bcd2ToByte>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	789b      	ldrb	r3, [r3, #2]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f8a9 	bl	800312c <RTC_Bcd2ToByte>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8003034 <HAL_RTC_WaitForSynchro+0x48>)
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003000:	f7fe fc68 	bl	80018d4 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003006:	e009      	b.n	800301c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003008:	f7fe fc64 	bl	80018d4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003016:	d901      	bls.n	800301c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e007      	b.n	800302c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ee      	beq.n	8003008 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00013f5f 	.word	0x00013f5f

08003038 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d122      	bne.n	800309c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003064:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003066:	f7fe fc35 	bl	80018d4 <HAL_GetTick>
 800306a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800306c:	e00c      	b.n	8003088 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800306e:	f7fe fc31 	bl	80018d4 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800307c:	d904      	bls.n	8003088 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2204      	movs	r2, #4
 8003082:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <RTC_EnterInitMode+0x64>
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d1e8      	bne.n	800306e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030c0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff8b 	bl	8002fec <HAL_RTC_WaitForSynchro>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80030fe:	e005      	b.n	800310c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	3b0a      	subs	r3, #10
 800310a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	2b09      	cmp	r3, #9
 8003110:	d8f6      	bhi.n	8003100 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	b2da      	uxtb	r2, r3
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	4313      	orrs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	b2db      	uxtb	r3, r3
 8003158:	4413      	add	r3, r2
 800315a:	b2db      	uxtb	r3, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e07b      	b.n	8003272 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800318a:	d009      	beq.n	80031a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
 8003192:	e005      	b.n	80031a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe f97e 	bl	80014bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003224:	ea42 0103 	orr.w	r1, r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0104 	and.w	r1, r3, #4
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	f003 0210 	and.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003260:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b088      	sub	sp, #32
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800328a:	f7fe fb23 	bl	80018d4 <HAL_GetTick>
 800328e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
 80032a2:	e12a      	b.n	80034fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Transmit+0x36>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e122      	b.n	80034fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_SPI_Transmit+0x48>
 80032be:	2302      	movs	r3, #2
 80032c0:	e11b      	b.n	80034fa <HAL_SPI_Transmit+0x280>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	88fa      	ldrh	r2, [r7, #6]
 80032e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	88fa      	ldrh	r2, [r7, #6]
 80032e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003310:	d10f      	bne.n	8003332 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333c:	2b40      	cmp	r3, #64	@ 0x40
 800333e:	d007      	beq.n	8003350 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003358:	d152      	bne.n	8003400 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_SPI_Transmit+0xee>
 8003362:	8b7b      	ldrh	r3, [r7, #26]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d145      	bne.n	80033f4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	881a      	ldrh	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800338c:	e032      	b.n	80033f4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b02      	cmp	r3, #2
 800339a:	d112      	bne.n	80033c2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	1c9a      	adds	r2, r3, #2
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033c0:	e018      	b.n	80033f4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c2:	f7fe fa87 	bl	80018d4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d803      	bhi.n	80033da <HAL_SPI_Transmit+0x160>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d102      	bne.n	80033e0 <HAL_SPI_Transmit+0x166>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e082      	b.n	80034fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1c7      	bne.n	800338e <HAL_SPI_Transmit+0x114>
 80033fe:	e053      	b.n	80034a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_SPI_Transmit+0x194>
 8003408:	8b7b      	ldrh	r3, [r7, #26]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d147      	bne.n	800349e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003434:	e033      	b.n	800349e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b02      	cmp	r3, #2
 8003442:	d113      	bne.n	800346c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	86da      	strh	r2, [r3, #54]	@ 0x36
 800346a:	e018      	b.n	800349e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800346c:	f7fe fa32 	bl	80018d4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d803      	bhi.n	8003484 <HAL_SPI_Transmit+0x20a>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d102      	bne.n	800348a <HAL_SPI_Transmit+0x210>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e02d      	b.n	80034fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1c6      	bne.n	8003436 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fbd9 	bl	8003c64 <SPI_EndRxTxTransaction>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b088      	sub	sp, #32
 8003506:	af02      	add	r7, sp, #8
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
 8003520:	e104      	b.n	800372c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_SPI_Receive+0x2c>
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0fc      	b.n	800372c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800353a:	d112      	bne.n	8003562 <HAL_SPI_Receive+0x60>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10e      	bne.n	8003562 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2204      	movs	r2, #4
 8003548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800354c:	88fa      	ldrh	r2, [r7, #6]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	4613      	mov	r3, r2
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f8eb 	bl	8003734 <HAL_SPI_TransmitReceive>
 800355e:	4603      	mov	r3, r0
 8003560:	e0e4      	b.n	800372c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003562:	f7fe f9b7 	bl	80018d4 <HAL_GetTick>
 8003566:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_SPI_Receive+0x74>
 8003572:	2302      	movs	r3, #2
 8003574:	e0da      	b.n	800372c <HAL_SPI_Receive+0x22a>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2204      	movs	r2, #4
 8003582:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c4:	d10f      	bne.n	80035e6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b40      	cmp	r3, #64	@ 0x40
 80035f2:	d007      	beq.n	8003604 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003602:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d170      	bne.n	80036ee <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800360c:	e035      	b.n	800367a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d115      	bne.n	8003648 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f103 020c 	add.w	r2, r3, #12
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003646:	e018      	b.n	800367a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003648:	f7fe f944 	bl	80018d4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d803      	bhi.n	8003660 <HAL_SPI_Receive+0x15e>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d102      	bne.n	8003666 <HAL_SPI_Receive+0x164>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e058      	b.n	800372c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1c4      	bne.n	800360e <HAL_SPI_Receive+0x10c>
 8003684:	e038      	b.n	80036f8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d113      	bne.n	80036bc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	b292      	uxth	r2, r2
 80036a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a6:	1c9a      	adds	r2, r3, #2
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036ba:	e018      	b.n	80036ee <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036bc:	f7fe f90a 	bl	80018d4 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d803      	bhi.n	80036d4 <HAL_SPI_Receive+0x1d2>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d102      	bne.n	80036da <HAL_SPI_Receive+0x1d8>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e01e      	b.n	800372c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1c6      	bne.n	8003686 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	6839      	ldr	r1, [r7, #0]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fa4b 	bl	8003b98 <SPI_EndRxTransaction>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800372a:	2300      	movs	r3, #0
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	@ 0x28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003742:	2301      	movs	r3, #1
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003746:	f7fe f8c5 	bl	80018d4 <HAL_GetTick>
 800374a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003752:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800375a:	887b      	ldrh	r3, [r7, #2]
 800375c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800375e:	7ffb      	ldrb	r3, [r7, #31]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d00c      	beq.n	800377e <HAL_SPI_TransmitReceive+0x4a>
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376a:	d106      	bne.n	800377a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <HAL_SPI_TransmitReceive+0x46>
 8003774:	7ffb      	ldrb	r3, [r7, #31]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d001      	beq.n	800377e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
 800377c:	e17f      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_SPI_TransmitReceive+0x5c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_SPI_TransmitReceive+0x5c>
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e174      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x6e>
 800379e:	2302      	movs	r3, #2
 80037a0:	e16d      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34a>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d003      	beq.n	80037be <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2205      	movs	r2, #5
 80037ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	887a      	ldrh	r2, [r7, #2]
 80037ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	887a      	ldrh	r2, [r7, #2]
 80037d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fe:	2b40      	cmp	r3, #64	@ 0x40
 8003800:	d007      	beq.n	8003812 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800381a:	d17e      	bne.n	800391a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_SPI_TransmitReceive+0xf6>
 8003824:	8afb      	ldrh	r3, [r7, #22]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d16c      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	881a      	ldrh	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	1c9a      	adds	r2, r3, #2
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800384e:	e059      	b.n	8003904 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b02      	cmp	r3, #2
 800385c:	d11b      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x162>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d016      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x162>
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	2b01      	cmp	r3, #1
 800386c:	d113      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	881a      	ldrh	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	1c9a      	adds	r2, r3, #2
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d119      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x1a4>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d014      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	b292      	uxth	r2, r2
 80038ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038d4:	2301      	movs	r3, #1
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038d8:	f7fd fffc 	bl	80018d4 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d80d      	bhi.n	8003904 <HAL_SPI_TransmitReceive+0x1d0>
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ee:	d009      	beq.n	8003904 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0bc      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1a0      	bne.n	8003850 <HAL_SPI_TransmitReceive+0x11c>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d19b      	bne.n	8003850 <HAL_SPI_TransmitReceive+0x11c>
 8003918:	e082      	b.n	8003a20 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x1f4>
 8003922:	8afb      	ldrh	r3, [r7, #22]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d171      	bne.n	8003a0c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	7812      	ldrb	r2, [r2, #0]
 8003934:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800394e:	e05d      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d11c      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x264>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d017      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x264>
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	2b01      	cmp	r3, #1
 800396c:	d114      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d119      	bne.n	80039da <HAL_SPI_TransmitReceive+0x2a6>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d014      	beq.n	80039da <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039d6:	2301      	movs	r3, #1
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039da:	f7fd ff7b 	bl	80018d4 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d803      	bhi.n	80039f2 <HAL_SPI_TransmitReceive+0x2be>
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d102      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x2c4>
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e038      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d19c      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x21c>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d197      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f91d 	bl	8003c64 <SPI_EndRxTxTransaction>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e01d      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3728      	adds	r7, #40	@ 0x28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a98:	f7fd ff1c 	bl	80018d4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aa8:	f7fd ff14 	bl	80018d4 <HAL_GetTick>
 8003aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aae:	4b39      	ldr	r3, [pc, #228]	@ (8003b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	015b      	lsls	r3, r3, #5
 8003ab4:	0d1b      	lsrs	r3, r3, #20
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003abe:	e055      	b.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d051      	beq.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac8:	f7fd ff04 	bl	80018d4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d902      	bls.n	8003ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d13d      	bne.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003af6:	d111      	bne.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b00:	d004      	beq.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0a:	d107      	bne.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b24:	d10f      	bne.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e018      	b.n	8003b8c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	e002      	b.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4013      	ands	r3, r2
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d19a      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000000 	.word	0x20000000

08003b98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bac:	d111      	bne.n	8003bd2 <SPI_EndRxTransaction+0x3a>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bb6:	d004      	beq.n	8003bc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc0:	d107      	bne.n	8003bd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bda:	d12a      	bne.n	8003c32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be4:	d012      	beq.n	8003c0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2180      	movs	r1, #128	@ 0x80
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff ff49 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d02d      	beq.n	8003c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e026      	b.n	8003c5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2200      	movs	r2, #0
 8003c14:	2101      	movs	r1, #1
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f7ff ff36 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01a      	beq.n	8003c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e013      	b.n	8003c5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7ff ff23 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e000      	b.n	8003c5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2201      	movs	r2, #1
 8003c78:	2102      	movs	r1, #2
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff ff04 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e032      	b.n	8003cfc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c96:	4b1b      	ldr	r3, [pc, #108]	@ (8003d04 <SPI_EndRxTxTransaction+0xa0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d08 <SPI_EndRxTxTransaction+0xa4>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	0d5b      	lsrs	r3, r3, #21
 8003ca2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cb4:	d112      	bne.n	8003cdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2180      	movs	r1, #128	@ 0x80
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7ff fee1 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d016      	beq.n	8003cfa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e00f      	b.n	8003cfc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf2:	2b80      	cmp	r3, #128	@ 0x80
 8003cf4:	d0f2      	beq.n	8003cdc <SPI_EndRxTxTransaction+0x78>
 8003cf6:	e000      	b.n	8003cfa <SPI_EndRxTxTransaction+0x96>
        break;
 8003cf8:	bf00      	nop
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000000 	.word	0x20000000
 8003d08:	165e9f81 	.word	0x165e9f81

08003d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e042      	b.n	8003da4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd fc0a 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	@ 0x24
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f973 	bl	800403c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	@ 0x28
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d175      	bne.n	8003eb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Transmit+0x2c>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e06e      	b.n	8003eba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2221      	movs	r2, #33	@ 0x21
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dea:	f7fd fd73 	bl	80018d4 <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e04:	d108      	bne.n	8003e18 <HAL_UART_Transmit+0x6c>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	e003      	b.n	8003e20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e20:	e02e      	b.n	8003e80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2180      	movs	r1, #128	@ 0x80
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f848 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e03a      	b.n	8003eba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	e007      	b.n	8003e72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1cb      	bne.n	8003e22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	2140      	movs	r1, #64	@ 0x40
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f814 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e006      	b.n	8003eba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed2:	e03b      	b.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d037      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003edc:	f7fd fcfa 	bl	80018d4 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	6a3a      	ldr	r2, [r7, #32]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d302      	bcc.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e03a      	b.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d023      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b80      	cmp	r3, #128	@ 0x80
 8003f08:	d020      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b40      	cmp	r3, #64	@ 0x40
 8003f0e:	d01d      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d116      	bne.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f81d 	bl	8003f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e00f      	b.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4013      	ands	r3, r2
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d0b4      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b095      	sub	sp, #84	@ 0x54
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d119      	bne.n	8004020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f023 0310 	bic.w	r3, r3, #16
 8004002:	647b      	str	r3, [r7, #68]	@ 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800400c:	61ba      	str	r2, [r7, #24]
 800400e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6979      	ldr	r1, [r7, #20]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	613b      	str	r3, [r7, #16]
   return(result);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800402e:	bf00      	nop
 8004030:	3754      	adds	r7, #84	@ 0x54
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b0c0      	sub	sp, #256	@ 0x100
 8004042:	af00      	add	r7, sp, #0
 8004044:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	68d9      	ldr	r1, [r3, #12]
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	ea40 0301 	orr.w	r3, r0, r1
 8004064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	431a      	orrs	r2, r3
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	431a      	orrs	r2, r3
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004094:	f021 010c 	bic.w	r1, r1, #12
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040a2:	430b      	orrs	r3, r1
 80040a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b6:	6999      	ldr	r1, [r3, #24]
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	ea40 0301 	orr.w	r3, r0, r1
 80040c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b8f      	ldr	r3, [pc, #572]	@ (8004308 <UART_SetConfig+0x2cc>)
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d005      	beq.n	80040dc <UART_SetConfig+0xa0>
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b8d      	ldr	r3, [pc, #564]	@ (800430c <UART_SetConfig+0x2d0>)
 80040d8:	429a      	cmp	r2, r3
 80040da:	d104      	bne.n	80040e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7fe fc36 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 80040e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040e4:	e003      	b.n	80040ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040e6:	f7fe fc1d 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 80040ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f8:	f040 810c 	bne.w	8004314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004100:	2200      	movs	r2, #0
 8004102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004106:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800410a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800410e:	4622      	mov	r2, r4
 8004110:	462b      	mov	r3, r5
 8004112:	1891      	adds	r1, r2, r2
 8004114:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004116:	415b      	adcs	r3, r3
 8004118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800411a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800411e:	4621      	mov	r1, r4
 8004120:	eb12 0801 	adds.w	r8, r2, r1
 8004124:	4629      	mov	r1, r5
 8004126:	eb43 0901 	adc.w	r9, r3, r1
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800413a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413e:	4690      	mov	r8, r2
 8004140:	4699      	mov	r9, r3
 8004142:	4623      	mov	r3, r4
 8004144:	eb18 0303 	adds.w	r3, r8, r3
 8004148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800414c:	462b      	mov	r3, r5
 800414e:	eb49 0303 	adc.w	r3, r9, r3
 8004152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004162:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800416a:	460b      	mov	r3, r1
 800416c:	18db      	adds	r3, r3, r3
 800416e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004170:	4613      	mov	r3, r2
 8004172:	eb42 0303 	adc.w	r3, r2, r3
 8004176:	657b      	str	r3, [r7, #84]	@ 0x54
 8004178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800417c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004180:	f7fc fd1a 	bl	8000bb8 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4b61      	ldr	r3, [pc, #388]	@ (8004310 <UART_SetConfig+0x2d4>)
 800418a:	fba3 2302 	umull	r2, r3, r3, r2
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	011c      	lsls	r4, r3, #4
 8004192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004196:	2200      	movs	r2, #0
 8004198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800419c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041a4:	4642      	mov	r2, r8
 80041a6:	464b      	mov	r3, r9
 80041a8:	1891      	adds	r1, r2, r2
 80041aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041ac:	415b      	adcs	r3, r3
 80041ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041b4:	4641      	mov	r1, r8
 80041b6:	eb12 0a01 	adds.w	sl, r2, r1
 80041ba:	4649      	mov	r1, r9
 80041bc:	eb43 0b01 	adc.w	fp, r3, r1
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d4:	4692      	mov	sl, r2
 80041d6:	469b      	mov	fp, r3
 80041d8:	4643      	mov	r3, r8
 80041da:	eb1a 0303 	adds.w	r3, sl, r3
 80041de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041e2:	464b      	mov	r3, r9
 80041e4:	eb4b 0303 	adc.w	r3, fp, r3
 80041e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004200:	460b      	mov	r3, r1
 8004202:	18db      	adds	r3, r3, r3
 8004204:	643b      	str	r3, [r7, #64]	@ 0x40
 8004206:	4613      	mov	r3, r2
 8004208:	eb42 0303 	adc.w	r3, r2, r3
 800420c:	647b      	str	r3, [r7, #68]	@ 0x44
 800420e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004216:	f7fc fccf 	bl	8000bb8 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4611      	mov	r1, r2
 8004220:	4b3b      	ldr	r3, [pc, #236]	@ (8004310 <UART_SetConfig+0x2d4>)
 8004222:	fba3 2301 	umull	r2, r3, r3, r1
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2264      	movs	r2, #100	@ 0x64
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	1acb      	subs	r3, r1, r3
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004236:	4b36      	ldr	r3, [pc, #216]	@ (8004310 <UART_SetConfig+0x2d4>)
 8004238:	fba3 2302 	umull	r2, r3, r3, r2
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004244:	441c      	add	r4, r3
 8004246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800424a:	2200      	movs	r2, #0
 800424c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004250:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004258:	4642      	mov	r2, r8
 800425a:	464b      	mov	r3, r9
 800425c:	1891      	adds	r1, r2, r2
 800425e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004260:	415b      	adcs	r3, r3
 8004262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004268:	4641      	mov	r1, r8
 800426a:	1851      	adds	r1, r2, r1
 800426c:	6339      	str	r1, [r7, #48]	@ 0x30
 800426e:	4649      	mov	r1, r9
 8004270:	414b      	adcs	r3, r1
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004280:	4659      	mov	r1, fp
 8004282:	00cb      	lsls	r3, r1, #3
 8004284:	4651      	mov	r1, sl
 8004286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428a:	4651      	mov	r1, sl
 800428c:	00ca      	lsls	r2, r1, #3
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	4603      	mov	r3, r0
 8004294:	4642      	mov	r2, r8
 8004296:	189b      	adds	r3, r3, r2
 8004298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800429c:	464b      	mov	r3, r9
 800429e:	460a      	mov	r2, r1
 80042a0:	eb42 0303 	adc.w	r3, r2, r3
 80042a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042bc:	460b      	mov	r3, r1
 80042be:	18db      	adds	r3, r3, r3
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042c2:	4613      	mov	r3, r2
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042d2:	f7fc fc71 	bl	8000bb8 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <UART_SetConfig+0x2d4>)
 80042dc:	fba3 1302 	umull	r1, r3, r3, r2
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	2164      	movs	r1, #100	@ 0x64
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	3332      	adds	r3, #50	@ 0x32
 80042ee:	4a08      	ldr	r2, [pc, #32]	@ (8004310 <UART_SetConfig+0x2d4>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	f003 0207 	and.w	r2, r3, #7
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4422      	add	r2, r4
 8004302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004304:	e106      	b.n	8004514 <UART_SetConfig+0x4d8>
 8004306:	bf00      	nop
 8004308:	40011000 	.word	0x40011000
 800430c:	40011400 	.word	0x40011400
 8004310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004318:	2200      	movs	r2, #0
 800431a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800431e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004326:	4642      	mov	r2, r8
 8004328:	464b      	mov	r3, r9
 800432a:	1891      	adds	r1, r2, r2
 800432c:	6239      	str	r1, [r7, #32]
 800432e:	415b      	adcs	r3, r3
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
 8004332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004336:	4641      	mov	r1, r8
 8004338:	1854      	adds	r4, r2, r1
 800433a:	4649      	mov	r1, r9
 800433c:	eb43 0501 	adc.w	r5, r3, r1
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	00eb      	lsls	r3, r5, #3
 800434a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800434e:	00e2      	lsls	r2, r4, #3
 8004350:	4614      	mov	r4, r2
 8004352:	461d      	mov	r5, r3
 8004354:	4643      	mov	r3, r8
 8004356:	18e3      	adds	r3, r4, r3
 8004358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800435c:	464b      	mov	r3, r9
 800435e:	eb45 0303 	adc.w	r3, r5, r3
 8004362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004372:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004382:	4629      	mov	r1, r5
 8004384:	008b      	lsls	r3, r1, #2
 8004386:	4621      	mov	r1, r4
 8004388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800438c:	4621      	mov	r1, r4
 800438e:	008a      	lsls	r2, r1, #2
 8004390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004394:	f7fc fc10 	bl	8000bb8 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4b60      	ldr	r3, [pc, #384]	@ (8004520 <UART_SetConfig+0x4e4>)
 800439e:	fba3 2302 	umull	r2, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	011c      	lsls	r4, r3, #4
 80043a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	1891      	adds	r1, r2, r2
 80043be:	61b9      	str	r1, [r7, #24]
 80043c0:	415b      	adcs	r3, r3
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c8:	4641      	mov	r1, r8
 80043ca:	1851      	adds	r1, r2, r1
 80043cc:	6139      	str	r1, [r7, #16]
 80043ce:	4649      	mov	r1, r9
 80043d0:	414b      	adcs	r3, r1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e0:	4659      	mov	r1, fp
 80043e2:	00cb      	lsls	r3, r1, #3
 80043e4:	4651      	mov	r1, sl
 80043e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ea:	4651      	mov	r1, sl
 80043ec:	00ca      	lsls	r2, r1, #3
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	4642      	mov	r2, r8
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043fc:	464b      	mov	r3, r9
 80043fe:	460a      	mov	r2, r1
 8004400:	eb42 0303 	adc.w	r3, r2, r3
 8004404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004412:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004420:	4649      	mov	r1, r9
 8004422:	008b      	lsls	r3, r1, #2
 8004424:	4641      	mov	r1, r8
 8004426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800442a:	4641      	mov	r1, r8
 800442c:	008a      	lsls	r2, r1, #2
 800442e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004432:	f7fc fbc1 	bl	8000bb8 <__aeabi_uldivmod>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4611      	mov	r1, r2
 800443c:	4b38      	ldr	r3, [pc, #224]	@ (8004520 <UART_SetConfig+0x4e4>)
 800443e:	fba3 2301 	umull	r2, r3, r3, r1
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	2264      	movs	r2, #100	@ 0x64
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	1acb      	subs	r3, r1, r3
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	3332      	adds	r3, #50	@ 0x32
 8004450:	4a33      	ldr	r2, [pc, #204]	@ (8004520 <UART_SetConfig+0x4e4>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800445c:	441c      	add	r4, r3
 800445e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004462:	2200      	movs	r2, #0
 8004464:	673b      	str	r3, [r7, #112]	@ 0x70
 8004466:	677a      	str	r2, [r7, #116]	@ 0x74
 8004468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800446c:	4642      	mov	r2, r8
 800446e:	464b      	mov	r3, r9
 8004470:	1891      	adds	r1, r2, r2
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	415b      	adcs	r3, r3
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800447c:	4641      	mov	r1, r8
 800447e:	1851      	adds	r1, r2, r1
 8004480:	6039      	str	r1, [r7, #0]
 8004482:	4649      	mov	r1, r9
 8004484:	414b      	adcs	r3, r1
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004494:	4659      	mov	r1, fp
 8004496:	00cb      	lsls	r3, r1, #3
 8004498:	4651      	mov	r1, sl
 800449a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449e:	4651      	mov	r1, sl
 80044a0:	00ca      	lsls	r2, r1, #3
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	4642      	mov	r2, r8
 80044aa:	189b      	adds	r3, r3, r2
 80044ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ae:	464b      	mov	r3, r9
 80044b0:	460a      	mov	r2, r1
 80044b2:	eb42 0303 	adc.w	r3, r2, r3
 80044b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80044c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044d0:	4649      	mov	r1, r9
 80044d2:	008b      	lsls	r3, r1, #2
 80044d4:	4641      	mov	r1, r8
 80044d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044da:	4641      	mov	r1, r8
 80044dc:	008a      	lsls	r2, r1, #2
 80044de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044e2:	f7fc fb69 	bl	8000bb8 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <UART_SetConfig+0x4e4>)
 80044ec:	fba3 1302 	umull	r1, r3, r3, r2
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	2164      	movs	r1, #100	@ 0x64
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	3332      	adds	r3, #50	@ 0x32
 80044fe:	4a08      	ldr	r2, [pc, #32]	@ (8004520 <UART_SetConfig+0x4e4>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	f003 020f 	and.w	r2, r3, #15
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4422      	add	r2, r4
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800451a:	46bd      	mov	sp, r7
 800451c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004520:	51eb851f 	.word	0x51eb851f

08004524 <FRAM_WriteEnable>:

extern SPI_HandleTypeDef hspi1;

uint16_t FRAMindex;

void FRAM_WriteEnable(void) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
    uint8_t cmd = FRAM_WRITE_ENABLE; // WREN
 800452a:	2306      	movs	r3, #6
 800452c:	71fb      	strb	r3, [r7, #7]
    FRAM_CS_LOW();
 800452e:	2200      	movs	r2, #0
 8004530:	2110      	movs	r1, #16
 8004532:	480b      	ldr	r0, [pc, #44]	@ (8004560 <FRAM_WriteEnable+0x3c>)
 8004534:	f7fd fc68 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8004538:	1df9      	adds	r1, r7, #7
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	2201      	movs	r2, #1
 8004540:	4808      	ldr	r0, [pc, #32]	@ (8004564 <FRAM_WriteEnable+0x40>)
 8004542:	f7fe fe9a 	bl	800327a <HAL_SPI_Transmit>
    HAL_Delay(1);
 8004546:	2001      	movs	r0, #1
 8004548:	f7fd f9d0 	bl	80018ec <HAL_Delay>
    FRAM_CS_HIGH();
 800454c:	2201      	movs	r2, #1
 800454e:	2110      	movs	r1, #16
 8004550:	4803      	ldr	r0, [pc, #12]	@ (8004560 <FRAM_WriteEnable+0x3c>)
 8004552:	f7fd fc59 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40020000 	.word	0x40020000
 8004564:	20000264 	.word	0x20000264

08004568 <FRAM_WriteStruct>:

void FRAM_WriteStruct(uint16_t address, SensorData *data) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	80fb      	strh	r3, [r7, #6]
    FRAM_WriteEnable();
 8004574:	f7ff ffd6 	bl	8004524 <FRAM_WriteEnable>

    uint8_t tx[3 + sizeof(SensorData)];
    tx[0] = FRAM_WRITE;
 8004578:	2302      	movs	r3, #2
 800457a:	733b      	strb	r3, [r7, #12]
    tx[1] = (address >> 8) & 0xFF;
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	b29b      	uxth	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	737b      	strb	r3, [r7, #13]
    tx[2] = address & 0xFF;
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	73bb      	strb	r3, [r7, #14]
    memcpy(&tx[3], data, sizeof(SensorData));
 800458c:	f107 030c 	add.w	r3, r7, #12
 8004590:	3303      	adds	r3, #3
 8004592:	2208      	movs	r2, #8
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fef5 	bl	8005386 <memcpy>

    FRAM_CS_LOW();
 800459c:	2200      	movs	r2, #0
 800459e:	2110      	movs	r1, #16
 80045a0:	4809      	ldr	r0, [pc, #36]	@ (80045c8 <FRAM_WriteStruct+0x60>)
 80045a2:	f7fd fc31 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, tx, sizeof(tx), HAL_MAX_DELAY);
 80045a6:	f107 010c 	add.w	r1, r7, #12
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	220b      	movs	r2, #11
 80045b0:	4806      	ldr	r0, [pc, #24]	@ (80045cc <FRAM_WriteStruct+0x64>)
 80045b2:	f7fe fe62 	bl	800327a <HAL_SPI_Transmit>
    FRAM_CS_HIGH();
 80045b6:	2201      	movs	r2, #1
 80045b8:	2110      	movs	r1, #16
 80045ba:	4803      	ldr	r0, [pc, #12]	@ (80045c8 <FRAM_WriteStruct+0x60>)
 80045bc:	f7fd fc24 	bl	8001e08 <HAL_GPIO_WritePin>
}
 80045c0:	bf00      	nop
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40020000 	.word	0x40020000
 80045cc:	20000264 	.word	0x20000264

080045d0 <FRAM_ReadStruct>:

void FRAM_ReadStruct(uint16_t address, SensorData *data) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	6039      	str	r1, [r7, #0]
 80045da:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[3] = {
 80045dc:	2303      	movs	r3, #3
 80045de:	733b      	strb	r3, [r7, #12]
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	737b      	strb	r3, [r7, #13]
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	73bb      	strb	r3, [r7, #14]
        FRAM_READ,
        (address >> 8) & 0xFF,
        address & 0xFF
    };

    FRAM_CS_LOW();
 80045f0:	2200      	movs	r2, #0
 80045f2:	2110      	movs	r1, #16
 80045f4:	480d      	ldr	r0, [pc, #52]	@ (800462c <FRAM_ReadStruct+0x5c>)
 80045f6:	f7fd fc07 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 3, HAL_MAX_DELAY);
 80045fa:	f107 010c 	add.w	r1, r7, #12
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	2203      	movs	r2, #3
 8004604:	480a      	ldr	r0, [pc, #40]	@ (8004630 <FRAM_ReadStruct+0x60>)
 8004606:	f7fe fe38 	bl	800327a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t*)data, sizeof(SensorData), HAL_MAX_DELAY);
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	2208      	movs	r2, #8
 8004610:	6839      	ldr	r1, [r7, #0]
 8004612:	4807      	ldr	r0, [pc, #28]	@ (8004630 <FRAM_ReadStruct+0x60>)
 8004614:	f7fe ff75 	bl	8003502 <HAL_SPI_Receive>
    FRAM_CS_HIGH();
 8004618:	2201      	movs	r2, #1
 800461a:	2110      	movs	r1, #16
 800461c:	4803      	ldr	r0, [pc, #12]	@ (800462c <FRAM_ReadStruct+0x5c>)
 800461e:	f7fd fbf3 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40020000 	.word	0x40020000
 8004630:	20000264 	.word	0x20000264

08004634 <FRAM_WriteEntry>:

//Schreiben per index
void FRAM_WriteEntry(uint16_t Windex, SensorData *data) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	6039      	str	r1, [r7, #0]
 800463e:	80fb      	strh	r3, [r7, #6]
    if (Windex >= MAX_RECORDS) return;
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8004646:	4293      	cmp	r3, r2
 8004648:	d808      	bhi.n	800465c <FRAM_WriteEntry+0x28>

    uint16_t addr = FRAM_START_ADDR + Windex * RECORD_SIZE;
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	81fb      	strh	r3, [r7, #14]
    FRAM_WriteStruct(addr, data);
 8004650:	89fb      	ldrh	r3, [r7, #14]
 8004652:	6839      	ldr	r1, [r7, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff ff87 	bl	8004568 <FRAM_WriteStruct>
 800465a:	e000      	b.n	800465e <FRAM_WriteEntry+0x2a>
    if (Windex >= MAX_RECORDS) return;
 800465c:	bf00      	nop
}
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <FRAM_ReadEntry>:

// Lesen per Index
void FRAM_ReadEntry(uint16_t Rindex, SensorData *data) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	6039      	str	r1, [r7, #0]
 800466e:	80fb      	strh	r3, [r7, #6]
    if (Rindex >= MAX_RECORDS) return;
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8004676:	4293      	cmp	r3, r2
 8004678:	d808      	bhi.n	800468c <FRAM_ReadEntry+0x28>

    uint16_t addr = FRAM_START_ADDR + Rindex * RECORD_SIZE;
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	81fb      	strh	r3, [r7, #14]
    FRAM_ReadStruct(addr, data);
 8004680:	89fb      	ldrh	r3, [r7, #14]
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ffa3 	bl	80045d0 <FRAM_ReadStruct>
 800468a:	e000      	b.n	800468e <FRAM_ReadEntry+0x2a>
    if (Rindex >= MAX_RECORDS) return;
 800468c:	bf00      	nop
}
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <FRAM_PrintEntry>:

void FRAM_PrintEntry(uint16_t index) {
 8004694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004696:	b08b      	sub	sp, #44	@ 0x2c
 8004698:	af06      	add	r7, sp, #24
 800469a:	4603      	mov	r3, r0
 800469c:	80fb      	strh	r3, [r7, #6]
    SensorData data;
    FRAM_ReadEntry(index, &data);
 800469e:	f107 0208 	add.w	r2, r7, #8
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ffdc 	bl	8004664 <FRAM_ReadEntry>

    printf("Index %u: %02u.%02u.20%02u %02u:%02u:%02u\tWeight: %u\r\n",
 80046ac:	88f9      	ldrh	r1, [r7, #6]
           index,
           data.day,
 80046ae:	7abb      	ldrb	r3, [r7, #10]
    printf("Index %u: %02u.%02u.20%02u %02u:%02u:%02u\tWeight: %u\r\n",
 80046b0:	461e      	mov	r6, r3
           data.month,
 80046b2:	7a7b      	ldrb	r3, [r7, #9]
    printf("Index %u: %02u.%02u.20%02u %02u:%02u:%02u\tWeight: %u\r\n",
 80046b4:	469c      	mov	ip, r3
           data.year,
 80046b6:	7a3b      	ldrb	r3, [r7, #8]
           data.hour,
 80046b8:	7afa      	ldrb	r2, [r7, #11]
           data.minute,
 80046ba:	7b38      	ldrb	r0, [r7, #12]
           data.second,
 80046bc:	7b7c      	ldrb	r4, [r7, #13]
           data.weight);
 80046be:	89fd      	ldrh	r5, [r7, #14]
    printf("Index %u: %02u.%02u.20%02u %02u:%02u:%02u\tWeight: %u\r\n",
 80046c0:	9504      	str	r5, [sp, #16]
 80046c2:	9403      	str	r4, [sp, #12]
 80046c4:	9002      	str	r0, [sp, #8]
 80046c6:	9201      	str	r2, [sp, #4]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4663      	mov	r3, ip
 80046cc:	4632      	mov	r2, r6
 80046ce:	4803      	ldr	r0, [pc, #12]	@ (80046dc <FRAM_PrintEntry+0x48>)
 80046d0:	f000 fd84 	bl	80051dc <iprintf>
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046dc:	08007150 	.word	0x08007150

080046e0 <FRAM_WriteIndex>:

void FRAM_WriteIndex(uint16_t index) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[3 + 2];
    cmd[0] = FRAM_WRITE;
 80046ea:	2302      	movs	r3, #2
 80046ec:	723b      	strb	r3, [r7, #8]
    cmd[1] = (INDEX_ADDR >> 8) & 0xFF;
 80046ee:	231f      	movs	r3, #31
 80046f0:	727b      	strb	r3, [r7, #9]
    cmd[2] = INDEX_ADDR & 0xFF;
 80046f2:	23fe      	movs	r3, #254	@ 0xfe
 80046f4:	72bb      	strb	r3, [r7, #10]
    cmd[3] = index & 0xFF;
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	72fb      	strb	r3, [r7, #11]
    cmd[4] = (index >> 8) & 0xFF;
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	b29b      	uxth	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	733b      	strb	r3, [r7, #12]

    FRAM_WriteEnable();
 8004706:	f7ff ff0d 	bl	8004524 <FRAM_WriteEnable>
    FRAM_CS_LOW();
 800470a:	2200      	movs	r2, #0
 800470c:	2110      	movs	r1, #16
 800470e:	480a      	ldr	r0, [pc, #40]	@ (8004738 <FRAM_WriteIndex+0x58>)
 8004710:	f7fd fb7a 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8004714:	f107 0108 	add.w	r1, r7, #8
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	2205      	movs	r2, #5
 800471e:	4807      	ldr	r0, [pc, #28]	@ (800473c <FRAM_WriteIndex+0x5c>)
 8004720:	f7fe fdab 	bl	800327a <HAL_SPI_Transmit>
    FRAM_CS_HIGH();
 8004724:	2201      	movs	r2, #1
 8004726:	2110      	movs	r1, #16
 8004728:	4803      	ldr	r0, [pc, #12]	@ (8004738 <FRAM_WriteIndex+0x58>)
 800472a:	f7fd fb6d 	bl	8001e08 <HAL_GPIO_WritePin>
}
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40020000 	.word	0x40020000
 800473c:	20000264 	.word	0x20000264

08004740 <FRAM_ReadIndex>:

uint16_t FRAM_ReadIndex(void) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
    uint8_t cmd[3] = {
 8004746:	4a16      	ldr	r2, [pc, #88]	@ (80047a0 <FRAM_ReadIndex+0x60>)
 8004748:	1d3b      	adds	r3, r7, #4
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	4611      	mov	r1, r2
 800474e:	8019      	strh	r1, [r3, #0]
 8004750:	3302      	adds	r3, #2
 8004752:	0c12      	lsrs	r2, r2, #16
 8004754:	701a      	strb	r2, [r3, #0]
        (INDEX_ADDR >> 8) & 0xFF,
        INDEX_ADDR & 0xFF
    };
    uint8_t rx[2];

    FRAM_CS_LOW();
 8004756:	2200      	movs	r2, #0
 8004758:	2110      	movs	r1, #16
 800475a:	4812      	ldr	r0, [pc, #72]	@ (80047a4 <FRAM_ReadIndex+0x64>)
 800475c:	f7fd fb54 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 3, HAL_MAX_DELAY);
 8004760:	1d39      	adds	r1, r7, #4
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
 8004766:	2203      	movs	r2, #3
 8004768:	480f      	ldr	r0, [pc, #60]	@ (80047a8 <FRAM_ReadIndex+0x68>)
 800476a:	f7fe fd86 	bl	800327a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, rx, 2, HAL_MAX_DELAY);
 800476e:	4639      	mov	r1, r7
 8004770:	f04f 33ff 	mov.w	r3, #4294967295
 8004774:	2202      	movs	r2, #2
 8004776:	480c      	ldr	r0, [pc, #48]	@ (80047a8 <FRAM_ReadIndex+0x68>)
 8004778:	f7fe fec3 	bl	8003502 <HAL_SPI_Receive>
    FRAM_CS_HIGH();
 800477c:	2201      	movs	r2, #1
 800477e:	2110      	movs	r1, #16
 8004780:	4808      	ldr	r0, [pc, #32]	@ (80047a4 <FRAM_ReadIndex+0x64>)
 8004782:	f7fd fb41 	bl	8001e08 <HAL_GPIO_WritePin>

    return rx[0] | (rx[1] << 8);
 8004786:	783b      	ldrb	r3, [r7, #0]
 8004788:	b21a      	sxth	r2, r3
 800478a:	787b      	ldrb	r3, [r7, #1]
 800478c:	b21b      	sxth	r3, r3
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	b21b      	sxth	r3, r3
 8004792:	4313      	orrs	r3, r2
 8004794:	b21b      	sxth	r3, r3
 8004796:	b29b      	uxth	r3, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	08007188 	.word	0x08007188
 80047a4:	40020000 	.word	0x40020000
 80047a8:	20000264 	.word	0x20000264

080047ac <__cvt>:
 80047ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	ec57 6b10 	vmov	r6, r7, d0
 80047b4:	2f00      	cmp	r7, #0
 80047b6:	460c      	mov	r4, r1
 80047b8:	4619      	mov	r1, r3
 80047ba:	463b      	mov	r3, r7
 80047bc:	bfbb      	ittet	lt
 80047be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80047c2:	461f      	movlt	r7, r3
 80047c4:	2300      	movge	r3, #0
 80047c6:	232d      	movlt	r3, #45	@ 0x2d
 80047c8:	700b      	strb	r3, [r1, #0]
 80047ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80047d0:	4691      	mov	r9, r2
 80047d2:	f023 0820 	bic.w	r8, r3, #32
 80047d6:	bfbc      	itt	lt
 80047d8:	4632      	movlt	r2, r6
 80047da:	4616      	movlt	r6, r2
 80047dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047e0:	d005      	beq.n	80047ee <__cvt+0x42>
 80047e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80047e6:	d100      	bne.n	80047ea <__cvt+0x3e>
 80047e8:	3401      	adds	r4, #1
 80047ea:	2102      	movs	r1, #2
 80047ec:	e000      	b.n	80047f0 <__cvt+0x44>
 80047ee:	2103      	movs	r1, #3
 80047f0:	ab03      	add	r3, sp, #12
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	ab02      	add	r3, sp, #8
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	ec47 6b10 	vmov	d0, r6, r7
 80047fc:	4653      	mov	r3, sl
 80047fe:	4622      	mov	r2, r4
 8004800:	f000 fe5a 	bl	80054b8 <_dtoa_r>
 8004804:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004808:	4605      	mov	r5, r0
 800480a:	d119      	bne.n	8004840 <__cvt+0x94>
 800480c:	f019 0f01 	tst.w	r9, #1
 8004810:	d00e      	beq.n	8004830 <__cvt+0x84>
 8004812:	eb00 0904 	add.w	r9, r0, r4
 8004816:	2200      	movs	r2, #0
 8004818:	2300      	movs	r3, #0
 800481a:	4630      	mov	r0, r6
 800481c:	4639      	mov	r1, r7
 800481e:	f7fc f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004822:	b108      	cbz	r0, 8004828 <__cvt+0x7c>
 8004824:	f8cd 900c 	str.w	r9, [sp, #12]
 8004828:	2230      	movs	r2, #48	@ 0x30
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	454b      	cmp	r3, r9
 800482e:	d31e      	bcc.n	800486e <__cvt+0xc2>
 8004830:	9b03      	ldr	r3, [sp, #12]
 8004832:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004834:	1b5b      	subs	r3, r3, r5
 8004836:	4628      	mov	r0, r5
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	b004      	add	sp, #16
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004840:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004844:	eb00 0904 	add.w	r9, r0, r4
 8004848:	d1e5      	bne.n	8004816 <__cvt+0x6a>
 800484a:	7803      	ldrb	r3, [r0, #0]
 800484c:	2b30      	cmp	r3, #48	@ 0x30
 800484e:	d10a      	bne.n	8004866 <__cvt+0xba>
 8004850:	2200      	movs	r2, #0
 8004852:	2300      	movs	r3, #0
 8004854:	4630      	mov	r0, r6
 8004856:	4639      	mov	r1, r7
 8004858:	f7fc f93e 	bl	8000ad8 <__aeabi_dcmpeq>
 800485c:	b918      	cbnz	r0, 8004866 <__cvt+0xba>
 800485e:	f1c4 0401 	rsb	r4, r4, #1
 8004862:	f8ca 4000 	str.w	r4, [sl]
 8004866:	f8da 3000 	ldr.w	r3, [sl]
 800486a:	4499      	add	r9, r3
 800486c:	e7d3      	b.n	8004816 <__cvt+0x6a>
 800486e:	1c59      	adds	r1, r3, #1
 8004870:	9103      	str	r1, [sp, #12]
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e7d9      	b.n	800482a <__cvt+0x7e>

08004876 <__exponent>:
 8004876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004878:	2900      	cmp	r1, #0
 800487a:	bfba      	itte	lt
 800487c:	4249      	neglt	r1, r1
 800487e:	232d      	movlt	r3, #45	@ 0x2d
 8004880:	232b      	movge	r3, #43	@ 0x2b
 8004882:	2909      	cmp	r1, #9
 8004884:	7002      	strb	r2, [r0, #0]
 8004886:	7043      	strb	r3, [r0, #1]
 8004888:	dd29      	ble.n	80048de <__exponent+0x68>
 800488a:	f10d 0307 	add.w	r3, sp, #7
 800488e:	461d      	mov	r5, r3
 8004890:	270a      	movs	r7, #10
 8004892:	461a      	mov	r2, r3
 8004894:	fbb1 f6f7 	udiv	r6, r1, r7
 8004898:	fb07 1416 	mls	r4, r7, r6, r1
 800489c:	3430      	adds	r4, #48	@ 0x30
 800489e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80048a2:	460c      	mov	r4, r1
 80048a4:	2c63      	cmp	r4, #99	@ 0x63
 80048a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80048aa:	4631      	mov	r1, r6
 80048ac:	dcf1      	bgt.n	8004892 <__exponent+0x1c>
 80048ae:	3130      	adds	r1, #48	@ 0x30
 80048b0:	1e94      	subs	r4, r2, #2
 80048b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048b6:	1c41      	adds	r1, r0, #1
 80048b8:	4623      	mov	r3, r4
 80048ba:	42ab      	cmp	r3, r5
 80048bc:	d30a      	bcc.n	80048d4 <__exponent+0x5e>
 80048be:	f10d 0309 	add.w	r3, sp, #9
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	42ac      	cmp	r4, r5
 80048c6:	bf88      	it	hi
 80048c8:	2300      	movhi	r3, #0
 80048ca:	3302      	adds	r3, #2
 80048cc:	4403      	add	r3, r0
 80048ce:	1a18      	subs	r0, r3, r0
 80048d0:	b003      	add	sp, #12
 80048d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80048d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80048dc:	e7ed      	b.n	80048ba <__exponent+0x44>
 80048de:	2330      	movs	r3, #48	@ 0x30
 80048e0:	3130      	adds	r1, #48	@ 0x30
 80048e2:	7083      	strb	r3, [r0, #2]
 80048e4:	70c1      	strb	r1, [r0, #3]
 80048e6:	1d03      	adds	r3, r0, #4
 80048e8:	e7f1      	b.n	80048ce <__exponent+0x58>
	...

080048ec <_printf_float>:
 80048ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f0:	b08d      	sub	sp, #52	@ 0x34
 80048f2:	460c      	mov	r4, r1
 80048f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80048f8:	4616      	mov	r6, r2
 80048fa:	461f      	mov	r7, r3
 80048fc:	4605      	mov	r5, r0
 80048fe:	f000 fccb 	bl	8005298 <_localeconv_r>
 8004902:	6803      	ldr	r3, [r0, #0]
 8004904:	9304      	str	r3, [sp, #16]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fb fcba 	bl	8000280 <strlen>
 800490c:	2300      	movs	r3, #0
 800490e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004910:	f8d8 3000 	ldr.w	r3, [r8]
 8004914:	9005      	str	r0, [sp, #20]
 8004916:	3307      	adds	r3, #7
 8004918:	f023 0307 	bic.w	r3, r3, #7
 800491c:	f103 0208 	add.w	r2, r3, #8
 8004920:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004924:	f8d4 b000 	ldr.w	fp, [r4]
 8004928:	f8c8 2000 	str.w	r2, [r8]
 800492c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004930:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004934:	9307      	str	r3, [sp, #28]
 8004936:	f8cd 8018 	str.w	r8, [sp, #24]
 800493a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800493e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004942:	4b9c      	ldr	r3, [pc, #624]	@ (8004bb4 <_printf_float+0x2c8>)
 8004944:	f04f 32ff 	mov.w	r2, #4294967295
 8004948:	f7fc f8f8 	bl	8000b3c <__aeabi_dcmpun>
 800494c:	bb70      	cbnz	r0, 80049ac <_printf_float+0xc0>
 800494e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004952:	4b98      	ldr	r3, [pc, #608]	@ (8004bb4 <_printf_float+0x2c8>)
 8004954:	f04f 32ff 	mov.w	r2, #4294967295
 8004958:	f7fc f8d2 	bl	8000b00 <__aeabi_dcmple>
 800495c:	bb30      	cbnz	r0, 80049ac <_printf_float+0xc0>
 800495e:	2200      	movs	r2, #0
 8004960:	2300      	movs	r3, #0
 8004962:	4640      	mov	r0, r8
 8004964:	4649      	mov	r1, r9
 8004966:	f7fc f8c1 	bl	8000aec <__aeabi_dcmplt>
 800496a:	b110      	cbz	r0, 8004972 <_printf_float+0x86>
 800496c:	232d      	movs	r3, #45	@ 0x2d
 800496e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004972:	4a91      	ldr	r2, [pc, #580]	@ (8004bb8 <_printf_float+0x2cc>)
 8004974:	4b91      	ldr	r3, [pc, #580]	@ (8004bbc <_printf_float+0x2d0>)
 8004976:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800497a:	bf8c      	ite	hi
 800497c:	4690      	movhi	r8, r2
 800497e:	4698      	movls	r8, r3
 8004980:	2303      	movs	r3, #3
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	f02b 0304 	bic.w	r3, fp, #4
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	f04f 0900 	mov.w	r9, #0
 800498e:	9700      	str	r7, [sp, #0]
 8004990:	4633      	mov	r3, r6
 8004992:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004994:	4621      	mov	r1, r4
 8004996:	4628      	mov	r0, r5
 8004998:	f000 f9d2 	bl	8004d40 <_printf_common>
 800499c:	3001      	adds	r0, #1
 800499e:	f040 808d 	bne.w	8004abc <_printf_float+0x1d0>
 80049a2:	f04f 30ff 	mov.w	r0, #4294967295
 80049a6:	b00d      	add	sp, #52	@ 0x34
 80049a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ac:	4642      	mov	r2, r8
 80049ae:	464b      	mov	r3, r9
 80049b0:	4640      	mov	r0, r8
 80049b2:	4649      	mov	r1, r9
 80049b4:	f7fc f8c2 	bl	8000b3c <__aeabi_dcmpun>
 80049b8:	b140      	cbz	r0, 80049cc <_printf_float+0xe0>
 80049ba:	464b      	mov	r3, r9
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bfbc      	itt	lt
 80049c0:	232d      	movlt	r3, #45	@ 0x2d
 80049c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80049c6:	4a7e      	ldr	r2, [pc, #504]	@ (8004bc0 <_printf_float+0x2d4>)
 80049c8:	4b7e      	ldr	r3, [pc, #504]	@ (8004bc4 <_printf_float+0x2d8>)
 80049ca:	e7d4      	b.n	8004976 <_printf_float+0x8a>
 80049cc:	6863      	ldr	r3, [r4, #4]
 80049ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80049d2:	9206      	str	r2, [sp, #24]
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	d13b      	bne.n	8004a50 <_printf_float+0x164>
 80049d8:	2306      	movs	r3, #6
 80049da:	6063      	str	r3, [r4, #4]
 80049dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80049e0:	2300      	movs	r3, #0
 80049e2:	6022      	str	r2, [r4, #0]
 80049e4:	9303      	str	r3, [sp, #12]
 80049e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80049e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80049ec:	ab09      	add	r3, sp, #36	@ 0x24
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	6861      	ldr	r1, [r4, #4]
 80049f2:	ec49 8b10 	vmov	d0, r8, r9
 80049f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80049fa:	4628      	mov	r0, r5
 80049fc:	f7ff fed6 	bl	80047ac <__cvt>
 8004a00:	9b06      	ldr	r3, [sp, #24]
 8004a02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a04:	2b47      	cmp	r3, #71	@ 0x47
 8004a06:	4680      	mov	r8, r0
 8004a08:	d129      	bne.n	8004a5e <_printf_float+0x172>
 8004a0a:	1cc8      	adds	r0, r1, #3
 8004a0c:	db02      	blt.n	8004a14 <_printf_float+0x128>
 8004a0e:	6863      	ldr	r3, [r4, #4]
 8004a10:	4299      	cmp	r1, r3
 8004a12:	dd41      	ble.n	8004a98 <_printf_float+0x1ac>
 8004a14:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a18:	fa5f fa8a 	uxtb.w	sl, sl
 8004a1c:	3901      	subs	r1, #1
 8004a1e:	4652      	mov	r2, sl
 8004a20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004a24:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a26:	f7ff ff26 	bl	8004876 <__exponent>
 8004a2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a2c:	1813      	adds	r3, r2, r0
 8004a2e:	2a01      	cmp	r2, #1
 8004a30:	4681      	mov	r9, r0
 8004a32:	6123      	str	r3, [r4, #16]
 8004a34:	dc02      	bgt.n	8004a3c <_printf_float+0x150>
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	07d2      	lsls	r2, r2, #31
 8004a3a:	d501      	bpl.n	8004a40 <_printf_float+0x154>
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0a2      	beq.n	800498e <_printf_float+0xa2>
 8004a48:	232d      	movs	r3, #45	@ 0x2d
 8004a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a4e:	e79e      	b.n	800498e <_printf_float+0xa2>
 8004a50:	9a06      	ldr	r2, [sp, #24]
 8004a52:	2a47      	cmp	r2, #71	@ 0x47
 8004a54:	d1c2      	bne.n	80049dc <_printf_float+0xf0>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1c0      	bne.n	80049dc <_printf_float+0xf0>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e7bd      	b.n	80049da <_printf_float+0xee>
 8004a5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a62:	d9db      	bls.n	8004a1c <_printf_float+0x130>
 8004a64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a68:	d118      	bne.n	8004a9c <_printf_float+0x1b0>
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	6863      	ldr	r3, [r4, #4]
 8004a6e:	dd0b      	ble.n	8004a88 <_printf_float+0x19c>
 8004a70:	6121      	str	r1, [r4, #16]
 8004a72:	b913      	cbnz	r3, 8004a7a <_printf_float+0x18e>
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	07d0      	lsls	r0, r2, #31
 8004a78:	d502      	bpl.n	8004a80 <_printf_float+0x194>
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	440b      	add	r3, r1
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a82:	f04f 0900 	mov.w	r9, #0
 8004a86:	e7db      	b.n	8004a40 <_printf_float+0x154>
 8004a88:	b913      	cbnz	r3, 8004a90 <_printf_float+0x1a4>
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	07d2      	lsls	r2, r2, #31
 8004a8e:	d501      	bpl.n	8004a94 <_printf_float+0x1a8>
 8004a90:	3302      	adds	r3, #2
 8004a92:	e7f4      	b.n	8004a7e <_printf_float+0x192>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e7f2      	b.n	8004a7e <_printf_float+0x192>
 8004a98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a9e:	4299      	cmp	r1, r3
 8004aa0:	db05      	blt.n	8004aae <_printf_float+0x1c2>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	6121      	str	r1, [r4, #16]
 8004aa6:	07d8      	lsls	r0, r3, #31
 8004aa8:	d5ea      	bpl.n	8004a80 <_printf_float+0x194>
 8004aaa:	1c4b      	adds	r3, r1, #1
 8004aac:	e7e7      	b.n	8004a7e <_printf_float+0x192>
 8004aae:	2900      	cmp	r1, #0
 8004ab0:	bfd4      	ite	le
 8004ab2:	f1c1 0202 	rsble	r2, r1, #2
 8004ab6:	2201      	movgt	r2, #1
 8004ab8:	4413      	add	r3, r2
 8004aba:	e7e0      	b.n	8004a7e <_printf_float+0x192>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	055a      	lsls	r2, r3, #21
 8004ac0:	d407      	bmi.n	8004ad2 <_printf_float+0x1e6>
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	d12b      	bne.n	8004b28 <_printf_float+0x23c>
 8004ad0:	e767      	b.n	80049a2 <_printf_float+0xb6>
 8004ad2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ad6:	f240 80dd 	bls.w	8004c94 <_printf_float+0x3a8>
 8004ada:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f7fb fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d033      	beq.n	8004b52 <_printf_float+0x266>
 8004aea:	4a37      	ldr	r2, [pc, #220]	@ (8004bc8 <_printf_float+0x2dc>)
 8004aec:	2301      	movs	r3, #1
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	f43f af54 	beq.w	80049a2 <_printf_float+0xb6>
 8004afa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004afe:	4543      	cmp	r3, r8
 8004b00:	db02      	blt.n	8004b08 <_printf_float+0x21c>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	07d8      	lsls	r0, r3, #31
 8004b06:	d50f      	bpl.n	8004b28 <_printf_float+0x23c>
 8004b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b0c:	4631      	mov	r1, r6
 8004b0e:	4628      	mov	r0, r5
 8004b10:	47b8      	blx	r7
 8004b12:	3001      	adds	r0, #1
 8004b14:	f43f af45 	beq.w	80049a2 <_printf_float+0xb6>
 8004b18:	f04f 0900 	mov.w	r9, #0
 8004b1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b20:	f104 0a1a 	add.w	sl, r4, #26
 8004b24:	45c8      	cmp	r8, r9
 8004b26:	dc09      	bgt.n	8004b3c <_printf_float+0x250>
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	079b      	lsls	r3, r3, #30
 8004b2c:	f100 8103 	bmi.w	8004d36 <_printf_float+0x44a>
 8004b30:	68e0      	ldr	r0, [r4, #12]
 8004b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b34:	4298      	cmp	r0, r3
 8004b36:	bfb8      	it	lt
 8004b38:	4618      	movlt	r0, r3
 8004b3a:	e734      	b.n	80049a6 <_printf_float+0xba>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4652      	mov	r2, sl
 8004b40:	4631      	mov	r1, r6
 8004b42:	4628      	mov	r0, r5
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	f43f af2b 	beq.w	80049a2 <_printf_float+0xb6>
 8004b4c:	f109 0901 	add.w	r9, r9, #1
 8004b50:	e7e8      	b.n	8004b24 <_printf_float+0x238>
 8004b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	dc39      	bgt.n	8004bcc <_printf_float+0x2e0>
 8004b58:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc8 <_printf_float+0x2dc>)
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4628      	mov	r0, r5
 8004b60:	47b8      	blx	r7
 8004b62:	3001      	adds	r0, #1
 8004b64:	f43f af1d 	beq.w	80049a2 <_printf_float+0xb6>
 8004b68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b6c:	ea59 0303 	orrs.w	r3, r9, r3
 8004b70:	d102      	bne.n	8004b78 <_printf_float+0x28c>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	07d9      	lsls	r1, r3, #31
 8004b76:	d5d7      	bpl.n	8004b28 <_printf_float+0x23c>
 8004b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4628      	mov	r0, r5
 8004b80:	47b8      	blx	r7
 8004b82:	3001      	adds	r0, #1
 8004b84:	f43f af0d 	beq.w	80049a2 <_printf_float+0xb6>
 8004b88:	f04f 0a00 	mov.w	sl, #0
 8004b8c:	f104 0b1a 	add.w	fp, r4, #26
 8004b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b92:	425b      	negs	r3, r3
 8004b94:	4553      	cmp	r3, sl
 8004b96:	dc01      	bgt.n	8004b9c <_printf_float+0x2b0>
 8004b98:	464b      	mov	r3, r9
 8004b9a:	e793      	b.n	8004ac4 <_printf_float+0x1d8>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	465a      	mov	r2, fp
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	f43f aefb 	beq.w	80049a2 <_printf_float+0xb6>
 8004bac:	f10a 0a01 	add.w	sl, sl, #1
 8004bb0:	e7ee      	b.n	8004b90 <_printf_float+0x2a4>
 8004bb2:	bf00      	nop
 8004bb4:	7fefffff 	.word	0x7fefffff
 8004bb8:	080071a8 	.word	0x080071a8
 8004bbc:	080071a4 	.word	0x080071a4
 8004bc0:	080071b0 	.word	0x080071b0
 8004bc4:	080071ac 	.word	0x080071ac
 8004bc8:	080071b4 	.word	0x080071b4
 8004bcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004bd2:	4553      	cmp	r3, sl
 8004bd4:	bfa8      	it	ge
 8004bd6:	4653      	movge	r3, sl
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	4699      	mov	r9, r3
 8004bdc:	dc36      	bgt.n	8004c4c <_printf_float+0x360>
 8004bde:	f04f 0b00 	mov.w	fp, #0
 8004be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004be6:	f104 021a 	add.w	r2, r4, #26
 8004bea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bec:	9306      	str	r3, [sp, #24]
 8004bee:	eba3 0309 	sub.w	r3, r3, r9
 8004bf2:	455b      	cmp	r3, fp
 8004bf4:	dc31      	bgt.n	8004c5a <_printf_float+0x36e>
 8004bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf8:	459a      	cmp	sl, r3
 8004bfa:	dc3a      	bgt.n	8004c72 <_printf_float+0x386>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	07da      	lsls	r2, r3, #31
 8004c00:	d437      	bmi.n	8004c72 <_printf_float+0x386>
 8004c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c04:	ebaa 0903 	sub.w	r9, sl, r3
 8004c08:	9b06      	ldr	r3, [sp, #24]
 8004c0a:	ebaa 0303 	sub.w	r3, sl, r3
 8004c0e:	4599      	cmp	r9, r3
 8004c10:	bfa8      	it	ge
 8004c12:	4699      	movge	r9, r3
 8004c14:	f1b9 0f00 	cmp.w	r9, #0
 8004c18:	dc33      	bgt.n	8004c82 <_printf_float+0x396>
 8004c1a:	f04f 0800 	mov.w	r8, #0
 8004c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c22:	f104 0b1a 	add.w	fp, r4, #26
 8004c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c28:	ebaa 0303 	sub.w	r3, sl, r3
 8004c2c:	eba3 0309 	sub.w	r3, r3, r9
 8004c30:	4543      	cmp	r3, r8
 8004c32:	f77f af79 	ble.w	8004b28 <_printf_float+0x23c>
 8004c36:	2301      	movs	r3, #1
 8004c38:	465a      	mov	r2, fp
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	47b8      	blx	r7
 8004c40:	3001      	adds	r0, #1
 8004c42:	f43f aeae 	beq.w	80049a2 <_printf_float+0xb6>
 8004c46:	f108 0801 	add.w	r8, r8, #1
 8004c4a:	e7ec      	b.n	8004c26 <_printf_float+0x33a>
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	d1c2      	bne.n	8004bde <_printf_float+0x2f2>
 8004c58:	e6a3      	b.n	80049a2 <_printf_float+0xb6>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	9206      	str	r2, [sp, #24]
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	f43f ae9c 	beq.w	80049a2 <_printf_float+0xb6>
 8004c6a:	9a06      	ldr	r2, [sp, #24]
 8004c6c:	f10b 0b01 	add.w	fp, fp, #1
 8004c70:	e7bb      	b.n	8004bea <_printf_float+0x2fe>
 8004c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c76:	4631      	mov	r1, r6
 8004c78:	4628      	mov	r0, r5
 8004c7a:	47b8      	blx	r7
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d1c0      	bne.n	8004c02 <_printf_float+0x316>
 8004c80:	e68f      	b.n	80049a2 <_printf_float+0xb6>
 8004c82:	9a06      	ldr	r2, [sp, #24]
 8004c84:	464b      	mov	r3, r9
 8004c86:	4442      	add	r2, r8
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b8      	blx	r7
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d1c3      	bne.n	8004c1a <_printf_float+0x32e>
 8004c92:	e686      	b.n	80049a2 <_printf_float+0xb6>
 8004c94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c98:	f1ba 0f01 	cmp.w	sl, #1
 8004c9c:	dc01      	bgt.n	8004ca2 <_printf_float+0x3b6>
 8004c9e:	07db      	lsls	r3, r3, #31
 8004ca0:	d536      	bpl.n	8004d10 <_printf_float+0x424>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	4628      	mov	r0, r5
 8004caa:	47b8      	blx	r7
 8004cac:	3001      	adds	r0, #1
 8004cae:	f43f ae78 	beq.w	80049a2 <_printf_float+0xb6>
 8004cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b8      	blx	r7
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	f43f ae70 	beq.w	80049a2 <_printf_float+0xb6>
 8004cc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cce:	f7fb ff03 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cd2:	b9c0      	cbnz	r0, 8004d06 <_printf_float+0x41a>
 8004cd4:	4653      	mov	r3, sl
 8004cd6:	f108 0201 	add.w	r2, r8, #1
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4628      	mov	r0, r5
 8004cde:	47b8      	blx	r7
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d10c      	bne.n	8004cfe <_printf_float+0x412>
 8004ce4:	e65d      	b.n	80049a2 <_printf_float+0xb6>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	465a      	mov	r2, fp
 8004cea:	4631      	mov	r1, r6
 8004cec:	4628      	mov	r0, r5
 8004cee:	47b8      	blx	r7
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	f43f ae56 	beq.w	80049a2 <_printf_float+0xb6>
 8004cf6:	f108 0801 	add.w	r8, r8, #1
 8004cfa:	45d0      	cmp	r8, sl
 8004cfc:	dbf3      	blt.n	8004ce6 <_printf_float+0x3fa>
 8004cfe:	464b      	mov	r3, r9
 8004d00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d04:	e6df      	b.n	8004ac6 <_printf_float+0x1da>
 8004d06:	f04f 0800 	mov.w	r8, #0
 8004d0a:	f104 0b1a 	add.w	fp, r4, #26
 8004d0e:	e7f4      	b.n	8004cfa <_printf_float+0x40e>
 8004d10:	2301      	movs	r3, #1
 8004d12:	4642      	mov	r2, r8
 8004d14:	e7e1      	b.n	8004cda <_printf_float+0x3ee>
 8004d16:	2301      	movs	r3, #1
 8004d18:	464a      	mov	r2, r9
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b8      	blx	r7
 8004d20:	3001      	adds	r0, #1
 8004d22:	f43f ae3e 	beq.w	80049a2 <_printf_float+0xb6>
 8004d26:	f108 0801 	add.w	r8, r8, #1
 8004d2a:	68e3      	ldr	r3, [r4, #12]
 8004d2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d2e:	1a5b      	subs	r3, r3, r1
 8004d30:	4543      	cmp	r3, r8
 8004d32:	dcf0      	bgt.n	8004d16 <_printf_float+0x42a>
 8004d34:	e6fc      	b.n	8004b30 <_printf_float+0x244>
 8004d36:	f04f 0800 	mov.w	r8, #0
 8004d3a:	f104 0919 	add.w	r9, r4, #25
 8004d3e:	e7f4      	b.n	8004d2a <_printf_float+0x43e>

08004d40 <_printf_common>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	4616      	mov	r6, r2
 8004d46:	4698      	mov	r8, r3
 8004d48:	688a      	ldr	r2, [r1, #8]
 8004d4a:	690b      	ldr	r3, [r1, #16]
 8004d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	bfb8      	it	lt
 8004d54:	4613      	movlt	r3, r2
 8004d56:	6033      	str	r3, [r6, #0]
 8004d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	b10a      	cbz	r2, 8004d66 <_printf_common+0x26>
 8004d62:	3301      	adds	r3, #1
 8004d64:	6033      	str	r3, [r6, #0]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	0699      	lsls	r1, r3, #26
 8004d6a:	bf42      	ittt	mi
 8004d6c:	6833      	ldrmi	r3, [r6, #0]
 8004d6e:	3302      	addmi	r3, #2
 8004d70:	6033      	strmi	r3, [r6, #0]
 8004d72:	6825      	ldr	r5, [r4, #0]
 8004d74:	f015 0506 	ands.w	r5, r5, #6
 8004d78:	d106      	bne.n	8004d88 <_printf_common+0x48>
 8004d7a:	f104 0a19 	add.w	sl, r4, #25
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	6832      	ldr	r2, [r6, #0]
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	dc26      	bgt.n	8004dd6 <_printf_common+0x96>
 8004d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	3b00      	subs	r3, #0
 8004d90:	bf18      	it	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	0692      	lsls	r2, r2, #26
 8004d96:	d42b      	bmi.n	8004df0 <_printf_common+0xb0>
 8004d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	4638      	mov	r0, r7
 8004da0:	47c8      	blx	r9
 8004da2:	3001      	adds	r0, #1
 8004da4:	d01e      	beq.n	8004de4 <_printf_common+0xa4>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	6922      	ldr	r2, [r4, #16]
 8004daa:	f003 0306 	and.w	r3, r3, #6
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	bf02      	ittt	eq
 8004db2:	68e5      	ldreq	r5, [r4, #12]
 8004db4:	6833      	ldreq	r3, [r6, #0]
 8004db6:	1aed      	subeq	r5, r5, r3
 8004db8:	68a3      	ldr	r3, [r4, #8]
 8004dba:	bf0c      	ite	eq
 8004dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc0:	2500      	movne	r5, #0
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	bfc4      	itt	gt
 8004dc6:	1a9b      	subgt	r3, r3, r2
 8004dc8:	18ed      	addgt	r5, r5, r3
 8004dca:	2600      	movs	r6, #0
 8004dcc:	341a      	adds	r4, #26
 8004dce:	42b5      	cmp	r5, r6
 8004dd0:	d11a      	bne.n	8004e08 <_printf_common+0xc8>
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	e008      	b.n	8004de8 <_printf_common+0xa8>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4652      	mov	r2, sl
 8004dda:	4641      	mov	r1, r8
 8004ddc:	4638      	mov	r0, r7
 8004dde:	47c8      	blx	r9
 8004de0:	3001      	adds	r0, #1
 8004de2:	d103      	bne.n	8004dec <_printf_common+0xac>
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	3501      	adds	r5, #1
 8004dee:	e7c6      	b.n	8004d7e <_printf_common+0x3e>
 8004df0:	18e1      	adds	r1, r4, r3
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	2030      	movs	r0, #48	@ 0x30
 8004df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dfa:	4422      	add	r2, r4
 8004dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e04:	3302      	adds	r3, #2
 8004e06:	e7c7      	b.n	8004d98 <_printf_common+0x58>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	4638      	mov	r0, r7
 8004e10:	47c8      	blx	r9
 8004e12:	3001      	adds	r0, #1
 8004e14:	d0e6      	beq.n	8004de4 <_printf_common+0xa4>
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7d9      	b.n	8004dce <_printf_common+0x8e>
	...

08004e1c <_printf_i>:
 8004e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	7e0f      	ldrb	r7, [r1, #24]
 8004e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e24:	2f78      	cmp	r7, #120	@ 0x78
 8004e26:	4691      	mov	r9, r2
 8004e28:	4680      	mov	r8, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	469a      	mov	sl, r3
 8004e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e32:	d807      	bhi.n	8004e44 <_printf_i+0x28>
 8004e34:	2f62      	cmp	r7, #98	@ 0x62
 8004e36:	d80a      	bhi.n	8004e4e <_printf_i+0x32>
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	f000 80d1 	beq.w	8004fe0 <_printf_i+0x1c4>
 8004e3e:	2f58      	cmp	r7, #88	@ 0x58
 8004e40:	f000 80b8 	beq.w	8004fb4 <_printf_i+0x198>
 8004e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e4c:	e03a      	b.n	8004ec4 <_printf_i+0xa8>
 8004e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e52:	2b15      	cmp	r3, #21
 8004e54:	d8f6      	bhi.n	8004e44 <_printf_i+0x28>
 8004e56:	a101      	add	r1, pc, #4	@ (adr r1, 8004e5c <_printf_i+0x40>)
 8004e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e5c:	08004eb5 	.word	0x08004eb5
 8004e60:	08004ec9 	.word	0x08004ec9
 8004e64:	08004e45 	.word	0x08004e45
 8004e68:	08004e45 	.word	0x08004e45
 8004e6c:	08004e45 	.word	0x08004e45
 8004e70:	08004e45 	.word	0x08004e45
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004e45 	.word	0x08004e45
 8004e7c:	08004e45 	.word	0x08004e45
 8004e80:	08004e45 	.word	0x08004e45
 8004e84:	08004e45 	.word	0x08004e45
 8004e88:	08004fc7 	.word	0x08004fc7
 8004e8c:	08004ef3 	.word	0x08004ef3
 8004e90:	08004f81 	.word	0x08004f81
 8004e94:	08004e45 	.word	0x08004e45
 8004e98:	08004e45 	.word	0x08004e45
 8004e9c:	08004fe9 	.word	0x08004fe9
 8004ea0:	08004e45 	.word	0x08004e45
 8004ea4:	08004ef3 	.word	0x08004ef3
 8004ea8:	08004e45 	.word	0x08004e45
 8004eac:	08004e45 	.word	0x08004e45
 8004eb0:	08004f89 	.word	0x08004f89
 8004eb4:	6833      	ldr	r3, [r6, #0]
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6032      	str	r2, [r6, #0]
 8004ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e09c      	b.n	8005002 <_printf_i+0x1e6>
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	1d19      	adds	r1, r3, #4
 8004ece:	6031      	str	r1, [r6, #0]
 8004ed0:	0606      	lsls	r6, r0, #24
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_i+0xbc>
 8004ed4:	681d      	ldr	r5, [r3, #0]
 8004ed6:	e003      	b.n	8004ee0 <_printf_i+0xc4>
 8004ed8:	0645      	lsls	r5, r0, #25
 8004eda:	d5fb      	bpl.n	8004ed4 <_printf_i+0xb8>
 8004edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ee0:	2d00      	cmp	r5, #0
 8004ee2:	da03      	bge.n	8004eec <_printf_i+0xd0>
 8004ee4:	232d      	movs	r3, #45	@ 0x2d
 8004ee6:	426d      	negs	r5, r5
 8004ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eec:	4858      	ldr	r0, [pc, #352]	@ (8005050 <_printf_i+0x234>)
 8004eee:	230a      	movs	r3, #10
 8004ef0:	e011      	b.n	8004f16 <_printf_i+0xfa>
 8004ef2:	6821      	ldr	r1, [r4, #0]
 8004ef4:	6833      	ldr	r3, [r6, #0]
 8004ef6:	0608      	lsls	r0, r1, #24
 8004ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004efc:	d402      	bmi.n	8004f04 <_printf_i+0xe8>
 8004efe:	0649      	lsls	r1, r1, #25
 8004f00:	bf48      	it	mi
 8004f02:	b2ad      	uxthmi	r5, r5
 8004f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f06:	4852      	ldr	r0, [pc, #328]	@ (8005050 <_printf_i+0x234>)
 8004f08:	6033      	str	r3, [r6, #0]
 8004f0a:	bf14      	ite	ne
 8004f0c:	230a      	movne	r3, #10
 8004f0e:	2308      	moveq	r3, #8
 8004f10:	2100      	movs	r1, #0
 8004f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f16:	6866      	ldr	r6, [r4, #4]
 8004f18:	60a6      	str	r6, [r4, #8]
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	db05      	blt.n	8004f2a <_printf_i+0x10e>
 8004f1e:	6821      	ldr	r1, [r4, #0]
 8004f20:	432e      	orrs	r6, r5
 8004f22:	f021 0104 	bic.w	r1, r1, #4
 8004f26:	6021      	str	r1, [r4, #0]
 8004f28:	d04b      	beq.n	8004fc2 <_printf_i+0x1a6>
 8004f2a:	4616      	mov	r6, r2
 8004f2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f30:	fb03 5711 	mls	r7, r3, r1, r5
 8004f34:	5dc7      	ldrb	r7, [r0, r7]
 8004f36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f3a:	462f      	mov	r7, r5
 8004f3c:	42bb      	cmp	r3, r7
 8004f3e:	460d      	mov	r5, r1
 8004f40:	d9f4      	bls.n	8004f2c <_printf_i+0x110>
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d10b      	bne.n	8004f5e <_printf_i+0x142>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	07df      	lsls	r7, r3, #31
 8004f4a:	d508      	bpl.n	8004f5e <_printf_i+0x142>
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	6861      	ldr	r1, [r4, #4]
 8004f50:	4299      	cmp	r1, r3
 8004f52:	bfde      	ittt	le
 8004f54:	2330      	movle	r3, #48	@ 0x30
 8004f56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f5e:	1b92      	subs	r2, r2, r6
 8004f60:	6122      	str	r2, [r4, #16]
 8004f62:	f8cd a000 	str.w	sl, [sp]
 8004f66:	464b      	mov	r3, r9
 8004f68:	aa03      	add	r2, sp, #12
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	f7ff fee7 	bl	8004d40 <_printf_common>
 8004f72:	3001      	adds	r0, #1
 8004f74:	d14a      	bne.n	800500c <_printf_i+0x1f0>
 8004f76:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7a:	b004      	add	sp, #16
 8004f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f043 0320 	orr.w	r3, r3, #32
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	4832      	ldr	r0, [pc, #200]	@ (8005054 <_printf_i+0x238>)
 8004f8a:	2778      	movs	r7, #120	@ 0x78
 8004f8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	6831      	ldr	r1, [r6, #0]
 8004f94:	061f      	lsls	r7, r3, #24
 8004f96:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f9a:	d402      	bmi.n	8004fa2 <_printf_i+0x186>
 8004f9c:	065f      	lsls	r7, r3, #25
 8004f9e:	bf48      	it	mi
 8004fa0:	b2ad      	uxthmi	r5, r5
 8004fa2:	6031      	str	r1, [r6, #0]
 8004fa4:	07d9      	lsls	r1, r3, #31
 8004fa6:	bf44      	itt	mi
 8004fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8004fac:	6023      	strmi	r3, [r4, #0]
 8004fae:	b11d      	cbz	r5, 8004fb8 <_printf_i+0x19c>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	e7ad      	b.n	8004f10 <_printf_i+0xf4>
 8004fb4:	4826      	ldr	r0, [pc, #152]	@ (8005050 <_printf_i+0x234>)
 8004fb6:	e7e9      	b.n	8004f8c <_printf_i+0x170>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	f023 0320 	bic.w	r3, r3, #32
 8004fbe:	6023      	str	r3, [r4, #0]
 8004fc0:	e7f6      	b.n	8004fb0 <_printf_i+0x194>
 8004fc2:	4616      	mov	r6, r2
 8004fc4:	e7bd      	b.n	8004f42 <_printf_i+0x126>
 8004fc6:	6833      	ldr	r3, [r6, #0]
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	6961      	ldr	r1, [r4, #20]
 8004fcc:	1d18      	adds	r0, r3, #4
 8004fce:	6030      	str	r0, [r6, #0]
 8004fd0:	062e      	lsls	r6, r5, #24
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	d501      	bpl.n	8004fda <_printf_i+0x1be>
 8004fd6:	6019      	str	r1, [r3, #0]
 8004fd8:	e002      	b.n	8004fe0 <_printf_i+0x1c4>
 8004fda:	0668      	lsls	r0, r5, #25
 8004fdc:	d5fb      	bpl.n	8004fd6 <_printf_i+0x1ba>
 8004fde:	8019      	strh	r1, [r3, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	6123      	str	r3, [r4, #16]
 8004fe4:	4616      	mov	r6, r2
 8004fe6:	e7bc      	b.n	8004f62 <_printf_i+0x146>
 8004fe8:	6833      	ldr	r3, [r6, #0]
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	6032      	str	r2, [r6, #0]
 8004fee:	681e      	ldr	r6, [r3, #0]
 8004ff0:	6862      	ldr	r2, [r4, #4]
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f7fb f8f3 	bl	80001e0 <memchr>
 8004ffa:	b108      	cbz	r0, 8005000 <_printf_i+0x1e4>
 8004ffc:	1b80      	subs	r0, r0, r6
 8004ffe:	6060      	str	r0, [r4, #4]
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	2300      	movs	r3, #0
 8005006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800500a:	e7aa      	b.n	8004f62 <_printf_i+0x146>
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	4632      	mov	r2, r6
 8005010:	4649      	mov	r1, r9
 8005012:	4640      	mov	r0, r8
 8005014:	47d0      	blx	sl
 8005016:	3001      	adds	r0, #1
 8005018:	d0ad      	beq.n	8004f76 <_printf_i+0x15a>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	079b      	lsls	r3, r3, #30
 800501e:	d413      	bmi.n	8005048 <_printf_i+0x22c>
 8005020:	68e0      	ldr	r0, [r4, #12]
 8005022:	9b03      	ldr	r3, [sp, #12]
 8005024:	4298      	cmp	r0, r3
 8005026:	bfb8      	it	lt
 8005028:	4618      	movlt	r0, r3
 800502a:	e7a6      	b.n	8004f7a <_printf_i+0x15e>
 800502c:	2301      	movs	r3, #1
 800502e:	4632      	mov	r2, r6
 8005030:	4649      	mov	r1, r9
 8005032:	4640      	mov	r0, r8
 8005034:	47d0      	blx	sl
 8005036:	3001      	adds	r0, #1
 8005038:	d09d      	beq.n	8004f76 <_printf_i+0x15a>
 800503a:	3501      	adds	r5, #1
 800503c:	68e3      	ldr	r3, [r4, #12]
 800503e:	9903      	ldr	r1, [sp, #12]
 8005040:	1a5b      	subs	r3, r3, r1
 8005042:	42ab      	cmp	r3, r5
 8005044:	dcf2      	bgt.n	800502c <_printf_i+0x210>
 8005046:	e7eb      	b.n	8005020 <_printf_i+0x204>
 8005048:	2500      	movs	r5, #0
 800504a:	f104 0619 	add.w	r6, r4, #25
 800504e:	e7f5      	b.n	800503c <_printf_i+0x220>
 8005050:	080071b6 	.word	0x080071b6
 8005054:	080071c7 	.word	0x080071c7

08005058 <std>:
 8005058:	2300      	movs	r3, #0
 800505a:	b510      	push	{r4, lr}
 800505c:	4604      	mov	r4, r0
 800505e:	e9c0 3300 	strd	r3, r3, [r0]
 8005062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005066:	6083      	str	r3, [r0, #8]
 8005068:	8181      	strh	r1, [r0, #12]
 800506a:	6643      	str	r3, [r0, #100]	@ 0x64
 800506c:	81c2      	strh	r2, [r0, #14]
 800506e:	6183      	str	r3, [r0, #24]
 8005070:	4619      	mov	r1, r3
 8005072:	2208      	movs	r2, #8
 8005074:	305c      	adds	r0, #92	@ 0x5c
 8005076:	f000 f906 	bl	8005286 <memset>
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <std+0x58>)
 800507c:	6263      	str	r3, [r4, #36]	@ 0x24
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <std+0x5c>)
 8005080:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <std+0x60>)
 8005084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <std+0x64>)
 8005088:	6323      	str	r3, [r4, #48]	@ 0x30
 800508a:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <std+0x68>)
 800508c:	6224      	str	r4, [r4, #32]
 800508e:	429c      	cmp	r4, r3
 8005090:	d006      	beq.n	80050a0 <std+0x48>
 8005092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005096:	4294      	cmp	r4, r2
 8005098:	d002      	beq.n	80050a0 <std+0x48>
 800509a:	33d0      	adds	r3, #208	@ 0xd0
 800509c:	429c      	cmp	r4, r3
 800509e:	d105      	bne.n	80050ac <std+0x54>
 80050a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a8:	f000 b96a 	b.w	8005380 <__retarget_lock_init_recursive>
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	bf00      	nop
 80050b0:	08005201 	.word	0x08005201
 80050b4:	08005223 	.word	0x08005223
 80050b8:	0800525b 	.word	0x0800525b
 80050bc:	0800527f 	.word	0x0800527f
 80050c0:	20000310 	.word	0x20000310

080050c4 <stdio_exit_handler>:
 80050c4:	4a02      	ldr	r2, [pc, #8]	@ (80050d0 <stdio_exit_handler+0xc>)
 80050c6:	4903      	ldr	r1, [pc, #12]	@ (80050d4 <stdio_exit_handler+0x10>)
 80050c8:	4803      	ldr	r0, [pc, #12]	@ (80050d8 <stdio_exit_handler+0x14>)
 80050ca:	f000 b869 	b.w	80051a0 <_fwalk_sglue>
 80050ce:	bf00      	nop
 80050d0:	2000000c 	.word	0x2000000c
 80050d4:	08006cd9 	.word	0x08006cd9
 80050d8:	2000001c 	.word	0x2000001c

080050dc <cleanup_stdio>:
 80050dc:	6841      	ldr	r1, [r0, #4]
 80050de:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <cleanup_stdio+0x34>)
 80050e0:	4299      	cmp	r1, r3
 80050e2:	b510      	push	{r4, lr}
 80050e4:	4604      	mov	r4, r0
 80050e6:	d001      	beq.n	80050ec <cleanup_stdio+0x10>
 80050e8:	f001 fdf6 	bl	8006cd8 <_fflush_r>
 80050ec:	68a1      	ldr	r1, [r4, #8]
 80050ee:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <cleanup_stdio+0x38>)
 80050f0:	4299      	cmp	r1, r3
 80050f2:	d002      	beq.n	80050fa <cleanup_stdio+0x1e>
 80050f4:	4620      	mov	r0, r4
 80050f6:	f001 fdef 	bl	8006cd8 <_fflush_r>
 80050fa:	68e1      	ldr	r1, [r4, #12]
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <cleanup_stdio+0x3c>)
 80050fe:	4299      	cmp	r1, r3
 8005100:	d004      	beq.n	800510c <cleanup_stdio+0x30>
 8005102:	4620      	mov	r0, r4
 8005104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005108:	f001 bde6 	b.w	8006cd8 <_fflush_r>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	bf00      	nop
 8005110:	20000310 	.word	0x20000310
 8005114:	20000378 	.word	0x20000378
 8005118:	200003e0 	.word	0x200003e0

0800511c <global_stdio_init.part.0>:
 800511c:	b510      	push	{r4, lr}
 800511e:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <global_stdio_init.part.0+0x30>)
 8005120:	4c0b      	ldr	r4, [pc, #44]	@ (8005150 <global_stdio_init.part.0+0x34>)
 8005122:	4a0c      	ldr	r2, [pc, #48]	@ (8005154 <global_stdio_init.part.0+0x38>)
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	4620      	mov	r0, r4
 8005128:	2200      	movs	r2, #0
 800512a:	2104      	movs	r1, #4
 800512c:	f7ff ff94 	bl	8005058 <std>
 8005130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005134:	2201      	movs	r2, #1
 8005136:	2109      	movs	r1, #9
 8005138:	f7ff ff8e 	bl	8005058 <std>
 800513c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005140:	2202      	movs	r2, #2
 8005142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005146:	2112      	movs	r1, #18
 8005148:	f7ff bf86 	b.w	8005058 <std>
 800514c:	20000448 	.word	0x20000448
 8005150:	20000310 	.word	0x20000310
 8005154:	080050c5 	.word	0x080050c5

08005158 <__sfp_lock_acquire>:
 8005158:	4801      	ldr	r0, [pc, #4]	@ (8005160 <__sfp_lock_acquire+0x8>)
 800515a:	f000 b912 	b.w	8005382 <__retarget_lock_acquire_recursive>
 800515e:	bf00      	nop
 8005160:	20000451 	.word	0x20000451

08005164 <__sfp_lock_release>:
 8005164:	4801      	ldr	r0, [pc, #4]	@ (800516c <__sfp_lock_release+0x8>)
 8005166:	f000 b90d 	b.w	8005384 <__retarget_lock_release_recursive>
 800516a:	bf00      	nop
 800516c:	20000451 	.word	0x20000451

08005170 <__sinit>:
 8005170:	b510      	push	{r4, lr}
 8005172:	4604      	mov	r4, r0
 8005174:	f7ff fff0 	bl	8005158 <__sfp_lock_acquire>
 8005178:	6a23      	ldr	r3, [r4, #32]
 800517a:	b11b      	cbz	r3, 8005184 <__sinit+0x14>
 800517c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005180:	f7ff bff0 	b.w	8005164 <__sfp_lock_release>
 8005184:	4b04      	ldr	r3, [pc, #16]	@ (8005198 <__sinit+0x28>)
 8005186:	6223      	str	r3, [r4, #32]
 8005188:	4b04      	ldr	r3, [pc, #16]	@ (800519c <__sinit+0x2c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f5      	bne.n	800517c <__sinit+0xc>
 8005190:	f7ff ffc4 	bl	800511c <global_stdio_init.part.0>
 8005194:	e7f2      	b.n	800517c <__sinit+0xc>
 8005196:	bf00      	nop
 8005198:	080050dd 	.word	0x080050dd
 800519c:	20000448 	.word	0x20000448

080051a0 <_fwalk_sglue>:
 80051a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a4:	4607      	mov	r7, r0
 80051a6:	4688      	mov	r8, r1
 80051a8:	4614      	mov	r4, r2
 80051aa:	2600      	movs	r6, #0
 80051ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051b0:	f1b9 0901 	subs.w	r9, r9, #1
 80051b4:	d505      	bpl.n	80051c2 <_fwalk_sglue+0x22>
 80051b6:	6824      	ldr	r4, [r4, #0]
 80051b8:	2c00      	cmp	r4, #0
 80051ba:	d1f7      	bne.n	80051ac <_fwalk_sglue+0xc>
 80051bc:	4630      	mov	r0, r6
 80051be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c2:	89ab      	ldrh	r3, [r5, #12]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d907      	bls.n	80051d8 <_fwalk_sglue+0x38>
 80051c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051cc:	3301      	adds	r3, #1
 80051ce:	d003      	beq.n	80051d8 <_fwalk_sglue+0x38>
 80051d0:	4629      	mov	r1, r5
 80051d2:	4638      	mov	r0, r7
 80051d4:	47c0      	blx	r8
 80051d6:	4306      	orrs	r6, r0
 80051d8:	3568      	adds	r5, #104	@ 0x68
 80051da:	e7e9      	b.n	80051b0 <_fwalk_sglue+0x10>

080051dc <iprintf>:
 80051dc:	b40f      	push	{r0, r1, r2, r3}
 80051de:	b507      	push	{r0, r1, r2, lr}
 80051e0:	4906      	ldr	r1, [pc, #24]	@ (80051fc <iprintf+0x20>)
 80051e2:	ab04      	add	r3, sp, #16
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ea:	6881      	ldr	r1, [r0, #8]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	f001 fbd7 	bl	80069a0 <_vfiprintf_r>
 80051f2:	b003      	add	sp, #12
 80051f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f8:	b004      	add	sp, #16
 80051fa:	4770      	bx	lr
 80051fc:	20000018 	.word	0x20000018

08005200 <__sread>:
 8005200:	b510      	push	{r4, lr}
 8005202:	460c      	mov	r4, r1
 8005204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005208:	f000 f86c 	bl	80052e4 <_read_r>
 800520c:	2800      	cmp	r0, #0
 800520e:	bfab      	itete	ge
 8005210:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005212:	89a3      	ldrhlt	r3, [r4, #12]
 8005214:	181b      	addge	r3, r3, r0
 8005216:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800521a:	bfac      	ite	ge
 800521c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800521e:	81a3      	strhlt	r3, [r4, #12]
 8005220:	bd10      	pop	{r4, pc}

08005222 <__swrite>:
 8005222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005226:	461f      	mov	r7, r3
 8005228:	898b      	ldrh	r3, [r1, #12]
 800522a:	05db      	lsls	r3, r3, #23
 800522c:	4605      	mov	r5, r0
 800522e:	460c      	mov	r4, r1
 8005230:	4616      	mov	r6, r2
 8005232:	d505      	bpl.n	8005240 <__swrite+0x1e>
 8005234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005238:	2302      	movs	r3, #2
 800523a:	2200      	movs	r2, #0
 800523c:	f000 f840 	bl	80052c0 <_lseek_r>
 8005240:	89a3      	ldrh	r3, [r4, #12]
 8005242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005246:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800524a:	81a3      	strh	r3, [r4, #12]
 800524c:	4632      	mov	r2, r6
 800524e:	463b      	mov	r3, r7
 8005250:	4628      	mov	r0, r5
 8005252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	f000 b857 	b.w	8005308 <_write_r>

0800525a <__sseek>:
 800525a:	b510      	push	{r4, lr}
 800525c:	460c      	mov	r4, r1
 800525e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005262:	f000 f82d 	bl	80052c0 <_lseek_r>
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	bf15      	itete	ne
 800526c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800526e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005272:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005276:	81a3      	strheq	r3, [r4, #12]
 8005278:	bf18      	it	ne
 800527a:	81a3      	strhne	r3, [r4, #12]
 800527c:	bd10      	pop	{r4, pc}

0800527e <__sclose>:
 800527e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005282:	f000 b80d 	b.w	80052a0 <_close_r>

08005286 <memset>:
 8005286:	4402      	add	r2, r0
 8005288:	4603      	mov	r3, r0
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <memset+0xa>
 800528e:	4770      	bx	lr
 8005290:	f803 1b01 	strb.w	r1, [r3], #1
 8005294:	e7f9      	b.n	800528a <memset+0x4>
	...

08005298 <_localeconv_r>:
 8005298:	4800      	ldr	r0, [pc, #0]	@ (800529c <_localeconv_r+0x4>)
 800529a:	4770      	bx	lr
 800529c:	20000158 	.word	0x20000158

080052a0 <_close_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d06      	ldr	r5, [pc, #24]	@ (80052bc <_close_r+0x1c>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fc fa05 	bl	80016ba <_close>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_close_r+0x1a>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_close_r+0x1a>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	2000044c 	.word	0x2000044c

080052c0 <_lseek_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4d07      	ldr	r5, [pc, #28]	@ (80052e0 <_lseek_r+0x20>)
 80052c4:	4604      	mov	r4, r0
 80052c6:	4608      	mov	r0, r1
 80052c8:	4611      	mov	r1, r2
 80052ca:	2200      	movs	r2, #0
 80052cc:	602a      	str	r2, [r5, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f7fc fa1a 	bl	8001708 <_lseek>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_lseek_r+0x1e>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_lseek_r+0x1e>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	2000044c 	.word	0x2000044c

080052e4 <_read_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d07      	ldr	r5, [pc, #28]	@ (8005304 <_read_r+0x20>)
 80052e8:	4604      	mov	r4, r0
 80052ea:	4608      	mov	r0, r1
 80052ec:	4611      	mov	r1, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	602a      	str	r2, [r5, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f7fc f9c4 	bl	8001680 <_read>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d102      	bne.n	8005302 <_read_r+0x1e>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	b103      	cbz	r3, 8005302 <_read_r+0x1e>
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	2000044c 	.word	0x2000044c

08005308 <_write_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4d07      	ldr	r5, [pc, #28]	@ (8005328 <_write_r+0x20>)
 800530c:	4604      	mov	r4, r0
 800530e:	4608      	mov	r0, r1
 8005310:	4611      	mov	r1, r2
 8005312:	2200      	movs	r2, #0
 8005314:	602a      	str	r2, [r5, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f7fc f818 	bl	800134c <_write>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_write_r+0x1e>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_write_r+0x1e>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	2000044c 	.word	0x2000044c

0800532c <__errno>:
 800532c:	4b01      	ldr	r3, [pc, #4]	@ (8005334 <__errno+0x8>)
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000018 	.word	0x20000018

08005338 <__libc_init_array>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	4d0d      	ldr	r5, [pc, #52]	@ (8005370 <__libc_init_array+0x38>)
 800533c:	4c0d      	ldr	r4, [pc, #52]	@ (8005374 <__libc_init_array+0x3c>)
 800533e:	1b64      	subs	r4, r4, r5
 8005340:	10a4      	asrs	r4, r4, #2
 8005342:	2600      	movs	r6, #0
 8005344:	42a6      	cmp	r6, r4
 8005346:	d109      	bne.n	800535c <__libc_init_array+0x24>
 8005348:	4d0b      	ldr	r5, [pc, #44]	@ (8005378 <__libc_init_array+0x40>)
 800534a:	4c0c      	ldr	r4, [pc, #48]	@ (800537c <__libc_init_array+0x44>)
 800534c:	f001 fec4 	bl	80070d8 <_init>
 8005350:	1b64      	subs	r4, r4, r5
 8005352:	10a4      	asrs	r4, r4, #2
 8005354:	2600      	movs	r6, #0
 8005356:	42a6      	cmp	r6, r4
 8005358:	d105      	bne.n	8005366 <__libc_init_array+0x2e>
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005360:	4798      	blx	r3
 8005362:	3601      	adds	r6, #1
 8005364:	e7ee      	b.n	8005344 <__libc_init_array+0xc>
 8005366:	f855 3b04 	ldr.w	r3, [r5], #4
 800536a:	4798      	blx	r3
 800536c:	3601      	adds	r6, #1
 800536e:	e7f2      	b.n	8005356 <__libc_init_array+0x1e>
 8005370:	08007524 	.word	0x08007524
 8005374:	08007524 	.word	0x08007524
 8005378:	08007524 	.word	0x08007524
 800537c:	08007528 	.word	0x08007528

08005380 <__retarget_lock_init_recursive>:
 8005380:	4770      	bx	lr

08005382 <__retarget_lock_acquire_recursive>:
 8005382:	4770      	bx	lr

08005384 <__retarget_lock_release_recursive>:
 8005384:	4770      	bx	lr

08005386 <memcpy>:
 8005386:	440a      	add	r2, r1
 8005388:	4291      	cmp	r1, r2
 800538a:	f100 33ff 	add.w	r3, r0, #4294967295
 800538e:	d100      	bne.n	8005392 <memcpy+0xc>
 8005390:	4770      	bx	lr
 8005392:	b510      	push	{r4, lr}
 8005394:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005398:	f803 4f01 	strb.w	r4, [r3, #1]!
 800539c:	4291      	cmp	r1, r2
 800539e:	d1f9      	bne.n	8005394 <memcpy+0xe>
 80053a0:	bd10      	pop	{r4, pc}

080053a2 <quorem>:
 80053a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a6:	6903      	ldr	r3, [r0, #16]
 80053a8:	690c      	ldr	r4, [r1, #16]
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	4607      	mov	r7, r0
 80053ae:	db7e      	blt.n	80054ae <quorem+0x10c>
 80053b0:	3c01      	subs	r4, #1
 80053b2:	f101 0814 	add.w	r8, r1, #20
 80053b6:	00a3      	lsls	r3, r4, #2
 80053b8:	f100 0514 	add.w	r5, r0, #20
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053cc:	3301      	adds	r3, #1
 80053ce:	429a      	cmp	r2, r3
 80053d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80053d8:	d32e      	bcc.n	8005438 <quorem+0x96>
 80053da:	f04f 0a00 	mov.w	sl, #0
 80053de:	46c4      	mov	ip, r8
 80053e0:	46ae      	mov	lr, r5
 80053e2:	46d3      	mov	fp, sl
 80053e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80053e8:	b298      	uxth	r0, r3
 80053ea:	fb06 a000 	mla	r0, r6, r0, sl
 80053ee:	0c02      	lsrs	r2, r0, #16
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	fb06 2303 	mla	r3, r6, r3, r2
 80053f6:	f8de 2000 	ldr.w	r2, [lr]
 80053fa:	b280      	uxth	r0, r0
 80053fc:	b292      	uxth	r2, r2
 80053fe:	1a12      	subs	r2, r2, r0
 8005400:	445a      	add	r2, fp
 8005402:	f8de 0000 	ldr.w	r0, [lr]
 8005406:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800540a:	b29b      	uxth	r3, r3
 800540c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005410:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005414:	b292      	uxth	r2, r2
 8005416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800541a:	45e1      	cmp	r9, ip
 800541c:	f84e 2b04 	str.w	r2, [lr], #4
 8005420:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005424:	d2de      	bcs.n	80053e4 <quorem+0x42>
 8005426:	9b00      	ldr	r3, [sp, #0]
 8005428:	58eb      	ldr	r3, [r5, r3]
 800542a:	b92b      	cbnz	r3, 8005438 <quorem+0x96>
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	3b04      	subs	r3, #4
 8005430:	429d      	cmp	r5, r3
 8005432:	461a      	mov	r2, r3
 8005434:	d32f      	bcc.n	8005496 <quorem+0xf4>
 8005436:	613c      	str	r4, [r7, #16]
 8005438:	4638      	mov	r0, r7
 800543a:	f001 f97f 	bl	800673c <__mcmp>
 800543e:	2800      	cmp	r0, #0
 8005440:	db25      	blt.n	800548e <quorem+0xec>
 8005442:	4629      	mov	r1, r5
 8005444:	2000      	movs	r0, #0
 8005446:	f858 2b04 	ldr.w	r2, [r8], #4
 800544a:	f8d1 c000 	ldr.w	ip, [r1]
 800544e:	fa1f fe82 	uxth.w	lr, r2
 8005452:	fa1f f38c 	uxth.w	r3, ip
 8005456:	eba3 030e 	sub.w	r3, r3, lr
 800545a:	4403      	add	r3, r0
 800545c:	0c12      	lsrs	r2, r2, #16
 800545e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005462:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005466:	b29b      	uxth	r3, r3
 8005468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800546c:	45c1      	cmp	r9, r8
 800546e:	f841 3b04 	str.w	r3, [r1], #4
 8005472:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005476:	d2e6      	bcs.n	8005446 <quorem+0xa4>
 8005478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800547c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005480:	b922      	cbnz	r2, 800548c <quorem+0xea>
 8005482:	3b04      	subs	r3, #4
 8005484:	429d      	cmp	r5, r3
 8005486:	461a      	mov	r2, r3
 8005488:	d30b      	bcc.n	80054a2 <quorem+0x100>
 800548a:	613c      	str	r4, [r7, #16]
 800548c:	3601      	adds	r6, #1
 800548e:	4630      	mov	r0, r6
 8005490:	b003      	add	sp, #12
 8005492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	3b04      	subs	r3, #4
 800549a:	2a00      	cmp	r2, #0
 800549c:	d1cb      	bne.n	8005436 <quorem+0x94>
 800549e:	3c01      	subs	r4, #1
 80054a0:	e7c6      	b.n	8005430 <quorem+0x8e>
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	3b04      	subs	r3, #4
 80054a6:	2a00      	cmp	r2, #0
 80054a8:	d1ef      	bne.n	800548a <quorem+0xe8>
 80054aa:	3c01      	subs	r4, #1
 80054ac:	e7ea      	b.n	8005484 <quorem+0xe2>
 80054ae:	2000      	movs	r0, #0
 80054b0:	e7ee      	b.n	8005490 <quorem+0xee>
 80054b2:	0000      	movs	r0, r0
 80054b4:	0000      	movs	r0, r0
	...

080054b8 <_dtoa_r>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	69c7      	ldr	r7, [r0, #28]
 80054be:	b097      	sub	sp, #92	@ 0x5c
 80054c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80054c4:	ec55 4b10 	vmov	r4, r5, d0
 80054c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80054ca:	9107      	str	r1, [sp, #28]
 80054cc:	4681      	mov	r9, r0
 80054ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80054d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80054d2:	b97f      	cbnz	r7, 80054f4 <_dtoa_r+0x3c>
 80054d4:	2010      	movs	r0, #16
 80054d6:	f000 fe09 	bl	80060ec <malloc>
 80054da:	4602      	mov	r2, r0
 80054dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80054e0:	b920      	cbnz	r0, 80054ec <_dtoa_r+0x34>
 80054e2:	4ba9      	ldr	r3, [pc, #676]	@ (8005788 <_dtoa_r+0x2d0>)
 80054e4:	21ef      	movs	r1, #239	@ 0xef
 80054e6:	48a9      	ldr	r0, [pc, #676]	@ (800578c <_dtoa_r+0x2d4>)
 80054e8:	f001 fcc2 	bl	8006e70 <__assert_func>
 80054ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80054f0:	6007      	str	r7, [r0, #0]
 80054f2:	60c7      	str	r7, [r0, #12]
 80054f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	b159      	cbz	r1, 8005514 <_dtoa_r+0x5c>
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	604a      	str	r2, [r1, #4]
 8005500:	2301      	movs	r3, #1
 8005502:	4093      	lsls	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
 8005506:	4648      	mov	r0, r9
 8005508:	f000 fee6 	bl	80062d8 <_Bfree>
 800550c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	1e2b      	subs	r3, r5, #0
 8005516:	bfb9      	ittee	lt
 8005518:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800551c:	9305      	strlt	r3, [sp, #20]
 800551e:	2300      	movge	r3, #0
 8005520:	6033      	strge	r3, [r6, #0]
 8005522:	9f05      	ldr	r7, [sp, #20]
 8005524:	4b9a      	ldr	r3, [pc, #616]	@ (8005790 <_dtoa_r+0x2d8>)
 8005526:	bfbc      	itt	lt
 8005528:	2201      	movlt	r2, #1
 800552a:	6032      	strlt	r2, [r6, #0]
 800552c:	43bb      	bics	r3, r7
 800552e:	d112      	bne.n	8005556 <_dtoa_r+0x9e>
 8005530:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005532:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800553c:	4323      	orrs	r3, r4
 800553e:	f000 855a 	beq.w	8005ff6 <_dtoa_r+0xb3e>
 8005542:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005544:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80057a4 <_dtoa_r+0x2ec>
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 855c 	beq.w	8006006 <_dtoa_r+0xb4e>
 800554e:	f10a 0303 	add.w	r3, sl, #3
 8005552:	f000 bd56 	b.w	8006002 <_dtoa_r+0xb4a>
 8005556:	ed9d 7b04 	vldr	d7, [sp, #16]
 800555a:	2200      	movs	r2, #0
 800555c:	ec51 0b17 	vmov	r0, r1, d7
 8005560:	2300      	movs	r3, #0
 8005562:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005566:	f7fb fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800556a:	4680      	mov	r8, r0
 800556c:	b158      	cbz	r0, 8005586 <_dtoa_r+0xce>
 800556e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005570:	2301      	movs	r3, #1
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005576:	b113      	cbz	r3, 800557e <_dtoa_r+0xc6>
 8005578:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800557a:	4b86      	ldr	r3, [pc, #536]	@ (8005794 <_dtoa_r+0x2dc>)
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80057a8 <_dtoa_r+0x2f0>
 8005582:	f000 bd40 	b.w	8006006 <_dtoa_r+0xb4e>
 8005586:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800558a:	aa14      	add	r2, sp, #80	@ 0x50
 800558c:	a915      	add	r1, sp, #84	@ 0x54
 800558e:	4648      	mov	r0, r9
 8005590:	f001 f984 	bl	800689c <__d2b>
 8005594:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005598:	9002      	str	r0, [sp, #8]
 800559a:	2e00      	cmp	r6, #0
 800559c:	d078      	beq.n	8005690 <_dtoa_r+0x1d8>
 800559e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80055a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80055b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80055b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80055b8:	4619      	mov	r1, r3
 80055ba:	2200      	movs	r2, #0
 80055bc:	4b76      	ldr	r3, [pc, #472]	@ (8005798 <_dtoa_r+0x2e0>)
 80055be:	f7fa fe6b 	bl	8000298 <__aeabi_dsub>
 80055c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005770 <_dtoa_r+0x2b8>)
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f7fb f81e 	bl	8000608 <__aeabi_dmul>
 80055cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005778 <_dtoa_r+0x2c0>)
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f7fa fe63 	bl	800029c <__adddf3>
 80055d6:	4604      	mov	r4, r0
 80055d8:	4630      	mov	r0, r6
 80055da:	460d      	mov	r5, r1
 80055dc:	f7fa ffaa 	bl	8000534 <__aeabi_i2d>
 80055e0:	a367      	add	r3, pc, #412	@ (adr r3, 8005780 <_dtoa_r+0x2c8>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fb f80f 	bl	8000608 <__aeabi_dmul>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4620      	mov	r0, r4
 80055f0:	4629      	mov	r1, r5
 80055f2:	f7fa fe53 	bl	800029c <__adddf3>
 80055f6:	4604      	mov	r4, r0
 80055f8:	460d      	mov	r5, r1
 80055fa:	f7fb fab5 	bl	8000b68 <__aeabi_d2iz>
 80055fe:	2200      	movs	r2, #0
 8005600:	4607      	mov	r7, r0
 8005602:	2300      	movs	r3, #0
 8005604:	4620      	mov	r0, r4
 8005606:	4629      	mov	r1, r5
 8005608:	f7fb fa70 	bl	8000aec <__aeabi_dcmplt>
 800560c:	b140      	cbz	r0, 8005620 <_dtoa_r+0x168>
 800560e:	4638      	mov	r0, r7
 8005610:	f7fa ff90 	bl	8000534 <__aeabi_i2d>
 8005614:	4622      	mov	r2, r4
 8005616:	462b      	mov	r3, r5
 8005618:	f7fb fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800561c:	b900      	cbnz	r0, 8005620 <_dtoa_r+0x168>
 800561e:	3f01      	subs	r7, #1
 8005620:	2f16      	cmp	r7, #22
 8005622:	d852      	bhi.n	80056ca <_dtoa_r+0x212>
 8005624:	4b5d      	ldr	r3, [pc, #372]	@ (800579c <_dtoa_r+0x2e4>)
 8005626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005632:	f7fb fa5b 	bl	8000aec <__aeabi_dcmplt>
 8005636:	2800      	cmp	r0, #0
 8005638:	d049      	beq.n	80056ce <_dtoa_r+0x216>
 800563a:	3f01      	subs	r7, #1
 800563c:	2300      	movs	r3, #0
 800563e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005640:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005642:	1b9b      	subs	r3, r3, r6
 8005644:	1e5a      	subs	r2, r3, #1
 8005646:	bf45      	ittet	mi
 8005648:	f1c3 0301 	rsbmi	r3, r3, #1
 800564c:	9300      	strmi	r3, [sp, #0]
 800564e:	2300      	movpl	r3, #0
 8005650:	2300      	movmi	r3, #0
 8005652:	9206      	str	r2, [sp, #24]
 8005654:	bf54      	ite	pl
 8005656:	9300      	strpl	r3, [sp, #0]
 8005658:	9306      	strmi	r3, [sp, #24]
 800565a:	2f00      	cmp	r7, #0
 800565c:	db39      	blt.n	80056d2 <_dtoa_r+0x21a>
 800565e:	9b06      	ldr	r3, [sp, #24]
 8005660:	970d      	str	r7, [sp, #52]	@ 0x34
 8005662:	443b      	add	r3, r7
 8005664:	9306      	str	r3, [sp, #24]
 8005666:	2300      	movs	r3, #0
 8005668:	9308      	str	r3, [sp, #32]
 800566a:	9b07      	ldr	r3, [sp, #28]
 800566c:	2b09      	cmp	r3, #9
 800566e:	d863      	bhi.n	8005738 <_dtoa_r+0x280>
 8005670:	2b05      	cmp	r3, #5
 8005672:	bfc4      	itt	gt
 8005674:	3b04      	subgt	r3, #4
 8005676:	9307      	strgt	r3, [sp, #28]
 8005678:	9b07      	ldr	r3, [sp, #28]
 800567a:	f1a3 0302 	sub.w	r3, r3, #2
 800567e:	bfcc      	ite	gt
 8005680:	2400      	movgt	r4, #0
 8005682:	2401      	movle	r4, #1
 8005684:	2b03      	cmp	r3, #3
 8005686:	d863      	bhi.n	8005750 <_dtoa_r+0x298>
 8005688:	e8df f003 	tbb	[pc, r3]
 800568c:	2b375452 	.word	0x2b375452
 8005690:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005694:	441e      	add	r6, r3
 8005696:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800569a:	2b20      	cmp	r3, #32
 800569c:	bfc1      	itttt	gt
 800569e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80056a2:	409f      	lslgt	r7, r3
 80056a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80056a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80056ac:	bfd6      	itet	le
 80056ae:	f1c3 0320 	rsble	r3, r3, #32
 80056b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80056b6:	fa04 f003 	lslle.w	r0, r4, r3
 80056ba:	f7fa ff2b 	bl	8000514 <__aeabi_ui2d>
 80056be:	2201      	movs	r2, #1
 80056c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80056c4:	3e01      	subs	r6, #1
 80056c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80056c8:	e776      	b.n	80055b8 <_dtoa_r+0x100>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e7b7      	b.n	800563e <_dtoa_r+0x186>
 80056ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80056d0:	e7b6      	b.n	8005640 <_dtoa_r+0x188>
 80056d2:	9b00      	ldr	r3, [sp, #0]
 80056d4:	1bdb      	subs	r3, r3, r7
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	427b      	negs	r3, r7
 80056da:	9308      	str	r3, [sp, #32]
 80056dc:	2300      	movs	r3, #0
 80056de:	930d      	str	r3, [sp, #52]	@ 0x34
 80056e0:	e7c3      	b.n	800566a <_dtoa_r+0x1b2>
 80056e2:	2301      	movs	r3, #1
 80056e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056e8:	eb07 0b03 	add.w	fp, r7, r3
 80056ec:	f10b 0301 	add.w	r3, fp, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	9303      	str	r3, [sp, #12]
 80056f4:	bfb8      	it	lt
 80056f6:	2301      	movlt	r3, #1
 80056f8:	e006      	b.n	8005708 <_dtoa_r+0x250>
 80056fa:	2301      	movs	r3, #1
 80056fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80056fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005700:	2b00      	cmp	r3, #0
 8005702:	dd28      	ble.n	8005756 <_dtoa_r+0x29e>
 8005704:	469b      	mov	fp, r3
 8005706:	9303      	str	r3, [sp, #12]
 8005708:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800570c:	2100      	movs	r1, #0
 800570e:	2204      	movs	r2, #4
 8005710:	f102 0514 	add.w	r5, r2, #20
 8005714:	429d      	cmp	r5, r3
 8005716:	d926      	bls.n	8005766 <_dtoa_r+0x2ae>
 8005718:	6041      	str	r1, [r0, #4]
 800571a:	4648      	mov	r0, r9
 800571c:	f000 fd9c 	bl	8006258 <_Balloc>
 8005720:	4682      	mov	sl, r0
 8005722:	2800      	cmp	r0, #0
 8005724:	d142      	bne.n	80057ac <_dtoa_r+0x2f4>
 8005726:	4b1e      	ldr	r3, [pc, #120]	@ (80057a0 <_dtoa_r+0x2e8>)
 8005728:	4602      	mov	r2, r0
 800572a:	f240 11af 	movw	r1, #431	@ 0x1af
 800572e:	e6da      	b.n	80054e6 <_dtoa_r+0x2e>
 8005730:	2300      	movs	r3, #0
 8005732:	e7e3      	b.n	80056fc <_dtoa_r+0x244>
 8005734:	2300      	movs	r3, #0
 8005736:	e7d5      	b.n	80056e4 <_dtoa_r+0x22c>
 8005738:	2401      	movs	r4, #1
 800573a:	2300      	movs	r3, #0
 800573c:	9307      	str	r3, [sp, #28]
 800573e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005740:	f04f 3bff 	mov.w	fp, #4294967295
 8005744:	2200      	movs	r2, #0
 8005746:	f8cd b00c 	str.w	fp, [sp, #12]
 800574a:	2312      	movs	r3, #18
 800574c:	920c      	str	r2, [sp, #48]	@ 0x30
 800574e:	e7db      	b.n	8005708 <_dtoa_r+0x250>
 8005750:	2301      	movs	r3, #1
 8005752:	9309      	str	r3, [sp, #36]	@ 0x24
 8005754:	e7f4      	b.n	8005740 <_dtoa_r+0x288>
 8005756:	f04f 0b01 	mov.w	fp, #1
 800575a:	f8cd b00c 	str.w	fp, [sp, #12]
 800575e:	465b      	mov	r3, fp
 8005760:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005764:	e7d0      	b.n	8005708 <_dtoa_r+0x250>
 8005766:	3101      	adds	r1, #1
 8005768:	0052      	lsls	r2, r2, #1
 800576a:	e7d1      	b.n	8005710 <_dtoa_r+0x258>
 800576c:	f3af 8000 	nop.w
 8005770:	636f4361 	.word	0x636f4361
 8005774:	3fd287a7 	.word	0x3fd287a7
 8005778:	8b60c8b3 	.word	0x8b60c8b3
 800577c:	3fc68a28 	.word	0x3fc68a28
 8005780:	509f79fb 	.word	0x509f79fb
 8005784:	3fd34413 	.word	0x3fd34413
 8005788:	080071e5 	.word	0x080071e5
 800578c:	080071fc 	.word	0x080071fc
 8005790:	7ff00000 	.word	0x7ff00000
 8005794:	080071b5 	.word	0x080071b5
 8005798:	3ff80000 	.word	0x3ff80000
 800579c:	08007350 	.word	0x08007350
 80057a0:	08007254 	.word	0x08007254
 80057a4:	080071e1 	.word	0x080071e1
 80057a8:	080071b4 	.word	0x080071b4
 80057ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80057b0:	6018      	str	r0, [r3, #0]
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	2b0e      	cmp	r3, #14
 80057b6:	f200 80a1 	bhi.w	80058fc <_dtoa_r+0x444>
 80057ba:	2c00      	cmp	r4, #0
 80057bc:	f000 809e 	beq.w	80058fc <_dtoa_r+0x444>
 80057c0:	2f00      	cmp	r7, #0
 80057c2:	dd33      	ble.n	800582c <_dtoa_r+0x374>
 80057c4:	4b9c      	ldr	r3, [pc, #624]	@ (8005a38 <_dtoa_r+0x580>)
 80057c6:	f007 020f 	and.w	r2, r7, #15
 80057ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057ce:	ed93 7b00 	vldr	d7, [r3]
 80057d2:	05f8      	lsls	r0, r7, #23
 80057d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80057d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80057dc:	d516      	bpl.n	800580c <_dtoa_r+0x354>
 80057de:	4b97      	ldr	r3, [pc, #604]	@ (8005a3c <_dtoa_r+0x584>)
 80057e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057e8:	f7fb f838 	bl	800085c <__aeabi_ddiv>
 80057ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057f0:	f004 040f 	and.w	r4, r4, #15
 80057f4:	2603      	movs	r6, #3
 80057f6:	4d91      	ldr	r5, [pc, #580]	@ (8005a3c <_dtoa_r+0x584>)
 80057f8:	b954      	cbnz	r4, 8005810 <_dtoa_r+0x358>
 80057fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80057fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005802:	f7fb f82b 	bl	800085c <__aeabi_ddiv>
 8005806:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800580a:	e028      	b.n	800585e <_dtoa_r+0x3a6>
 800580c:	2602      	movs	r6, #2
 800580e:	e7f2      	b.n	80057f6 <_dtoa_r+0x33e>
 8005810:	07e1      	lsls	r1, r4, #31
 8005812:	d508      	bpl.n	8005826 <_dtoa_r+0x36e>
 8005814:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800581c:	f7fa fef4 	bl	8000608 <__aeabi_dmul>
 8005820:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005824:	3601      	adds	r6, #1
 8005826:	1064      	asrs	r4, r4, #1
 8005828:	3508      	adds	r5, #8
 800582a:	e7e5      	b.n	80057f8 <_dtoa_r+0x340>
 800582c:	f000 80af 	beq.w	800598e <_dtoa_r+0x4d6>
 8005830:	427c      	negs	r4, r7
 8005832:	4b81      	ldr	r3, [pc, #516]	@ (8005a38 <_dtoa_r+0x580>)
 8005834:	4d81      	ldr	r5, [pc, #516]	@ (8005a3c <_dtoa_r+0x584>)
 8005836:	f004 020f 	and.w	r2, r4, #15
 800583a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005846:	f7fa fedf 	bl	8000608 <__aeabi_dmul>
 800584a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800584e:	1124      	asrs	r4, r4, #4
 8005850:	2300      	movs	r3, #0
 8005852:	2602      	movs	r6, #2
 8005854:	2c00      	cmp	r4, #0
 8005856:	f040 808f 	bne.w	8005978 <_dtoa_r+0x4c0>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1d3      	bne.n	8005806 <_dtoa_r+0x34e>
 800585e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005860:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8094 	beq.w	8005992 <_dtoa_r+0x4da>
 800586a:	4b75      	ldr	r3, [pc, #468]	@ (8005a40 <_dtoa_r+0x588>)
 800586c:	2200      	movs	r2, #0
 800586e:	4620      	mov	r0, r4
 8005870:	4629      	mov	r1, r5
 8005872:	f7fb f93b 	bl	8000aec <__aeabi_dcmplt>
 8005876:	2800      	cmp	r0, #0
 8005878:	f000 808b 	beq.w	8005992 <_dtoa_r+0x4da>
 800587c:	9b03      	ldr	r3, [sp, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8087 	beq.w	8005992 <_dtoa_r+0x4da>
 8005884:	f1bb 0f00 	cmp.w	fp, #0
 8005888:	dd34      	ble.n	80058f4 <_dtoa_r+0x43c>
 800588a:	4620      	mov	r0, r4
 800588c:	4b6d      	ldr	r3, [pc, #436]	@ (8005a44 <_dtoa_r+0x58c>)
 800588e:	2200      	movs	r2, #0
 8005890:	4629      	mov	r1, r5
 8005892:	f7fa feb9 	bl	8000608 <__aeabi_dmul>
 8005896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800589a:	f107 38ff 	add.w	r8, r7, #4294967295
 800589e:	3601      	adds	r6, #1
 80058a0:	465c      	mov	r4, fp
 80058a2:	4630      	mov	r0, r6
 80058a4:	f7fa fe46 	bl	8000534 <__aeabi_i2d>
 80058a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ac:	f7fa feac 	bl	8000608 <__aeabi_dmul>
 80058b0:	4b65      	ldr	r3, [pc, #404]	@ (8005a48 <_dtoa_r+0x590>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	f7fa fcf2 	bl	800029c <__adddf3>
 80058b8:	4605      	mov	r5, r0
 80058ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80058be:	2c00      	cmp	r4, #0
 80058c0:	d16a      	bne.n	8005998 <_dtoa_r+0x4e0>
 80058c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c6:	4b61      	ldr	r3, [pc, #388]	@ (8005a4c <_dtoa_r+0x594>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	f7fa fce5 	bl	8000298 <__aeabi_dsub>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058d6:	462a      	mov	r2, r5
 80058d8:	4633      	mov	r3, r6
 80058da:	f7fb f925 	bl	8000b28 <__aeabi_dcmpgt>
 80058de:	2800      	cmp	r0, #0
 80058e0:	f040 8298 	bne.w	8005e14 <_dtoa_r+0x95c>
 80058e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e8:	462a      	mov	r2, r5
 80058ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80058ee:	f7fb f8fd 	bl	8000aec <__aeabi_dcmplt>
 80058f2:	bb38      	cbnz	r0, 8005944 <_dtoa_r+0x48c>
 80058f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80058f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f2c0 8157 	blt.w	8005bb2 <_dtoa_r+0x6fa>
 8005904:	2f0e      	cmp	r7, #14
 8005906:	f300 8154 	bgt.w	8005bb2 <_dtoa_r+0x6fa>
 800590a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a38 <_dtoa_r+0x580>)
 800590c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005910:	ed93 7b00 	vldr	d7, [r3]
 8005914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005916:	2b00      	cmp	r3, #0
 8005918:	ed8d 7b00 	vstr	d7, [sp]
 800591c:	f280 80e5 	bge.w	8005aea <_dtoa_r+0x632>
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f300 80e1 	bgt.w	8005aea <_dtoa_r+0x632>
 8005928:	d10c      	bne.n	8005944 <_dtoa_r+0x48c>
 800592a:	4b48      	ldr	r3, [pc, #288]	@ (8005a4c <_dtoa_r+0x594>)
 800592c:	2200      	movs	r2, #0
 800592e:	ec51 0b17 	vmov	r0, r1, d7
 8005932:	f7fa fe69 	bl	8000608 <__aeabi_dmul>
 8005936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800593a:	f7fb f8eb 	bl	8000b14 <__aeabi_dcmpge>
 800593e:	2800      	cmp	r0, #0
 8005940:	f000 8266 	beq.w	8005e10 <_dtoa_r+0x958>
 8005944:	2400      	movs	r4, #0
 8005946:	4625      	mov	r5, r4
 8005948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800594a:	4656      	mov	r6, sl
 800594c:	ea6f 0803 	mvn.w	r8, r3
 8005950:	2700      	movs	r7, #0
 8005952:	4621      	mov	r1, r4
 8005954:	4648      	mov	r0, r9
 8005956:	f000 fcbf 	bl	80062d8 <_Bfree>
 800595a:	2d00      	cmp	r5, #0
 800595c:	f000 80bd 	beq.w	8005ada <_dtoa_r+0x622>
 8005960:	b12f      	cbz	r7, 800596e <_dtoa_r+0x4b6>
 8005962:	42af      	cmp	r7, r5
 8005964:	d003      	beq.n	800596e <_dtoa_r+0x4b6>
 8005966:	4639      	mov	r1, r7
 8005968:	4648      	mov	r0, r9
 800596a:	f000 fcb5 	bl	80062d8 <_Bfree>
 800596e:	4629      	mov	r1, r5
 8005970:	4648      	mov	r0, r9
 8005972:	f000 fcb1 	bl	80062d8 <_Bfree>
 8005976:	e0b0      	b.n	8005ada <_dtoa_r+0x622>
 8005978:	07e2      	lsls	r2, r4, #31
 800597a:	d505      	bpl.n	8005988 <_dtoa_r+0x4d0>
 800597c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005980:	f7fa fe42 	bl	8000608 <__aeabi_dmul>
 8005984:	3601      	adds	r6, #1
 8005986:	2301      	movs	r3, #1
 8005988:	1064      	asrs	r4, r4, #1
 800598a:	3508      	adds	r5, #8
 800598c:	e762      	b.n	8005854 <_dtoa_r+0x39c>
 800598e:	2602      	movs	r6, #2
 8005990:	e765      	b.n	800585e <_dtoa_r+0x3a6>
 8005992:	9c03      	ldr	r4, [sp, #12]
 8005994:	46b8      	mov	r8, r7
 8005996:	e784      	b.n	80058a2 <_dtoa_r+0x3ea>
 8005998:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <_dtoa_r+0x580>)
 800599a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800599c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059a4:	4454      	add	r4, sl
 80059a6:	2900      	cmp	r1, #0
 80059a8:	d054      	beq.n	8005a54 <_dtoa_r+0x59c>
 80059aa:	4929      	ldr	r1, [pc, #164]	@ (8005a50 <_dtoa_r+0x598>)
 80059ac:	2000      	movs	r0, #0
 80059ae:	f7fa ff55 	bl	800085c <__aeabi_ddiv>
 80059b2:	4633      	mov	r3, r6
 80059b4:	462a      	mov	r2, r5
 80059b6:	f7fa fc6f 	bl	8000298 <__aeabi_dsub>
 80059ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059be:	4656      	mov	r6, sl
 80059c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c4:	f7fb f8d0 	bl	8000b68 <__aeabi_d2iz>
 80059c8:	4605      	mov	r5, r0
 80059ca:	f7fa fdb3 	bl	8000534 <__aeabi_i2d>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d6:	f7fa fc5f 	bl	8000298 <__aeabi_dsub>
 80059da:	3530      	adds	r5, #48	@ 0x30
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059e4:	f806 5b01 	strb.w	r5, [r6], #1
 80059e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059ec:	f7fb f87e 	bl	8000aec <__aeabi_dcmplt>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d172      	bne.n	8005ada <_dtoa_r+0x622>
 80059f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f8:	4911      	ldr	r1, [pc, #68]	@ (8005a40 <_dtoa_r+0x588>)
 80059fa:	2000      	movs	r0, #0
 80059fc:	f7fa fc4c 	bl	8000298 <__aeabi_dsub>
 8005a00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a04:	f7fb f872 	bl	8000aec <__aeabi_dcmplt>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	f040 80b4 	bne.w	8005b76 <_dtoa_r+0x6be>
 8005a0e:	42a6      	cmp	r6, r4
 8005a10:	f43f af70 	beq.w	80058f4 <_dtoa_r+0x43c>
 8005a14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a18:	4b0a      	ldr	r3, [pc, #40]	@ (8005a44 <_dtoa_r+0x58c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f7fa fdf4 	bl	8000608 <__aeabi_dmul>
 8005a20:	4b08      	ldr	r3, [pc, #32]	@ (8005a44 <_dtoa_r+0x58c>)
 8005a22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a26:	2200      	movs	r2, #0
 8005a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a2c:	f7fa fdec 	bl	8000608 <__aeabi_dmul>
 8005a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a34:	e7c4      	b.n	80059c0 <_dtoa_r+0x508>
 8005a36:	bf00      	nop
 8005a38:	08007350 	.word	0x08007350
 8005a3c:	08007328 	.word	0x08007328
 8005a40:	3ff00000 	.word	0x3ff00000
 8005a44:	40240000 	.word	0x40240000
 8005a48:	401c0000 	.word	0x401c0000
 8005a4c:	40140000 	.word	0x40140000
 8005a50:	3fe00000 	.word	0x3fe00000
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7fa fdd6 	bl	8000608 <__aeabi_dmul>
 8005a5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a60:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005a62:	4656      	mov	r6, sl
 8005a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a68:	f7fb f87e 	bl	8000b68 <__aeabi_d2iz>
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	f7fa fd61 	bl	8000534 <__aeabi_i2d>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a7a:	f7fa fc0d 	bl	8000298 <__aeabi_dsub>
 8005a7e:	3530      	adds	r5, #48	@ 0x30
 8005a80:	f806 5b01 	strb.w	r5, [r6], #1
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	d124      	bne.n	8005ade <_dtoa_r+0x626>
 8005a94:	4baf      	ldr	r3, [pc, #700]	@ (8005d54 <_dtoa_r+0x89c>)
 8005a96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a9a:	f7fa fbff 	bl	800029c <__adddf3>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa6:	f7fb f83f 	bl	8000b28 <__aeabi_dcmpgt>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d163      	bne.n	8005b76 <_dtoa_r+0x6be>
 8005aae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005ab2:	49a8      	ldr	r1, [pc, #672]	@ (8005d54 <_dtoa_r+0x89c>)
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f7fa fbef 	bl	8000298 <__aeabi_dsub>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ac2:	f7fb f813 	bl	8000aec <__aeabi_dcmplt>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	f43f af14 	beq.w	80058f4 <_dtoa_r+0x43c>
 8005acc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005ace:	1e73      	subs	r3, r6, #1
 8005ad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ad2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ad6:	2b30      	cmp	r3, #48	@ 0x30
 8005ad8:	d0f8      	beq.n	8005acc <_dtoa_r+0x614>
 8005ada:	4647      	mov	r7, r8
 8005adc:	e03b      	b.n	8005b56 <_dtoa_r+0x69e>
 8005ade:	4b9e      	ldr	r3, [pc, #632]	@ (8005d58 <_dtoa_r+0x8a0>)
 8005ae0:	f7fa fd92 	bl	8000608 <__aeabi_dmul>
 8005ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ae8:	e7bc      	b.n	8005a64 <_dtoa_r+0x5ac>
 8005aea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005aee:	4656      	mov	r6, sl
 8005af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005af4:	4620      	mov	r0, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	f7fa feb0 	bl	800085c <__aeabi_ddiv>
 8005afc:	f7fb f834 	bl	8000b68 <__aeabi_d2iz>
 8005b00:	4680      	mov	r8, r0
 8005b02:	f7fa fd17 	bl	8000534 <__aeabi_i2d>
 8005b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b0a:	f7fa fd7d 	bl	8000608 <__aeabi_dmul>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4620      	mov	r0, r4
 8005b14:	4629      	mov	r1, r5
 8005b16:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b1a:	f7fa fbbd 	bl	8000298 <__aeabi_dsub>
 8005b1e:	f806 4b01 	strb.w	r4, [r6], #1
 8005b22:	9d03      	ldr	r5, [sp, #12]
 8005b24:	eba6 040a 	sub.w	r4, r6, sl
 8005b28:	42a5      	cmp	r5, r4
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	d133      	bne.n	8005b98 <_dtoa_r+0x6e0>
 8005b30:	f7fa fbb4 	bl	800029c <__adddf3>
 8005b34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b38:	4604      	mov	r4, r0
 8005b3a:	460d      	mov	r5, r1
 8005b3c:	f7fa fff4 	bl	8000b28 <__aeabi_dcmpgt>
 8005b40:	b9c0      	cbnz	r0, 8005b74 <_dtoa_r+0x6bc>
 8005b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b4e:	b110      	cbz	r0, 8005b56 <_dtoa_r+0x69e>
 8005b50:	f018 0f01 	tst.w	r8, #1
 8005b54:	d10e      	bne.n	8005b74 <_dtoa_r+0x6bc>
 8005b56:	9902      	ldr	r1, [sp, #8]
 8005b58:	4648      	mov	r0, r9
 8005b5a:	f000 fbbd 	bl	80062d8 <_Bfree>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	7033      	strb	r3, [r6, #0]
 8005b62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b64:	3701      	adds	r7, #1
 8005b66:	601f      	str	r7, [r3, #0]
 8005b68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 824b 	beq.w	8006006 <_dtoa_r+0xb4e>
 8005b70:	601e      	str	r6, [r3, #0]
 8005b72:	e248      	b.n	8006006 <_dtoa_r+0xb4e>
 8005b74:	46b8      	mov	r8, r7
 8005b76:	4633      	mov	r3, r6
 8005b78:	461e      	mov	r6, r3
 8005b7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b7e:	2a39      	cmp	r2, #57	@ 0x39
 8005b80:	d106      	bne.n	8005b90 <_dtoa_r+0x6d8>
 8005b82:	459a      	cmp	sl, r3
 8005b84:	d1f8      	bne.n	8005b78 <_dtoa_r+0x6c0>
 8005b86:	2230      	movs	r2, #48	@ 0x30
 8005b88:	f108 0801 	add.w	r8, r8, #1
 8005b8c:	f88a 2000 	strb.w	r2, [sl]
 8005b90:	781a      	ldrb	r2, [r3, #0]
 8005b92:	3201      	adds	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e7a0      	b.n	8005ada <_dtoa_r+0x622>
 8005b98:	4b6f      	ldr	r3, [pc, #444]	@ (8005d58 <_dtoa_r+0x8a0>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f7fa fd34 	bl	8000608 <__aeabi_dmul>
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	460d      	mov	r5, r1
 8005ba8:	f7fa ff96 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d09f      	beq.n	8005af0 <_dtoa_r+0x638>
 8005bb0:	e7d1      	b.n	8005b56 <_dtoa_r+0x69e>
 8005bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	f000 80ea 	beq.w	8005d8e <_dtoa_r+0x8d6>
 8005bba:	9a07      	ldr	r2, [sp, #28]
 8005bbc:	2a01      	cmp	r2, #1
 8005bbe:	f300 80cd 	bgt.w	8005d5c <_dtoa_r+0x8a4>
 8005bc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005bc4:	2a00      	cmp	r2, #0
 8005bc6:	f000 80c1 	beq.w	8005d4c <_dtoa_r+0x894>
 8005bca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005bce:	9c08      	ldr	r4, [sp, #32]
 8005bd0:	9e00      	ldr	r6, [sp, #0]
 8005bd2:	9a00      	ldr	r2, [sp, #0]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	9200      	str	r2, [sp, #0]
 8005bd8:	9a06      	ldr	r2, [sp, #24]
 8005bda:	2101      	movs	r1, #1
 8005bdc:	441a      	add	r2, r3
 8005bde:	4648      	mov	r0, r9
 8005be0:	9206      	str	r2, [sp, #24]
 8005be2:	f000 fc2d 	bl	8006440 <__i2b>
 8005be6:	4605      	mov	r5, r0
 8005be8:	b166      	cbz	r6, 8005c04 <_dtoa_r+0x74c>
 8005bea:	9b06      	ldr	r3, [sp, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	dd09      	ble.n	8005c04 <_dtoa_r+0x74c>
 8005bf0:	42b3      	cmp	r3, r6
 8005bf2:	9a00      	ldr	r2, [sp, #0]
 8005bf4:	bfa8      	it	ge
 8005bf6:	4633      	movge	r3, r6
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	9200      	str	r2, [sp, #0]
 8005bfc:	9a06      	ldr	r2, [sp, #24]
 8005bfe:	1af6      	subs	r6, r6, r3
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	9306      	str	r3, [sp, #24]
 8005c04:	9b08      	ldr	r3, [sp, #32]
 8005c06:	b30b      	cbz	r3, 8005c4c <_dtoa_r+0x794>
 8005c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 80c6 	beq.w	8005d9c <_dtoa_r+0x8e4>
 8005c10:	2c00      	cmp	r4, #0
 8005c12:	f000 80c0 	beq.w	8005d96 <_dtoa_r+0x8de>
 8005c16:	4629      	mov	r1, r5
 8005c18:	4622      	mov	r2, r4
 8005c1a:	4648      	mov	r0, r9
 8005c1c:	f000 fcc8 	bl	80065b0 <__pow5mult>
 8005c20:	9a02      	ldr	r2, [sp, #8]
 8005c22:	4601      	mov	r1, r0
 8005c24:	4605      	mov	r5, r0
 8005c26:	4648      	mov	r0, r9
 8005c28:	f000 fc20 	bl	800646c <__multiply>
 8005c2c:	9902      	ldr	r1, [sp, #8]
 8005c2e:	4680      	mov	r8, r0
 8005c30:	4648      	mov	r0, r9
 8005c32:	f000 fb51 	bl	80062d8 <_Bfree>
 8005c36:	9b08      	ldr	r3, [sp, #32]
 8005c38:	1b1b      	subs	r3, r3, r4
 8005c3a:	9308      	str	r3, [sp, #32]
 8005c3c:	f000 80b1 	beq.w	8005da2 <_dtoa_r+0x8ea>
 8005c40:	9a08      	ldr	r2, [sp, #32]
 8005c42:	4641      	mov	r1, r8
 8005c44:	4648      	mov	r0, r9
 8005c46:	f000 fcb3 	bl	80065b0 <__pow5mult>
 8005c4a:	9002      	str	r0, [sp, #8]
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	4648      	mov	r0, r9
 8005c50:	f000 fbf6 	bl	8006440 <__i2b>
 8005c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c56:	4604      	mov	r4, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 81d8 	beq.w	800600e <_dtoa_r+0xb56>
 8005c5e:	461a      	mov	r2, r3
 8005c60:	4601      	mov	r1, r0
 8005c62:	4648      	mov	r0, r9
 8005c64:	f000 fca4 	bl	80065b0 <__pow5mult>
 8005c68:	9b07      	ldr	r3, [sp, #28]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	f300 809f 	bgt.w	8005db0 <_dtoa_r+0x8f8>
 8005c72:	9b04      	ldr	r3, [sp, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 8097 	bne.w	8005da8 <_dtoa_r+0x8f0>
 8005c7a:	9b05      	ldr	r3, [sp, #20]
 8005c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f040 8093 	bne.w	8005dac <_dtoa_r+0x8f4>
 8005c86:	9b05      	ldr	r3, [sp, #20]
 8005c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c8c:	0d1b      	lsrs	r3, r3, #20
 8005c8e:	051b      	lsls	r3, r3, #20
 8005c90:	b133      	cbz	r3, 8005ca0 <_dtoa_r+0x7e8>
 8005c92:	9b00      	ldr	r3, [sp, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	9b06      	ldr	r3, [sp, #24]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	9306      	str	r3, [sp, #24]
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	9308      	str	r3, [sp, #32]
 8005ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 81b8 	beq.w	800601a <_dtoa_r+0xb62>
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005cb0:	6918      	ldr	r0, [r3, #16]
 8005cb2:	f000 fb79 	bl	80063a8 <__hi0bits>
 8005cb6:	f1c0 0020 	rsb	r0, r0, #32
 8005cba:	9b06      	ldr	r3, [sp, #24]
 8005cbc:	4418      	add	r0, r3
 8005cbe:	f010 001f 	ands.w	r0, r0, #31
 8005cc2:	f000 8082 	beq.w	8005dca <_dtoa_r+0x912>
 8005cc6:	f1c0 0320 	rsb	r3, r0, #32
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	dd73      	ble.n	8005db6 <_dtoa_r+0x8fe>
 8005cce:	9b00      	ldr	r3, [sp, #0]
 8005cd0:	f1c0 001c 	rsb	r0, r0, #28
 8005cd4:	4403      	add	r3, r0
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	9b06      	ldr	r3, [sp, #24]
 8005cda:	4403      	add	r3, r0
 8005cdc:	4406      	add	r6, r0
 8005cde:	9306      	str	r3, [sp, #24]
 8005ce0:	9b00      	ldr	r3, [sp, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dd05      	ble.n	8005cf2 <_dtoa_r+0x83a>
 8005ce6:	9902      	ldr	r1, [sp, #8]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4648      	mov	r0, r9
 8005cec:	f000 fcba 	bl	8006664 <__lshift>
 8005cf0:	9002      	str	r0, [sp, #8]
 8005cf2:	9b06      	ldr	r3, [sp, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dd05      	ble.n	8005d04 <_dtoa_r+0x84c>
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	4648      	mov	r0, r9
 8005cfe:	f000 fcb1 	bl	8006664 <__lshift>
 8005d02:	4604      	mov	r4, r0
 8005d04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d061      	beq.n	8005dce <_dtoa_r+0x916>
 8005d0a:	9802      	ldr	r0, [sp, #8]
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	f000 fd15 	bl	800673c <__mcmp>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	da5b      	bge.n	8005dce <_dtoa_r+0x916>
 8005d16:	2300      	movs	r3, #0
 8005d18:	9902      	ldr	r1, [sp, #8]
 8005d1a:	220a      	movs	r2, #10
 8005d1c:	4648      	mov	r0, r9
 8005d1e:	f000 fafd 	bl	800631c <__multadd>
 8005d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d24:	9002      	str	r0, [sp, #8]
 8005d26:	f107 38ff 	add.w	r8, r7, #4294967295
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 8177 	beq.w	800601e <_dtoa_r+0xb66>
 8005d30:	4629      	mov	r1, r5
 8005d32:	2300      	movs	r3, #0
 8005d34:	220a      	movs	r2, #10
 8005d36:	4648      	mov	r0, r9
 8005d38:	f000 faf0 	bl	800631c <__multadd>
 8005d3c:	f1bb 0f00 	cmp.w	fp, #0
 8005d40:	4605      	mov	r5, r0
 8005d42:	dc6f      	bgt.n	8005e24 <_dtoa_r+0x96c>
 8005d44:	9b07      	ldr	r3, [sp, #28]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	dc49      	bgt.n	8005dde <_dtoa_r+0x926>
 8005d4a:	e06b      	b.n	8005e24 <_dtoa_r+0x96c>
 8005d4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005d52:	e73c      	b.n	8005bce <_dtoa_r+0x716>
 8005d54:	3fe00000 	.word	0x3fe00000
 8005d58:	40240000 	.word	0x40240000
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	1e5c      	subs	r4, r3, #1
 8005d60:	9b08      	ldr	r3, [sp, #32]
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	db09      	blt.n	8005d7a <_dtoa_r+0x8c2>
 8005d66:	1b1c      	subs	r4, r3, r4
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f6bf af30 	bge.w	8005bd0 <_dtoa_r+0x718>
 8005d70:	9b00      	ldr	r3, [sp, #0]
 8005d72:	9a03      	ldr	r2, [sp, #12]
 8005d74:	1a9e      	subs	r6, r3, r2
 8005d76:	2300      	movs	r3, #0
 8005d78:	e72b      	b.n	8005bd2 <_dtoa_r+0x71a>
 8005d7a:	9b08      	ldr	r3, [sp, #32]
 8005d7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d7e:	9408      	str	r4, [sp, #32]
 8005d80:	1ae3      	subs	r3, r4, r3
 8005d82:	441a      	add	r2, r3
 8005d84:	9e00      	ldr	r6, [sp, #0]
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	920d      	str	r2, [sp, #52]	@ 0x34
 8005d8a:	2400      	movs	r4, #0
 8005d8c:	e721      	b.n	8005bd2 <_dtoa_r+0x71a>
 8005d8e:	9c08      	ldr	r4, [sp, #32]
 8005d90:	9e00      	ldr	r6, [sp, #0]
 8005d92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005d94:	e728      	b.n	8005be8 <_dtoa_r+0x730>
 8005d96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005d9a:	e751      	b.n	8005c40 <_dtoa_r+0x788>
 8005d9c:	9a08      	ldr	r2, [sp, #32]
 8005d9e:	9902      	ldr	r1, [sp, #8]
 8005da0:	e750      	b.n	8005c44 <_dtoa_r+0x78c>
 8005da2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005da6:	e751      	b.n	8005c4c <_dtoa_r+0x794>
 8005da8:	2300      	movs	r3, #0
 8005daa:	e779      	b.n	8005ca0 <_dtoa_r+0x7e8>
 8005dac:	9b04      	ldr	r3, [sp, #16]
 8005dae:	e777      	b.n	8005ca0 <_dtoa_r+0x7e8>
 8005db0:	2300      	movs	r3, #0
 8005db2:	9308      	str	r3, [sp, #32]
 8005db4:	e779      	b.n	8005caa <_dtoa_r+0x7f2>
 8005db6:	d093      	beq.n	8005ce0 <_dtoa_r+0x828>
 8005db8:	9a00      	ldr	r2, [sp, #0]
 8005dba:	331c      	adds	r3, #28
 8005dbc:	441a      	add	r2, r3
 8005dbe:	9200      	str	r2, [sp, #0]
 8005dc0:	9a06      	ldr	r2, [sp, #24]
 8005dc2:	441a      	add	r2, r3
 8005dc4:	441e      	add	r6, r3
 8005dc6:	9206      	str	r2, [sp, #24]
 8005dc8:	e78a      	b.n	8005ce0 <_dtoa_r+0x828>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	e7f4      	b.n	8005db8 <_dtoa_r+0x900>
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	46b8      	mov	r8, r7
 8005dd4:	dc20      	bgt.n	8005e18 <_dtoa_r+0x960>
 8005dd6:	469b      	mov	fp, r3
 8005dd8:	9b07      	ldr	r3, [sp, #28]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	dd1e      	ble.n	8005e1c <_dtoa_r+0x964>
 8005dde:	f1bb 0f00 	cmp.w	fp, #0
 8005de2:	f47f adb1 	bne.w	8005948 <_dtoa_r+0x490>
 8005de6:	4621      	mov	r1, r4
 8005de8:	465b      	mov	r3, fp
 8005dea:	2205      	movs	r2, #5
 8005dec:	4648      	mov	r0, r9
 8005dee:	f000 fa95 	bl	800631c <__multadd>
 8005df2:	4601      	mov	r1, r0
 8005df4:	4604      	mov	r4, r0
 8005df6:	9802      	ldr	r0, [sp, #8]
 8005df8:	f000 fca0 	bl	800673c <__mcmp>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	f77f ada3 	ble.w	8005948 <_dtoa_r+0x490>
 8005e02:	4656      	mov	r6, sl
 8005e04:	2331      	movs	r3, #49	@ 0x31
 8005e06:	f806 3b01 	strb.w	r3, [r6], #1
 8005e0a:	f108 0801 	add.w	r8, r8, #1
 8005e0e:	e59f      	b.n	8005950 <_dtoa_r+0x498>
 8005e10:	9c03      	ldr	r4, [sp, #12]
 8005e12:	46b8      	mov	r8, r7
 8005e14:	4625      	mov	r5, r4
 8005e16:	e7f4      	b.n	8005e02 <_dtoa_r+0x94a>
 8005e18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8101 	beq.w	8006026 <_dtoa_r+0xb6e>
 8005e24:	2e00      	cmp	r6, #0
 8005e26:	dd05      	ble.n	8005e34 <_dtoa_r+0x97c>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4632      	mov	r2, r6
 8005e2c:	4648      	mov	r0, r9
 8005e2e:	f000 fc19 	bl	8006664 <__lshift>
 8005e32:	4605      	mov	r5, r0
 8005e34:	9b08      	ldr	r3, [sp, #32]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d05c      	beq.n	8005ef4 <_dtoa_r+0xa3c>
 8005e3a:	6869      	ldr	r1, [r5, #4]
 8005e3c:	4648      	mov	r0, r9
 8005e3e:	f000 fa0b 	bl	8006258 <_Balloc>
 8005e42:	4606      	mov	r6, r0
 8005e44:	b928      	cbnz	r0, 8005e52 <_dtoa_r+0x99a>
 8005e46:	4b82      	ldr	r3, [pc, #520]	@ (8006050 <_dtoa_r+0xb98>)
 8005e48:	4602      	mov	r2, r0
 8005e4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005e4e:	f7ff bb4a 	b.w	80054e6 <_dtoa_r+0x2e>
 8005e52:	692a      	ldr	r2, [r5, #16]
 8005e54:	3202      	adds	r2, #2
 8005e56:	0092      	lsls	r2, r2, #2
 8005e58:	f105 010c 	add.w	r1, r5, #12
 8005e5c:	300c      	adds	r0, #12
 8005e5e:	f7ff fa92 	bl	8005386 <memcpy>
 8005e62:	2201      	movs	r2, #1
 8005e64:	4631      	mov	r1, r6
 8005e66:	4648      	mov	r0, r9
 8005e68:	f000 fbfc 	bl	8006664 <__lshift>
 8005e6c:	f10a 0301 	add.w	r3, sl, #1
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	eb0a 030b 	add.w	r3, sl, fp
 8005e76:	9308      	str	r3, [sp, #32]
 8005e78:	9b04      	ldr	r3, [sp, #16]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	462f      	mov	r7, r5
 8005e80:	9306      	str	r3, [sp, #24]
 8005e82:	4605      	mov	r5, r0
 8005e84:	9b00      	ldr	r3, [sp, #0]
 8005e86:	9802      	ldr	r0, [sp, #8]
 8005e88:	4621      	mov	r1, r4
 8005e8a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e8e:	f7ff fa88 	bl	80053a2 <quorem>
 8005e92:	4603      	mov	r3, r0
 8005e94:	3330      	adds	r3, #48	@ 0x30
 8005e96:	9003      	str	r0, [sp, #12]
 8005e98:	4639      	mov	r1, r7
 8005e9a:	9802      	ldr	r0, [sp, #8]
 8005e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e9e:	f000 fc4d 	bl	800673c <__mcmp>
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	9004      	str	r0, [sp, #16]
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	4648      	mov	r0, r9
 8005eaa:	f000 fc63 	bl	8006774 <__mdiff>
 8005eae:	68c2      	ldr	r2, [r0, #12]
 8005eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	bb02      	cbnz	r2, 8005ef8 <_dtoa_r+0xa40>
 8005eb6:	4601      	mov	r1, r0
 8005eb8:	9802      	ldr	r0, [sp, #8]
 8005eba:	f000 fc3f 	bl	800673c <__mcmp>
 8005ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4648      	mov	r0, r9
 8005ec6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eca:	f000 fa05 	bl	80062d8 <_Bfree>
 8005ece:	9b07      	ldr	r3, [sp, #28]
 8005ed0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ed2:	9e00      	ldr	r6, [sp, #0]
 8005ed4:	ea42 0103 	orr.w	r1, r2, r3
 8005ed8:	9b06      	ldr	r3, [sp, #24]
 8005eda:	4319      	orrs	r1, r3
 8005edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ede:	d10d      	bne.n	8005efc <_dtoa_r+0xa44>
 8005ee0:	2b39      	cmp	r3, #57	@ 0x39
 8005ee2:	d027      	beq.n	8005f34 <_dtoa_r+0xa7c>
 8005ee4:	9a04      	ldr	r2, [sp, #16]
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	dd01      	ble.n	8005eee <_dtoa_r+0xa36>
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	3331      	adds	r3, #49	@ 0x31
 8005eee:	f88b 3000 	strb.w	r3, [fp]
 8005ef2:	e52e      	b.n	8005952 <_dtoa_r+0x49a>
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	e7b9      	b.n	8005e6c <_dtoa_r+0x9b4>
 8005ef8:	2201      	movs	r2, #1
 8005efa:	e7e2      	b.n	8005ec2 <_dtoa_r+0xa0a>
 8005efc:	9904      	ldr	r1, [sp, #16]
 8005efe:	2900      	cmp	r1, #0
 8005f00:	db04      	blt.n	8005f0c <_dtoa_r+0xa54>
 8005f02:	9807      	ldr	r0, [sp, #28]
 8005f04:	4301      	orrs	r1, r0
 8005f06:	9806      	ldr	r0, [sp, #24]
 8005f08:	4301      	orrs	r1, r0
 8005f0a:	d120      	bne.n	8005f4e <_dtoa_r+0xa96>
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	ddee      	ble.n	8005eee <_dtoa_r+0xa36>
 8005f10:	9902      	ldr	r1, [sp, #8]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	2201      	movs	r2, #1
 8005f16:	4648      	mov	r0, r9
 8005f18:	f000 fba4 	bl	8006664 <__lshift>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	9002      	str	r0, [sp, #8]
 8005f20:	f000 fc0c 	bl	800673c <__mcmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	dc02      	bgt.n	8005f30 <_dtoa_r+0xa78>
 8005f2a:	d1e0      	bne.n	8005eee <_dtoa_r+0xa36>
 8005f2c:	07da      	lsls	r2, r3, #31
 8005f2e:	d5de      	bpl.n	8005eee <_dtoa_r+0xa36>
 8005f30:	2b39      	cmp	r3, #57	@ 0x39
 8005f32:	d1da      	bne.n	8005eea <_dtoa_r+0xa32>
 8005f34:	2339      	movs	r3, #57	@ 0x39
 8005f36:	f88b 3000 	strb.w	r3, [fp]
 8005f3a:	4633      	mov	r3, r6
 8005f3c:	461e      	mov	r6, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005f44:	2a39      	cmp	r2, #57	@ 0x39
 8005f46:	d04e      	beq.n	8005fe6 <_dtoa_r+0xb2e>
 8005f48:	3201      	adds	r2, #1
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	e501      	b.n	8005952 <_dtoa_r+0x49a>
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	dd03      	ble.n	8005f5a <_dtoa_r+0xaa2>
 8005f52:	2b39      	cmp	r3, #57	@ 0x39
 8005f54:	d0ee      	beq.n	8005f34 <_dtoa_r+0xa7c>
 8005f56:	3301      	adds	r3, #1
 8005f58:	e7c9      	b.n	8005eee <_dtoa_r+0xa36>
 8005f5a:	9a00      	ldr	r2, [sp, #0]
 8005f5c:	9908      	ldr	r1, [sp, #32]
 8005f5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f62:	428a      	cmp	r2, r1
 8005f64:	d028      	beq.n	8005fb8 <_dtoa_r+0xb00>
 8005f66:	9902      	ldr	r1, [sp, #8]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	220a      	movs	r2, #10
 8005f6c:	4648      	mov	r0, r9
 8005f6e:	f000 f9d5 	bl	800631c <__multadd>
 8005f72:	42af      	cmp	r7, r5
 8005f74:	9002      	str	r0, [sp, #8]
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	f04f 020a 	mov.w	r2, #10
 8005f7e:	4639      	mov	r1, r7
 8005f80:	4648      	mov	r0, r9
 8005f82:	d107      	bne.n	8005f94 <_dtoa_r+0xadc>
 8005f84:	f000 f9ca 	bl	800631c <__multadd>
 8005f88:	4607      	mov	r7, r0
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	9b00      	ldr	r3, [sp, #0]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	e777      	b.n	8005e84 <_dtoa_r+0x9cc>
 8005f94:	f000 f9c2 	bl	800631c <__multadd>
 8005f98:	4629      	mov	r1, r5
 8005f9a:	4607      	mov	r7, r0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	220a      	movs	r2, #10
 8005fa0:	4648      	mov	r0, r9
 8005fa2:	f000 f9bb 	bl	800631c <__multadd>
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	e7f0      	b.n	8005f8c <_dtoa_r+0xad4>
 8005faa:	f1bb 0f00 	cmp.w	fp, #0
 8005fae:	bfcc      	ite	gt
 8005fb0:	465e      	movgt	r6, fp
 8005fb2:	2601      	movle	r6, #1
 8005fb4:	4456      	add	r6, sl
 8005fb6:	2700      	movs	r7, #0
 8005fb8:	9902      	ldr	r1, [sp, #8]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4648      	mov	r0, r9
 8005fc0:	f000 fb50 	bl	8006664 <__lshift>
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	9002      	str	r0, [sp, #8]
 8005fc8:	f000 fbb8 	bl	800673c <__mcmp>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	dcb4      	bgt.n	8005f3a <_dtoa_r+0xa82>
 8005fd0:	d102      	bne.n	8005fd8 <_dtoa_r+0xb20>
 8005fd2:	9b00      	ldr	r3, [sp, #0]
 8005fd4:	07db      	lsls	r3, r3, #31
 8005fd6:	d4b0      	bmi.n	8005f3a <_dtoa_r+0xa82>
 8005fd8:	4633      	mov	r3, r6
 8005fda:	461e      	mov	r6, r3
 8005fdc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fe0:	2a30      	cmp	r2, #48	@ 0x30
 8005fe2:	d0fa      	beq.n	8005fda <_dtoa_r+0xb22>
 8005fe4:	e4b5      	b.n	8005952 <_dtoa_r+0x49a>
 8005fe6:	459a      	cmp	sl, r3
 8005fe8:	d1a8      	bne.n	8005f3c <_dtoa_r+0xa84>
 8005fea:	2331      	movs	r3, #49	@ 0x31
 8005fec:	f108 0801 	add.w	r8, r8, #1
 8005ff0:	f88a 3000 	strb.w	r3, [sl]
 8005ff4:	e4ad      	b.n	8005952 <_dtoa_r+0x49a>
 8005ff6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ff8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006054 <_dtoa_r+0xb9c>
 8005ffc:	b11b      	cbz	r3, 8006006 <_dtoa_r+0xb4e>
 8005ffe:	f10a 0308 	add.w	r3, sl, #8
 8006002:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	4650      	mov	r0, sl
 8006008:	b017      	add	sp, #92	@ 0x5c
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	9b07      	ldr	r3, [sp, #28]
 8006010:	2b01      	cmp	r3, #1
 8006012:	f77f ae2e 	ble.w	8005c72 <_dtoa_r+0x7ba>
 8006016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006018:	9308      	str	r3, [sp, #32]
 800601a:	2001      	movs	r0, #1
 800601c:	e64d      	b.n	8005cba <_dtoa_r+0x802>
 800601e:	f1bb 0f00 	cmp.w	fp, #0
 8006022:	f77f aed9 	ble.w	8005dd8 <_dtoa_r+0x920>
 8006026:	4656      	mov	r6, sl
 8006028:	9802      	ldr	r0, [sp, #8]
 800602a:	4621      	mov	r1, r4
 800602c:	f7ff f9b9 	bl	80053a2 <quorem>
 8006030:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006034:	f806 3b01 	strb.w	r3, [r6], #1
 8006038:	eba6 020a 	sub.w	r2, r6, sl
 800603c:	4593      	cmp	fp, r2
 800603e:	ddb4      	ble.n	8005faa <_dtoa_r+0xaf2>
 8006040:	9902      	ldr	r1, [sp, #8]
 8006042:	2300      	movs	r3, #0
 8006044:	220a      	movs	r2, #10
 8006046:	4648      	mov	r0, r9
 8006048:	f000 f968 	bl	800631c <__multadd>
 800604c:	9002      	str	r0, [sp, #8]
 800604e:	e7eb      	b.n	8006028 <_dtoa_r+0xb70>
 8006050:	08007254 	.word	0x08007254
 8006054:	080071d8 	.word	0x080071d8

08006058 <_free_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4605      	mov	r5, r0
 800605c:	2900      	cmp	r1, #0
 800605e:	d041      	beq.n	80060e4 <_free_r+0x8c>
 8006060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006064:	1f0c      	subs	r4, r1, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	bfb8      	it	lt
 800606a:	18e4      	addlt	r4, r4, r3
 800606c:	f000 f8e8 	bl	8006240 <__malloc_lock>
 8006070:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <_free_r+0x90>)
 8006072:	6813      	ldr	r3, [r2, #0]
 8006074:	b933      	cbnz	r3, 8006084 <_free_r+0x2c>
 8006076:	6063      	str	r3, [r4, #4]
 8006078:	6014      	str	r4, [r2, #0]
 800607a:	4628      	mov	r0, r5
 800607c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006080:	f000 b8e4 	b.w	800624c <__malloc_unlock>
 8006084:	42a3      	cmp	r3, r4
 8006086:	d908      	bls.n	800609a <_free_r+0x42>
 8006088:	6820      	ldr	r0, [r4, #0]
 800608a:	1821      	adds	r1, r4, r0
 800608c:	428b      	cmp	r3, r1
 800608e:	bf01      	itttt	eq
 8006090:	6819      	ldreq	r1, [r3, #0]
 8006092:	685b      	ldreq	r3, [r3, #4]
 8006094:	1809      	addeq	r1, r1, r0
 8006096:	6021      	streq	r1, [r4, #0]
 8006098:	e7ed      	b.n	8006076 <_free_r+0x1e>
 800609a:	461a      	mov	r2, r3
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	b10b      	cbz	r3, 80060a4 <_free_r+0x4c>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d9fa      	bls.n	800609a <_free_r+0x42>
 80060a4:	6811      	ldr	r1, [r2, #0]
 80060a6:	1850      	adds	r0, r2, r1
 80060a8:	42a0      	cmp	r0, r4
 80060aa:	d10b      	bne.n	80060c4 <_free_r+0x6c>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	4401      	add	r1, r0
 80060b0:	1850      	adds	r0, r2, r1
 80060b2:	4283      	cmp	r3, r0
 80060b4:	6011      	str	r1, [r2, #0]
 80060b6:	d1e0      	bne.n	800607a <_free_r+0x22>
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	6053      	str	r3, [r2, #4]
 80060be:	4408      	add	r0, r1
 80060c0:	6010      	str	r0, [r2, #0]
 80060c2:	e7da      	b.n	800607a <_free_r+0x22>
 80060c4:	d902      	bls.n	80060cc <_free_r+0x74>
 80060c6:	230c      	movs	r3, #12
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	e7d6      	b.n	800607a <_free_r+0x22>
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	1821      	adds	r1, r4, r0
 80060d0:	428b      	cmp	r3, r1
 80060d2:	bf04      	itt	eq
 80060d4:	6819      	ldreq	r1, [r3, #0]
 80060d6:	685b      	ldreq	r3, [r3, #4]
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	bf04      	itt	eq
 80060dc:	1809      	addeq	r1, r1, r0
 80060de:	6021      	streq	r1, [r4, #0]
 80060e0:	6054      	str	r4, [r2, #4]
 80060e2:	e7ca      	b.n	800607a <_free_r+0x22>
 80060e4:	bd38      	pop	{r3, r4, r5, pc}
 80060e6:	bf00      	nop
 80060e8:	20000458 	.word	0x20000458

080060ec <malloc>:
 80060ec:	4b02      	ldr	r3, [pc, #8]	@ (80060f8 <malloc+0xc>)
 80060ee:	4601      	mov	r1, r0
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	f000 b825 	b.w	8006140 <_malloc_r>
 80060f6:	bf00      	nop
 80060f8:	20000018 	.word	0x20000018

080060fc <sbrk_aligned>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4e0f      	ldr	r6, [pc, #60]	@ (800613c <sbrk_aligned+0x40>)
 8006100:	460c      	mov	r4, r1
 8006102:	6831      	ldr	r1, [r6, #0]
 8006104:	4605      	mov	r5, r0
 8006106:	b911      	cbnz	r1, 800610e <sbrk_aligned+0x12>
 8006108:	f000 fea2 	bl	8006e50 <_sbrk_r>
 800610c:	6030      	str	r0, [r6, #0]
 800610e:	4621      	mov	r1, r4
 8006110:	4628      	mov	r0, r5
 8006112:	f000 fe9d 	bl	8006e50 <_sbrk_r>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	d103      	bne.n	8006122 <sbrk_aligned+0x26>
 800611a:	f04f 34ff 	mov.w	r4, #4294967295
 800611e:	4620      	mov	r0, r4
 8006120:	bd70      	pop	{r4, r5, r6, pc}
 8006122:	1cc4      	adds	r4, r0, #3
 8006124:	f024 0403 	bic.w	r4, r4, #3
 8006128:	42a0      	cmp	r0, r4
 800612a:	d0f8      	beq.n	800611e <sbrk_aligned+0x22>
 800612c:	1a21      	subs	r1, r4, r0
 800612e:	4628      	mov	r0, r5
 8006130:	f000 fe8e 	bl	8006e50 <_sbrk_r>
 8006134:	3001      	adds	r0, #1
 8006136:	d1f2      	bne.n	800611e <sbrk_aligned+0x22>
 8006138:	e7ef      	b.n	800611a <sbrk_aligned+0x1e>
 800613a:	bf00      	nop
 800613c:	20000454 	.word	0x20000454

08006140 <_malloc_r>:
 8006140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006144:	1ccd      	adds	r5, r1, #3
 8006146:	f025 0503 	bic.w	r5, r5, #3
 800614a:	3508      	adds	r5, #8
 800614c:	2d0c      	cmp	r5, #12
 800614e:	bf38      	it	cc
 8006150:	250c      	movcc	r5, #12
 8006152:	2d00      	cmp	r5, #0
 8006154:	4606      	mov	r6, r0
 8006156:	db01      	blt.n	800615c <_malloc_r+0x1c>
 8006158:	42a9      	cmp	r1, r5
 800615a:	d904      	bls.n	8006166 <_malloc_r+0x26>
 800615c:	230c      	movs	r3, #12
 800615e:	6033      	str	r3, [r6, #0]
 8006160:	2000      	movs	r0, #0
 8006162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800623c <_malloc_r+0xfc>
 800616a:	f000 f869 	bl	8006240 <__malloc_lock>
 800616e:	f8d8 3000 	ldr.w	r3, [r8]
 8006172:	461c      	mov	r4, r3
 8006174:	bb44      	cbnz	r4, 80061c8 <_malloc_r+0x88>
 8006176:	4629      	mov	r1, r5
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff ffbf 	bl	80060fc <sbrk_aligned>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	4604      	mov	r4, r0
 8006182:	d158      	bne.n	8006236 <_malloc_r+0xf6>
 8006184:	f8d8 4000 	ldr.w	r4, [r8]
 8006188:	4627      	mov	r7, r4
 800618a:	2f00      	cmp	r7, #0
 800618c:	d143      	bne.n	8006216 <_malloc_r+0xd6>
 800618e:	2c00      	cmp	r4, #0
 8006190:	d04b      	beq.n	800622a <_malloc_r+0xea>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	4639      	mov	r1, r7
 8006196:	4630      	mov	r0, r6
 8006198:	eb04 0903 	add.w	r9, r4, r3
 800619c:	f000 fe58 	bl	8006e50 <_sbrk_r>
 80061a0:	4581      	cmp	r9, r0
 80061a2:	d142      	bne.n	800622a <_malloc_r+0xea>
 80061a4:	6821      	ldr	r1, [r4, #0]
 80061a6:	1a6d      	subs	r5, r5, r1
 80061a8:	4629      	mov	r1, r5
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7ff ffa6 	bl	80060fc <sbrk_aligned>
 80061b0:	3001      	adds	r0, #1
 80061b2:	d03a      	beq.n	800622a <_malloc_r+0xea>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	442b      	add	r3, r5
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	f8d8 3000 	ldr.w	r3, [r8]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	bb62      	cbnz	r2, 800621c <_malloc_r+0xdc>
 80061c2:	f8c8 7000 	str.w	r7, [r8]
 80061c6:	e00f      	b.n	80061e8 <_malloc_r+0xa8>
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	1b52      	subs	r2, r2, r5
 80061cc:	d420      	bmi.n	8006210 <_malloc_r+0xd0>
 80061ce:	2a0b      	cmp	r2, #11
 80061d0:	d917      	bls.n	8006202 <_malloc_r+0xc2>
 80061d2:	1961      	adds	r1, r4, r5
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	6025      	str	r5, [r4, #0]
 80061d8:	bf18      	it	ne
 80061da:	6059      	strne	r1, [r3, #4]
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	bf08      	it	eq
 80061e0:	f8c8 1000 	streq.w	r1, [r8]
 80061e4:	5162      	str	r2, [r4, r5]
 80061e6:	604b      	str	r3, [r1, #4]
 80061e8:	4630      	mov	r0, r6
 80061ea:	f000 f82f 	bl	800624c <__malloc_unlock>
 80061ee:	f104 000b 	add.w	r0, r4, #11
 80061f2:	1d23      	adds	r3, r4, #4
 80061f4:	f020 0007 	bic.w	r0, r0, #7
 80061f8:	1ac2      	subs	r2, r0, r3
 80061fa:	bf1c      	itt	ne
 80061fc:	1a1b      	subne	r3, r3, r0
 80061fe:	50a3      	strne	r3, [r4, r2]
 8006200:	e7af      	b.n	8006162 <_malloc_r+0x22>
 8006202:	6862      	ldr	r2, [r4, #4]
 8006204:	42a3      	cmp	r3, r4
 8006206:	bf0c      	ite	eq
 8006208:	f8c8 2000 	streq.w	r2, [r8]
 800620c:	605a      	strne	r2, [r3, #4]
 800620e:	e7eb      	b.n	80061e8 <_malloc_r+0xa8>
 8006210:	4623      	mov	r3, r4
 8006212:	6864      	ldr	r4, [r4, #4]
 8006214:	e7ae      	b.n	8006174 <_malloc_r+0x34>
 8006216:	463c      	mov	r4, r7
 8006218:	687f      	ldr	r7, [r7, #4]
 800621a:	e7b6      	b.n	800618a <_malloc_r+0x4a>
 800621c:	461a      	mov	r2, r3
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	42a3      	cmp	r3, r4
 8006222:	d1fb      	bne.n	800621c <_malloc_r+0xdc>
 8006224:	2300      	movs	r3, #0
 8006226:	6053      	str	r3, [r2, #4]
 8006228:	e7de      	b.n	80061e8 <_malloc_r+0xa8>
 800622a:	230c      	movs	r3, #12
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	4630      	mov	r0, r6
 8006230:	f000 f80c 	bl	800624c <__malloc_unlock>
 8006234:	e794      	b.n	8006160 <_malloc_r+0x20>
 8006236:	6005      	str	r5, [r0, #0]
 8006238:	e7d6      	b.n	80061e8 <_malloc_r+0xa8>
 800623a:	bf00      	nop
 800623c:	20000458 	.word	0x20000458

08006240 <__malloc_lock>:
 8006240:	4801      	ldr	r0, [pc, #4]	@ (8006248 <__malloc_lock+0x8>)
 8006242:	f7ff b89e 	b.w	8005382 <__retarget_lock_acquire_recursive>
 8006246:	bf00      	nop
 8006248:	20000450 	.word	0x20000450

0800624c <__malloc_unlock>:
 800624c:	4801      	ldr	r0, [pc, #4]	@ (8006254 <__malloc_unlock+0x8>)
 800624e:	f7ff b899 	b.w	8005384 <__retarget_lock_release_recursive>
 8006252:	bf00      	nop
 8006254:	20000450 	.word	0x20000450

08006258 <_Balloc>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	69c6      	ldr	r6, [r0, #28]
 800625c:	4604      	mov	r4, r0
 800625e:	460d      	mov	r5, r1
 8006260:	b976      	cbnz	r6, 8006280 <_Balloc+0x28>
 8006262:	2010      	movs	r0, #16
 8006264:	f7ff ff42 	bl	80060ec <malloc>
 8006268:	4602      	mov	r2, r0
 800626a:	61e0      	str	r0, [r4, #28]
 800626c:	b920      	cbnz	r0, 8006278 <_Balloc+0x20>
 800626e:	4b18      	ldr	r3, [pc, #96]	@ (80062d0 <_Balloc+0x78>)
 8006270:	4818      	ldr	r0, [pc, #96]	@ (80062d4 <_Balloc+0x7c>)
 8006272:	216b      	movs	r1, #107	@ 0x6b
 8006274:	f000 fdfc 	bl	8006e70 <__assert_func>
 8006278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800627c:	6006      	str	r6, [r0, #0]
 800627e:	60c6      	str	r6, [r0, #12]
 8006280:	69e6      	ldr	r6, [r4, #28]
 8006282:	68f3      	ldr	r3, [r6, #12]
 8006284:	b183      	cbz	r3, 80062a8 <_Balloc+0x50>
 8006286:	69e3      	ldr	r3, [r4, #28]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800628e:	b9b8      	cbnz	r0, 80062c0 <_Balloc+0x68>
 8006290:	2101      	movs	r1, #1
 8006292:	fa01 f605 	lsl.w	r6, r1, r5
 8006296:	1d72      	adds	r2, r6, #5
 8006298:	0092      	lsls	r2, r2, #2
 800629a:	4620      	mov	r0, r4
 800629c:	f000 fe06 	bl	8006eac <_calloc_r>
 80062a0:	b160      	cbz	r0, 80062bc <_Balloc+0x64>
 80062a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062a6:	e00e      	b.n	80062c6 <_Balloc+0x6e>
 80062a8:	2221      	movs	r2, #33	@ 0x21
 80062aa:	2104      	movs	r1, #4
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 fdfd 	bl	8006eac <_calloc_r>
 80062b2:	69e3      	ldr	r3, [r4, #28]
 80062b4:	60f0      	str	r0, [r6, #12]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e4      	bne.n	8006286 <_Balloc+0x2e>
 80062bc:	2000      	movs	r0, #0
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	6802      	ldr	r2, [r0, #0]
 80062c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062c6:	2300      	movs	r3, #0
 80062c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062cc:	e7f7      	b.n	80062be <_Balloc+0x66>
 80062ce:	bf00      	nop
 80062d0:	080071e5 	.word	0x080071e5
 80062d4:	08007265 	.word	0x08007265

080062d8 <_Bfree>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	69c6      	ldr	r6, [r0, #28]
 80062dc:	4605      	mov	r5, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	b976      	cbnz	r6, 8006300 <_Bfree+0x28>
 80062e2:	2010      	movs	r0, #16
 80062e4:	f7ff ff02 	bl	80060ec <malloc>
 80062e8:	4602      	mov	r2, r0
 80062ea:	61e8      	str	r0, [r5, #28]
 80062ec:	b920      	cbnz	r0, 80062f8 <_Bfree+0x20>
 80062ee:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <_Bfree+0x3c>)
 80062f0:	4809      	ldr	r0, [pc, #36]	@ (8006318 <_Bfree+0x40>)
 80062f2:	218f      	movs	r1, #143	@ 0x8f
 80062f4:	f000 fdbc 	bl	8006e70 <__assert_func>
 80062f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062fc:	6006      	str	r6, [r0, #0]
 80062fe:	60c6      	str	r6, [r0, #12]
 8006300:	b13c      	cbz	r4, 8006312 <_Bfree+0x3a>
 8006302:	69eb      	ldr	r3, [r5, #28]
 8006304:	6862      	ldr	r2, [r4, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800630c:	6021      	str	r1, [r4, #0]
 800630e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006312:	bd70      	pop	{r4, r5, r6, pc}
 8006314:	080071e5 	.word	0x080071e5
 8006318:	08007265 	.word	0x08007265

0800631c <__multadd>:
 800631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006320:	690d      	ldr	r5, [r1, #16]
 8006322:	4607      	mov	r7, r0
 8006324:	460c      	mov	r4, r1
 8006326:	461e      	mov	r6, r3
 8006328:	f101 0c14 	add.w	ip, r1, #20
 800632c:	2000      	movs	r0, #0
 800632e:	f8dc 3000 	ldr.w	r3, [ip]
 8006332:	b299      	uxth	r1, r3
 8006334:	fb02 6101 	mla	r1, r2, r1, r6
 8006338:	0c1e      	lsrs	r6, r3, #16
 800633a:	0c0b      	lsrs	r3, r1, #16
 800633c:	fb02 3306 	mla	r3, r2, r6, r3
 8006340:	b289      	uxth	r1, r1
 8006342:	3001      	adds	r0, #1
 8006344:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006348:	4285      	cmp	r5, r0
 800634a:	f84c 1b04 	str.w	r1, [ip], #4
 800634e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006352:	dcec      	bgt.n	800632e <__multadd+0x12>
 8006354:	b30e      	cbz	r6, 800639a <__multadd+0x7e>
 8006356:	68a3      	ldr	r3, [r4, #8]
 8006358:	42ab      	cmp	r3, r5
 800635a:	dc19      	bgt.n	8006390 <__multadd+0x74>
 800635c:	6861      	ldr	r1, [r4, #4]
 800635e:	4638      	mov	r0, r7
 8006360:	3101      	adds	r1, #1
 8006362:	f7ff ff79 	bl	8006258 <_Balloc>
 8006366:	4680      	mov	r8, r0
 8006368:	b928      	cbnz	r0, 8006376 <__multadd+0x5a>
 800636a:	4602      	mov	r2, r0
 800636c:	4b0c      	ldr	r3, [pc, #48]	@ (80063a0 <__multadd+0x84>)
 800636e:	480d      	ldr	r0, [pc, #52]	@ (80063a4 <__multadd+0x88>)
 8006370:	21ba      	movs	r1, #186	@ 0xba
 8006372:	f000 fd7d 	bl	8006e70 <__assert_func>
 8006376:	6922      	ldr	r2, [r4, #16]
 8006378:	3202      	adds	r2, #2
 800637a:	f104 010c 	add.w	r1, r4, #12
 800637e:	0092      	lsls	r2, r2, #2
 8006380:	300c      	adds	r0, #12
 8006382:	f7ff f800 	bl	8005386 <memcpy>
 8006386:	4621      	mov	r1, r4
 8006388:	4638      	mov	r0, r7
 800638a:	f7ff ffa5 	bl	80062d8 <_Bfree>
 800638e:	4644      	mov	r4, r8
 8006390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006394:	3501      	adds	r5, #1
 8006396:	615e      	str	r6, [r3, #20]
 8006398:	6125      	str	r5, [r4, #16]
 800639a:	4620      	mov	r0, r4
 800639c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a0:	08007254 	.word	0x08007254
 80063a4:	08007265 	.word	0x08007265

080063a8 <__hi0bits>:
 80063a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063ac:	4603      	mov	r3, r0
 80063ae:	bf36      	itet	cc
 80063b0:	0403      	lslcc	r3, r0, #16
 80063b2:	2000      	movcs	r0, #0
 80063b4:	2010      	movcc	r0, #16
 80063b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063ba:	bf3c      	itt	cc
 80063bc:	021b      	lslcc	r3, r3, #8
 80063be:	3008      	addcc	r0, #8
 80063c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063c4:	bf3c      	itt	cc
 80063c6:	011b      	lslcc	r3, r3, #4
 80063c8:	3004      	addcc	r0, #4
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ce:	bf3c      	itt	cc
 80063d0:	009b      	lslcc	r3, r3, #2
 80063d2:	3002      	addcc	r0, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	db05      	blt.n	80063e4 <__hi0bits+0x3c>
 80063d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80063dc:	f100 0001 	add.w	r0, r0, #1
 80063e0:	bf08      	it	eq
 80063e2:	2020      	moveq	r0, #32
 80063e4:	4770      	bx	lr

080063e6 <__lo0bits>:
 80063e6:	6803      	ldr	r3, [r0, #0]
 80063e8:	4602      	mov	r2, r0
 80063ea:	f013 0007 	ands.w	r0, r3, #7
 80063ee:	d00b      	beq.n	8006408 <__lo0bits+0x22>
 80063f0:	07d9      	lsls	r1, r3, #31
 80063f2:	d421      	bmi.n	8006438 <__lo0bits+0x52>
 80063f4:	0798      	lsls	r0, r3, #30
 80063f6:	bf49      	itett	mi
 80063f8:	085b      	lsrmi	r3, r3, #1
 80063fa:	089b      	lsrpl	r3, r3, #2
 80063fc:	2001      	movmi	r0, #1
 80063fe:	6013      	strmi	r3, [r2, #0]
 8006400:	bf5c      	itt	pl
 8006402:	6013      	strpl	r3, [r2, #0]
 8006404:	2002      	movpl	r0, #2
 8006406:	4770      	bx	lr
 8006408:	b299      	uxth	r1, r3
 800640a:	b909      	cbnz	r1, 8006410 <__lo0bits+0x2a>
 800640c:	0c1b      	lsrs	r3, r3, #16
 800640e:	2010      	movs	r0, #16
 8006410:	b2d9      	uxtb	r1, r3
 8006412:	b909      	cbnz	r1, 8006418 <__lo0bits+0x32>
 8006414:	3008      	adds	r0, #8
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	0719      	lsls	r1, r3, #28
 800641a:	bf04      	itt	eq
 800641c:	091b      	lsreq	r3, r3, #4
 800641e:	3004      	addeq	r0, #4
 8006420:	0799      	lsls	r1, r3, #30
 8006422:	bf04      	itt	eq
 8006424:	089b      	lsreq	r3, r3, #2
 8006426:	3002      	addeq	r0, #2
 8006428:	07d9      	lsls	r1, r3, #31
 800642a:	d403      	bmi.n	8006434 <__lo0bits+0x4e>
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	f100 0001 	add.w	r0, r0, #1
 8006432:	d003      	beq.n	800643c <__lo0bits+0x56>
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	4770      	bx	lr
 8006438:	2000      	movs	r0, #0
 800643a:	4770      	bx	lr
 800643c:	2020      	movs	r0, #32
 800643e:	4770      	bx	lr

08006440 <__i2b>:
 8006440:	b510      	push	{r4, lr}
 8006442:	460c      	mov	r4, r1
 8006444:	2101      	movs	r1, #1
 8006446:	f7ff ff07 	bl	8006258 <_Balloc>
 800644a:	4602      	mov	r2, r0
 800644c:	b928      	cbnz	r0, 800645a <__i2b+0x1a>
 800644e:	4b05      	ldr	r3, [pc, #20]	@ (8006464 <__i2b+0x24>)
 8006450:	4805      	ldr	r0, [pc, #20]	@ (8006468 <__i2b+0x28>)
 8006452:	f240 1145 	movw	r1, #325	@ 0x145
 8006456:	f000 fd0b 	bl	8006e70 <__assert_func>
 800645a:	2301      	movs	r3, #1
 800645c:	6144      	str	r4, [r0, #20]
 800645e:	6103      	str	r3, [r0, #16]
 8006460:	bd10      	pop	{r4, pc}
 8006462:	bf00      	nop
 8006464:	08007254 	.word	0x08007254
 8006468:	08007265 	.word	0x08007265

0800646c <__multiply>:
 800646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	4617      	mov	r7, r2
 8006472:	690a      	ldr	r2, [r1, #16]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	429a      	cmp	r2, r3
 8006478:	bfa8      	it	ge
 800647a:	463b      	movge	r3, r7
 800647c:	4689      	mov	r9, r1
 800647e:	bfa4      	itt	ge
 8006480:	460f      	movge	r7, r1
 8006482:	4699      	movge	r9, r3
 8006484:	693d      	ldr	r5, [r7, #16]
 8006486:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	eb05 060a 	add.w	r6, r5, sl
 8006492:	42b3      	cmp	r3, r6
 8006494:	b085      	sub	sp, #20
 8006496:	bfb8      	it	lt
 8006498:	3101      	addlt	r1, #1
 800649a:	f7ff fedd 	bl	8006258 <_Balloc>
 800649e:	b930      	cbnz	r0, 80064ae <__multiply+0x42>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4b41      	ldr	r3, [pc, #260]	@ (80065a8 <__multiply+0x13c>)
 80064a4:	4841      	ldr	r0, [pc, #260]	@ (80065ac <__multiply+0x140>)
 80064a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80064aa:	f000 fce1 	bl	8006e70 <__assert_func>
 80064ae:	f100 0414 	add.w	r4, r0, #20
 80064b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80064b6:	4623      	mov	r3, r4
 80064b8:	2200      	movs	r2, #0
 80064ba:	4573      	cmp	r3, lr
 80064bc:	d320      	bcc.n	8006500 <__multiply+0x94>
 80064be:	f107 0814 	add.w	r8, r7, #20
 80064c2:	f109 0114 	add.w	r1, r9, #20
 80064c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80064ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80064ce:	9302      	str	r3, [sp, #8]
 80064d0:	1beb      	subs	r3, r5, r7
 80064d2:	3b15      	subs	r3, #21
 80064d4:	f023 0303 	bic.w	r3, r3, #3
 80064d8:	3304      	adds	r3, #4
 80064da:	3715      	adds	r7, #21
 80064dc:	42bd      	cmp	r5, r7
 80064de:	bf38      	it	cc
 80064e0:	2304      	movcc	r3, #4
 80064e2:	9301      	str	r3, [sp, #4]
 80064e4:	9b02      	ldr	r3, [sp, #8]
 80064e6:	9103      	str	r1, [sp, #12]
 80064e8:	428b      	cmp	r3, r1
 80064ea:	d80c      	bhi.n	8006506 <__multiply+0x9a>
 80064ec:	2e00      	cmp	r6, #0
 80064ee:	dd03      	ble.n	80064f8 <__multiply+0x8c>
 80064f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d055      	beq.n	80065a4 <__multiply+0x138>
 80064f8:	6106      	str	r6, [r0, #16]
 80064fa:	b005      	add	sp, #20
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	f843 2b04 	str.w	r2, [r3], #4
 8006504:	e7d9      	b.n	80064ba <__multiply+0x4e>
 8006506:	f8b1 a000 	ldrh.w	sl, [r1]
 800650a:	f1ba 0f00 	cmp.w	sl, #0
 800650e:	d01f      	beq.n	8006550 <__multiply+0xe4>
 8006510:	46c4      	mov	ip, r8
 8006512:	46a1      	mov	r9, r4
 8006514:	2700      	movs	r7, #0
 8006516:	f85c 2b04 	ldr.w	r2, [ip], #4
 800651a:	f8d9 3000 	ldr.w	r3, [r9]
 800651e:	fa1f fb82 	uxth.w	fp, r2
 8006522:	b29b      	uxth	r3, r3
 8006524:	fb0a 330b 	mla	r3, sl, fp, r3
 8006528:	443b      	add	r3, r7
 800652a:	f8d9 7000 	ldr.w	r7, [r9]
 800652e:	0c12      	lsrs	r2, r2, #16
 8006530:	0c3f      	lsrs	r7, r7, #16
 8006532:	fb0a 7202 	mla	r2, sl, r2, r7
 8006536:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800653a:	b29b      	uxth	r3, r3
 800653c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006540:	4565      	cmp	r5, ip
 8006542:	f849 3b04 	str.w	r3, [r9], #4
 8006546:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800654a:	d8e4      	bhi.n	8006516 <__multiply+0xaa>
 800654c:	9b01      	ldr	r3, [sp, #4]
 800654e:	50e7      	str	r7, [r4, r3]
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006556:	3104      	adds	r1, #4
 8006558:	f1b9 0f00 	cmp.w	r9, #0
 800655c:	d020      	beq.n	80065a0 <__multiply+0x134>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	4647      	mov	r7, r8
 8006562:	46a4      	mov	ip, r4
 8006564:	f04f 0a00 	mov.w	sl, #0
 8006568:	f8b7 b000 	ldrh.w	fp, [r7]
 800656c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006570:	fb09 220b 	mla	r2, r9, fp, r2
 8006574:	4452      	add	r2, sl
 8006576:	b29b      	uxth	r3, r3
 8006578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800657c:	f84c 3b04 	str.w	r3, [ip], #4
 8006580:	f857 3b04 	ldr.w	r3, [r7], #4
 8006584:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006588:	f8bc 3000 	ldrh.w	r3, [ip]
 800658c:	fb09 330a 	mla	r3, r9, sl, r3
 8006590:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006594:	42bd      	cmp	r5, r7
 8006596:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800659a:	d8e5      	bhi.n	8006568 <__multiply+0xfc>
 800659c:	9a01      	ldr	r2, [sp, #4]
 800659e:	50a3      	str	r3, [r4, r2]
 80065a0:	3404      	adds	r4, #4
 80065a2:	e79f      	b.n	80064e4 <__multiply+0x78>
 80065a4:	3e01      	subs	r6, #1
 80065a6:	e7a1      	b.n	80064ec <__multiply+0x80>
 80065a8:	08007254 	.word	0x08007254
 80065ac:	08007265 	.word	0x08007265

080065b0 <__pow5mult>:
 80065b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b4:	4615      	mov	r5, r2
 80065b6:	f012 0203 	ands.w	r2, r2, #3
 80065ba:	4607      	mov	r7, r0
 80065bc:	460e      	mov	r6, r1
 80065be:	d007      	beq.n	80065d0 <__pow5mult+0x20>
 80065c0:	4c25      	ldr	r4, [pc, #148]	@ (8006658 <__pow5mult+0xa8>)
 80065c2:	3a01      	subs	r2, #1
 80065c4:	2300      	movs	r3, #0
 80065c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065ca:	f7ff fea7 	bl	800631c <__multadd>
 80065ce:	4606      	mov	r6, r0
 80065d0:	10ad      	asrs	r5, r5, #2
 80065d2:	d03d      	beq.n	8006650 <__pow5mult+0xa0>
 80065d4:	69fc      	ldr	r4, [r7, #28]
 80065d6:	b97c      	cbnz	r4, 80065f8 <__pow5mult+0x48>
 80065d8:	2010      	movs	r0, #16
 80065da:	f7ff fd87 	bl	80060ec <malloc>
 80065de:	4602      	mov	r2, r0
 80065e0:	61f8      	str	r0, [r7, #28]
 80065e2:	b928      	cbnz	r0, 80065f0 <__pow5mult+0x40>
 80065e4:	4b1d      	ldr	r3, [pc, #116]	@ (800665c <__pow5mult+0xac>)
 80065e6:	481e      	ldr	r0, [pc, #120]	@ (8006660 <__pow5mult+0xb0>)
 80065e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80065ec:	f000 fc40 	bl	8006e70 <__assert_func>
 80065f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065f4:	6004      	str	r4, [r0, #0]
 80065f6:	60c4      	str	r4, [r0, #12]
 80065f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80065fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006600:	b94c      	cbnz	r4, 8006616 <__pow5mult+0x66>
 8006602:	f240 2171 	movw	r1, #625	@ 0x271
 8006606:	4638      	mov	r0, r7
 8006608:	f7ff ff1a 	bl	8006440 <__i2b>
 800660c:	2300      	movs	r3, #0
 800660e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006612:	4604      	mov	r4, r0
 8006614:	6003      	str	r3, [r0, #0]
 8006616:	f04f 0900 	mov.w	r9, #0
 800661a:	07eb      	lsls	r3, r5, #31
 800661c:	d50a      	bpl.n	8006634 <__pow5mult+0x84>
 800661e:	4631      	mov	r1, r6
 8006620:	4622      	mov	r2, r4
 8006622:	4638      	mov	r0, r7
 8006624:	f7ff ff22 	bl	800646c <__multiply>
 8006628:	4631      	mov	r1, r6
 800662a:	4680      	mov	r8, r0
 800662c:	4638      	mov	r0, r7
 800662e:	f7ff fe53 	bl	80062d8 <_Bfree>
 8006632:	4646      	mov	r6, r8
 8006634:	106d      	asrs	r5, r5, #1
 8006636:	d00b      	beq.n	8006650 <__pow5mult+0xa0>
 8006638:	6820      	ldr	r0, [r4, #0]
 800663a:	b938      	cbnz	r0, 800664c <__pow5mult+0x9c>
 800663c:	4622      	mov	r2, r4
 800663e:	4621      	mov	r1, r4
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff ff13 	bl	800646c <__multiply>
 8006646:	6020      	str	r0, [r4, #0]
 8006648:	f8c0 9000 	str.w	r9, [r0]
 800664c:	4604      	mov	r4, r0
 800664e:	e7e4      	b.n	800661a <__pow5mult+0x6a>
 8006650:	4630      	mov	r0, r6
 8006652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006656:	bf00      	nop
 8006658:	08007318 	.word	0x08007318
 800665c:	080071e5 	.word	0x080071e5
 8006660:	08007265 	.word	0x08007265

08006664 <__lshift>:
 8006664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	460c      	mov	r4, r1
 800666a:	6849      	ldr	r1, [r1, #4]
 800666c:	6923      	ldr	r3, [r4, #16]
 800666e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006672:	68a3      	ldr	r3, [r4, #8]
 8006674:	4607      	mov	r7, r0
 8006676:	4691      	mov	r9, r2
 8006678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800667c:	f108 0601 	add.w	r6, r8, #1
 8006680:	42b3      	cmp	r3, r6
 8006682:	db0b      	blt.n	800669c <__lshift+0x38>
 8006684:	4638      	mov	r0, r7
 8006686:	f7ff fde7 	bl	8006258 <_Balloc>
 800668a:	4605      	mov	r5, r0
 800668c:	b948      	cbnz	r0, 80066a2 <__lshift+0x3e>
 800668e:	4602      	mov	r2, r0
 8006690:	4b28      	ldr	r3, [pc, #160]	@ (8006734 <__lshift+0xd0>)
 8006692:	4829      	ldr	r0, [pc, #164]	@ (8006738 <__lshift+0xd4>)
 8006694:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006698:	f000 fbea 	bl	8006e70 <__assert_func>
 800669c:	3101      	adds	r1, #1
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	e7ee      	b.n	8006680 <__lshift+0x1c>
 80066a2:	2300      	movs	r3, #0
 80066a4:	f100 0114 	add.w	r1, r0, #20
 80066a8:	f100 0210 	add.w	r2, r0, #16
 80066ac:	4618      	mov	r0, r3
 80066ae:	4553      	cmp	r3, sl
 80066b0:	db33      	blt.n	800671a <__lshift+0xb6>
 80066b2:	6920      	ldr	r0, [r4, #16]
 80066b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066b8:	f104 0314 	add.w	r3, r4, #20
 80066bc:	f019 091f 	ands.w	r9, r9, #31
 80066c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066c8:	d02b      	beq.n	8006722 <__lshift+0xbe>
 80066ca:	f1c9 0e20 	rsb	lr, r9, #32
 80066ce:	468a      	mov	sl, r1
 80066d0:	2200      	movs	r2, #0
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	fa00 f009 	lsl.w	r0, r0, r9
 80066d8:	4310      	orrs	r0, r2
 80066da:	f84a 0b04 	str.w	r0, [sl], #4
 80066de:	f853 2b04 	ldr.w	r2, [r3], #4
 80066e2:	459c      	cmp	ip, r3
 80066e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80066e8:	d8f3      	bhi.n	80066d2 <__lshift+0x6e>
 80066ea:	ebac 0304 	sub.w	r3, ip, r4
 80066ee:	3b15      	subs	r3, #21
 80066f0:	f023 0303 	bic.w	r3, r3, #3
 80066f4:	3304      	adds	r3, #4
 80066f6:	f104 0015 	add.w	r0, r4, #21
 80066fa:	4560      	cmp	r0, ip
 80066fc:	bf88      	it	hi
 80066fe:	2304      	movhi	r3, #4
 8006700:	50ca      	str	r2, [r1, r3]
 8006702:	b10a      	cbz	r2, 8006708 <__lshift+0xa4>
 8006704:	f108 0602 	add.w	r6, r8, #2
 8006708:	3e01      	subs	r6, #1
 800670a:	4638      	mov	r0, r7
 800670c:	612e      	str	r6, [r5, #16]
 800670e:	4621      	mov	r1, r4
 8006710:	f7ff fde2 	bl	80062d8 <_Bfree>
 8006714:	4628      	mov	r0, r5
 8006716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671a:	f842 0f04 	str.w	r0, [r2, #4]!
 800671e:	3301      	adds	r3, #1
 8006720:	e7c5      	b.n	80066ae <__lshift+0x4a>
 8006722:	3904      	subs	r1, #4
 8006724:	f853 2b04 	ldr.w	r2, [r3], #4
 8006728:	f841 2f04 	str.w	r2, [r1, #4]!
 800672c:	459c      	cmp	ip, r3
 800672e:	d8f9      	bhi.n	8006724 <__lshift+0xc0>
 8006730:	e7ea      	b.n	8006708 <__lshift+0xa4>
 8006732:	bf00      	nop
 8006734:	08007254 	.word	0x08007254
 8006738:	08007265 	.word	0x08007265

0800673c <__mcmp>:
 800673c:	690a      	ldr	r2, [r1, #16]
 800673e:	4603      	mov	r3, r0
 8006740:	6900      	ldr	r0, [r0, #16]
 8006742:	1a80      	subs	r0, r0, r2
 8006744:	b530      	push	{r4, r5, lr}
 8006746:	d10e      	bne.n	8006766 <__mcmp+0x2a>
 8006748:	3314      	adds	r3, #20
 800674a:	3114      	adds	r1, #20
 800674c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006750:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006754:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006758:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800675c:	4295      	cmp	r5, r2
 800675e:	d003      	beq.n	8006768 <__mcmp+0x2c>
 8006760:	d205      	bcs.n	800676e <__mcmp+0x32>
 8006762:	f04f 30ff 	mov.w	r0, #4294967295
 8006766:	bd30      	pop	{r4, r5, pc}
 8006768:	42a3      	cmp	r3, r4
 800676a:	d3f3      	bcc.n	8006754 <__mcmp+0x18>
 800676c:	e7fb      	b.n	8006766 <__mcmp+0x2a>
 800676e:	2001      	movs	r0, #1
 8006770:	e7f9      	b.n	8006766 <__mcmp+0x2a>
	...

08006774 <__mdiff>:
 8006774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006778:	4689      	mov	r9, r1
 800677a:	4606      	mov	r6, r0
 800677c:	4611      	mov	r1, r2
 800677e:	4648      	mov	r0, r9
 8006780:	4614      	mov	r4, r2
 8006782:	f7ff ffdb 	bl	800673c <__mcmp>
 8006786:	1e05      	subs	r5, r0, #0
 8006788:	d112      	bne.n	80067b0 <__mdiff+0x3c>
 800678a:	4629      	mov	r1, r5
 800678c:	4630      	mov	r0, r6
 800678e:	f7ff fd63 	bl	8006258 <_Balloc>
 8006792:	4602      	mov	r2, r0
 8006794:	b928      	cbnz	r0, 80067a2 <__mdiff+0x2e>
 8006796:	4b3f      	ldr	r3, [pc, #252]	@ (8006894 <__mdiff+0x120>)
 8006798:	f240 2137 	movw	r1, #567	@ 0x237
 800679c:	483e      	ldr	r0, [pc, #248]	@ (8006898 <__mdiff+0x124>)
 800679e:	f000 fb67 	bl	8006e70 <__assert_func>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067a8:	4610      	mov	r0, r2
 80067aa:	b003      	add	sp, #12
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b0:	bfbc      	itt	lt
 80067b2:	464b      	movlt	r3, r9
 80067b4:	46a1      	movlt	r9, r4
 80067b6:	4630      	mov	r0, r6
 80067b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067bc:	bfba      	itte	lt
 80067be:	461c      	movlt	r4, r3
 80067c0:	2501      	movlt	r5, #1
 80067c2:	2500      	movge	r5, #0
 80067c4:	f7ff fd48 	bl	8006258 <_Balloc>
 80067c8:	4602      	mov	r2, r0
 80067ca:	b918      	cbnz	r0, 80067d4 <__mdiff+0x60>
 80067cc:	4b31      	ldr	r3, [pc, #196]	@ (8006894 <__mdiff+0x120>)
 80067ce:	f240 2145 	movw	r1, #581	@ 0x245
 80067d2:	e7e3      	b.n	800679c <__mdiff+0x28>
 80067d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80067d8:	6926      	ldr	r6, [r4, #16]
 80067da:	60c5      	str	r5, [r0, #12]
 80067dc:	f109 0310 	add.w	r3, r9, #16
 80067e0:	f109 0514 	add.w	r5, r9, #20
 80067e4:	f104 0e14 	add.w	lr, r4, #20
 80067e8:	f100 0b14 	add.w	fp, r0, #20
 80067ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80067f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	46d9      	mov	r9, fp
 80067f8:	f04f 0c00 	mov.w	ip, #0
 80067fc:	9b01      	ldr	r3, [sp, #4]
 80067fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006802:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	fa1f f38a 	uxth.w	r3, sl
 800680c:	4619      	mov	r1, r3
 800680e:	b283      	uxth	r3, r0
 8006810:	1acb      	subs	r3, r1, r3
 8006812:	0c00      	lsrs	r0, r0, #16
 8006814:	4463      	add	r3, ip
 8006816:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800681a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800681e:	b29b      	uxth	r3, r3
 8006820:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006824:	4576      	cmp	r6, lr
 8006826:	f849 3b04 	str.w	r3, [r9], #4
 800682a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800682e:	d8e5      	bhi.n	80067fc <__mdiff+0x88>
 8006830:	1b33      	subs	r3, r6, r4
 8006832:	3b15      	subs	r3, #21
 8006834:	f023 0303 	bic.w	r3, r3, #3
 8006838:	3415      	adds	r4, #21
 800683a:	3304      	adds	r3, #4
 800683c:	42a6      	cmp	r6, r4
 800683e:	bf38      	it	cc
 8006840:	2304      	movcc	r3, #4
 8006842:	441d      	add	r5, r3
 8006844:	445b      	add	r3, fp
 8006846:	461e      	mov	r6, r3
 8006848:	462c      	mov	r4, r5
 800684a:	4544      	cmp	r4, r8
 800684c:	d30e      	bcc.n	800686c <__mdiff+0xf8>
 800684e:	f108 0103 	add.w	r1, r8, #3
 8006852:	1b49      	subs	r1, r1, r5
 8006854:	f021 0103 	bic.w	r1, r1, #3
 8006858:	3d03      	subs	r5, #3
 800685a:	45a8      	cmp	r8, r5
 800685c:	bf38      	it	cc
 800685e:	2100      	movcc	r1, #0
 8006860:	440b      	add	r3, r1
 8006862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006866:	b191      	cbz	r1, 800688e <__mdiff+0x11a>
 8006868:	6117      	str	r7, [r2, #16]
 800686a:	e79d      	b.n	80067a8 <__mdiff+0x34>
 800686c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006870:	46e6      	mov	lr, ip
 8006872:	0c08      	lsrs	r0, r1, #16
 8006874:	fa1c fc81 	uxtah	ip, ip, r1
 8006878:	4471      	add	r1, lr
 800687a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800687e:	b289      	uxth	r1, r1
 8006880:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006884:	f846 1b04 	str.w	r1, [r6], #4
 8006888:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800688c:	e7dd      	b.n	800684a <__mdiff+0xd6>
 800688e:	3f01      	subs	r7, #1
 8006890:	e7e7      	b.n	8006862 <__mdiff+0xee>
 8006892:	bf00      	nop
 8006894:	08007254 	.word	0x08007254
 8006898:	08007265 	.word	0x08007265

0800689c <__d2b>:
 800689c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068a0:	460f      	mov	r7, r1
 80068a2:	2101      	movs	r1, #1
 80068a4:	ec59 8b10 	vmov	r8, r9, d0
 80068a8:	4616      	mov	r6, r2
 80068aa:	f7ff fcd5 	bl	8006258 <_Balloc>
 80068ae:	4604      	mov	r4, r0
 80068b0:	b930      	cbnz	r0, 80068c0 <__d2b+0x24>
 80068b2:	4602      	mov	r2, r0
 80068b4:	4b23      	ldr	r3, [pc, #140]	@ (8006944 <__d2b+0xa8>)
 80068b6:	4824      	ldr	r0, [pc, #144]	@ (8006948 <__d2b+0xac>)
 80068b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80068bc:	f000 fad8 	bl	8006e70 <__assert_func>
 80068c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068c8:	b10d      	cbz	r5, 80068ce <__d2b+0x32>
 80068ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	f1b8 0300 	subs.w	r3, r8, #0
 80068d4:	d023      	beq.n	800691e <__d2b+0x82>
 80068d6:	4668      	mov	r0, sp
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	f7ff fd84 	bl	80063e6 <__lo0bits>
 80068de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068e2:	b1d0      	cbz	r0, 800691a <__d2b+0x7e>
 80068e4:	f1c0 0320 	rsb	r3, r0, #32
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	430b      	orrs	r3, r1
 80068ee:	40c2      	lsrs	r2, r0
 80068f0:	6163      	str	r3, [r4, #20]
 80068f2:	9201      	str	r2, [sp, #4]
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	61a3      	str	r3, [r4, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf0c      	ite	eq
 80068fc:	2201      	moveq	r2, #1
 80068fe:	2202      	movne	r2, #2
 8006900:	6122      	str	r2, [r4, #16]
 8006902:	b1a5      	cbz	r5, 800692e <__d2b+0x92>
 8006904:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006908:	4405      	add	r5, r0
 800690a:	603d      	str	r5, [r7, #0]
 800690c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006910:	6030      	str	r0, [r6, #0]
 8006912:	4620      	mov	r0, r4
 8006914:	b003      	add	sp, #12
 8006916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800691a:	6161      	str	r1, [r4, #20]
 800691c:	e7ea      	b.n	80068f4 <__d2b+0x58>
 800691e:	a801      	add	r0, sp, #4
 8006920:	f7ff fd61 	bl	80063e6 <__lo0bits>
 8006924:	9b01      	ldr	r3, [sp, #4]
 8006926:	6163      	str	r3, [r4, #20]
 8006928:	3020      	adds	r0, #32
 800692a:	2201      	movs	r2, #1
 800692c:	e7e8      	b.n	8006900 <__d2b+0x64>
 800692e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006932:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006936:	6038      	str	r0, [r7, #0]
 8006938:	6918      	ldr	r0, [r3, #16]
 800693a:	f7ff fd35 	bl	80063a8 <__hi0bits>
 800693e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006942:	e7e5      	b.n	8006910 <__d2b+0x74>
 8006944:	08007254 	.word	0x08007254
 8006948:	08007265 	.word	0x08007265

0800694c <__sfputc_r>:
 800694c:	6893      	ldr	r3, [r2, #8]
 800694e:	3b01      	subs	r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	b410      	push	{r4}
 8006954:	6093      	str	r3, [r2, #8]
 8006956:	da08      	bge.n	800696a <__sfputc_r+0x1e>
 8006958:	6994      	ldr	r4, [r2, #24]
 800695a:	42a3      	cmp	r3, r4
 800695c:	db01      	blt.n	8006962 <__sfputc_r+0x16>
 800695e:	290a      	cmp	r1, #10
 8006960:	d103      	bne.n	800696a <__sfputc_r+0x1e>
 8006962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006966:	f000 b9df 	b.w	8006d28 <__swbuf_r>
 800696a:	6813      	ldr	r3, [r2, #0]
 800696c:	1c58      	adds	r0, r3, #1
 800696e:	6010      	str	r0, [r2, #0]
 8006970:	7019      	strb	r1, [r3, #0]
 8006972:	4608      	mov	r0, r1
 8006974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006978:	4770      	bx	lr

0800697a <__sfputs_r>:
 800697a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697c:	4606      	mov	r6, r0
 800697e:	460f      	mov	r7, r1
 8006980:	4614      	mov	r4, r2
 8006982:	18d5      	adds	r5, r2, r3
 8006984:	42ac      	cmp	r4, r5
 8006986:	d101      	bne.n	800698c <__sfputs_r+0x12>
 8006988:	2000      	movs	r0, #0
 800698a:	e007      	b.n	800699c <__sfputs_r+0x22>
 800698c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006990:	463a      	mov	r2, r7
 8006992:	4630      	mov	r0, r6
 8006994:	f7ff ffda 	bl	800694c <__sfputc_r>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d1f3      	bne.n	8006984 <__sfputs_r+0xa>
 800699c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069a0 <_vfiprintf_r>:
 80069a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a4:	460d      	mov	r5, r1
 80069a6:	b09d      	sub	sp, #116	@ 0x74
 80069a8:	4614      	mov	r4, r2
 80069aa:	4698      	mov	r8, r3
 80069ac:	4606      	mov	r6, r0
 80069ae:	b118      	cbz	r0, 80069b8 <_vfiprintf_r+0x18>
 80069b0:	6a03      	ldr	r3, [r0, #32]
 80069b2:	b90b      	cbnz	r3, 80069b8 <_vfiprintf_r+0x18>
 80069b4:	f7fe fbdc 	bl	8005170 <__sinit>
 80069b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069ba:	07d9      	lsls	r1, r3, #31
 80069bc:	d405      	bmi.n	80069ca <_vfiprintf_r+0x2a>
 80069be:	89ab      	ldrh	r3, [r5, #12]
 80069c0:	059a      	lsls	r2, r3, #22
 80069c2:	d402      	bmi.n	80069ca <_vfiprintf_r+0x2a>
 80069c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069c6:	f7fe fcdc 	bl	8005382 <__retarget_lock_acquire_recursive>
 80069ca:	89ab      	ldrh	r3, [r5, #12]
 80069cc:	071b      	lsls	r3, r3, #28
 80069ce:	d501      	bpl.n	80069d4 <_vfiprintf_r+0x34>
 80069d0:	692b      	ldr	r3, [r5, #16]
 80069d2:	b99b      	cbnz	r3, 80069fc <_vfiprintf_r+0x5c>
 80069d4:	4629      	mov	r1, r5
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 f9e4 	bl	8006da4 <__swsetup_r>
 80069dc:	b170      	cbz	r0, 80069fc <_vfiprintf_r+0x5c>
 80069de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069e0:	07dc      	lsls	r4, r3, #31
 80069e2:	d504      	bpl.n	80069ee <_vfiprintf_r+0x4e>
 80069e4:	f04f 30ff 	mov.w	r0, #4294967295
 80069e8:	b01d      	add	sp, #116	@ 0x74
 80069ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ee:	89ab      	ldrh	r3, [r5, #12]
 80069f0:	0598      	lsls	r0, r3, #22
 80069f2:	d4f7      	bmi.n	80069e4 <_vfiprintf_r+0x44>
 80069f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069f6:	f7fe fcc5 	bl	8005384 <__retarget_lock_release_recursive>
 80069fa:	e7f3      	b.n	80069e4 <_vfiprintf_r+0x44>
 80069fc:	2300      	movs	r3, #0
 80069fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a00:	2320      	movs	r3, #32
 8006a02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a0a:	2330      	movs	r3, #48	@ 0x30
 8006a0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006bbc <_vfiprintf_r+0x21c>
 8006a10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a14:	f04f 0901 	mov.w	r9, #1
 8006a18:	4623      	mov	r3, r4
 8006a1a:	469a      	mov	sl, r3
 8006a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a20:	b10a      	cbz	r2, 8006a26 <_vfiprintf_r+0x86>
 8006a22:	2a25      	cmp	r2, #37	@ 0x25
 8006a24:	d1f9      	bne.n	8006a1a <_vfiprintf_r+0x7a>
 8006a26:	ebba 0b04 	subs.w	fp, sl, r4
 8006a2a:	d00b      	beq.n	8006a44 <_vfiprintf_r+0xa4>
 8006a2c:	465b      	mov	r3, fp
 8006a2e:	4622      	mov	r2, r4
 8006a30:	4629      	mov	r1, r5
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7ff ffa1 	bl	800697a <__sfputs_r>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f000 80a7 	beq.w	8006b8c <_vfiprintf_r+0x1ec>
 8006a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a40:	445a      	add	r2, fp
 8006a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a44:	f89a 3000 	ldrb.w	r3, [sl]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 809f 	beq.w	8006b8c <_vfiprintf_r+0x1ec>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f04f 32ff 	mov.w	r2, #4294967295
 8006a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a58:	f10a 0a01 	add.w	sl, sl, #1
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	9307      	str	r3, [sp, #28]
 8006a60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a64:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a66:	4654      	mov	r4, sl
 8006a68:	2205      	movs	r2, #5
 8006a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6e:	4853      	ldr	r0, [pc, #332]	@ (8006bbc <_vfiprintf_r+0x21c>)
 8006a70:	f7f9 fbb6 	bl	80001e0 <memchr>
 8006a74:	9a04      	ldr	r2, [sp, #16]
 8006a76:	b9d8      	cbnz	r0, 8006ab0 <_vfiprintf_r+0x110>
 8006a78:	06d1      	lsls	r1, r2, #27
 8006a7a:	bf44      	itt	mi
 8006a7c:	2320      	movmi	r3, #32
 8006a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a82:	0713      	lsls	r3, r2, #28
 8006a84:	bf44      	itt	mi
 8006a86:	232b      	movmi	r3, #43	@ 0x2b
 8006a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a92:	d015      	beq.n	8006ac0 <_vfiprintf_r+0x120>
 8006a94:	9a07      	ldr	r2, [sp, #28]
 8006a96:	4654      	mov	r4, sl
 8006a98:	2000      	movs	r0, #0
 8006a9a:	f04f 0c0a 	mov.w	ip, #10
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa4:	3b30      	subs	r3, #48	@ 0x30
 8006aa6:	2b09      	cmp	r3, #9
 8006aa8:	d94b      	bls.n	8006b42 <_vfiprintf_r+0x1a2>
 8006aaa:	b1b0      	cbz	r0, 8006ada <_vfiprintf_r+0x13a>
 8006aac:	9207      	str	r2, [sp, #28]
 8006aae:	e014      	b.n	8006ada <_vfiprintf_r+0x13a>
 8006ab0:	eba0 0308 	sub.w	r3, r0, r8
 8006ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	46a2      	mov	sl, r4
 8006abe:	e7d2      	b.n	8006a66 <_vfiprintf_r+0xc6>
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	1d19      	adds	r1, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	9103      	str	r1, [sp, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfbb      	ittet	lt
 8006acc:	425b      	neglt	r3, r3
 8006ace:	f042 0202 	orrlt.w	r2, r2, #2
 8006ad2:	9307      	strge	r3, [sp, #28]
 8006ad4:	9307      	strlt	r3, [sp, #28]
 8006ad6:	bfb8      	it	lt
 8006ad8:	9204      	strlt	r2, [sp, #16]
 8006ada:	7823      	ldrb	r3, [r4, #0]
 8006adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ade:	d10a      	bne.n	8006af6 <_vfiprintf_r+0x156>
 8006ae0:	7863      	ldrb	r3, [r4, #1]
 8006ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ae4:	d132      	bne.n	8006b4c <_vfiprintf_r+0x1ac>
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	1d1a      	adds	r2, r3, #4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	9203      	str	r2, [sp, #12]
 8006aee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006af2:	3402      	adds	r4, #2
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006bcc <_vfiprintf_r+0x22c>
 8006afa:	7821      	ldrb	r1, [r4, #0]
 8006afc:	2203      	movs	r2, #3
 8006afe:	4650      	mov	r0, sl
 8006b00:	f7f9 fb6e 	bl	80001e0 <memchr>
 8006b04:	b138      	cbz	r0, 8006b16 <_vfiprintf_r+0x176>
 8006b06:	9b04      	ldr	r3, [sp, #16]
 8006b08:	eba0 000a 	sub.w	r0, r0, sl
 8006b0c:	2240      	movs	r2, #64	@ 0x40
 8006b0e:	4082      	lsls	r2, r0
 8006b10:	4313      	orrs	r3, r2
 8006b12:	3401      	adds	r4, #1
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b1a:	4829      	ldr	r0, [pc, #164]	@ (8006bc0 <_vfiprintf_r+0x220>)
 8006b1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b20:	2206      	movs	r2, #6
 8006b22:	f7f9 fb5d 	bl	80001e0 <memchr>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d03f      	beq.n	8006baa <_vfiprintf_r+0x20a>
 8006b2a:	4b26      	ldr	r3, [pc, #152]	@ (8006bc4 <_vfiprintf_r+0x224>)
 8006b2c:	bb1b      	cbnz	r3, 8006b76 <_vfiprintf_r+0x1d6>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	3307      	adds	r3, #7
 8006b32:	f023 0307 	bic.w	r3, r3, #7
 8006b36:	3308      	adds	r3, #8
 8006b38:	9303      	str	r3, [sp, #12]
 8006b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b3c:	443b      	add	r3, r7
 8006b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b40:	e76a      	b.n	8006a18 <_vfiprintf_r+0x78>
 8006b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b46:	460c      	mov	r4, r1
 8006b48:	2001      	movs	r0, #1
 8006b4a:	e7a8      	b.n	8006a9e <_vfiprintf_r+0xfe>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	3401      	adds	r4, #1
 8006b50:	9305      	str	r3, [sp, #20]
 8006b52:	4619      	mov	r1, r3
 8006b54:	f04f 0c0a 	mov.w	ip, #10
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b5e:	3a30      	subs	r2, #48	@ 0x30
 8006b60:	2a09      	cmp	r2, #9
 8006b62:	d903      	bls.n	8006b6c <_vfiprintf_r+0x1cc>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0c6      	beq.n	8006af6 <_vfiprintf_r+0x156>
 8006b68:	9105      	str	r1, [sp, #20]
 8006b6a:	e7c4      	b.n	8006af6 <_vfiprintf_r+0x156>
 8006b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b70:	4604      	mov	r4, r0
 8006b72:	2301      	movs	r3, #1
 8006b74:	e7f0      	b.n	8006b58 <_vfiprintf_r+0x1b8>
 8006b76:	ab03      	add	r3, sp, #12
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	462a      	mov	r2, r5
 8006b7c:	4b12      	ldr	r3, [pc, #72]	@ (8006bc8 <_vfiprintf_r+0x228>)
 8006b7e:	a904      	add	r1, sp, #16
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7fd feb3 	bl	80048ec <_printf_float>
 8006b86:	4607      	mov	r7, r0
 8006b88:	1c78      	adds	r0, r7, #1
 8006b8a:	d1d6      	bne.n	8006b3a <_vfiprintf_r+0x19a>
 8006b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b8e:	07d9      	lsls	r1, r3, #31
 8006b90:	d405      	bmi.n	8006b9e <_vfiprintf_r+0x1fe>
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	059a      	lsls	r2, r3, #22
 8006b96:	d402      	bmi.n	8006b9e <_vfiprintf_r+0x1fe>
 8006b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b9a:	f7fe fbf3 	bl	8005384 <__retarget_lock_release_recursive>
 8006b9e:	89ab      	ldrh	r3, [r5, #12]
 8006ba0:	065b      	lsls	r3, r3, #25
 8006ba2:	f53f af1f 	bmi.w	80069e4 <_vfiprintf_r+0x44>
 8006ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ba8:	e71e      	b.n	80069e8 <_vfiprintf_r+0x48>
 8006baa:	ab03      	add	r3, sp, #12
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	462a      	mov	r2, r5
 8006bb0:	4b05      	ldr	r3, [pc, #20]	@ (8006bc8 <_vfiprintf_r+0x228>)
 8006bb2:	a904      	add	r1, sp, #16
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f7fe f931 	bl	8004e1c <_printf_i>
 8006bba:	e7e4      	b.n	8006b86 <_vfiprintf_r+0x1e6>
 8006bbc:	080072be 	.word	0x080072be
 8006bc0:	080072c8 	.word	0x080072c8
 8006bc4:	080048ed 	.word	0x080048ed
 8006bc8:	0800697b 	.word	0x0800697b
 8006bcc:	080072c4 	.word	0x080072c4

08006bd0 <__sflush_r>:
 8006bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd8:	0716      	lsls	r6, r2, #28
 8006bda:	4605      	mov	r5, r0
 8006bdc:	460c      	mov	r4, r1
 8006bde:	d454      	bmi.n	8006c8a <__sflush_r+0xba>
 8006be0:	684b      	ldr	r3, [r1, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	dc02      	bgt.n	8006bec <__sflush_r+0x1c>
 8006be6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dd48      	ble.n	8006c7e <__sflush_r+0xae>
 8006bec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d045      	beq.n	8006c7e <__sflush_r+0xae>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006bf8:	682f      	ldr	r7, [r5, #0]
 8006bfa:	6a21      	ldr	r1, [r4, #32]
 8006bfc:	602b      	str	r3, [r5, #0]
 8006bfe:	d030      	beq.n	8006c62 <__sflush_r+0x92>
 8006c00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	0759      	lsls	r1, r3, #29
 8006c06:	d505      	bpl.n	8006c14 <__sflush_r+0x44>
 8006c08:	6863      	ldr	r3, [r4, #4]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c0e:	b10b      	cbz	r3, 8006c14 <__sflush_r+0x44>
 8006c10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c12:	1ad2      	subs	r2, r2, r3
 8006c14:	2300      	movs	r3, #0
 8006c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c18:	6a21      	ldr	r1, [r4, #32]
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b0      	blx	r6
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	d106      	bne.n	8006c32 <__sflush_r+0x62>
 8006c24:	6829      	ldr	r1, [r5, #0]
 8006c26:	291d      	cmp	r1, #29
 8006c28:	d82b      	bhi.n	8006c82 <__sflush_r+0xb2>
 8006c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006cd4 <__sflush_r+0x104>)
 8006c2c:	40ca      	lsrs	r2, r1
 8006c2e:	07d6      	lsls	r6, r2, #31
 8006c30:	d527      	bpl.n	8006c82 <__sflush_r+0xb2>
 8006c32:	2200      	movs	r2, #0
 8006c34:	6062      	str	r2, [r4, #4]
 8006c36:	04d9      	lsls	r1, r3, #19
 8006c38:	6922      	ldr	r2, [r4, #16]
 8006c3a:	6022      	str	r2, [r4, #0]
 8006c3c:	d504      	bpl.n	8006c48 <__sflush_r+0x78>
 8006c3e:	1c42      	adds	r2, r0, #1
 8006c40:	d101      	bne.n	8006c46 <__sflush_r+0x76>
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	b903      	cbnz	r3, 8006c48 <__sflush_r+0x78>
 8006c46:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c4a:	602f      	str	r7, [r5, #0]
 8006c4c:	b1b9      	cbz	r1, 8006c7e <__sflush_r+0xae>
 8006c4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c52:	4299      	cmp	r1, r3
 8006c54:	d002      	beq.n	8006c5c <__sflush_r+0x8c>
 8006c56:	4628      	mov	r0, r5
 8006c58:	f7ff f9fe 	bl	8006058 <_free_r>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c60:	e00d      	b.n	8006c7e <__sflush_r+0xae>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b0      	blx	r6
 8006c68:	4602      	mov	r2, r0
 8006c6a:	1c50      	adds	r0, r2, #1
 8006c6c:	d1c9      	bne.n	8006c02 <__sflush_r+0x32>
 8006c6e:	682b      	ldr	r3, [r5, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0c6      	beq.n	8006c02 <__sflush_r+0x32>
 8006c74:	2b1d      	cmp	r3, #29
 8006c76:	d001      	beq.n	8006c7c <__sflush_r+0xac>
 8006c78:	2b16      	cmp	r3, #22
 8006c7a:	d11e      	bne.n	8006cba <__sflush_r+0xea>
 8006c7c:	602f      	str	r7, [r5, #0]
 8006c7e:	2000      	movs	r0, #0
 8006c80:	e022      	b.n	8006cc8 <__sflush_r+0xf8>
 8006c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c86:	b21b      	sxth	r3, r3
 8006c88:	e01b      	b.n	8006cc2 <__sflush_r+0xf2>
 8006c8a:	690f      	ldr	r7, [r1, #16]
 8006c8c:	2f00      	cmp	r7, #0
 8006c8e:	d0f6      	beq.n	8006c7e <__sflush_r+0xae>
 8006c90:	0793      	lsls	r3, r2, #30
 8006c92:	680e      	ldr	r6, [r1, #0]
 8006c94:	bf08      	it	eq
 8006c96:	694b      	ldreq	r3, [r1, #20]
 8006c98:	600f      	str	r7, [r1, #0]
 8006c9a:	bf18      	it	ne
 8006c9c:	2300      	movne	r3, #0
 8006c9e:	eba6 0807 	sub.w	r8, r6, r7
 8006ca2:	608b      	str	r3, [r1, #8]
 8006ca4:	f1b8 0f00 	cmp.w	r8, #0
 8006ca8:	dde9      	ble.n	8006c7e <__sflush_r+0xae>
 8006caa:	6a21      	ldr	r1, [r4, #32]
 8006cac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006cae:	4643      	mov	r3, r8
 8006cb0:	463a      	mov	r2, r7
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b0      	blx	r6
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	dc08      	bgt.n	8006ccc <__sflush_r+0xfc>
 8006cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cc2:	81a3      	strh	r3, [r4, #12]
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ccc:	4407      	add	r7, r0
 8006cce:	eba8 0800 	sub.w	r8, r8, r0
 8006cd2:	e7e7      	b.n	8006ca4 <__sflush_r+0xd4>
 8006cd4:	20400001 	.word	0x20400001

08006cd8 <_fflush_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	690b      	ldr	r3, [r1, #16]
 8006cdc:	4605      	mov	r5, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	b913      	cbnz	r3, 8006ce8 <_fflush_r+0x10>
 8006ce2:	2500      	movs	r5, #0
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	b118      	cbz	r0, 8006cf2 <_fflush_r+0x1a>
 8006cea:	6a03      	ldr	r3, [r0, #32]
 8006cec:	b90b      	cbnz	r3, 8006cf2 <_fflush_r+0x1a>
 8006cee:	f7fe fa3f 	bl	8005170 <__sinit>
 8006cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f3      	beq.n	8006ce2 <_fflush_r+0xa>
 8006cfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cfc:	07d0      	lsls	r0, r2, #31
 8006cfe:	d404      	bmi.n	8006d0a <_fflush_r+0x32>
 8006d00:	0599      	lsls	r1, r3, #22
 8006d02:	d402      	bmi.n	8006d0a <_fflush_r+0x32>
 8006d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d06:	f7fe fb3c 	bl	8005382 <__retarget_lock_acquire_recursive>
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	f7ff ff5f 	bl	8006bd0 <__sflush_r>
 8006d12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d14:	07da      	lsls	r2, r3, #31
 8006d16:	4605      	mov	r5, r0
 8006d18:	d4e4      	bmi.n	8006ce4 <_fflush_r+0xc>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	059b      	lsls	r3, r3, #22
 8006d1e:	d4e1      	bmi.n	8006ce4 <_fflush_r+0xc>
 8006d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d22:	f7fe fb2f 	bl	8005384 <__retarget_lock_release_recursive>
 8006d26:	e7dd      	b.n	8006ce4 <_fflush_r+0xc>

08006d28 <__swbuf_r>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	460e      	mov	r6, r1
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	4605      	mov	r5, r0
 8006d30:	b118      	cbz	r0, 8006d3a <__swbuf_r+0x12>
 8006d32:	6a03      	ldr	r3, [r0, #32]
 8006d34:	b90b      	cbnz	r3, 8006d3a <__swbuf_r+0x12>
 8006d36:	f7fe fa1b 	bl	8005170 <__sinit>
 8006d3a:	69a3      	ldr	r3, [r4, #24]
 8006d3c:	60a3      	str	r3, [r4, #8]
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	071a      	lsls	r2, r3, #28
 8006d42:	d501      	bpl.n	8006d48 <__swbuf_r+0x20>
 8006d44:	6923      	ldr	r3, [r4, #16]
 8006d46:	b943      	cbnz	r3, 8006d5a <__swbuf_r+0x32>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 f82a 	bl	8006da4 <__swsetup_r>
 8006d50:	b118      	cbz	r0, 8006d5a <__swbuf_r+0x32>
 8006d52:	f04f 37ff 	mov.w	r7, #4294967295
 8006d56:	4638      	mov	r0, r7
 8006d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	6922      	ldr	r2, [r4, #16]
 8006d5e:	1a98      	subs	r0, r3, r2
 8006d60:	6963      	ldr	r3, [r4, #20]
 8006d62:	b2f6      	uxtb	r6, r6
 8006d64:	4283      	cmp	r3, r0
 8006d66:	4637      	mov	r7, r6
 8006d68:	dc05      	bgt.n	8006d76 <__swbuf_r+0x4e>
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f7ff ffb3 	bl	8006cd8 <_fflush_r>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d1ed      	bne.n	8006d52 <__swbuf_r+0x2a>
 8006d76:	68a3      	ldr	r3, [r4, #8]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	60a3      	str	r3, [r4, #8]
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	6022      	str	r2, [r4, #0]
 8006d82:	701e      	strb	r6, [r3, #0]
 8006d84:	6962      	ldr	r2, [r4, #20]
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d004      	beq.n	8006d96 <__swbuf_r+0x6e>
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	07db      	lsls	r3, r3, #31
 8006d90:	d5e1      	bpl.n	8006d56 <__swbuf_r+0x2e>
 8006d92:	2e0a      	cmp	r6, #10
 8006d94:	d1df      	bne.n	8006d56 <__swbuf_r+0x2e>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f7ff ff9d 	bl	8006cd8 <_fflush_r>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d0d9      	beq.n	8006d56 <__swbuf_r+0x2e>
 8006da2:	e7d6      	b.n	8006d52 <__swbuf_r+0x2a>

08006da4 <__swsetup_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4b29      	ldr	r3, [pc, #164]	@ (8006e4c <__swsetup_r+0xa8>)
 8006da8:	4605      	mov	r5, r0
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	460c      	mov	r4, r1
 8006dae:	b118      	cbz	r0, 8006db8 <__swsetup_r+0x14>
 8006db0:	6a03      	ldr	r3, [r0, #32]
 8006db2:	b90b      	cbnz	r3, 8006db8 <__swsetup_r+0x14>
 8006db4:	f7fe f9dc 	bl	8005170 <__sinit>
 8006db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dbc:	0719      	lsls	r1, r3, #28
 8006dbe:	d422      	bmi.n	8006e06 <__swsetup_r+0x62>
 8006dc0:	06da      	lsls	r2, r3, #27
 8006dc2:	d407      	bmi.n	8006dd4 <__swsetup_r+0x30>
 8006dc4:	2209      	movs	r2, #9
 8006dc6:	602a      	str	r2, [r5, #0]
 8006dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd2:	e033      	b.n	8006e3c <__swsetup_r+0x98>
 8006dd4:	0758      	lsls	r0, r3, #29
 8006dd6:	d512      	bpl.n	8006dfe <__swsetup_r+0x5a>
 8006dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dda:	b141      	cbz	r1, 8006dee <__swsetup_r+0x4a>
 8006ddc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006de0:	4299      	cmp	r1, r3
 8006de2:	d002      	beq.n	8006dea <__swsetup_r+0x46>
 8006de4:	4628      	mov	r0, r5
 8006de6:	f7ff f937 	bl	8006058 <_free_r>
 8006dea:	2300      	movs	r3, #0
 8006dec:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006df4:	81a3      	strh	r3, [r4, #12]
 8006df6:	2300      	movs	r3, #0
 8006df8:	6063      	str	r3, [r4, #4]
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f043 0308 	orr.w	r3, r3, #8
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	b94b      	cbnz	r3, 8006e1e <__swsetup_r+0x7a>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e14:	d003      	beq.n	8006e1e <__swsetup_r+0x7a>
 8006e16:	4621      	mov	r1, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 f8b3 	bl	8006f84 <__smakebuf_r>
 8006e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e22:	f013 0201 	ands.w	r2, r3, #1
 8006e26:	d00a      	beq.n	8006e3e <__swsetup_r+0x9a>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	60a2      	str	r2, [r4, #8]
 8006e2c:	6962      	ldr	r2, [r4, #20]
 8006e2e:	4252      	negs	r2, r2
 8006e30:	61a2      	str	r2, [r4, #24]
 8006e32:	6922      	ldr	r2, [r4, #16]
 8006e34:	b942      	cbnz	r2, 8006e48 <__swsetup_r+0xa4>
 8006e36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e3a:	d1c5      	bne.n	8006dc8 <__swsetup_r+0x24>
 8006e3c:	bd38      	pop	{r3, r4, r5, pc}
 8006e3e:	0799      	lsls	r1, r3, #30
 8006e40:	bf58      	it	pl
 8006e42:	6962      	ldrpl	r2, [r4, #20]
 8006e44:	60a2      	str	r2, [r4, #8]
 8006e46:	e7f4      	b.n	8006e32 <__swsetup_r+0x8e>
 8006e48:	2000      	movs	r0, #0
 8006e4a:	e7f7      	b.n	8006e3c <__swsetup_r+0x98>
 8006e4c:	20000018 	.word	0x20000018

08006e50 <_sbrk_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d06      	ldr	r5, [pc, #24]	@ (8006e6c <_sbrk_r+0x1c>)
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	f7fa fc62 	bl	8001724 <_sbrk>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_sbrk_r+0x1a>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_sbrk_r+0x1a>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	2000044c 	.word	0x2000044c

08006e70 <__assert_func>:
 8006e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e72:	4614      	mov	r4, r2
 8006e74:	461a      	mov	r2, r3
 8006e76:	4b09      	ldr	r3, [pc, #36]	@ (8006e9c <__assert_func+0x2c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	68d8      	ldr	r0, [r3, #12]
 8006e7e:	b14c      	cbz	r4, 8006e94 <__assert_func+0x24>
 8006e80:	4b07      	ldr	r3, [pc, #28]	@ (8006ea0 <__assert_func+0x30>)
 8006e82:	9100      	str	r1, [sp, #0]
 8006e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e88:	4906      	ldr	r1, [pc, #24]	@ (8006ea4 <__assert_func+0x34>)
 8006e8a:	462b      	mov	r3, r5
 8006e8c:	f000 f842 	bl	8006f14 <fiprintf>
 8006e90:	f000 f8d6 	bl	8007040 <abort>
 8006e94:	4b04      	ldr	r3, [pc, #16]	@ (8006ea8 <__assert_func+0x38>)
 8006e96:	461c      	mov	r4, r3
 8006e98:	e7f3      	b.n	8006e82 <__assert_func+0x12>
 8006e9a:	bf00      	nop
 8006e9c:	20000018 	.word	0x20000018
 8006ea0:	080072d9 	.word	0x080072d9
 8006ea4:	080072e6 	.word	0x080072e6
 8006ea8:	08007314 	.word	0x08007314

08006eac <_calloc_r>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	fba1 5402 	umull	r5, r4, r1, r2
 8006eb2:	b934      	cbnz	r4, 8006ec2 <_calloc_r+0x16>
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	f7ff f943 	bl	8006140 <_malloc_r>
 8006eba:	4606      	mov	r6, r0
 8006ebc:	b928      	cbnz	r0, 8006eca <_calloc_r+0x1e>
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
 8006ec2:	220c      	movs	r2, #12
 8006ec4:	6002      	str	r2, [r0, #0]
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	e7f9      	b.n	8006ebe <_calloc_r+0x12>
 8006eca:	462a      	mov	r2, r5
 8006ecc:	4621      	mov	r1, r4
 8006ece:	f7fe f9da 	bl	8005286 <memset>
 8006ed2:	e7f4      	b.n	8006ebe <_calloc_r+0x12>

08006ed4 <__ascii_mbtowc>:
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	b901      	cbnz	r1, 8006eda <__ascii_mbtowc+0x6>
 8006ed8:	a901      	add	r1, sp, #4
 8006eda:	b142      	cbz	r2, 8006eee <__ascii_mbtowc+0x1a>
 8006edc:	b14b      	cbz	r3, 8006ef2 <__ascii_mbtowc+0x1e>
 8006ede:	7813      	ldrb	r3, [r2, #0]
 8006ee0:	600b      	str	r3, [r1, #0]
 8006ee2:	7812      	ldrb	r2, [r2, #0]
 8006ee4:	1e10      	subs	r0, r2, #0
 8006ee6:	bf18      	it	ne
 8006ee8:	2001      	movne	r0, #1
 8006eea:	b002      	add	sp, #8
 8006eec:	4770      	bx	lr
 8006eee:	4610      	mov	r0, r2
 8006ef0:	e7fb      	b.n	8006eea <__ascii_mbtowc+0x16>
 8006ef2:	f06f 0001 	mvn.w	r0, #1
 8006ef6:	e7f8      	b.n	8006eea <__ascii_mbtowc+0x16>

08006ef8 <__ascii_wctomb>:
 8006ef8:	4603      	mov	r3, r0
 8006efa:	4608      	mov	r0, r1
 8006efc:	b141      	cbz	r1, 8006f10 <__ascii_wctomb+0x18>
 8006efe:	2aff      	cmp	r2, #255	@ 0xff
 8006f00:	d904      	bls.n	8006f0c <__ascii_wctomb+0x14>
 8006f02:	228a      	movs	r2, #138	@ 0x8a
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	4770      	bx	lr
 8006f0c:	700a      	strb	r2, [r1, #0]
 8006f0e:	2001      	movs	r0, #1
 8006f10:	4770      	bx	lr
	...

08006f14 <fiprintf>:
 8006f14:	b40e      	push	{r1, r2, r3}
 8006f16:	b503      	push	{r0, r1, lr}
 8006f18:	4601      	mov	r1, r0
 8006f1a:	ab03      	add	r3, sp, #12
 8006f1c:	4805      	ldr	r0, [pc, #20]	@ (8006f34 <fiprintf+0x20>)
 8006f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f22:	6800      	ldr	r0, [r0, #0]
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	f7ff fd3b 	bl	80069a0 <_vfiprintf_r>
 8006f2a:	b002      	add	sp, #8
 8006f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f30:	b003      	add	sp, #12
 8006f32:	4770      	bx	lr
 8006f34:	20000018 	.word	0x20000018

08006f38 <__swhatbuf_r>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f40:	2900      	cmp	r1, #0
 8006f42:	b096      	sub	sp, #88	@ 0x58
 8006f44:	4615      	mov	r5, r2
 8006f46:	461e      	mov	r6, r3
 8006f48:	da0d      	bge.n	8006f66 <__swhatbuf_r+0x2e>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f50:	f04f 0100 	mov.w	r1, #0
 8006f54:	bf14      	ite	ne
 8006f56:	2340      	movne	r3, #64	@ 0x40
 8006f58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	6031      	str	r1, [r6, #0]
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	b016      	add	sp, #88	@ 0x58
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
 8006f66:	466a      	mov	r2, sp
 8006f68:	f000 f848 	bl	8006ffc <_fstat_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	dbec      	blt.n	8006f4a <__swhatbuf_r+0x12>
 8006f70:	9901      	ldr	r1, [sp, #4]
 8006f72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f7a:	4259      	negs	r1, r3
 8006f7c:	4159      	adcs	r1, r3
 8006f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f82:	e7eb      	b.n	8006f5c <__swhatbuf_r+0x24>

08006f84 <__smakebuf_r>:
 8006f84:	898b      	ldrh	r3, [r1, #12]
 8006f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f88:	079d      	lsls	r5, r3, #30
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	d507      	bpl.n	8006fa0 <__smakebuf_r+0x1c>
 8006f90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	6163      	str	r3, [r4, #20]
 8006f9c:	b003      	add	sp, #12
 8006f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa0:	ab01      	add	r3, sp, #4
 8006fa2:	466a      	mov	r2, sp
 8006fa4:	f7ff ffc8 	bl	8006f38 <__swhatbuf_r>
 8006fa8:	9f00      	ldr	r7, [sp, #0]
 8006faa:	4605      	mov	r5, r0
 8006fac:	4639      	mov	r1, r7
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f7ff f8c6 	bl	8006140 <_malloc_r>
 8006fb4:	b948      	cbnz	r0, 8006fca <__smakebuf_r+0x46>
 8006fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fba:	059a      	lsls	r2, r3, #22
 8006fbc:	d4ee      	bmi.n	8006f9c <__smakebuf_r+0x18>
 8006fbe:	f023 0303 	bic.w	r3, r3, #3
 8006fc2:	f043 0302 	orr.w	r3, r3, #2
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	e7e2      	b.n	8006f90 <__smakebuf_r+0xc>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	6020      	str	r0, [r4, #0]
 8006fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	9b01      	ldr	r3, [sp, #4]
 8006fd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006fda:	b15b      	cbz	r3, 8006ff4 <__smakebuf_r+0x70>
 8006fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f000 f81d 	bl	8007020 <_isatty_r>
 8006fe6:	b128      	cbz	r0, 8006ff4 <__smakebuf_r+0x70>
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	431d      	orrs	r5, r3
 8006ff8:	81a5      	strh	r5, [r4, #12]
 8006ffa:	e7cf      	b.n	8006f9c <__smakebuf_r+0x18>

08006ffc <_fstat_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d07      	ldr	r5, [pc, #28]	@ (800701c <_fstat_r+0x20>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	f7fa fb62 	bl	80016d2 <_fstat>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d102      	bne.n	8007018 <_fstat_r+0x1c>
 8007012:	682b      	ldr	r3, [r5, #0]
 8007014:	b103      	cbz	r3, 8007018 <_fstat_r+0x1c>
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	bd38      	pop	{r3, r4, r5, pc}
 800701a:	bf00      	nop
 800701c:	2000044c 	.word	0x2000044c

08007020 <_isatty_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	@ (800703c <_isatty_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fa fb61 	bl	80016f2 <_isatty>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_isatty_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_isatty_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	2000044c 	.word	0x2000044c

08007040 <abort>:
 8007040:	b508      	push	{r3, lr}
 8007042:	2006      	movs	r0, #6
 8007044:	f000 f82c 	bl	80070a0 <raise>
 8007048:	2001      	movs	r0, #1
 800704a:	f7fa fb0e 	bl	800166a <_exit>

0800704e <_raise_r>:
 800704e:	291f      	cmp	r1, #31
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4605      	mov	r5, r0
 8007054:	460c      	mov	r4, r1
 8007056:	d904      	bls.n	8007062 <_raise_r+0x14>
 8007058:	2316      	movs	r3, #22
 800705a:	6003      	str	r3, [r0, #0]
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	bd38      	pop	{r3, r4, r5, pc}
 8007062:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007064:	b112      	cbz	r2, 800706c <_raise_r+0x1e>
 8007066:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800706a:	b94b      	cbnz	r3, 8007080 <_raise_r+0x32>
 800706c:	4628      	mov	r0, r5
 800706e:	f000 f831 	bl	80070d4 <_getpid_r>
 8007072:	4622      	mov	r2, r4
 8007074:	4601      	mov	r1, r0
 8007076:	4628      	mov	r0, r5
 8007078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800707c:	f000 b818 	b.w	80070b0 <_kill_r>
 8007080:	2b01      	cmp	r3, #1
 8007082:	d00a      	beq.n	800709a <_raise_r+0x4c>
 8007084:	1c59      	adds	r1, r3, #1
 8007086:	d103      	bne.n	8007090 <_raise_r+0x42>
 8007088:	2316      	movs	r3, #22
 800708a:	6003      	str	r3, [r0, #0]
 800708c:	2001      	movs	r0, #1
 800708e:	e7e7      	b.n	8007060 <_raise_r+0x12>
 8007090:	2100      	movs	r1, #0
 8007092:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007096:	4620      	mov	r0, r4
 8007098:	4798      	blx	r3
 800709a:	2000      	movs	r0, #0
 800709c:	e7e0      	b.n	8007060 <_raise_r+0x12>
	...

080070a0 <raise>:
 80070a0:	4b02      	ldr	r3, [pc, #8]	@ (80070ac <raise+0xc>)
 80070a2:	4601      	mov	r1, r0
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	f7ff bfd2 	b.w	800704e <_raise_r>
 80070aa:	bf00      	nop
 80070ac:	20000018 	.word	0x20000018

080070b0 <_kill_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d07      	ldr	r5, [pc, #28]	@ (80070d0 <_kill_r+0x20>)
 80070b4:	2300      	movs	r3, #0
 80070b6:	4604      	mov	r4, r0
 80070b8:	4608      	mov	r0, r1
 80070ba:	4611      	mov	r1, r2
 80070bc:	602b      	str	r3, [r5, #0]
 80070be:	f7fa fac4 	bl	800164a <_kill>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	d102      	bne.n	80070cc <_kill_r+0x1c>
 80070c6:	682b      	ldr	r3, [r5, #0]
 80070c8:	b103      	cbz	r3, 80070cc <_kill_r+0x1c>
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	bd38      	pop	{r3, r4, r5, pc}
 80070ce:	bf00      	nop
 80070d0:	2000044c 	.word	0x2000044c

080070d4 <_getpid_r>:
 80070d4:	f7fa bab1 	b.w	800163a <_getpid>

080070d8 <_init>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	bf00      	nop
 80070dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070de:	bc08      	pop	{r3}
 80070e0:	469e      	mov	lr, r3
 80070e2:	4770      	bx	lr

080070e4 <_fini>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	bf00      	nop
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr
