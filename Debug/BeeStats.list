
BeeStats.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800cd88  0800cd88  0000dd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d21c  0800d21c  0000f2c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d21c  0800d21c  0000e21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d224  0800d224  0000f2c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d224  0800d224  0000e224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d228  0800d228  0000e228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0800d22c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e2c  200002c8  0800d4f4  0000f2c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020f4  0800d4f4  000100f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154dc  00000000  00000000  0000f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae3  00000000  00000000  000247d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  000282b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e01  00000000  00000000  00029538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac7b  00000000  00000000  0002a339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019635  00000000  00000000  00044fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000937fc  00000000  00000000  0005e5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1de5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c40  00000000  00000000  000f1e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f7a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd6c 	.word	0x0800cd6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800cd6c 	.word	0x0800cd6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <getBH1750_Lux>:

uint8_t cmd = 0x10;
int16_t rawLux[2];
float lux;

int16_t getBH1750_Lux (void){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, DEV_ADR<<1, &cmd, 1, HAL_MAX_DELAY);
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <getBH1750_Lux+0x64>)
 8000ef4:	2146      	movs	r1, #70	@ 0x46
 8000ef6:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <getBH1750_Lux+0x68>)
 8000ef8:	f001 f8f6 	bl	80020e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(150);
 8000efc:	2096      	movs	r0, #150	@ 0x96
 8000efe:	f000 fcdb 	bl	80018b8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, 0x23<<1, rawLux, 2, HAL_MAX_DELAY);
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	4a11      	ldr	r2, [pc, #68]	@ (8000f50 <getBH1750_Lux+0x6c>)
 8000f0c:	2146      	movs	r1, #70	@ 0x46
 8000f0e:	480f      	ldr	r0, [pc, #60]	@ (8000f4c <getBH1750_Lux+0x68>)
 8000f10:	f001 f9e8 	bl	80022e4 <HAL_I2C_Master_Receive>

	lux=(rawLux[0] << 8) | rawLux[1];
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <getBH1750_Lux+0x6c>)
 8000f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f50 <getBH1750_Lux+0x6c>)
 8000f1e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <getBH1750_Lux+0x70>)
 8000f2e:	edc3 7a00 	vstr	s15, [r3]

	return lux;
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <getBH1750_Lux+0x70>)
 8000f34:	edd3 7a00 	vldr	s15, [r3]
 8000f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3c:	ee17 3a90 	vmov	r3, s15
 8000f40:	b21b      	sxth	r3, r3
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	200002ec 	.word	0x200002ec
 8000f50:	200002e4 	.word	0x200002e4
 8000f54:	200002e8 	.word	0x200002e8

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b092      	sub	sp, #72	@ 0x48
 8000f5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fc39 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f895 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 f9bb 	bl	80012e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f6a:	f000 f8fb 	bl	8001164 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000f6e:	f008 fd57 	bl	8009a20 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000f72:	f000 f925 	bl	80011c0 <MX_RTC_Init>
  MX_SPI1_Init();
 8000f76:	f000 f97d 	bl	8001274 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  int counter = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	637b      	str	r3, [r7, #52]	@ 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int wh1=0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	@ 0x30
  while (wh1<20)
 8000f82:	e05f      	b.n	8001044 <main+0xec>
  {
		HAL_StatusTypeDef status;
		status=HAL_I2C_IsDeviceReady(&hi2c1, 0x23 << 1, 10, HAL_MAX_DELAY);
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	220a      	movs	r2, #10
 8000f8a:	2146      	movs	r1, #70	@ 0x46
 8000f8c:	483a      	ldr	r0, [pc, #232]	@ (8001078 <main+0x120>)
 8000f8e:	f001 fbdb 	bl	8002748 <HAL_I2C_IsDeviceReady>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  float lux = getBH1750_Lux();
 8000f98:	f7ff ffa4 	bl	8000ee4 <getBH1750_Lux>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	  if (status == HAL_OK) {
 8000faa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d108      	bne.n	8000fc4 <main+0x6c>
	      printf("Lichtstärke ist %i Lux\r\n",lux);
 8000fb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000fb4:	f7ff fad0 	bl	8000558 <__aeabi_f2d>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	482f      	ldr	r0, [pc, #188]	@ (800107c <main+0x124>)
 8000fbe:	f009 ff57 	bl	800ae70 <iprintf>
 8000fc2:	e005      	b.n	8000fd0 <main+0x78>
	  } else {
	      printf("I2C-Gerät nicht gefunden. Fehlercode: %d\n", status);
 8000fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fc8:	4619      	mov	r1, r3
 8000fca:	482d      	ldr	r0, [pc, #180]	@ (8001080 <main+0x128>)
 8000fcc:	f009 ff50 	bl	800ae70 <iprintf>
	  }
	  HAL_Delay(1000);
 8000fd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fd4:	f000 fc70 	bl	80018b8 <HAL_Delay>
	  RTC_TimeTypeDef currentTime;
	  RTC_DateTypeDef currentDate;

	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4828      	ldr	r0, [pc, #160]	@ (8001084 <main+0x12c>)
 8000fe2:	f004 f906 	bl	80051f2 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);  // Muss nach GetTime!
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4619      	mov	r1, r3
 8000fec:	4825      	ldr	r0, [pc, #148]	@ (8001084 <main+0x12c>)
 8000fee:	f004 f9e2 	bl	80053b6 <HAL_RTC_GetDate>

      uint32_t timestamp = (currentTime.Hours << 16) |
 8000ff2:	7a3b      	ldrb	r3, [r7, #8]
 8000ff4:	041a      	lsls	r2, r3, #16
                            (currentTime.Minutes << 8) |
 8000ff6:	7a7b      	ldrb	r3, [r7, #9]
 8000ff8:	021b      	lsls	r3, r3, #8
      uint32_t timestamp = (currentTime.Hours << 16) |
 8000ffa:	4313      	orrs	r3, r2
                            (currentTime.Seconds);
 8000ffc:	7aba      	ldrb	r2, [r7, #10]
                            (currentTime.Minutes << 8) |
 8000ffe:	4313      	orrs	r3, r2
      uint32_t timestamp = (currentTime.Hours << 16) |
 8001000:	623b      	str	r3, [r7, #32]

       FRAM_LogEntry(timestamp, lux);
 8001002:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001006:	6a38      	ldr	r0, [r7, #32]
 8001008:	f006 fc8a 	bl	8007920 <FRAM_LogEntry>


	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
	         counter,
			 currentTime.Hours,
 800100c:	7a3b      	ldrb	r3, [r7, #8]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 800100e:	461c      	mov	r4, r3
	         currentTime.Minutes,
 8001010:	7a7b      	ldrb	r3, [r7, #9]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 8001012:	461d      	mov	r5, r3
	         currentTime.Seconds,
 8001014:	7abb      	ldrb	r3, [r7, #10]
	         currentDate.Date,
 8001016:	79ba      	ldrb	r2, [r7, #6]
	         currentDate.Month,
 8001018:	7979      	ldrb	r1, [r7, #5]
	         currentDate.Year);
 800101a:	79f8      	ldrb	r0, [r7, #7]
	  printf("Counter: %i Uhrzeit: %02d:%02d:%02d | Datum: %02d.%02d.20%02d\r\n",
 800101c:	9003      	str	r0, [sp, #12]
 800101e:	9102      	str	r1, [sp, #8]
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	462b      	mov	r3, r5
 8001026:	4622      	mov	r2, r4
 8001028:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800102a:	4817      	ldr	r0, [pc, #92]	@ (8001088 <main+0x130>)
 800102c:	f009 ff20 	bl	800ae70 <iprintf>
	  counter++;
 8001030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001032:	3301      	adds	r3, #1
 8001034:	637b      	str	r3, [r7, #52]	@ 0x34
	  HAL_Delay(1000);  // Ausgabe alle 1s
 8001036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800103a:	f000 fc3d 	bl	80018b8 <HAL_Delay>


	  wh1++;
 800103e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001040:	3301      	adds	r3, #1
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
  while (wh1<20)
 8001044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001046:	2b13      	cmp	r3, #19
 8001048:	dd9c      	ble.n	8000f84 <main+0x2c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  int wh2=0;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (wh2<20){
 800104e:	e00a      	b.n	8001066 <main+0x10e>
	  FRAM_ReadEntry(wh2,&ts,&lux);
 8001050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001052:	b29b      	uxth	r3, r3
 8001054:	f107 021c 	add.w	r2, r7, #28
 8001058:	490c      	ldr	r1, [pc, #48]	@ (800108c <main+0x134>)
 800105a:	4618      	mov	r0, r3
 800105c:	f006 fca0 	bl	80079a0 <FRAM_ReadEntry>
	  wh2++;
 8001060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001062:	3301      	adds	r3, #1
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (wh2<20){
 8001066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001068:	2b13      	cmp	r3, #19
 800106a:	ddf1      	ble.n	8001050 <main+0xf8>
 800106c:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 800106e:	4618      	mov	r0, r3
 8001070:	3738      	adds	r7, #56	@ 0x38
 8001072:	46bd      	mov	sp, r7
 8001074:	bdb0      	pop	{r4, r5, r7, pc}
 8001076:	bf00      	nop
 8001078:	200002ec 	.word	0x200002ec
 800107c:	0800cd88 	.word	0x0800cd88
 8001080:	0800cda4 	.word	0x0800cda4
 8001084:	20000340 	.word	0x20000340
 8001088:	0800cdd0 	.word	0x0800cdd0
 800108c:	200003b8 	.word	0x200003b8

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	@ 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	2230      	movs	r2, #48	@ 0x30
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 ff3b 	bl	800af1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	4b28      	ldr	r3, [pc, #160]	@ (800115c <SystemClock_Config+0xcc>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	4a27      	ldr	r2, [pc, #156]	@ (800115c <SystemClock_Config+0xcc>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c4:	4b25      	ldr	r3, [pc, #148]	@ (800115c <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <SystemClock_Config+0xd0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <SystemClock_Config+0xd0>)
 80010da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010ec:	2309      	movs	r3, #9
 80010ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010f6:	2301      	movs	r3, #1
 80010f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001104:	2319      	movs	r3, #25
 8001106:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001108:	23c0      	movs	r3, #192	@ 0xc0
 800110a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001110:	2304      	movs	r3, #4
 8001112:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fa1b 	bl	8004554 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001124:	f000 f94b 	bl	80013be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2302      	movs	r3, #2
 800112e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2103      	movs	r1, #3
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fc7d 	bl	8004a44 <HAL_RCC_ClockConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001150:	f000 f935 	bl	80013be <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3750      	adds	r7, #80	@ 0x50
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800116a:	4a13      	ldr	r2, [pc, #76]	@ (80011b8 <MX_I2C1_Init+0x54>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001170:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <MX_I2C1_Init+0x58>)
 8001172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001182:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001186:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <MX_I2C1_Init+0x50>)
 80011a2:	f000 fe5d 	bl	8001e60 <HAL_I2C_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ac:	f000 f907 	bl	80013be <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200002ec 	.word	0x200002ec
 80011b8:	40005400 	.word	0x40005400
 80011bc:	000186a0 	.word	0x000186a0

080011c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <MX_RTC_Init+0xac>)
 80011da:	4a25      	ldr	r2, [pc, #148]	@ (8001270 <MX_RTC_Init+0xb0>)
 80011dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <MX_RTC_Init+0xac>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <MX_RTC_Init+0xac>)
 80011e6:	227f      	movs	r2, #127	@ 0x7f
 80011e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <MX_RTC_Init+0xac>)
 80011ec:	22ff      	movs	r2, #255	@ 0xff
 80011ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <MX_RTC_Init+0xac>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <MX_RTC_Init+0xac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_RTC_Init+0xac>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001202:	481a      	ldr	r0, [pc, #104]	@ (800126c <MX_RTC_Init+0xac>)
 8001204:	f003 feda 	bl	8004fbc <HAL_RTC_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800120e:	f000 f8d6 	bl	80013be <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8001212:	230f      	movs	r3, #15
 8001214:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 00;
 8001216:	2300      	movs	r3, #0
 8001218:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 00;
 800121a:	2300      	movs	r3, #0
 800121c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	480f      	ldr	r0, [pc, #60]	@ (800126c <MX_RTC_Init+0xac>)
 800122e:	f003 ff46 	bl	80050be <HAL_RTC_SetTime>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001238:	f000 f8c1 	bl	80013be <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800123c:	2301      	movs	r3, #1
 800123e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001240:	2307      	movs	r3, #7
 8001242:	707b      	strb	r3, [r7, #1]
  sDate.Date = 12;
 8001244:	230c      	movs	r3, #12
 8001246:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 25;
 8001248:	2319      	movs	r3, #25
 800124a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <MX_RTC_Init+0xac>)
 8001254:	f004 f82b 	bl	80052ae <HAL_RTC_SetDate>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800125e:	f000 f8ae 	bl	80013be <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000340 	.word	0x20000340
 8001270:	40002800 	.word	0x40002800

08001274 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001278:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_SPI1_Init+0x64>)
 800127a:	4a18      	ldr	r2, [pc, #96]	@ (80012dc <MX_SPI1_Init+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_SPI1_Init+0x64>)
 8001280:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001284:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_SPI1_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_SPI1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012c0:	220a      	movs	r2, #10
 80012c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012c6:	f004 f983 	bl	80055d0 <HAL_SPI_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012d0:	f000 f875 	bl	80013be <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000360 	.word	0x20000360
 80012dc:	40013000 	.word	0x40013000

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <MX_GPIO_Init+0xb4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a25      	ldr	r2, [pc, #148]	@ (8001394 <MX_GPIO_Init+0xb4>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <MX_GPIO_Init+0xb4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <MX_GPIO_Init+0xb4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a1e      	ldr	r2, [pc, #120]	@ (8001394 <MX_GPIO_Init+0xb4>)
 800131c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_GPIO_Init+0xb4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <MX_GPIO_Init+0xb4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a17      	ldr	r2, [pc, #92]	@ (8001394 <MX_GPIO_Init+0xb4>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <MX_GPIO_Init+0xb4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_GPIO_Init+0xb4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <MX_GPIO_Init+0xb4>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <MX_GPIO_Init+0xb4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAM_GPIO_Port, FRAM_Pin, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2110      	movs	r1, #16
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <MX_GPIO_Init+0xb8>)
 800136c:	f000 fd5e 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FRAM_Pin */
  GPIO_InitStruct.Pin = FRAM_Pin;
 8001370:	2310      	movs	r3, #16
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRAM_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_GPIO_Init+0xb8>)
 8001388:	f000 fbcc 	bl	8001b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	@ 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000

0800139c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*) ptr, len); return len;}
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	4619      	mov	r1, r3
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f008 fbf4 	bl	8009b9c <CDC_Transmit_FS>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c2:	b672      	cpsid	i
}
 80013c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c6:	bf00      	nop
 80013c8:	e7fd      	b.n	80013c6 <Error_Handler+0x8>
	...

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	@ (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a19      	ldr	r2, [pc, #100]	@ (80014a0 <HAL_I2C_MspInit+0x84>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12b      	bne.n	8001496 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <HAL_I2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	@ (80014a4 <HAL_I2C_MspInit+0x88>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_I2C_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145a:	23c0      	movs	r3, #192	@ 0xc0
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145e:	2312      	movs	r3, #18
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146a:	2304      	movs	r3, #4
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <HAL_I2C_MspInit+0x8c>)
 8001476:	f000 fb55 	bl	8001b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <HAL_I2C_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	4a08      	ldr	r2, [pc, #32]	@ (80014a4 <HAL_I2C_MspInit+0x88>)
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <HAL_I2C_MspInit+0x88>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <HAL_RTC_MspInit+0x50>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d111      	bne.n	80014f4 <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014d0:	2302      	movs	r3, #2
 80014d2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fc7c 	bl	8004ddc <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014ea:	f7ff ff68 	bl	80013be <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014ee:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <HAL_RTC_MspInit+0x54>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80014f4:	bf00      	nop
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40002800 	.word	0x40002800
 8001500:	42470e3c 	.word	0x42470e3c

08001504 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <HAL_SPI_MspInit+0x84>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12b      	bne.n	800157e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_SPI_MspInit+0x88>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a17      	ldr	r2, [pc, #92]	@ (800158c <HAL_SPI_MspInit+0x88>)
 8001530:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_SPI_MspInit+0x88>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_SPI_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a10      	ldr	r2, [pc, #64]	@ (800158c <HAL_SPI_MspInit+0x88>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_SPI_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800155e:	23e0      	movs	r3, #224	@ 0xe0
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800156e:	2305      	movs	r3, #5
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	@ (8001590 <HAL_SPI_MspInit+0x8c>)
 800157a:	f000 fad3 	bl	8001b24 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	@ 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40013000 	.word	0x40013000
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <NMI_Handler+0x4>

0800159c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <MemManage_Handler+0x4>

080015ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <UsageFault_Handler+0x4>

080015bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f000 f945 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <OTG_FS_IRQHandler+0x10>)
 80015fa:	f001 fe9d 	bl	8003338 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200018a4 	.word	0x200018a4

08001608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_kill>:

int _kill(int pid, int sig)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001622:	f009 fccd 	bl	800afc0 <__errno>
 8001626:	4603      	mov	r3, r0
 8001628:	2216      	movs	r2, #22
 800162a:	601a      	str	r2, [r3, #0]
  return -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_exit>:

void _exit (int status)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ffe7 	bl	8001618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800164a:	bf00      	nop
 800164c:	e7fd      	b.n	800164a <_exit+0x12>

0800164e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e00a      	b.n	8001676 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001660:	f3af 8000 	nop.w
 8001664:	4601      	mov	r1, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	b2ca      	uxtb	r2, r1
 800166e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	dbf0      	blt.n	8001660 <_read+0x12>
  }

  return len;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016b0:	605a      	str	r2, [r3, #4]
  return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_isatty>:

int _isatty(int file)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f009 fc4e 	bl	800afc0 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20020000 	.word	0x20020000
 8001750:	00000400 	.word	0x00000400
 8001754:	200003bc 	.word	0x200003bc
 8001758:	200020f8 	.word	0x200020f8

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	@ (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001784:	f7ff ffea 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f009 fc0d 	bl	800afcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff fbd1 	bl	8000f58 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 80017c4:	0800d22c 	.word	0x0800d22c
  ldr r2, =_sbss
 80017c8:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80017cc:	200020f4 	.word	0x200020f4

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f94f 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fde0 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f967 	bl	8001b0a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f92f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000004 	.word	0x20000004
 8001870:	2000000c 	.word	0x2000000c
 8001874:	20000008 	.word	0x20000008

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2000000c 	.word	0x2000000c
 800189c:	200003c0 	.word	0x200003c0

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200003c0 	.word	0x200003c0

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000000c 	.word	0x2000000c

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	@ (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e159      	b.n	8001df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 8148 	bne.w	8001dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80a2 	beq.w	8001dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b57      	ldr	r3, [pc, #348]	@ (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a56      	ldr	r2, [pc, #344]	@ (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b54      	ldr	r3, [pc, #336]	@ (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a52      	ldr	r2, [pc, #328]	@ (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a49      	ldr	r2, [pc, #292]	@ (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x202>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a48      	ldr	r2, [pc, #288]	@ (8001e18 <HAL_GPIO_Init+0x2f4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x1fe>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a47      	ldr	r2, [pc, #284]	@ (8001e1c <HAL_GPIO_Init+0x2f8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x1fa>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a46      	ldr	r2, [pc, #280]	@ (8001e20 <HAL_GPIO_Init+0x2fc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x1f6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a45      	ldr	r2, [pc, #276]	@ (8001e24 <HAL_GPIO_Init+0x300>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x1f2>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e008      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d16:	2307      	movs	r3, #7
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d26:	2300      	movs	r3, #0
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f002 0203 	and.w	r2, r2, #3
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d38:	4935      	ldr	r1, [pc, #212]	@ (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d46:	4b38      	ldr	r3, [pc, #224]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d70:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d94:	4a24      	ldr	r2, [pc, #144]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9a:	4b23      	ldr	r3, [pc, #140]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	f67f aea2 	bls.w	8001b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3724      	adds	r7, #36	@ 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40013800 	.word	0x40013800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e12b      	b.n	80020ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fac8 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	@ 0x24
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec4:	f002 ff76 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 8001ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a81      	ldr	r2, [pc, #516]	@ (80020d4 <HAL_I2C_Init+0x274>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d807      	bhi.n	8001ee4 <HAL_I2C_Init+0x84>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a80      	ldr	r2, [pc, #512]	@ (80020d8 <HAL_I2C_Init+0x278>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	bf94      	ite	ls
 8001edc:	2301      	movls	r3, #1
 8001ede:	2300      	movhi	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e006      	b.n	8001ef2 <HAL_I2C_Init+0x92>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a7d      	ldr	r2, [pc, #500]	@ (80020dc <HAL_I2C_Init+0x27c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bf94      	ite	ls
 8001eec:	2301      	movls	r3, #1
 8001eee:	2300      	movhi	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0e7      	b.n	80020ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a78      	ldr	r2, [pc, #480]	@ (80020e0 <HAL_I2C_Init+0x280>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0c9b      	lsrs	r3, r3, #18
 8001f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a6a      	ldr	r2, [pc, #424]	@ (80020d4 <HAL_I2C_Init+0x274>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d802      	bhi.n	8001f34 <HAL_I2C_Init+0xd4>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3301      	adds	r3, #1
 8001f32:	e009      	b.n	8001f48 <HAL_I2C_Init+0xe8>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	4a69      	ldr	r2, [pc, #420]	@ (80020e4 <HAL_I2C_Init+0x284>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	3301      	adds	r3, #1
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	495c      	ldr	r1, [pc, #368]	@ (80020d4 <HAL_I2C_Init+0x274>)
 8001f64:	428b      	cmp	r3, r1
 8001f66:	d819      	bhi.n	8001f9c <HAL_I2C_Init+0x13c>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1e59      	subs	r1, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_I2C_Init+0x138>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1e59      	subs	r1, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f96:	e051      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	e04f      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d111      	bne.n	8001fc8 <HAL_I2C_Init+0x168>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e58      	subs	r0, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	440b      	add	r3, r1
 8001fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e012      	b.n	8001fee <HAL_I2C_Init+0x18e>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e58      	subs	r0, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	0099      	lsls	r1, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Init+0x196>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e022      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10e      	bne.n	800201c <HAL_I2C_Init+0x1bc>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1e58      	subs	r0, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6859      	ldr	r1, [r3, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	440b      	add	r3, r1
 800200c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800201a:	e00f      	b.n	800203c <HAL_I2C_Init+0x1dc>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e58      	subs	r0, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	0099      	lsls	r1, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	6809      	ldr	r1, [r1, #0]
 8002040:	4313      	orrs	r3, r2
 8002042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800206a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6911      	ldr	r1, [r2, #16]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68d2      	ldr	r2, [r2, #12]
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	430b      	orrs	r3, r1
 800207e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	000186a0 	.word	0x000186a0
 80020d8:	001e847f 	.word	0x001e847f
 80020dc:	003d08ff 	.word	0x003d08ff
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	10624dd3 	.word	0x10624dd3

080020e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	460b      	mov	r3, r1
 80020f6:	817b      	strh	r3, [r7, #10]
 80020f8:	4613      	mov	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fbd0 	bl	80018a0 <HAL_GetTick>
 8002100:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	f040 80e0 	bne.w	80022d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2319      	movs	r3, #25
 8002116:	2201      	movs	r2, #1
 8002118:	4970      	ldr	r1, [pc, #448]	@ (80022dc <HAL_I2C_Master_Transmit+0x1f4>)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fd92 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	e0d3      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_I2C_Master_Transmit+0x50>
 8002134:	2302      	movs	r3, #2
 8002136:	e0cc      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d007      	beq.n	800215e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800216c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2221      	movs	r2, #33	@ 0x21
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2210      	movs	r2, #16
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	893a      	ldrh	r2, [r7, #8]
 800218e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a50      	ldr	r2, [pc, #320]	@ (80022e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021a0:	8979      	ldrh	r1, [r7, #10]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	6a3a      	ldr	r2, [r7, #32]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fbfc 	bl	80029a4 <I2C_MasterRequestWrite>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e08d      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021cc:	e066      	b.n	800229c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	6a39      	ldr	r1, [r7, #32]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fe50 	bl	8002e78 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06b      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11b      	bne.n	8002270 <HAL_I2C_Master_Transmit+0x188>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	6a39      	ldr	r1, [r7, #32]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fe47 	bl	8002f08 <I2C_WaitOnBTFFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00d      	beq.n	800229c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	2b04      	cmp	r3, #4
 8002286:	d107      	bne.n	8002298 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002296:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e01a      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d194      	bne.n	80021ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	00100002 	.word	0x00100002
 80022e0:	ffff0000 	.word	0xffff0000

080022e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	@ 0x30
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	461a      	mov	r2, r3
 80022f0:	460b      	mov	r3, r1
 80022f2:	817b      	strh	r3, [r7, #10]
 80022f4:	4613      	mov	r3, r2
 80022f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff fad2 	bl	80018a0 <HAL_GetTick>
 80022fc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b20      	cmp	r3, #32
 8002308:	f040 8217 	bne.w	800273a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2319      	movs	r3, #25
 8002312:	2201      	movs	r2, #1
 8002314:	497c      	ldr	r1, [pc, #496]	@ (8002508 <HAL_I2C_Master_Receive+0x224>)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fc94 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
 8002324:	e20a      	b.n	800273c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_I2C_Master_Receive+0x50>
 8002330:	2302      	movs	r3, #2
 8002332:	e203      	b.n	800273c <HAL_I2C_Master_Receive+0x458>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d007      	beq.n	800235a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002368:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2222      	movs	r2, #34	@ 0x22
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2210      	movs	r2, #16
 8002376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	893a      	ldrh	r2, [r7, #8]
 800238a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a5c      	ldr	r2, [pc, #368]	@ (800250c <HAL_I2C_Master_Receive+0x228>)
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800239c:	8979      	ldrh	r1, [r7, #10]
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fb80 	bl	8002aa8 <I2C_MasterRequestRead>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e1c4      	b.n	800273c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d113      	bne.n	80023e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	623b      	str	r3, [r7, #32]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	623b      	str	r3, [r7, #32]
 80023ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e198      	b.n	8002714 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d11b      	bne.n	8002422 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e178      	b.n	8002714 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	2b02      	cmp	r3, #2
 8002428:	d11b      	bne.n	8002462 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002438:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	e158      	b.n	8002714 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002488:	e144      	b.n	8002714 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248e:	2b03      	cmp	r3, #3
 8002490:	f200 80f1 	bhi.w	8002676 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	2b01      	cmp	r3, #1
 800249a:	d123      	bne.n	80024e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fd79 	bl	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e145      	b.n	800273c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024e2:	e117      	b.n	8002714 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d14e      	bne.n	800258a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	2200      	movs	r2, #0
 80024f4:	4906      	ldr	r1, [pc, #24]	@ (8002510 <HAL_I2C_Master_Receive+0x22c>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fba4 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e11a      	b.n	800273c <HAL_I2C_Master_Receive+0x458>
 8002506:	bf00      	nop
 8002508:	00100002 	.word	0x00100002
 800250c:	ffff0000 	.word	0xffff0000
 8002510:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002588:	e0c4      	b.n	8002714 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002590:	2200      	movs	r2, #0
 8002592:	496c      	ldr	r1, [pc, #432]	@ (8002744 <HAL_I2C_Master_Receive+0x460>)
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fb55 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0cb      	b.n	800273c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	2200      	movs	r2, #0
 80025ee:	4955      	ldr	r1, [pc, #340]	@ (8002744 <HAL_I2C_Master_Receive+0x460>)
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fb27 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e09d      	b.n	800273c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002674:	e04e      	b.n	8002714 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002678:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fc8c 	bl	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e058      	b.n	800273c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d124      	bne.n	8002714 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d107      	bne.n	80026e2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	f47f aeb6 	bne.w	800248a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e000      	b.n	800273c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800273a:	2302      	movs	r3, #2
  }
}
 800273c:	4618      	mov	r0, r3
 800273e:	3728      	adds	r7, #40	@ 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	00010004 	.word	0x00010004

08002748 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	460b      	mov	r3, r1
 8002756:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff f8a2 	bl	80018a0 <HAL_GetTick>
 800275c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b20      	cmp	r3, #32
 800276c:	f040 8111 	bne.w	8002992 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2319      	movs	r3, #25
 8002776:	2201      	movs	r2, #1
 8002778:	4988      	ldr	r1, [pc, #544]	@ (800299c <HAL_I2C_IsDeviceReady+0x254>)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fa62 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	e104      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_I2C_IsDeviceReady+0x50>
 8002794:	2302      	movs	r3, #2
 8002796:	e0fd      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d007      	beq.n	80027be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2224      	movs	r2, #36	@ 0x24
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a70      	ldr	r2, [pc, #448]	@ (80029a0 <HAL_I2C_IsDeviceReady+0x258>)
 80027e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fa20 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002818:	d103      	bne.n	8002822 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0b6      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002826:	897b      	ldrh	r3, [r7, #10]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002834:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002836:	f7ff f833 	bl	80018a0 <HAL_GetTick>
 800283a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800286a:	e025      	b.n	80028b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800286c:	f7ff f818 	bl	80018a0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d302      	bcc.n	8002882 <HAL_I2C_IsDeviceReady+0x13a>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	22a0      	movs	r2, #160	@ 0xa0
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b02      	cmp	r3, #2
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80028c2:	d005      	beq.n	80028d0 <HAL_I2C_IsDeviceReady+0x188>
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_I2C_IsDeviceReady+0x188>
 80028ca:	7dbb      	ldrb	r3, [r7, #22]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0cd      	beq.n	800286c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d129      	bne.n	800293a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2319      	movs	r3, #25
 8002912:	2201      	movs	r2, #1
 8002914:	4921      	ldr	r1, [pc, #132]	@ (800299c <HAL_I2C_IsDeviceReady+0x254>)
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f994 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e036      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e02c      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002948:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002952:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2319      	movs	r3, #25
 800295a:	2201      	movs	r2, #1
 800295c:	490f      	ldr	r1, [pc, #60]	@ (800299c <HAL_I2C_IsDeviceReady+0x254>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f970 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e012      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	3301      	adds	r3, #1
 8002972:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	f4ff af32 	bcc.w	80027e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	3720      	adds	r7, #32
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	00100002 	.word	0x00100002
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	460b      	mov	r3, r1
 80029b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d006      	beq.n	80029ce <I2C_MasterRequestWrite+0x2a>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d003      	beq.n	80029ce <I2C_MasterRequestWrite+0x2a>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029cc:	d108      	bne.n	80029e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e00b      	b.n	80029f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	d107      	bne.n	80029f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f91d 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a1e:	d103      	bne.n	8002a28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e035      	b.n	8002a98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a34:	d108      	bne.n	8002a48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	e01b      	b.n	8002a80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a48:	897b      	ldrh	r3, [r7, #10]
 8002a4a:	11db      	asrs	r3, r3, #7
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 0306 	and.w	r3, r3, #6
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f063 030f 	orn	r3, r3, #15
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	490e      	ldr	r1, [pc, #56]	@ (8002aa0 <I2C_MasterRequestWrite+0xfc>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f966 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e010      	b.n	8002a98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4907      	ldr	r1, [pc, #28]	@ (8002aa4 <I2C_MasterRequestWrite+0x100>)
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f956 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	00010008 	.word	0x00010008
 8002aa4:	00010002 	.word	0x00010002

08002aa8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002acc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d006      	beq.n	8002ae2 <I2C_MasterRequestRead+0x3a>
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d003      	beq.n	8002ae2 <I2C_MasterRequestRead+0x3a>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ae0:	d108      	bne.n	8002af4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e00b      	b.n	8002b0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	2b11      	cmp	r3, #17
 8002afa:	d107      	bne.n	8002b0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f893 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b32:	d103      	bne.n	8002b3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e079      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b48:	d108      	bne.n	8002b5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	e05f      	b.n	8002c1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b5c:	897b      	ldrh	r3, [r7, #10]
 8002b5e:	11db      	asrs	r3, r3, #7
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 0306 	and.w	r3, r3, #6
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f063 030f 	orn	r3, r3, #15
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4930      	ldr	r1, [pc, #192]	@ (8002c3c <I2C_MasterRequestRead+0x194>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f8dc 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e054      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4929      	ldr	r1, [pc, #164]	@ (8002c40 <I2C_MasterRequestRead+0x198>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8cc 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e044      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f831 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf6:	d103      	bne.n	8002c00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e017      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c04:	897b      	ldrh	r3, [r7, #10]
 8002c06:	11db      	asrs	r3, r3, #7
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 0306 	and.w	r3, r3, #6
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f063 030e 	orn	r3, r3, #14
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4907      	ldr	r1, [pc, #28]	@ (8002c40 <I2C_MasterRequestRead+0x198>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f888 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	00010008 	.word	0x00010008
 8002c40:	00010002 	.word	0x00010002

08002c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c54:	e048      	b.n	8002ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d044      	beq.n	8002ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7fe fe1f 	bl	80018a0 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d139      	bne.n	8002ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10d      	bne.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	43da      	mvns	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	e00c      	b.n	8002cb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d116      	bne.n	8002ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e023      	b.n	8002d30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	0c1b      	lsrs	r3, r3, #16
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10d      	bne.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	e00c      	b.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	43da      	mvns	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d093      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d46:	e071      	b.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d56:	d123      	bne.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e067      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d041      	beq.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da8:	f7fe fd7a 	bl	80018a0 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d302      	bcc.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d136      	bne.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10c      	bne.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e00b      	b.n	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	43da      	mvns	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d016      	beq.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e021      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d10c      	bne.n	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4013      	ands	r3, r2
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e00b      	b.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f af6d 	bne.w	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e84:	e034      	b.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8e3 	bl	8003052 <I2C_IsAcknowledgeFailed>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e034      	b.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d028      	beq.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7fe fcff 	bl	80018a0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d11d      	bne.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebe:	2b80      	cmp	r3, #128	@ 0x80
 8002ec0:	d016      	beq.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e007      	b.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b80      	cmp	r3, #128	@ 0x80
 8002efc:	d1c3      	bne.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f14:	e034      	b.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f89b 	bl	8003052 <I2C_IsAcknowledgeFailed>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e034      	b.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d028      	beq.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe fcb7 	bl	80018a0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11d      	bne.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d016      	beq.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e007      	b.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d1c3      	bne.n	8002f16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa4:	e049      	b.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d119      	bne.n	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0210 	mvn.w	r2, #16
 8002fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e030      	b.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7fe fc5a 	bl	80018a0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11d      	bne.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003008:	2b40      	cmp	r3, #64	@ 0x40
 800300a:	d016      	beq.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f043 0220 	orr.w	r2, r3, #32
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e007      	b.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003044:	2b40      	cmp	r3, #64	@ 0x40
 8003046:	d1ae      	bne.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003068:	d11b      	bne.n	80030a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003072:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e101      	b.n	80032c6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f006 fea5 	bl	8009e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030f0:	d102      	bne.n	80030f8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 f950 	bl	80063a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7c1a      	ldrb	r2, [r3, #16]
 800310a:	f88d 2000 	strb.w	r2, [sp]
 800310e:	3304      	adds	r3, #4
 8003110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003112:	f003 f82f 	bl	8006174 <USB_CoreInit>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0ce      	b.n	80032c6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f003 f948 	bl	80063c4 <USB_SetCurrentMode>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2202      	movs	r2, #2
 800313e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0bf      	b.n	80032c6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e04a      	b.n	80031e2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	3315      	adds	r3, #21
 800315c:	2201      	movs	r2, #1
 800315e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3314      	adds	r3, #20
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	b298      	uxth	r0, r3
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	332e      	adds	r3, #46	@ 0x2e
 8003188:	4602      	mov	r2, r0
 800318a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3318      	adds	r3, #24
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	331c      	adds	r3, #28
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3320      	adds	r3, #32
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3324      	adds	r3, #36	@ 0x24
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	3301      	adds	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	791b      	ldrb	r3, [r3, #4]
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3af      	bcc.n	800314c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e044      	b.n	800327c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	3301      	adds	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	791b      	ldrb	r3, [r3, #4]
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	429a      	cmp	r2, r3
 8003284:	d3b5      	bcc.n	80031f2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7c1a      	ldrb	r2, [r3, #16]
 800328e:	f88d 2000 	strb.w	r2, [sp]
 8003292:	3304      	adds	r3, #4
 8003294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003296:	f003 f8e1 	bl	800645c <USB_DevInit>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e00c      	b.n	80032c6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 f92b 	bl	800751a <USB_DevDisconnect>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_PCD_Start+0x1c>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e022      	b.n	8003330 <HAL_PCD_Start+0x62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 f832 	bl	8006380 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f004 f8d9 	bl	80074d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b08d      	sub	sp, #52	@ 0x34
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f004 f997 	bl	8007682 <USB_GetMode>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 848c 	bne.w	8003c74 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f004 f8fb 	bl	800755c <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8482 	beq.w	8003c72 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f004 f8e8 	bl	800755c <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d107      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f002 0202 	and.w	r2, r2, #2
 80033a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f004 f8d6 	bl	800755c <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d161      	bne.n	800347e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699a      	ldr	r2, [r3, #24]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0210 	bic.w	r2, r2, #16
 80033c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	3304      	adds	r3, #4
 80033e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80033f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033f4:	d124      	bne.n	8003440 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d035      	beq.n	800346e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800340c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003410:	b29b      	uxth	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	6a38      	ldr	r0, [r7, #32]
 8003416:	f003 ff0d 	bl	8007234 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003426:	441a      	add	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003438:	441a      	add	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	615a      	str	r2, [r3, #20]
 800343e:	e016      	b.n	800346e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003446:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800344a:	d110      	bne.n	800346e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003452:	2208      	movs	r2, #8
 8003454:	4619      	mov	r1, r3
 8003456:	6a38      	ldr	r0, [r7, #32]
 8003458:	f003 feec 	bl	8007234 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003468:	441a      	add	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0210 	orr.w	r2, r2, #16
 800347c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 f86a 	bl	800755c <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800348e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003492:	f040 80a7 	bne.w	80035e4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f004 f86f 	bl	8007582 <USB_ReadDevAllOutEpInterrupt>
 80034a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80034a6:	e099      	b.n	80035dc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 808e 	beq.w	80035d0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f004 f893 	bl	80075ea <USB_ReadDevOutEPInterrupt>
 80034c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	2301      	movs	r3, #1
 80034e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fea3 	bl	8004230 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00c      	beq.n	800350e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003500:	461a      	mov	r2, r3
 8003502:	2308      	movs	r3, #8
 8003504:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003506:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 ff79 	bl	8004400 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	2310      	movs	r3, #16
 8003528:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d030      	beq.n	8003596 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353c:	2b80      	cmp	r3, #128	@ 0x80
 800353e:	d109      	bne.n	8003554 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800354e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003552:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	3304      	adds	r3, #4
 8003568:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	78db      	ldrb	r3, [r3, #3]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d108      	bne.n	8003584 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f006 fd50 	bl	800a024 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	2302      	movs	r3, #2
 8003594:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ac:	461a      	mov	r2, r3
 80035ae:	2320      	movs	r3, #32
 80035b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c8:	461a      	mov	r2, r3
 80035ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035ce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	3301      	adds	r3, #1
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f47f af62 	bne.w	80034a8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 ffb7 	bl	800755c <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035f8:	f040 80db 	bne.w	80037b2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f003 ffd8 	bl	80075b6 <USB_ReadDevAllInEpInterrupt>
 8003606:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800360c:	e0cd      	b.n	80037aa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800360e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80c2 	beq.w	800379e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f003 fffe 	bl	8007626 <USB_ReadDevInEPInterrupt>
 800362a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d057      	beq.n	80036e6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	2201      	movs	r2, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800364a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	43db      	mvns	r3, r3
 8003650:	69f9      	ldr	r1, [r7, #28]
 8003652:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003656:	4013      	ands	r3, r2
 8003658:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003666:	461a      	mov	r2, r3
 8003668:	2301      	movs	r3, #1
 800366a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	799b      	ldrb	r3, [r3, #6]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d132      	bne.n	80036da <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	3320      	adds	r3, #32
 8003684:	6819      	ldr	r1, [r3, #0]
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4403      	add	r3, r0
 8003694:	331c      	adds	r3, #28
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4419      	add	r1, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4403      	add	r3, r0
 80036a8:	3320      	adds	r3, #32
 80036aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d113      	bne.n	80036da <HAL_PCD_IRQHandler+0x3a2>
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3324      	adds	r3, #36	@ 0x24
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d108      	bne.n	80036da <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036d2:	461a      	mov	r2, r3
 80036d4:	2101      	movs	r1, #1
 80036d6:	f004 f805 	bl	80076e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	4619      	mov	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f006 fc24 	bl	8009f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036fc:	461a      	mov	r2, r3
 80036fe:	2308      	movs	r3, #8
 8003700:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003718:	461a      	mov	r2, r3
 800371a:	2310      	movs	r3, #16
 800371c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003734:	461a      	mov	r2, r3
 8003736:	2340      	movs	r3, #64	@ 0x40
 8003738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d023      	beq.n	800378c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003744:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003746:	6a38      	ldr	r0, [r7, #32]
 8003748:	f002 ffec 	bl	8006724 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800374c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	3310      	adds	r3, #16
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	78db      	ldrb	r3, [r3, #3]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d108      	bne.n	800377a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	b2db      	uxtb	r3, r3
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f006 fc67 	bl	800a048 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003786:	461a      	mov	r2, r3
 8003788:	2302      	movs	r3, #2
 800378a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003796:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fcbd 	bl	8004118 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	3301      	adds	r3, #1
 80037a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f af2e 	bne.w	800360e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fed0 	bl	800755c <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037c6:	d122      	bne.n	800380e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037ee:	2100      	movs	r1, #0
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fea3 	bl	800453c <HAL_PCDEx_LPM_Callback>
 80037f6:	e002      	b.n	80037fe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f006 fc05 	bl	800a008 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800380c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f003 fea2 	bl	800755c <USB_ReadInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800381e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003822:	d112      	bne.n	800384a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d102      	bne.n	800383a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f006 fbc1 	bl	8009fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003848:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f003 fe84 	bl	800755c <USB_ReadInterrupts>
 8003854:	4603      	mov	r3, r0
 8003856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385e:	f040 80b7 	bne.w	80039d0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2110      	movs	r1, #16
 800387c:	4618      	mov	r0, r3
 800387e:	f002 ff51 	bl	8006724 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003882:	2300      	movs	r3, #0
 8003884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003886:	e046      	b.n	8003916 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003894:	461a      	mov	r2, r3
 8003896:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800389a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800389c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ac:	0151      	lsls	r1, r2, #5
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	440a      	add	r2, r1
 80038b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c8:	461a      	mov	r2, r3
 80038ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e0:	0151      	lsls	r1, r2, #5
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	440a      	add	r2, r1
 80038e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800390a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800390e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003912:	3301      	adds	r3, #1
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	791b      	ldrb	r3, [r3, #4]
 800391a:	461a      	mov	r2, r3
 800391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391e:	4293      	cmp	r3, r2
 8003920:	d3b2      	bcc.n	8003888 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003930:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003934:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7bdb      	ldrb	r3, [r3, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800394e:	f043 030b 	orr.w	r3, r3, #11
 8003952:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003964:	f043 030b 	orr.w	r3, r3, #11
 8003968:	6453      	str	r3, [r2, #68]	@ 0x44
 800396a:	e015      	b.n	8003998 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800397a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800397e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003982:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003992:	f043 030b 	orr.w	r3, r3, #11
 8003996:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039ba:	461a      	mov	r2, r3
 80039bc:	f003 fe92 	bl	80076e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80039ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fdc1 	bl	800755c <USB_ReadInterrupts>
 80039da:	4603      	mov	r3, r0
 80039dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e4:	d123      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 fe57 	bl	800769e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f002 ff0e 	bl	8006816 <USB_GetDevSpeed>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681c      	ldr	r4, [r3, #0]
 8003a06:	f001 f9c9 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8003a0a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a10:	461a      	mov	r2, r3
 8003a12:	4620      	mov	r0, r4
 8003a14:	f002 fc12 	bl	800623c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f006 fab0 	bl	8009f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 fd92 	bl	800755c <USB_ReadInterrupts>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d10a      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f006 fa8d 	bl	8009f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f002 0208 	and.w	r2, r2, #8
 8003a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f003 fd7d 	bl	800755c <USB_ReadInterrupts>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a68:	2b80      	cmp	r3, #128	@ 0x80
 8003a6a:	d123      	bne.n	8003ab4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a78:	2301      	movs	r3, #1
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7c:	e014      	b.n	8003aa8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d105      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fb0a 	bl	80040b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	791b      	ldrb	r3, [r3, #4]
 8003aac:	461a      	mov	r2, r3
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d3e4      	bcc.n	8003a7e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 fd4f 	bl	800755c <USB_ReadInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ac8:	d13c      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aca:	2301      	movs	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ace:	e02b      	b.n	8003b28 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	3318      	adds	r3, #24
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d115      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003af6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da12      	bge.n	8003b22 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	3317      	adds	r3, #23
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 faca 	bl	80040b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	3301      	adds	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	791b      	ldrb	r3, [r3, #4]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d3cd      	bcc.n	8003ad0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 fd07 	bl	800755c <USB_ReadInterrupts>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b58:	d156      	bne.n	8003c08 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b5e:	e045      	b.n	8003bec <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d12e      	bne.n	8003be6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	da2b      	bge.n	8003be6 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	0c1a      	lsrs	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003b98:	4053      	eors	r3, r2
 8003b9a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d121      	bne.n	8003be6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003be2:	6053      	str	r3, [r2, #4]
            break;
 8003be4:	e008      	b.n	8003bf8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	3301      	adds	r3, #1
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	791b      	ldrb	r3, [r3, #4]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d3b3      	bcc.n	8003b60 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f003 fca5 	bl	800755c <USB_ReadInterrupts>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c1c:	d10a      	bne.n	8003c34 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f006 fa24 	bl	800a06c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f003 fc8f 	bl	800755c <USB_ReadInterrupts>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d115      	bne.n	8003c74 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f006 fa14 	bl	800a088 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	e000      	b.n	8003c74 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003c72:	bf00      	nop
    }
  }
}
 8003c74:	3734      	adds	r7, #52	@ 0x34
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd90      	pop	{r4, r7, pc}

08003c7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	460b      	mov	r3, r1
 8003c84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_PCD_SetAddress+0x1a>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e012      	b.n	8003cba <HAL_PCD_SetAddress+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f003 fbee 	bl	800748c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	4608      	mov	r0, r1
 8003ccc:	4611      	mov	r1, r2
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	70fb      	strb	r3, [r7, #3]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	803b      	strh	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	da0f      	bge.n	8003d08 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	f003 020f 	and.w	r2, r3, #15
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	3310      	adds	r3, #16
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	705a      	strb	r2, [r3, #1]
 8003d06:	e00f      	b.n	8003d28 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3304      	adds	r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d34:	883b      	ldrh	r3, [r7, #0]
 8003d36:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	78ba      	ldrb	r2, [r7, #2]
 8003d42:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d56:	78bb      	ldrb	r3, [r7, #2]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d102      	bne.n	8003d62 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_PCD_EP_Open+0xae>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e00e      	b.n	8003d8e <HAL_PCD_EP_Open+0xcc>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68f9      	ldr	r1, [r7, #12]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fd6e 	bl	8006860 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003d8c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	da0f      	bge.n	8003dca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	f003 020f 	and.w	r2, r3, #15
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	3310      	adds	r3, #16
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	705a      	strb	r2, [r3, #1]
 8003dc8:	e00f      	b.n	8003dea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	f003 020f 	and.w	r2, r3, #15
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	4413      	add	r3, r2
 8003de0:	3304      	adds	r3, #4
 8003de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_PCD_EP_Close+0x6e>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e00e      	b.n	8003e22 <HAL_PCD_EP_Close+0x8c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f002 fdac 	bl	8006970 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	460b      	mov	r3, r1
 8003e38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e3a:	7afb      	ldrb	r3, [r7, #11]
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	3304      	adds	r3, #4
 8003e52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e6c:	7afb      	ldrb	r3, [r7, #11]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	799b      	ldrb	r3, [r3, #6]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d102      	bne.n	8003e86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	799b      	ldrb	r3, [r3, #6]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6979      	ldr	r1, [r7, #20]
 8003e92:	f002 fe49 	bl	8006b28 <USB_EPStartXfer>

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	f003 020f 	and.w	r2, r3, #15
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	460b      	mov	r3, r1
 8003ede:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	3310      	adds	r3, #16
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	799b      	ldrb	r3, [r3, #6]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d102      	bne.n	8003f2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	799b      	ldrb	r3, [r3, #6]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6979      	ldr	r1, [r7, #20]
 8003f36:	f002 fdf7 	bl	8006b28 <USB_EPStartXfer>

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	7912      	ldrb	r2, [r2, #4]
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e04f      	b.n	8004002 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da0f      	bge.n	8003f8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	3310      	adds	r3, #16
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	705a      	strb	r2, [r3, #1]
 8003f88:	e00d      	b.n	8003fa6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_PCD_EP_SetStall+0x82>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e01d      	b.n	8004002 <HAL_PCD_EP_SetStall+0xbe>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68f9      	ldr	r1, [r7, #12]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f003 f985 	bl	80072e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7999      	ldrb	r1, [r3, #6]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f003 fb76 	bl	80076e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	7912      	ldrb	r2, [r2, #4]
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e042      	b.n	80040ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800402c:	2b00      	cmp	r3, #0
 800402e:	da0f      	bge.n	8004050 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	f003 020f 	and.w	r2, r3, #15
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	3310      	adds	r3, #16
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4413      	add	r3, r2
 8004044:	3304      	adds	r3, #4
 8004046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	705a      	strb	r2, [r3, #1]
 800404e:	e00f      	b.n	8004070 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 020f 	and.w	r2, r3, #15
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	3304      	adds	r3, #4
 8004068:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	b2da      	uxtb	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_PCD_EP_ClrStall+0x86>
 800408c:	2302      	movs	r3, #2
 800408e:	e00e      	b.n	80040ae <HAL_PCD_EP_ClrStall+0xa4>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68f9      	ldr	r1, [r7, #12]
 800409e:	4618      	mov	r0, r3
 80040a0:	f003 f98e 	bl	80073c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	da0c      	bge.n	80040e4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	f003 020f 	and.w	r2, r3, #15
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	3310      	adds	r3, #16
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	3304      	adds	r3, #4
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e00c      	b.n	80040fe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 020f 	and.w	r2, r3, #15
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	4618      	mov	r0, r3
 8004106:	f002 ffad 	bl	8007064 <USB_EPStopXfer>
 800410a:	4603      	mov	r3, r0
 800410c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800410e:	7afb      	ldrb	r3, [r7, #11]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	@ 0x28
 800411c:	af02      	add	r7, sp, #8
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	3310      	adds	r3, #16
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	3304      	adds	r3, #4
 800413e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d901      	bls.n	8004150 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e06b      	b.n	8004228 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	429a      	cmp	r2, r3
 8004164:	d902      	bls.n	800416c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	3303      	adds	r3, #3
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004174:	e02a      	b.n	80041cc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	429a      	cmp	r2, r3
 800418a:	d902      	bls.n	8004192 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3303      	adds	r3, #3
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68d9      	ldr	r1, [r3, #12]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4603      	mov	r3, r0
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f003 f802 	bl	80071b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	441a      	add	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	441a      	add	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d809      	bhi.n	80041f6 <PCD_WriteEmptyTxFifo+0xde>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d203      	bcs.n	80041f6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1bf      	bne.n	8004176 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d811      	bhi.n	8004226 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	2201      	movs	r2, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	43db      	mvns	r3, r3
 800421c:	6939      	ldr	r1, [r7, #16]
 800421e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004222:	4013      	ands	r3, r2
 8004224:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	333c      	adds	r3, #60	@ 0x3c
 8004248:	3304      	adds	r3, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	799b      	ldrb	r3, [r3, #6]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d17b      	bne.n	800435e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	4a61      	ldr	r2, [pc, #388]	@ (80043f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	f240 80b9 	bls.w	80043ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80b3 	beq.w	80043ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004292:	461a      	mov	r2, r3
 8004294:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004298:	6093      	str	r3, [r2, #8]
 800429a:	e0a7      	b.n	80043ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b2:	461a      	mov	r2, r3
 80042b4:	2320      	movs	r3, #32
 80042b6:	6093      	str	r3, [r2, #8]
 80042b8:	e098      	b.n	80043ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f040 8093 	bne.w	80043ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4a4b      	ldr	r2, [pc, #300]	@ (80043f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d90f      	bls.n	80042ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e4:	461a      	mov	r2, r3
 80042e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ea:	6093      	str	r3, [r2, #8]
 80042ec:	e07e      	b.n	80043ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	3304      	adds	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	0159      	lsls	r1, r3, #5
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	440b      	add	r3, r1
 8004310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431a:	1ad2      	subs	r2, r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d114      	bne.n	8004350 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004338:	461a      	mov	r2, r3
 800433a:	2101      	movs	r1, #1
 800433c:	f003 f9d2 	bl	80076e4 <USB_EP0_OutStart>
 8004340:	e006      	b.n	8004350 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	441a      	add	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f005 fdce 	bl	8009ef8 <HAL_PCD_DataOutStageCallback>
 800435c:	e046      	b.n	80043ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4a26      	ldr	r2, [pc, #152]	@ (80043fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d124      	bne.n	80043b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800437c:	461a      	mov	r2, r3
 800437e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004382:	6093      	str	r3, [r2, #8]
 8004384:	e032      	b.n	80043ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439c:	461a      	mov	r2, r3
 800439e:	2320      	movs	r3, #32
 80043a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	4619      	mov	r1, r3
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f005 fda5 	bl	8009ef8 <HAL_PCD_DataOutStageCallback>
 80043ae:	e01d      	b.n	80043ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d114      	bne.n	80043e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d108      	bne.n	80043e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043d8:	461a      	mov	r2, r3
 80043da:	2100      	movs	r1, #0
 80043dc:	f003 f982 	bl	80076e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f005 fd86 	bl	8009ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	4f54300a 	.word	0x4f54300a
 80043fc:	4f54310a 	.word	0x4f54310a

08004400 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	333c      	adds	r3, #60	@ 0x3c
 8004418:	3304      	adds	r3, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a15      	ldr	r2, [pc, #84]	@ (8004488 <PCD_EP_OutSetupPacket_int+0x88>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d90e      	bls.n	8004454 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444c:	461a      	mov	r2, r3
 800444e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004452:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f005 fd3d 	bl	8009ed4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a0a      	ldr	r2, [pc, #40]	@ (8004488 <PCD_EP_OutSetupPacket_int+0x88>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d90c      	bls.n	800447c <PCD_EP_OutSetupPacket_int+0x7c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	799b      	ldrb	r3, [r3, #6]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d108      	bne.n	800447c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004474:	461a      	mov	r2, r3
 8004476:	2101      	movs	r1, #1
 8004478:	f003 f934 	bl	80076e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	4f54300a 	.word	0x4f54300a

0800448c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
 8004498:	4613      	mov	r3, r2
 800449a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d107      	bne.n	80044ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044aa:	883b      	ldrh	r3, [r7, #0]
 80044ac:	0419      	lsls	r1, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80044b8:	e028      	b.n	800450c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e00d      	b.n	80044ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	3340      	adds	r3, #64	@ 0x40
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	3301      	adds	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
 80044ea:	7bfa      	ldrb	r2, [r7, #15]
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d3ec      	bcc.n	80044ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044f4:	883b      	ldrh	r3, [r7, #0]
 80044f6:	0418      	lsls	r0, r3, #16
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	3b01      	subs	r3, #1
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	4302      	orrs	r2, r0
 8004504:	3340      	adds	r3, #64	@ 0x40
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e267      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d075      	beq.n	800465e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004572:	4b88      	ldr	r3, [pc, #544]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b04      	cmp	r3, #4
 800457c:	d00c      	beq.n	8004598 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b85      	ldr	r3, [pc, #532]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004586:	2b08      	cmp	r3, #8
 8004588:	d112      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458a:	4b82      	ldr	r3, [pc, #520]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004596:	d10b      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	4b7e      	ldr	r3, [pc, #504]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d05b      	beq.n	800465c <HAL_RCC_OscConfig+0x108>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d157      	bne.n	800465c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e242      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x74>
 80045ba:	4b76      	ldr	r3, [pc, #472]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a75      	ldr	r2, [pc, #468]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e01d      	b.n	8004604 <HAL_RCC_OscConfig+0xb0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x98>
 80045d2:	4b70      	ldr	r3, [pc, #448]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b6d      	ldr	r3, [pc, #436]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6c      	ldr	r2, [pc, #432]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0xb0>
 80045ec:	4b69      	ldr	r3, [pc, #420]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a68      	ldr	r2, [pc, #416]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b66      	ldr	r3, [pc, #408]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a65      	ldr	r2, [pc, #404]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fd f948 	bl	80018a0 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd f944 	bl	80018a0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	@ 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e207      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b5b      	ldr	r3, [pc, #364]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0xc0>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fd f934 	bl	80018a0 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd f930 	bl	80018a0 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	@ 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e1f3      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464e:	4b51      	ldr	r3, [pc, #324]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0xe8>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d063      	beq.n	8004732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800466a:	4b4a      	ldr	r3, [pc, #296]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004676:	4b47      	ldr	r3, [pc, #284]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800467e:	2b08      	cmp	r3, #8
 8004680:	d11c      	bne.n	80046bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b44      	ldr	r3, [pc, #272]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d116      	bne.n	80046bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	4b41      	ldr	r3, [pc, #260]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_RCC_OscConfig+0x152>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e1c7      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4937      	ldr	r1, [pc, #220]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	e03a      	b.n	8004732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d020      	beq.n	8004706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c4:	4b34      	ldr	r3, [pc, #208]	@ (8004798 <HAL_RCC_OscConfig+0x244>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd f8e9 	bl	80018a0 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fd f8e5 	bl	80018a0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e1a8      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4925      	ldr	r1, [pc, #148]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004700:	4313      	orrs	r3, r2
 8004702:	600b      	str	r3, [r1, #0]
 8004704:	e015      	b.n	8004732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004706:	4b24      	ldr	r3, [pc, #144]	@ (8004798 <HAL_RCC_OscConfig+0x244>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd f8c8 	bl	80018a0 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004714:	f7fd f8c4 	bl	80018a0 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e187      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004726:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d036      	beq.n	80047ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d016      	beq.n	8004774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004746:	4b15      	ldr	r3, [pc, #84]	@ (800479c <HAL_RCC_OscConfig+0x248>)
 8004748:	2201      	movs	r2, #1
 800474a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fd f8a8 	bl	80018a0 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004754:	f7fd f8a4 	bl	80018a0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e167      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004766:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x200>
 8004772:	e01b      	b.n	80047ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004774:	4b09      	ldr	r3, [pc, #36]	@ (800479c <HAL_RCC_OscConfig+0x248>)
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fd f891 	bl	80018a0 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004780:	e00e      	b.n	80047a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004782:	f7fd f88d 	bl	80018a0 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d907      	bls.n	80047a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e150      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
 8004794:	40023800 	.word	0x40023800
 8004798:	42470000 	.word	0x42470000
 800479c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a0:	4b88      	ldr	r3, [pc, #544]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ea      	bne.n	8004782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8097 	beq.w	80048e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047be:	4b81      	ldr	r3, [pc, #516]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10f      	bne.n	80047ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	4b7d      	ldr	r3, [pc, #500]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	4a7c      	ldr	r2, [pc, #496]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047da:	4b7a      	ldr	r3, [pc, #488]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ea:	4b77      	ldr	r3, [pc, #476]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d118      	bne.n	8004828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f6:	4b74      	ldr	r3, [pc, #464]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a73      	ldr	r2, [pc, #460]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004802:	f7fd f84d 	bl	80018a0 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fd f849 	bl	80018a0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e10c      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	4b6a      	ldr	r3, [pc, #424]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x2ea>
 8004830:	4b64      	ldr	r3, [pc, #400]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004834:	4a63      	ldr	r2, [pc, #396]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6713      	str	r3, [r2, #112]	@ 0x70
 800483c:	e01c      	b.n	8004878 <HAL_RCC_OscConfig+0x324>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b05      	cmp	r3, #5
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x30c>
 8004846:	4b5f      	ldr	r3, [pc, #380]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484a:	4a5e      	ldr	r2, [pc, #376]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 800484c:	f043 0304 	orr.w	r3, r3, #4
 8004850:	6713      	str	r3, [r2, #112]	@ 0x70
 8004852:	4b5c      	ldr	r3, [pc, #368]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	4a5b      	ldr	r2, [pc, #364]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6713      	str	r3, [r2, #112]	@ 0x70
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0x324>
 8004860:	4b58      	ldr	r3, [pc, #352]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004864:	4a57      	ldr	r2, [pc, #348]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	6713      	str	r3, [r2, #112]	@ 0x70
 800486c:	4b55      	ldr	r3, [pc, #340]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004870:	4a54      	ldr	r2, [pc, #336]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 0304 	bic.w	r3, r3, #4
 8004876:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d015      	beq.n	80048ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fd f80e 	bl	80018a0 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fd f80a 	bl	80018a0 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0cb      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	4b49      	ldr	r3, [pc, #292]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0ee      	beq.n	8004888 <HAL_RCC_OscConfig+0x334>
 80048aa:	e014      	b.n	80048d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ac:	f7fc fff8 	bl	80018a0 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fc fff4 	bl	80018a0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0b5      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ca:	4b3e      	ldr	r3, [pc, #248]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ee      	bne.n	80048b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d105      	bne.n	80048e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048dc:	4b39      	ldr	r3, [pc, #228]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	4a38      	ldr	r2, [pc, #224]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80a1 	beq.w	8004a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f2:	4b34      	ldr	r3, [pc, #208]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d05c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d141      	bne.n	800498a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004906:	4b31      	ldr	r3, [pc, #196]	@ (80049cc <HAL_RCC_OscConfig+0x478>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fc ffc8 	bl	80018a0 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004914:	f7fc ffc4 	bl	80018a0 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e087      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004926:	4b27      	ldr	r3, [pc, #156]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	491b      	ldr	r1, [pc, #108]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800495c:	4b1b      	ldr	r3, [pc, #108]	@ (80049cc <HAL_RCC_OscConfig+0x478>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7fc ff9d 	bl	80018a0 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496a:	f7fc ff99 	bl	80018a0 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e05c      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497c:	4b11      	ldr	r3, [pc, #68]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x416>
 8004988:	e054      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498a:	4b10      	ldr	r3, [pc, #64]	@ (80049cc <HAL_RCC_OscConfig+0x478>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fc ff86 	bl	80018a0 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004998:	f7fc ff82 	bl	80018a0 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e045      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049aa:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x444>
 80049b6:	e03d      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e038      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40007000 	.word	0x40007000
 80049cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a40 <HAL_RCC_OscConfig+0x4ec>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d028      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d121      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d11a      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a00:	4013      	ands	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800

08004a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0cc      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a58:	4b68      	ldr	r3, [pc, #416]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d90c      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b65      	ldr	r3, [pc, #404]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b63      	ldr	r3, [pc, #396]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0b8      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d020      	beq.n	8004ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a98:	4b59      	ldr	r3, [pc, #356]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a58      	ldr	r2, [pc, #352]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab0:	4b53      	ldr	r3, [pc, #332]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4a52      	ldr	r2, [pc, #328]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004abc:	4b50      	ldr	r3, [pc, #320]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	494d      	ldr	r1, [pc, #308]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d044      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	4b47      	ldr	r3, [pc, #284]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d119      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e07f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d107      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b02:	4b3f      	ldr	r3, [pc, #252]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e06f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b12:	4b3b      	ldr	r3, [pc, #236]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e067      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b22:	4b37      	ldr	r3, [pc, #220]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f023 0203 	bic.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4934      	ldr	r1, [pc, #208]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b34:	f7fc feb4 	bl	80018a0 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3c:	f7fc feb0 	bl	80018a0 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e04f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	4b2b      	ldr	r3, [pc, #172]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 020c 	and.w	r2, r3, #12
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d1eb      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b64:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d20c      	bcs.n	8004b8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4b22      	ldr	r3, [pc, #136]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e032      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b98:	4b19      	ldr	r3, [pc, #100]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4916      	ldr	r1, [pc, #88]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb6:	4b12      	ldr	r3, [pc, #72]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	490e      	ldr	r1, [pc, #56]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bca:	f000 f821 	bl	8004c10 <HAL_RCC_GetSysClockFreq>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	490a      	ldr	r1, [pc, #40]	@ (8004c04 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	5ccb      	ldrb	r3, [r1, r3]
 8004bde:	fa22 f303 	lsr.w	r3, r2, r3
 8004be2:	4a09      	ldr	r2, [pc, #36]	@ (8004c08 <HAL_RCC_ClockConfig+0x1c4>)
 8004be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004be6:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <HAL_RCC_ClockConfig+0x1c8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fe14 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023c00 	.word	0x40023c00
 8004c00:	40023800 	.word	0x40023800
 8004c04:	0800ce90 	.word	0x0800ce90
 8004c08:	20000004 	.word	0x20000004
 8004c0c:	20000008 	.word	0x20000008

08004c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c14:	b090      	sub	sp, #64	@ 0x40
 8004c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c28:	4b59      	ldr	r3, [pc, #356]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d00d      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x40>
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	f200 80a1 	bhi.w	8004d7c <HAL_RCC_GetSysClockFreq+0x16c>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0x34>
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d003      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c42:	e09b      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b53      	ldr	r3, [pc, #332]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c48:	e09b      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c4a:	4b53      	ldr	r3, [pc, #332]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c4e:	e098      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c50:	4b4f      	ldr	r3, [pc, #316]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d028      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c66:	4b4a      	ldr	r3, [pc, #296]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4b47      	ldr	r3, [pc, #284]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c7c:	fb03 f201 	mul.w	r2, r3, r1
 8004c80:	2300      	movs	r3, #0
 8004c82:	fb00 f303 	mul.w	r3, r0, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	4a43      	ldr	r2, [pc, #268]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c90:	460a      	mov	r2, r1
 8004c92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c96:	4413      	add	r3, r2
 8004c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004caa:	f7fb ff85 	bl	8000bb8 <__aeabi_uldivmod>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cb6:	e053      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb8:	4b35      	ldr	r3, [pc, #212]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	617a      	str	r2, [r7, #20]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cca:	f04f 0b00 	mov.w	fp, #0
 8004cce:	4652      	mov	r2, sl
 8004cd0:	465b      	mov	r3, fp
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	0159      	lsls	r1, r3, #5
 8004cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce0:	0150      	lsls	r0, r2, #5
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	ebb2 080a 	subs.w	r8, r2, sl
 8004cea:	eb63 090b 	sbc.w	r9, r3, fp
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d02:	ebb2 0408 	subs.w	r4, r2, r8
 8004d06:	eb63 0509 	sbc.w	r5, r3, r9
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	00eb      	lsls	r3, r5, #3
 8004d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d18:	00e2      	lsls	r2, r4, #3
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	461d      	mov	r5, r3
 8004d1e:	eb14 030a 	adds.w	r3, r4, sl
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	eb45 030b 	adc.w	r3, r5, fp
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d36:	4629      	mov	r1, r5
 8004d38:	028b      	lsls	r3, r1, #10
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d40:	4621      	mov	r1, r4
 8004d42:	028a      	lsls	r2, r1, #10
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	60fa      	str	r2, [r7, #12]
 8004d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d54:	f7fb ff30 	bl	8000bb8 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004d70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3740      	adds	r7, #64	@ 0x40
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	00f42400 	.word	0x00f42400
 8004d98:	017d7840 	.word	0x017d7840

08004d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da0:	4b03      	ldr	r3, [pc, #12]	@ (8004db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000004 	.word	0x20000004

08004db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004db8:	f7ff fff0 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	0a9b      	lsrs	r3, r3, #10
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	4903      	ldr	r1, [pc, #12]	@ (8004dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	0800cea0 	.word	0x0800cea0

08004ddc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d038      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e04:	4b68      	ldr	r3, [pc, #416]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0a:	f7fc fd49 	bl	80018a0 <HAL_GetTick>
 8004e0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e12:	f7fc fd45 	bl	80018a0 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0bd      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e24:	4b61      	ldr	r3, [pc, #388]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	071b      	lsls	r3, r3, #28
 8004e42:	495a      	ldr	r1, [pc, #360]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e4a:	4b57      	ldr	r3, [pc, #348]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e50:	f7fc fd26 	bl	80018a0 <HAL_GetTick>
 8004e54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e58:	f7fc fd22 	bl	80018a0 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e09a      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e6a:	4b50      	ldr	r3, [pc, #320]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8083 	beq.w	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	4b48      	ldr	r3, [pc, #288]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	4a47      	ldr	r2, [pc, #284]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e94:	4b45      	ldr	r3, [pc, #276]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ea0:	4b43      	ldr	r3, [pc, #268]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a42      	ldr	r2, [pc, #264]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eac:	f7fc fcf8 	bl	80018a0 <HAL_GetTick>
 8004eb0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb4:	f7fc fcf4 	bl	80018a0 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e06c      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ed2:	4b36      	ldr	r3, [pc, #216]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eda:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d02f      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d028      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004efa:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f00:	4b2c      	ldr	r3, [pc, #176]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f06:	4a29      	ldr	r2, [pc, #164]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f0c:	4b27      	ldr	r3, [pc, #156]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d114      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fc fcc2 	bl	80018a0 <HAL_GetTick>
 8004f1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fc fcbe 	bl	80018a0 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e034      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	4b1d      	ldr	r3, [pc, #116]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ee      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f4e:	d10d      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f50:	4b16      	ldr	r3, [pc, #88]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f64:	4911      	ldr	r1, [pc, #68]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
 8004f6a:	e005      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4a0e      	ldr	r2, [pc, #56]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f76:	6093      	str	r3, [r2, #8]
 8004f78:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f84:	4909      	ldr	r1, [pc, #36]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7d1a      	ldrb	r2, [r3, #20]
 8004f9a:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f9c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	42470068 	.word	0x42470068
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40007000 	.word	0x40007000
 8004fb4:	42470e40 	.word	0x42470e40
 8004fb8:	424711e0 	.word	0x424711e0

08004fbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e073      	b.n	80050b6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7f5b      	ldrb	r3, [r3, #29]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc fa64 	bl	80014ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b10      	cmp	r3, #16
 8004ff6:	d055      	beq.n	80050a4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	22ca      	movs	r2, #202	@ 0xca
 8004ffe:	625a      	str	r2, [r3, #36]	@ 0x24
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2253      	movs	r2, #83	@ 0x53
 8005006:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fa49 	bl	80054a0 <RTC_EnterInitMode>
 800500e:	4603      	mov	r3, r0
 8005010:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d12c      	bne.n	8005072 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800502a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6899      	ldr	r1, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	68d2      	ldr	r2, [r2, #12]
 8005052:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6919      	ldr	r1, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	041a      	lsls	r2, r3, #16
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fa50 	bl	800550e <RTC_ExitInitMode>
 800506e:	4603      	mov	r3, r0
 8005070:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d110      	bne.n	800509a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005086:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	22ff      	movs	r2, #255	@ 0xff
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80050a2:	e001      	b.n	80050a8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050be:	b590      	push	{r4, r7, lr}
 80050c0:	b087      	sub	sp, #28
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	7f1b      	ldrb	r3, [r3, #28]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_RTC_SetTime+0x1c>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e087      	b.n	80051ea <HAL_RTC_SetTime+0x12c>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2202      	movs	r2, #2
 80050e4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d126      	bne.n	800513a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2200      	movs	r2, #0
 80050fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fa27 	bl	8005558 <RTC_ByteToBcd2>
 800510a:	4603      	mov	r3, r0
 800510c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fa20 	bl	8005558 <RTC_ByteToBcd2>
 8005118:	4603      	mov	r3, r0
 800511a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800511c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	789b      	ldrb	r3, [r3, #2]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fa18 	bl	8005558 <RTC_ByteToBcd2>
 8005128:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800512a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	78db      	ldrb	r3, [r3, #3]
 8005132:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e018      	b.n	800516c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2200      	movs	r2, #0
 800514c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800515a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005160:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	78db      	ldrb	r3, [r3, #3]
 8005166:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	22ca      	movs	r2, #202	@ 0xca
 8005172:	625a      	str	r2, [r3, #36]	@ 0x24
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2253      	movs	r2, #83	@ 0x53
 800517a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f98f 	bl	80054a0 <RTC_EnterInitMode>
 8005182:	4603      	mov	r3, r0
 8005184:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005186:	7cfb      	ldrb	r3, [r7, #19]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d120      	bne.n	80051ce <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005196:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800519a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80051aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6899      	ldr	r1, [r3, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f9a2 	bl	800550e <RTC_ExitInitMode>
 80051ca:	4603      	mov	r3, r0
 80051cc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80051ce:	7cfb      	ldrb	r3, [r7, #19]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	22ff      	movs	r2, #255	@ 0xff
 80051e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]

  return status;
 80051e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}

080051f2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b086      	sub	sp, #24
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005224:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005228:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005252:	b2da      	uxtb	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	0d9b      	lsrs	r3, r3, #22
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d11a      	bne.n	80052a4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f98e 	bl	8005594 <RTC_Bcd2ToByte>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	4618      	mov	r0, r3
 8005286:	f000 f985 	bl	8005594 <RTC_Bcd2ToByte>
 800528a:	4603      	mov	r3, r0
 800528c:	461a      	mov	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	789b      	ldrb	r3, [r3, #2]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f97c 	bl	8005594 <RTC_Bcd2ToByte>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052ae:	b590      	push	{r4, r7, lr}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	7f1b      	ldrb	r3, [r3, #28]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_RTC_SetDate+0x1c>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e071      	b.n	80053ae <HAL_RTC_SetDate+0x100>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2202      	movs	r2, #2
 80052d4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10e      	bne.n	80052fa <HAL_RTC_SetDate+0x4c>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	f023 0310 	bic.w	r3, r3, #16
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	330a      	adds	r3, #10
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d11c      	bne.n	800533a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	78db      	ldrb	r3, [r3, #3]
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f927 	bl	8005558 <RTC_ByteToBcd2>
 800530a:	4603      	mov	r3, r0
 800530c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	785b      	ldrb	r3, [r3, #1]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f920 	bl	8005558 <RTC_ByteToBcd2>
 8005318:	4603      	mov	r3, r0
 800531a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800531c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	789b      	ldrb	r3, [r3, #2]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f918 	bl	8005558 <RTC_ByteToBcd2>
 8005328:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800532a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e00e      	b.n	8005358 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	78db      	ldrb	r3, [r3, #3]
 800533e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005346:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800534c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	22ca      	movs	r2, #202	@ 0xca
 800535e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2253      	movs	r2, #83	@ 0x53
 8005366:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f899 	bl	80054a0 <RTC_EnterInitMode>
 800536e:	4603      	mov	r3, r0
 8005370:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10c      	bne.n	8005392 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005382:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005386:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f8c0 	bl	800550e <RTC_ExitInitMode>
 800538e:	4603      	mov	r3, r0
 8005390:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	22ff      	movs	r2, #255	@ 0xff
 80053a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]

  return status;
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd90      	pop	{r4, r7, pc}

080053b6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80053d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80053d4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	0b5b      	lsrs	r3, r3, #13
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11a      	bne.n	800544a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	78db      	ldrb	r3, [r3, #3]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f8bb 	bl	8005594 <RTC_Bcd2ToByte>
 800541e:	4603      	mov	r3, r0
 8005420:	461a      	mov	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f8b2 	bl	8005594 <RTC_Bcd2ToByte>
 8005430:	4603      	mov	r3, r0
 8005432:	461a      	mov	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	789b      	ldrb	r3, [r3, #2]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f8a9 	bl	8005594 <RTC_Bcd2ToByte>
 8005442:	4603      	mov	r3, r0
 8005444:	461a      	mov	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a0d      	ldr	r2, [pc, #52]	@ (800549c <HAL_RTC_WaitForSynchro+0x48>)
 8005466:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005468:	f7fc fa1a 	bl	80018a0 <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800546e:	e009      	b.n	8005484 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005470:	f7fc fa16 	bl	80018a0 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800547e:	d901      	bls.n	8005484 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e007      	b.n	8005494 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0ee      	beq.n	8005470 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	00013f5f 	.word	0x00013f5f

080054a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d122      	bne.n	8005504 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80054cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054ce:	f7fc f9e7 	bl	80018a0 <HAL_GetTick>
 80054d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80054d4:	e00c      	b.n	80054f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054d6:	f7fc f9e3 	bl	80018a0 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054e4:	d904      	bls.n	80054f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2204      	movs	r2, #4
 80054ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <RTC_EnterInitMode+0x64>
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d1e8      	bne.n	80054d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005528:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ff8b 	bl	8005454 <HAL_RTC_WaitForSynchro>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2204      	movs	r2, #4
 8005548:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005566:	e005      	b.n	8005574 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	3b0a      	subs	r3, #10
 8005572:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	2b09      	cmp	r3, #9
 8005578:	d8f6      	bhi.n	8005568 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	b2da      	uxtb	r2, r3
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	4313      	orrs	r3, r2
 8005586:	b2db      	uxtb	r3, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	4413      	add	r3, r2
 80055c2:	b2db      	uxtb	r3, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e07b      	b.n	80056da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d108      	bne.n	80055fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f2:	d009      	beq.n	8005608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	61da      	str	r2, [r3, #28]
 80055fa:	e005      	b.n	8005608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fb ff6e 	bl	8001504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800563e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568c:	ea42 0103 	orr.w	r1, r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	f003 0104 	and.w	r1, r3, #4
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	f003 0210 	and.w	r2, r3, #16
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b088      	sub	sp, #32
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056f2:	f7fc f8d5 	bl	80018a0 <HAL_GetTick>
 80056f6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d001      	beq.n	800570c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
 800570a:	e12a      	b.n	8005962 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Transmit+0x36>
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e122      	b.n	8005962 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_SPI_Transmit+0x48>
 8005726:	2302      	movs	r3, #2
 8005728:	e11b      	b.n	8005962 <HAL_SPI_Transmit+0x280>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2203      	movs	r2, #3
 8005736:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	88fa      	ldrh	r2, [r7, #6]
 800574a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005778:	d10f      	bne.n	800579a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005788:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005798:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a4:	2b40      	cmp	r3, #64	@ 0x40
 80057a6:	d007      	beq.n	80057b8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c0:	d152      	bne.n	8005868 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_SPI_Transmit+0xee>
 80057ca:	8b7b      	ldrh	r3, [r7, #26]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d145      	bne.n	800585c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	881a      	ldrh	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e0:	1c9a      	adds	r2, r3, #2
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057f4:	e032      	b.n	800585c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d112      	bne.n	800582a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005808:	881a      	ldrh	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	1c9a      	adds	r2, r3, #2
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005828:	e018      	b.n	800585c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800582a:	f7fc f839 	bl	80018a0 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d803      	bhi.n	8005842 <HAL_SPI_Transmit+0x160>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d102      	bne.n	8005848 <HAL_SPI_Transmit+0x166>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e082      	b.n	8005962 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1c7      	bne.n	80057f6 <HAL_SPI_Transmit+0x114>
 8005866:	e053      	b.n	8005910 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_SPI_Transmit+0x194>
 8005870:	8b7b      	ldrh	r3, [r7, #26]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d147      	bne.n	8005906 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	330c      	adds	r3, #12
 8005880:	7812      	ldrb	r2, [r2, #0]
 8005882:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800589c:	e033      	b.n	8005906 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d113      	bne.n	80058d4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	7812      	ldrb	r2, [r2, #0]
 80058b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058d2:	e018      	b.n	8005906 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d4:	f7fb ffe4 	bl	80018a0 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d803      	bhi.n	80058ec <HAL_SPI_Transmit+0x20a>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d102      	bne.n	80058f2 <HAL_SPI_Transmit+0x210>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e02d      	b.n	8005962 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1c6      	bne.n	800589e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fbd9 	bl	80060cc <SPI_EndRxTxTransaction>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005960:	2300      	movs	r3, #0
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b088      	sub	sp, #32
 800596e:	af02      	add	r7, sp, #8
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005986:	2302      	movs	r3, #2
 8005988:	e104      	b.n	8005b94 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <HAL_SPI_Receive+0x2c>
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e0fc      	b.n	8005b94 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059a2:	d112      	bne.n	80059ca <HAL_SPI_Receive+0x60>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10e      	bne.n	80059ca <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2204      	movs	r2, #4
 80059b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059b4:	88fa      	ldrh	r2, [r7, #6]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	4613      	mov	r3, r2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 f8eb 	bl	8005b9c <HAL_SPI_TransmitReceive>
 80059c6:	4603      	mov	r3, r0
 80059c8:	e0e4      	b.n	8005b94 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ca:	f7fb ff69 	bl	80018a0 <HAL_GetTick>
 80059ce:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_SPI_Receive+0x74>
 80059da:	2302      	movs	r3, #2
 80059dc:	e0da      	b.n	8005b94 <HAL_SPI_Receive+0x22a>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2204      	movs	r2, #4
 80059ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	88fa      	ldrh	r2, [r7, #6]
 80059fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a2c:	d10f      	bne.n	8005a4e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a58:	2b40      	cmp	r3, #64	@ 0x40
 8005a5a:	d007      	beq.n	8005a6c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d170      	bne.n	8005b56 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a74:	e035      	b.n	8005ae2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d115      	bne.n	8005ab0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f103 020c 	add.w	r2, r3, #12
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005aae:	e018      	b.n	8005ae2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab0:	f7fb fef6 	bl	80018a0 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d803      	bhi.n	8005ac8 <HAL_SPI_Receive+0x15e>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac6:	d102      	bne.n	8005ace <HAL_SPI_Receive+0x164>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e058      	b.n	8005b94 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1c4      	bne.n	8005a76 <HAL_SPI_Receive+0x10c>
 8005aec:	e038      	b.n	8005b60 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d113      	bne.n	8005b24 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b06:	b292      	uxth	r2, r2
 8005b08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b22:	e018      	b.n	8005b56 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b24:	f7fb febc 	bl	80018a0 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d803      	bhi.n	8005b3c <HAL_SPI_Receive+0x1d2>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d102      	bne.n	8005b42 <HAL_SPI_Receive+0x1d8>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e01e      	b.n	8005b94 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1c6      	bne.n	8005aee <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fa4b 	bl	8006000 <SPI_EndRxTransaction>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
  }
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	@ 0x28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005baa:	2301      	movs	r3, #1
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bae:	f7fb fe77 	bl	80018a0 <HAL_GetTick>
 8005bb2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bba:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005bc2:	887b      	ldrh	r3, [r7, #2]
 8005bc4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bc6:	7ffb      	ldrb	r3, [r7, #31]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d00c      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0x4a>
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bd2:	d106      	bne.n	8005be2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <HAL_SPI_TransmitReceive+0x46>
 8005bdc:	7ffb      	ldrb	r3, [r7, #31]
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d001      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
 8005be4:	e17f      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x5c>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x5c>
 8005bf2:	887b      	ldrh	r3, [r7, #2]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e174      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x6e>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e16d      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x34a>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d003      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2205      	movs	r2, #5
 8005c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	887a      	ldrh	r2, [r7, #2]
 8005c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	887a      	ldrh	r2, [r7, #2]
 8005c4e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c66:	2b40      	cmp	r3, #64	@ 0x40
 8005c68:	d007      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c82:	d17e      	bne.n	8005d82 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0xf6>
 8005c8c:	8afb      	ldrh	r3, [r7, #22]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d16c      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	881a      	ldrh	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca2:	1c9a      	adds	r2, r3, #2
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cb6:	e059      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d11b      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x162>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d016      	beq.n	8005cfe <HAL_SPI_TransmitReceive+0x162>
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d113      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cda:	881a      	ldrh	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d119      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x1a4>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d014      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d20:	b292      	uxth	r2, r2
 8005d22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d28:	1c9a      	adds	r2, r3, #2
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d40:	f7fb fdae 	bl	80018a0 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d80d      	bhi.n	8005d6c <HAL_SPI_TransmitReceive+0x1d0>
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d009      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e0bc      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1a0      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x11c>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d19b      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x11c>
 8005d80:	e082      	b.n	8005e88 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_SPI_TransmitReceive+0x1f4>
 8005d8a:	8afb      	ldrh	r3, [r7, #22]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d171      	bne.n	8005e74 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005db6:	e05d      	b.n	8005e74 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d11c      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x264>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d017      	beq.n	8005e00 <HAL_SPI_TransmitReceive+0x264>
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d114      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	7812      	ldrb	r2, [r2, #0]
 8005de2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d119      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x2a6>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d014      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e42:	f7fb fd2d 	bl	80018a0 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d803      	bhi.n	8005e5a <HAL_SPI_TransmitReceive+0x2be>
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d102      	bne.n	8005e60 <HAL_SPI_TransmitReceive+0x2c4>
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d109      	bne.n	8005e74 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e038      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d19c      	bne.n	8005db8 <HAL_SPI_TransmitReceive+0x21c>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d197      	bne.n	8005db8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e88:	6a3a      	ldr	r2, [r7, #32]
 8005e8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f91d 	bl	80060cc <SPI_EndRxTxTransaction>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e01d      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10a      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3728      	adds	r7, #40	@ 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f00:	f7fb fcce 	bl	80018a0 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f10:	f7fb fcc6 	bl	80018a0 <HAL_GetTick>
 8005f14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f16:	4b39      	ldr	r3, [pc, #228]	@ (8005ffc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	015b      	lsls	r3, r3, #5
 8005f1c:	0d1b      	lsrs	r3, r3, #20
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	fb02 f303 	mul.w	r3, r2, r3
 8005f24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f26:	e055      	b.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d051      	beq.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f30:	f7fb fcb6 	bl	80018a0 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d902      	bls.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d13d      	bne.n	8005fc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f5e:	d111      	bne.n	8005f84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f68:	d004      	beq.n	8005f74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f72:	d107      	bne.n	8005f84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f8c:	d10f      	bne.n	8005fae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e018      	b.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	e002      	b.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d19a      	bne.n	8005f28 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3720      	adds	r7, #32
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20000004 	.word	0x20000004

08006000 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006014:	d111      	bne.n	800603a <SPI_EndRxTransaction+0x3a>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800601e:	d004      	beq.n	800602a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006028:	d107      	bne.n	800603a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006038:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006042:	d12a      	bne.n	800609a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604c:	d012      	beq.n	8006074 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	2180      	movs	r1, #128	@ 0x80
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ff49 	bl	8005ef0 <SPI_WaitFlagStateUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d02d      	beq.n	80060c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006068:	f043 0220 	orr.w	r2, r3, #32
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e026      	b.n	80060c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	2101      	movs	r1, #1
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff ff36 	bl	8005ef0 <SPI_WaitFlagStateUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01a      	beq.n	80060c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608e:	f043 0220 	orr.w	r2, r3, #32
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e013      	b.n	80060c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2200      	movs	r2, #0
 80060a2:	2101      	movs	r1, #1
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff ff23 	bl	8005ef0 <SPI_WaitFlagStateUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b4:	f043 0220 	orr.w	r2, r3, #32
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e000      	b.n	80060c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2201      	movs	r2, #1
 80060e0:	2102      	movs	r1, #2
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff ff04 	bl	8005ef0 <SPI_WaitFlagStateUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e032      	b.n	8006164 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060fe:	4b1b      	ldr	r3, [pc, #108]	@ (800616c <SPI_EndRxTxTransaction+0xa0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <SPI_EndRxTxTransaction+0xa4>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	0d5b      	lsrs	r3, r3, #21
 800610a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800611c:	d112      	bne.n	8006144 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2200      	movs	r2, #0
 8006126:	2180      	movs	r1, #128	@ 0x80
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff fee1 	bl	8005ef0 <SPI_WaitFlagStateUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d016      	beq.n	8006162 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006138:	f043 0220 	orr.w	r2, r3, #32
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e00f      	b.n	8006164 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	3b01      	subs	r3, #1
 800614e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615a:	2b80      	cmp	r3, #128	@ 0x80
 800615c:	d0f2      	beq.n	8006144 <SPI_EndRxTxTransaction+0x78>
 800615e:	e000      	b.n	8006162 <SPI_EndRxTxTransaction+0x96>
        break;
 8006160:	bf00      	nop
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000004 	.word	0x20000004
 8006170:	165e9f81 	.word	0x165e9f81

08006174 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006174:	b084      	sub	sp, #16
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	f107 001c 	add.w	r0, r7, #28
 8006182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006186:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800618a:	2b01      	cmp	r3, #1
 800618c:	d123      	bne.n	80061d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80061a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d105      	bne.n	80061ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fae8 	bl	80077a0 <USB_CoreReset>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	e01b      	b.n	800620e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fadc 	bl	80077a0 <USB_CoreReset>
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8006200:	e005      	b.n	800620e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800620e:	7fbb      	ldrb	r3, [r7, #30]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d10b      	bne.n	800622c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f043 0206 	orr.w	r2, r3, #6
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f043 0220 	orr.w	r2, r3, #32
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006238:	b004      	add	sp, #16
 800623a:	4770      	bx	lr

0800623c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d165      	bne.n	800631c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4a41      	ldr	r2, [pc, #260]	@ (8006358 <USB_SetTurnaroundTime+0x11c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d906      	bls.n	8006266 <USB_SetTurnaroundTime+0x2a>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4a40      	ldr	r2, [pc, #256]	@ (800635c <USB_SetTurnaroundTime+0x120>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d202      	bcs.n	8006266 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006260:	230f      	movs	r3, #15
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e062      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4a3c      	ldr	r2, [pc, #240]	@ (800635c <USB_SetTurnaroundTime+0x120>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d306      	bcc.n	800627c <USB_SetTurnaroundTime+0x40>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a3b      	ldr	r2, [pc, #236]	@ (8006360 <USB_SetTurnaroundTime+0x124>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d202      	bcs.n	800627c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006276:	230e      	movs	r3, #14
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e057      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a38      	ldr	r2, [pc, #224]	@ (8006360 <USB_SetTurnaroundTime+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d306      	bcc.n	8006292 <USB_SetTurnaroundTime+0x56>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a37      	ldr	r2, [pc, #220]	@ (8006364 <USB_SetTurnaroundTime+0x128>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d202      	bcs.n	8006292 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800628c:	230d      	movs	r3, #13
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e04c      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a33      	ldr	r2, [pc, #204]	@ (8006364 <USB_SetTurnaroundTime+0x128>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d306      	bcc.n	80062a8 <USB_SetTurnaroundTime+0x6c>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a32      	ldr	r2, [pc, #200]	@ (8006368 <USB_SetTurnaroundTime+0x12c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d802      	bhi.n	80062a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062a2:	230c      	movs	r3, #12
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e041      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006368 <USB_SetTurnaroundTime+0x12c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d906      	bls.n	80062be <USB_SetTurnaroundTime+0x82>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a2e      	ldr	r2, [pc, #184]	@ (800636c <USB_SetTurnaroundTime+0x130>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d802      	bhi.n	80062be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062b8:	230b      	movs	r3, #11
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e036      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a2a      	ldr	r2, [pc, #168]	@ (800636c <USB_SetTurnaroundTime+0x130>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d906      	bls.n	80062d4 <USB_SetTurnaroundTime+0x98>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4a29      	ldr	r2, [pc, #164]	@ (8006370 <USB_SetTurnaroundTime+0x134>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d802      	bhi.n	80062d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062ce:	230a      	movs	r3, #10
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e02b      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a26      	ldr	r2, [pc, #152]	@ (8006370 <USB_SetTurnaroundTime+0x134>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d906      	bls.n	80062ea <USB_SetTurnaroundTime+0xae>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a25      	ldr	r2, [pc, #148]	@ (8006374 <USB_SetTurnaroundTime+0x138>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d202      	bcs.n	80062ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062e4:	2309      	movs	r3, #9
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e020      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4a21      	ldr	r2, [pc, #132]	@ (8006374 <USB_SetTurnaroundTime+0x138>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d306      	bcc.n	8006300 <USB_SetTurnaroundTime+0xc4>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a20      	ldr	r2, [pc, #128]	@ (8006378 <USB_SetTurnaroundTime+0x13c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d802      	bhi.n	8006300 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062fa:	2308      	movs	r3, #8
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e015      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <USB_SetTurnaroundTime+0x13c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d906      	bls.n	8006316 <USB_SetTurnaroundTime+0xda>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a1c      	ldr	r2, [pc, #112]	@ (800637c <USB_SetTurnaroundTime+0x140>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d202      	bcs.n	8006316 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006310:	2307      	movs	r3, #7
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e00a      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006316:	2306      	movs	r3, #6
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e007      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006322:	2309      	movs	r3, #9
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	e001      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006328:	2309      	movs	r3, #9
 800632a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	029b      	lsls	r3, r3, #10
 8006340:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006344:	431a      	orrs	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	00d8acbf 	.word	0x00d8acbf
 800635c:	00e4e1c0 	.word	0x00e4e1c0
 8006360:	00f42400 	.word	0x00f42400
 8006364:	01067380 	.word	0x01067380
 8006368:	011a499f 	.word	0x011a499f
 800636c:	01312cff 	.word	0x01312cff
 8006370:	014ca43f 	.word	0x014ca43f
 8006374:	016e3600 	.word	0x016e3600
 8006378:	01a6ab1f 	.word	0x01a6ab1f
 800637c:	01e84800 	.word	0x01e84800

08006380 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f043 0201 	orr.w	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f023 0201 	bic.w	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d115      	bne.n	8006412 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063f2:	200a      	movs	r0, #10
 80063f4:	f7fb fa60 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	330a      	adds	r3, #10
 80063fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 f93f 	bl	8007682 <USB_GetMode>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d01e      	beq.n	8006448 <USB_SetCurrentMode+0x84>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2bc7      	cmp	r3, #199	@ 0xc7
 800640e:	d9f0      	bls.n	80063f2 <USB_SetCurrentMode+0x2e>
 8006410:	e01a      	b.n	8006448 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d115      	bne.n	8006444 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006424:	200a      	movs	r0, #10
 8006426:	f7fb fa47 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	330a      	adds	r3, #10
 800642e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f926 	bl	8007682 <USB_GetMode>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <USB_SetCurrentMode+0x84>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006440:	d9f0      	bls.n	8006424 <USB_SetCurrentMode+0x60>
 8006442:	e001      	b.n	8006448 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e005      	b.n	8006454 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2bc8      	cmp	r3, #200	@ 0xc8
 800644c:	d101      	bne.n	8006452 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800645c:	b084      	sub	sp, #16
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800646a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	e009      	b.n	8006490 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	3340      	adds	r3, #64	@ 0x40
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	2200      	movs	r2, #0
 8006488:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	3301      	adds	r3, #1
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b0e      	cmp	r3, #14
 8006494:	d9f2      	bls.n	800647c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006496:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11c      	bne.n	80064d8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064ac:	f043 0302 	orr.w	r3, r3, #2
 80064b0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80064d6:	e00b      	b.n	80064f0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064f6:	461a      	mov	r2, r3
 80064f8:	2300      	movs	r3, #0
 80064fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10d      	bne.n	8006520 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800650c:	2100      	movs	r1, #0
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f968 	bl	80067e4 <USB_SetDevSpeed>
 8006514:	e008      	b.n	8006528 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006516:	2101      	movs	r1, #1
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f963 	bl	80067e4 <USB_SetDevSpeed>
 800651e:	e003      	b.n	8006528 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006520:	2103      	movs	r1, #3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f95e 	bl	80067e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006528:	2110      	movs	r1, #16
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8fa 	bl	8006724 <USB_FlushTxFifo>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f924 	bl	8006788 <USB_FlushRxFifo>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006550:	461a      	mov	r2, r3
 8006552:	2300      	movs	r3, #0
 8006554:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800655c:	461a      	mov	r2, r3
 800655e:	2300      	movs	r3, #0
 8006560:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006568:	461a      	mov	r2, r3
 800656a:	2300      	movs	r3, #0
 800656c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	e043      	b.n	80065fc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800658a:	d118      	bne.n	80065be <USB_DevInit+0x162>
    {
      if (i == 0U)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800659e:	461a      	mov	r2, r3
 80065a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e013      	b.n	80065d0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b4:	461a      	mov	r2, r3
 80065b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	e008      	b.n	80065d0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ca:	461a      	mov	r2, r3
 80065cc:	2300      	movs	r3, #0
 80065ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065dc:	461a      	mov	r2, r3
 80065de:	2300      	movs	r3, #0
 80065e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ee:	461a      	mov	r2, r3
 80065f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3301      	adds	r3, #1
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006600:	461a      	mov	r2, r3
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4293      	cmp	r3, r2
 8006606:	d3b5      	bcc.n	8006574 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	e043      	b.n	8006696 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006624:	d118      	bne.n	8006658 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006638:	461a      	mov	r2, r3
 800663a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	e013      	b.n	800666a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664e:	461a      	mov	r2, r3
 8006650:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e008      	b.n	800666a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006664:	461a      	mov	r2, r3
 8006666:	2300      	movs	r3, #0
 8006668:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006676:	461a      	mov	r2, r3
 8006678:	2300      	movs	r3, #0
 800667a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006688:	461a      	mov	r2, r3
 800668a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800668e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	3301      	adds	r3, #1
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800669a:	461a      	mov	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4293      	cmp	r3, r2
 80066a0:	d3b5      	bcc.n	800660e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80066c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d105      	bne.n	80066d8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f043 0210 	orr.w	r2, r3, #16
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	4b10      	ldr	r3, [pc, #64]	@ (8006720 <USB_DevInit+0x2c4>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f043 0208 	orr.w	r2, r3, #8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d107      	bne.n	8006710 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006708:	f043 0304 	orr.w	r3, r3, #4
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800671c:	b004      	add	sp, #16
 800671e:	4770      	bx	lr
 8006720:	803c3800 	.word	0x803c3800

08006724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800673e:	d901      	bls.n	8006744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e01b      	b.n	800677c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	daf2      	bge.n	8006732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	019b      	lsls	r3, r3, #6
 8006754:	f043 0220 	orr.w	r2, r3, #32
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3301      	adds	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006768:	d901      	bls.n	800676e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e006      	b.n	800677c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b20      	cmp	r3, #32
 8006778:	d0f0      	beq.n	800675c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067a0:	d901      	bls.n	80067a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e018      	b.n	80067d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	daf2      	bge.n	8006794 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2210      	movs	r2, #16
 80067b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3301      	adds	r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067c4:	d901      	bls.n	80067ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e006      	b.n	80067d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b10      	cmp	r3, #16
 80067d4:	d0f0      	beq.n	80067b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006804:	4313      	orrs	r3, r2
 8006806:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 0306 	and.w	r3, r3, #6
 800682e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006836:	2300      	movs	r3, #0
 8006838:	75fb      	strb	r3, [r7, #23]
 800683a:	e00a      	b.n	8006852 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d002      	beq.n	8006848 <USB_GetDevSpeed+0x32>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b06      	cmp	r3, #6
 8006846:	d102      	bne.n	800684e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006848:	2302      	movs	r3, #2
 800684a:	75fb      	strb	r3, [r7, #23]
 800684c:	e001      	b.n	8006852 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800684e:	230f      	movs	r3, #15
 8006850:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006852:	7dfb      	ldrb	r3, [r7, #23]
}
 8006854:	4618      	mov	r0, r3
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	785b      	ldrb	r3, [r3, #1]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d13a      	bne.n	80068f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	2101      	movs	r1, #1
 800688e:	fa01 f303 	lsl.w	r3, r1, r3
 8006892:	b29b      	uxth	r3, r3
 8006894:	68f9      	ldr	r1, [r7, #12]
 8006896:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800689a:	4313      	orrs	r3, r2
 800689c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d155      	bne.n	8006960 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	791b      	ldrb	r3, [r3, #4]
 80068ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	059b      	lsls	r3, r3, #22
 80068d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068d8:	4313      	orrs	r3, r2
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e036      	b.n	8006960 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f8:	69da      	ldr	r2, [r3, #28]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	2101      	movs	r1, #1
 8006904:	fa01 f303 	lsl.w	r3, r1, r3
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	68f9      	ldr	r1, [r7, #12]
 800690c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006910:	4313      	orrs	r3, r2
 8006912:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11a      	bne.n	8006960 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	791b      	ldrb	r3, [r3, #4]
 8006944:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006946:	430b      	orrs	r3, r1
 8006948:	4313      	orrs	r3, r2
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	440a      	add	r2, r1
 8006952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800695a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800695e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
	...

08006970 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d161      	bne.n	8006a50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800699e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069a2:	d11f      	bne.n	80069e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	2101      	movs	r1, #1
 80069f6:	fa01 f303 	lsl.w	r3, r1, r3
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	43db      	mvns	r3, r3
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a04:	4013      	ands	r3, r2
 8006a06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	43db      	mvns	r3, r3
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a28:	4013      	ands	r3, r2
 8006a2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	0159      	lsls	r1, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	440b      	add	r3, r1
 8006a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a46:	4619      	mov	r1, r3
 8006a48:	4b35      	ldr	r3, [pc, #212]	@ (8006b20 <USB_DeactivateEndpoint+0x1b0>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	600b      	str	r3, [r1, #0]
 8006a4e:	e060      	b.n	8006b12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a66:	d11f      	bne.n	8006aa8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aa2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	2101      	movs	r1, #1
 8006aba:	fa01 f303 	lsl.w	r3, r1, r3
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	68f9      	ldr	r1, [r7, #12]
 8006ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ac8:	4013      	ands	r3, r2
 8006aca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	2101      	movs	r1, #1
 8006ade:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aec:	4013      	ands	r3, r2
 8006aee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	0159      	lsls	r1, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	440b      	add	r3, r1
 8006b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4b05      	ldr	r3, [pc, #20]	@ (8006b24 <USB_DeactivateEndpoint+0x1b4>)
 8006b0e:	4013      	ands	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	ec337800 	.word	0xec337800
 8006b24:	eff37800 	.word	0xeff37800

08006b28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	@ 0x28
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	f040 817f 	bne.w	8006e48 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d132      	bne.n	8006bb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b70:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb0:	0cdb      	lsrs	r3, r3, #19
 8006bb2:	04db      	lsls	r3, r3, #19
 8006bb4:	6113      	str	r3, [r2, #16]
 8006bb6:	e097      	b.n	8006ce8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	0151      	lsls	r1, r2, #5
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	440a      	add	r2, r1
 8006bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd2:	0cdb      	lsrs	r3, r3, #19
 8006bd4:	04db      	lsls	r3, r3, #19
 8006bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bf2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bf6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bfa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d11a      	bne.n	8006c38 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d903      	bls.n	8006c16 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	0151      	lsls	r1, r2, #5
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	440a      	add	r2, r1
 8006c2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c34:	6113      	str	r3, [r2, #16]
 8006c36:	e044      	b.n	8006cc2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	4413      	add	r3, r2
 8006c42:	1e5a      	subs	r2, r3, #1
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	8afb      	ldrh	r3, [r7, #22]
 8006c5e:	04d9      	lsls	r1, r3, #19
 8006c60:	4ba4      	ldr	r3, [pc, #656]	@ (8006ef4 <USB_EPStartXfer+0x3cc>)
 8006c62:	400b      	ands	r3, r1
 8006c64:	69b9      	ldr	r1, [r7, #24]
 8006c66:	0148      	lsls	r0, r1, #5
 8006c68:	69f9      	ldr	r1, [r7, #28]
 8006c6a:	4401      	add	r1, r0
 8006c6c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c70:	4313      	orrs	r3, r2
 8006c72:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	791b      	ldrb	r3, [r3, #4]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d122      	bne.n	8006cc2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	0151      	lsls	r1, r2, #5
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	440a      	add	r2, r1
 8006c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c96:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006c9a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	8afb      	ldrh	r3, [r7, #22]
 8006cac:	075b      	lsls	r3, r3, #29
 8006cae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006cb2:	69b9      	ldr	r1, [r7, #24]
 8006cb4:	0148      	lsls	r0, r1, #5
 8006cb6:	69f9      	ldr	r1, [r7, #28]
 8006cb8:	4401      	add	r1, r0
 8006cba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd8:	69b9      	ldr	r1, [r7, #24]
 8006cda:	0148      	lsls	r0, r1, #5
 8006cdc:	69f9      	ldr	r1, [r7, #28]
 8006cde:	4401      	add	r1, r0
 8006ce0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d14b      	bne.n	8006d86 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d02:	461a      	mov	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	791b      	ldrb	r3, [r3, #4]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d128      	bne.n	8006d64 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d110      	bne.n	8006d44 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e00f      	b.n	8006d64 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d62:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	e166      	b.n	8007054 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006da4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	791b      	ldrb	r3, [r3, #4]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d015      	beq.n	8006dda <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 814e 	beq.w	8007054 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	2101      	movs	r1, #1
 8006dca:	fa01 f303 	lsl.w	r3, r1, r3
 8006dce:	69f9      	ldr	r1, [r7, #28]
 8006dd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	634b      	str	r3, [r1, #52]	@ 0x34
 8006dd8:	e13c      	b.n	8007054 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d110      	bne.n	8006e0c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	e00f      	b.n	8006e2c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e2a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	68d9      	ldr	r1, [r3, #12]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	b298      	uxth	r0, r3
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4603      	mov	r3, r0
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f9b9 	bl	80071b8 <USB_WritePacket>
 8006e46:	e105      	b.n	8007054 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e62:	0cdb      	lsrs	r3, r3, #19
 8006e64:	04db      	lsls	r3, r3, #19
 8006e66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e82:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e86:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e8a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d132      	bne.n	8006ef8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ec0:	69b9      	ldr	r1, [r7, #24]
 8006ec2:	0148      	lsls	r0, r1, #5
 8006ec4:	69f9      	ldr	r1, [r7, #28]
 8006ec6:	4401      	add	r1, r0
 8006ec8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006eee:	6113      	str	r3, [r2, #16]
 8006ef0:	e062      	b.n	8006fb8 <USB_EPStartXfer+0x490>
 8006ef2:	bf00      	nop
 8006ef4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d123      	bne.n	8006f48 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	0148      	lsls	r0, r1, #5
 8006f1a:	69f9      	ldr	r1, [r7, #28]
 8006f1c:	4401      	add	r1, r0
 8006f1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f22:	4313      	orrs	r3, r2
 8006f24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f44:	6113      	str	r3, [r2, #16]
 8006f46:	e037      	b.n	8006fb8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	4413      	add	r3, r2
 8006f52:	1e5a      	subs	r2, r3, #1
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	8afa      	ldrh	r2, [r7, #22]
 8006f64:	fb03 f202 	mul.w	r2, r3, r2
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	8afb      	ldrh	r3, [r7, #22]
 8006f7c:	04d9      	lsls	r1, r3, #19
 8006f7e:	4b38      	ldr	r3, [pc, #224]	@ (8007060 <USB_EPStartXfer+0x538>)
 8006f80:	400b      	ands	r3, r1
 8006f82:	69b9      	ldr	r1, [r7, #24]
 8006f84:	0148      	lsls	r0, r1, #5
 8006f86:	69f9      	ldr	r1, [r7, #28]
 8006f88:	4401      	add	r1, r0
 8006f8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa8:	69b9      	ldr	r1, [r7, #24]
 8006faa:	0148      	lsls	r0, r1, #5
 8006fac:	69f9      	ldr	r1, [r7, #28]
 8006fae:	4401      	add	r1, r0
 8006fb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d10d      	bne.n	8006fda <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	68d9      	ldr	r1, [r3, #12]
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd6:	460a      	mov	r2, r1
 8006fd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	791b      	ldrb	r3, [r3, #4]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d128      	bne.n	8007034 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d110      	bne.n	8007014 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800700c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e00f      	b.n	8007034 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800702e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007032:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800704e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3720      	adds	r7, #32
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	1ff80000 	.word	0x1ff80000

08007064 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d14a      	bne.n	8007118 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800709a:	f040 8086 	bne.w	80071aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	7812      	ldrb	r2, [r2, #0]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3301      	adds	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d902      	bls.n	80070fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
          break;
 80070fa:	e056      	b.n	80071aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007110:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007114:	d0e7      	beq.n	80070e6 <USB_EPStopXfer+0x82>
 8007116:	e048      	b.n	80071aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800712c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007130:	d13b      	bne.n	80071aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007150:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007154:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	7812      	ldrb	r2, [r2, #0]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007174:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007178:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3301      	adds	r3, #1
 800717e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007186:	4293      	cmp	r3, r2
 8007188:	d902      	bls.n	8007190 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]
          break;
 800718e:	e00c      	b.n	80071aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071a8:	d0e7      	beq.n	800717a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b089      	sub	sp, #36	@ 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	4611      	mov	r1, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	460b      	mov	r3, r1
 80071c8:	71fb      	strb	r3, [r7, #7]
 80071ca:	4613      	mov	r3, r2
 80071cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d123      	bne.n	8007226 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071de:	88bb      	ldrh	r3, [r7, #4]
 80071e0:	3303      	adds	r3, #3
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	e018      	b.n	800721e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	031a      	lsls	r2, r3, #12
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071f8:	461a      	mov	r2, r3
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	3301      	adds	r3, #1
 8007204:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	3301      	adds	r3, #1
 800720a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3301      	adds	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	3301      	adds	r3, #1
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	429a      	cmp	r2, r3
 8007224:	d3e2      	bcc.n	80071ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3724      	adds	r7, #36	@ 0x24
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007234:	b480      	push	{r7}
 8007236:	b08b      	sub	sp, #44	@ 0x2c
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	089b      	lsrs	r3, r3, #2
 800724e:	b29b      	uxth	r3, r3
 8007250:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800725a:	2300      	movs	r3, #0
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	e014      	b.n	800728a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	601a      	str	r2, [r3, #0]
    pDest++;
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	3301      	adds	r3, #1
 8007270:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	3301      	adds	r3, #1
 8007276:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727a:	3301      	adds	r3, #1
 800727c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	3301      	adds	r3, #1
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	3301      	adds	r3, #1
 8007288:	623b      	str	r3, [r7, #32]
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	429a      	cmp	r2, r3
 8007290:	d3e6      	bcc.n	8007260 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007292:	8bfb      	ldrh	r3, [r7, #30]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01e      	beq.n	80072d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a2:	461a      	mov	r2, r3
 80072a4:	f107 0310 	add.w	r3, r7, #16
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	701a      	strb	r2, [r3, #0]
      i++;
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	3301      	adds	r3, #1
 80072c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80072c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c6:	3301      	adds	r3, #1
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80072ca:	8bfb      	ldrh	r3, [r7, #30]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072d0:	8bfb      	ldrh	r3, [r7, #30]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1ea      	bne.n	80072ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072d8:	4618      	mov	r0, r3
 80072da:	372c      	adds	r7, #44	@ 0x2c
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d12c      	bne.n	800735a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	db12      	blt.n	8007338 <USB_EPSetStall+0x54>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00f      	beq.n	8007338 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007332:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007336:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	440a      	add	r2, r1
 800734e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007352:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	e02b      	b.n	80073b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	db12      	blt.n	8007392 <USB_EPSetStall+0xae>
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00f      	beq.n	8007392 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800738c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007390:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d128      	bne.n	800742e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	791b      	ldrb	r3, [r3, #4]
 8007400:	2b03      	cmp	r3, #3
 8007402:	d003      	beq.n	800740c <USB_EPClearStall+0x4c>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	791b      	ldrb	r3, [r3, #4]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d138      	bne.n	800747e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	0151      	lsls	r1, r2, #5
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	440a      	add	r2, r1
 8007422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	e027      	b.n	800747e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007448:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800744c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	791b      	ldrb	r3, [r3, #4]
 8007452:	2b03      	cmp	r3, #3
 8007454:	d003      	beq.n	800745e <USB_EPClearStall+0x9e>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	791b      	ldrb	r3, [r3, #4]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d10f      	bne.n	800747e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800747c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074aa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80074ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80074c0:	68f9      	ldr	r1, [r7, #12]
 80074c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074c6:	4313      	orrs	r3, r2
 80074c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007506:	f023 0302 	bic.w	r3, r3, #2
 800750a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800751a:	b480      	push	{r7}
 800751c:	b085      	sub	sp, #20
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007534:	f023 0303 	bic.w	r3, r3, #3
 8007538:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007548:	f043 0302 	orr.w	r3, r3, #2
 800754c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4013      	ands	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007574:	68fb      	ldr	r3, [r7, #12]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	4013      	ands	r3, r2
 80075a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	0c1b      	lsrs	r3, r3, #16
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	4013      	ands	r3, r2
 80075d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	b29b      	uxth	r3, r3
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075fa:	78fb      	ldrb	r3, [r7, #3]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	4013      	ands	r3, r2
 8007616:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007618:	68bb      	ldr	r3, [r7, #8]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007626:	b480      	push	{r7}
 8007628:	b087      	sub	sp, #28
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007648:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	f003 030f 	and.w	r3, r3, #15
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	fa22 f303 	lsr.w	r3, r2, r3
 8007656:	01db      	lsls	r3, r3, #7
 8007658:	b2db      	uxtb	r3, r3
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	4013      	ands	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007674:	68bb      	ldr	r3, [r7, #8]
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	f003 0301 	and.w	r3, r3, #1
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80076bc:	f023 0307 	bic.w	r3, r3, #7
 80076c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	460b      	mov	r3, r1
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	333c      	adds	r3, #60	@ 0x3c
 80076fa:	3304      	adds	r3, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	4a26      	ldr	r2, [pc, #152]	@ (800779c <USB_EP0_OutStart+0xb8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d90a      	bls.n	800771e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007718:	d101      	bne.n	800771e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e037      	b.n	800778e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	461a      	mov	r2, r3
 8007726:	2300      	movs	r3, #0
 8007728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007738:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800773c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800774c:	f043 0318 	orr.w	r3, r3, #24
 8007750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007760:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007764:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007766:	7afb      	ldrb	r3, [r7, #11]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d10f      	bne.n	800778c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007786:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800778a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	4f54300a 	.word	0x4f54300a

080077a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077b8:	d901      	bls.n	80077be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e022      	b.n	8007804 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	daf2      	bge.n	80077ac <USB_CoreReset+0xc>

  count = 10U;
 80077c6:	230a      	movs	r3, #10
 80077c8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80077ca:	e002      	b.n	80077d2 <USB_CoreReset+0x32>
  {
    count--;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1f9      	bne.n	80077cc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f043 0201 	orr.w	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3301      	adds	r3, #1
 80077e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077f0:	d901      	bls.n	80077f6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e006      	b.n	8007804 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d0f0      	beq.n	80077e4 <USB_CoreReset+0x44>

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <FRAM_WriteEnable>:
#define FRAM_CS_LOW()   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET)
#define FRAM_CS_HIGH()  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET)

static uint16_t nextEntry = 0;

void FRAM_WriteEnable(void) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x06; // WREN
 8007816:	2306      	movs	r3, #6
 8007818:	71fb      	strb	r3, [r7, #7]
    FRAM_CS_LOW();
 800781a:	2200      	movs	r2, #0
 800781c:	2110      	movs	r1, #16
 800781e:	4809      	ldr	r0, [pc, #36]	@ (8007844 <FRAM_WriteEnable+0x34>)
 8007820:	f7fa fb04 	bl	8001e2c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8007824:	1df9      	adds	r1, r7, #7
 8007826:	f04f 33ff 	mov.w	r3, #4294967295
 800782a:	2201      	movs	r2, #1
 800782c:	4806      	ldr	r0, [pc, #24]	@ (8007848 <FRAM_WriteEnable+0x38>)
 800782e:	f7fd ff58 	bl	80056e2 <HAL_SPI_Transmit>
    FRAM_CS_HIGH();
 8007832:	2201      	movs	r2, #1
 8007834:	2110      	movs	r1, #16
 8007836:	4803      	ldr	r0, [pc, #12]	@ (8007844 <FRAM_WriteEnable+0x34>)
 8007838:	f7fa faf8 	bl	8001e2c <HAL_GPIO_WritePin>
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40020000 	.word	0x40020000
 8007848:	20000360 	.word	0x20000360

0800784c <FRAM_WriteBytes>:

void FRAM_WriteBytes(uint16_t addr, uint8_t* data, uint16_t len) {
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	6039      	str	r1, [r7, #0]
 8007856:	80fb      	strh	r3, [r7, #6]
 8007858:	4613      	mov	r3, r2
 800785a:	80bb      	strh	r3, [r7, #4]
    FRAM_WriteEnable();
 800785c:	f7ff ffd8 	bl	8007810 <FRAM_WriteEnable>
    uint8_t cmd[3] = {0x02, addr >> 8, addr & 0xFF};
 8007860:	2302      	movs	r3, #2
 8007862:	733b      	strb	r3, [r7, #12]
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	b29b      	uxth	r3, r3
 800786a:	b2db      	uxtb	r3, r3
 800786c:	737b      	strb	r3, [r7, #13]
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	73bb      	strb	r3, [r7, #14]
    FRAM_CS_LOW();
 8007874:	2200      	movs	r2, #0
 8007876:	2110      	movs	r1, #16
 8007878:	480d      	ldr	r0, [pc, #52]	@ (80078b0 <FRAM_WriteBytes+0x64>)
 800787a:	f7fa fad7 	bl	8001e2c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 3, HAL_MAX_DELAY);
 800787e:	f107 010c 	add.w	r1, r7, #12
 8007882:	f04f 33ff 	mov.w	r3, #4294967295
 8007886:	2203      	movs	r2, #3
 8007888:	480a      	ldr	r0, [pc, #40]	@ (80078b4 <FRAM_WriteBytes+0x68>)
 800788a:	f7fd ff2a 	bl	80056e2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 800788e:	88ba      	ldrh	r2, [r7, #4]
 8007890:	f04f 33ff 	mov.w	r3, #4294967295
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	4807      	ldr	r0, [pc, #28]	@ (80078b4 <FRAM_WriteBytes+0x68>)
 8007898:	f7fd ff23 	bl	80056e2 <HAL_SPI_Transmit>
    FRAM_CS_HIGH();
 800789c:	2201      	movs	r2, #1
 800789e:	2110      	movs	r1, #16
 80078a0:	4803      	ldr	r0, [pc, #12]	@ (80078b0 <FRAM_WriteBytes+0x64>)
 80078a2:	f7fa fac3 	bl	8001e2c <HAL_GPIO_WritePin>
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	40020000 	.word	0x40020000
 80078b4:	20000360 	.word	0x20000360

080078b8 <FRAM_ReadBytes>:

void FRAM_ReadBytes(uint16_t addr, uint8_t* buffer, uint16_t length) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	6039      	str	r1, [r7, #0]
 80078c2:	80fb      	strh	r3, [r7, #6]
 80078c4:	4613      	mov	r3, r2
 80078c6:	80bb      	strh	r3, [r7, #4]
    uint8_t cmd[3] = {0x03, addr >> 8, addr & 0xFF};
 80078c8:	2303      	movs	r3, #3
 80078ca:	733b      	strb	r3, [r7, #12]
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	737b      	strb	r3, [r7, #13]
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	73bb      	strb	r3, [r7, #14]
    FRAM_CS_LOW();
 80078dc:	2200      	movs	r2, #0
 80078de:	2110      	movs	r1, #16
 80078e0:	480d      	ldr	r0, [pc, #52]	@ (8007918 <FRAM_ReadBytes+0x60>)
 80078e2:	f7fa faa3 	bl	8001e2c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 3, HAL_MAX_DELAY);
 80078e6:	f107 010c 	add.w	r1, r7, #12
 80078ea:	f04f 33ff 	mov.w	r3, #4294967295
 80078ee:	2203      	movs	r2, #3
 80078f0:	480a      	ldr	r0, [pc, #40]	@ (800791c <FRAM_ReadBytes+0x64>)
 80078f2:	f7fd fef6 	bl	80056e2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, length, HAL_MAX_DELAY);
 80078f6:	88ba      	ldrh	r2, [r7, #4]
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	4807      	ldr	r0, [pc, #28]	@ (800791c <FRAM_ReadBytes+0x64>)
 8007900:	f7fe f833 	bl	800596a <HAL_SPI_Receive>
    FRAM_CS_HIGH();
 8007904:	2201      	movs	r2, #1
 8007906:	2110      	movs	r1, #16
 8007908:	4803      	ldr	r0, [pc, #12]	@ (8007918 <FRAM_ReadBytes+0x60>)
 800790a:	f7fa fa8f 	bl	8001e2c <HAL_GPIO_WritePin>
}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40020000 	.word	0x40020000
 800791c:	20000360 	.word	0x20000360

08007920 <FRAM_LogEntry>:

void FRAM_LogEntry(uint32_t timestamp, float value) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	ed87 0a00 	vstr	s0, [r7]
    if (nextEntry >= FRAM_MAX_ENTRIES)
 800792c:	4b1b      	ldr	r3, [pc, #108]	@ (800799c <FRAM_LogEntry+0x7c>)
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007934:	d22e      	bcs.n	8007994 <FRAM_LogEntry+0x74>
        return; // optional: Ringpuffer oder stoppen

    uint8_t buffer[LOG_ENTRY_SIZE];
    buffer[0] = (timestamp >> 24) & 0xFF;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	0e1b      	lsrs	r3, r3, #24
 800793a:	b2db      	uxtb	r3, r3
 800793c:	723b      	strb	r3, [r7, #8]
    buffer[1] = (timestamp >> 16) & 0xFF;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	0c1b      	lsrs	r3, r3, #16
 8007942:	b2db      	uxtb	r3, r3
 8007944:	727b      	strb	r3, [r7, #9]
    buffer[2] = (timestamp >> 8) & 0xFF;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	0a1b      	lsrs	r3, r3, #8
 800794a:	b2db      	uxtb	r3, r3
 800794c:	72bb      	strb	r3, [r7, #10]
    buffer[3] = timestamp & 0xFF;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	72fb      	strb	r3, [r7, #11]

    uint8_t* val = (uint8_t*)&value;
 8007954:	463b      	mov	r3, r7
 8007956:	617b      	str	r3, [r7, #20]
    buffer[4] = val[0];
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	733b      	strb	r3, [r7, #12]
    buffer[5] = val[1];
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	737b      	strb	r3, [r7, #13]
    buffer[6] = val[2];
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	789b      	ldrb	r3, [r3, #2]
 8007968:	73bb      	strb	r3, [r7, #14]
    buffer[7] = val[3];
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	78db      	ldrb	r3, [r3, #3]
 800796e:	73fb      	strb	r3, [r7, #15]

    uint16_t addr = FRAM_START_ADDRESS + nextEntry * LOG_ENTRY_SIZE;
 8007970:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <FRAM_LogEntry+0x7c>)
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	827b      	strh	r3, [r7, #18]
    FRAM_WriteBytes(addr, buffer, LOG_ENTRY_SIZE);
 8007978:	f107 0108 	add.w	r1, r7, #8
 800797c:	8a7b      	ldrh	r3, [r7, #18]
 800797e:	2208      	movs	r2, #8
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff ff63 	bl	800784c <FRAM_WriteBytes>
    nextEntry++;
 8007986:	4b05      	ldr	r3, [pc, #20]	@ (800799c <FRAM_LogEntry+0x7c>)
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	4b03      	ldr	r3, [pc, #12]	@ (800799c <FRAM_LogEntry+0x7c>)
 8007990:	801a      	strh	r2, [r3, #0]
 8007992:	e000      	b.n	8007996 <FRAM_LogEntry+0x76>
        return; // optional: Ringpuffer oder stoppen
 8007994:	bf00      	nop
}
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	200003c4 	.word	0x200003c4

080079a0 <FRAM_ReadEntry>:

uint8_t FRAM_ReadEntry(uint16_t index, uint32_t* timestamp, float* value) {
 80079a0:	b5b0      	push	{r4, r5, r7, lr}
 80079a2:	b08a      	sub	sp, #40	@ 0x28
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	4603      	mov	r3, r0
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	81fb      	strh	r3, [r7, #14]
    if (index >= nextEntry)
 80079ae:	4b22      	ldr	r3, [pc, #136]	@ (8007a38 <FRAM_ReadEntry+0x98>)
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	89fa      	ldrh	r2, [r7, #14]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d301      	bcc.n	80079bc <FRAM_ReadEntry+0x1c>
        return 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	e039      	b.n	8007a30 <FRAM_ReadEntry+0x90>

    uint8_t buffer[LOG_ENTRY_SIZE];
    uint16_t addr = FRAM_START_ADDRESS + index * LOG_ENTRY_SIZE;
 80079bc:	89fb      	ldrh	r3, [r7, #14]
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	83fb      	strh	r3, [r7, #30]
    FRAM_ReadBytes(addr, buffer, LOG_ENTRY_SIZE);
 80079c2:	f107 0110 	add.w	r1, r7, #16
 80079c6:	8bfb      	ldrh	r3, [r7, #30]
 80079c8:	2208      	movs	r2, #8
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff ff74 	bl	80078b8 <FRAM_ReadBytes>

    *timestamp = (buffer[0] << 24) | (buffer[1] << 16) |
 80079d0:	7c3b      	ldrb	r3, [r7, #16]
 80079d2:	061a      	lsls	r2, r3, #24
 80079d4:	7c7b      	ldrb	r3, [r7, #17]
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	431a      	orrs	r2, r3
                 (buffer[2] << 8) | buffer[3];
 80079da:	7cbb      	ldrb	r3, [r7, #18]
 80079dc:	021b      	lsls	r3, r3, #8
    *timestamp = (buffer[0] << 24) | (buffer[1] << 16) |
 80079de:	4313      	orrs	r3, r2
                 (buffer[2] << 8) | buffer[3];
 80079e0:	7cfa      	ldrb	r2, [r7, #19]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	461a      	mov	r2, r3
    *timestamp = (buffer[0] << 24) | (buffer[1] << 16) |
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	601a      	str	r2, [r3, #0]

    uint8_t* val = (uint8_t*)value;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	61bb      	str	r3, [r7, #24]
    val[0] = buffer[4];
 80079ee:	7d3a      	ldrb	r2, [r7, #20]
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	701a      	strb	r2, [r3, #0]
    val[1] = buffer[5];
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	3301      	adds	r3, #1
 80079f8:	7d7a      	ldrb	r2, [r7, #21]
 80079fa:	701a      	strb	r2, [r3, #0]
    val[2] = buffer[6];
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	3302      	adds	r3, #2
 8007a00:	7dba      	ldrb	r2, [r7, #22]
 8007a02:	701a      	strb	r2, [r3, #0]
    val[3] = buffer[7];
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	3303      	adds	r3, #3
 8007a08:	7dfa      	ldrb	r2, [r7, #23]
 8007a0a:	701a      	strb	r2, [r3, #0]

    // Ausgabe
    printf("Eintrag %u: Zeitstempel: %lu, Lichtstärke: %.2f Lux\r\n", index, *timestamp, *value);
 8007a0c:	89fc      	ldrh	r4, [r7, #14]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	681d      	ldr	r5, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7f8 fd9e 	bl	8000558 <__aeabi_f2d>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	e9cd 2300 	strd	r2, r3, [sp]
 8007a24:	462a      	mov	r2, r5
 8007a26:	4621      	mov	r1, r4
 8007a28:	4804      	ldr	r0, [pc, #16]	@ (8007a3c <FRAM_ReadEntry+0x9c>)
 8007a2a:	f003 fa21 	bl	800ae70 <iprintf>

    return 1;
 8007a2e:	2301      	movs	r3, #1
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3720      	adds	r7, #32
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bdb0      	pop	{r4, r5, r7, pc}
 8007a38:	200003c4 	.word	0x200003c4
 8007a3c:	0800ce10 	.word	0x0800ce10

08007a40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a4c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007a50:	f002 fcb2 	bl	800a3b8 <USBD_static_malloc>
 8007a54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	32b0      	adds	r2, #176	@ 0xb0
 8007a66:	2100      	movs	r1, #0
 8007a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e0d4      	b.n	8007c1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a70:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007a74:	2100      	movs	r1, #0
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f003 fa4f 	bl	800af1a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32b0      	adds	r2, #176	@ 0xb0
 8007a86:	68f9      	ldr	r1, [r7, #12]
 8007a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	32b0      	adds	r2, #176	@ 0xb0
 8007a96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7c1b      	ldrb	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d138      	bne.n	8007b1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007aa8:	4b5e      	ldr	r3, [pc, #376]	@ (8007c24 <USBD_CDC_Init+0x1e4>)
 8007aaa:	7819      	ldrb	r1, [r3, #0]
 8007aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f002 fb5d 	bl	800a172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8007c24 <USBD_CDC_Init+0x1e4>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f003 020f 	and.w	r2, r3, #15
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	440b      	add	r3, r1
 8007acc:	3323      	adds	r3, #35	@ 0x23
 8007ace:	2201      	movs	r2, #1
 8007ad0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ad2:	4b55      	ldr	r3, [pc, #340]	@ (8007c28 <USBD_CDC_Init+0x1e8>)
 8007ad4:	7819      	ldrb	r1, [r3, #0]
 8007ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ada:	2202      	movs	r2, #2
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f002 fb48 	bl	800a172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ae2:	4b51      	ldr	r3, [pc, #324]	@ (8007c28 <USBD_CDC_Init+0x1e8>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 020f 	and.w	r2, r3, #15
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007afa:	2201      	movs	r2, #1
 8007afc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007afe:	4b4b      	ldr	r3, [pc, #300]	@ (8007c2c <USBD_CDC_Init+0x1ec>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	f003 020f 	and.w	r2, r3, #15
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	331c      	adds	r3, #28
 8007b14:	2210      	movs	r2, #16
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e035      	b.n	8007b86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b1a:	4b42      	ldr	r3, [pc, #264]	@ (8007c24 <USBD_CDC_Init+0x1e4>)
 8007b1c:	7819      	ldrb	r1, [r3, #0]
 8007b1e:	2340      	movs	r3, #64	@ 0x40
 8007b20:	2202      	movs	r2, #2
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f002 fb25 	bl	800a172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b28:	4b3e      	ldr	r3, [pc, #248]	@ (8007c24 <USBD_CDC_Init+0x1e4>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	3323      	adds	r3, #35	@ 0x23
 8007b3e:	2201      	movs	r2, #1
 8007b40:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b42:	4b39      	ldr	r3, [pc, #228]	@ (8007c28 <USBD_CDC_Init+0x1e8>)
 8007b44:	7819      	ldrb	r1, [r3, #0]
 8007b46:	2340      	movs	r3, #64	@ 0x40
 8007b48:	2202      	movs	r2, #2
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f002 fb11 	bl	800a172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b50:	4b35      	ldr	r3, [pc, #212]	@ (8007c28 <USBD_CDC_Init+0x1e8>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 020f 	and.w	r2, r3, #15
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007b68:	2201      	movs	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8007c2c <USBD_CDC_Init+0x1ec>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 020f 	and.w	r2, r3, #15
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	331c      	adds	r3, #28
 8007b82:	2210      	movs	r2, #16
 8007b84:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b86:	4b29      	ldr	r3, [pc, #164]	@ (8007c2c <USBD_CDC_Init+0x1ec>)
 8007b88:	7819      	ldrb	r1, [r3, #0]
 8007b8a:	2308      	movs	r3, #8
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f002 faef 	bl	800a172 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b94:	4b25      	ldr	r3, [pc, #148]	@ (8007c2c <USBD_CDC_Init+0x1ec>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f003 020f 	and.w	r2, r3, #15
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	440b      	add	r3, r1
 8007ba8:	3323      	adds	r3, #35	@ 0x23
 8007baa:	2201      	movs	r2, #1
 8007bac:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	33b0      	adds	r3, #176	@ 0xb0
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007be4:	2302      	movs	r3, #2
 8007be6:	e018      	b.n	8007c1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	7c1b      	ldrb	r3, [r3, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10a      	bne.n	8007c06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8007c28 <USBD_CDC_Init+0x1e8>)
 8007bf2:	7819      	ldrb	r1, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f002 fba6 	bl	800a350 <USBD_LL_PrepareReceive>
 8007c04:	e008      	b.n	8007c18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c06:	4b08      	ldr	r3, [pc, #32]	@ (8007c28 <USBD_CDC_Init+0x1e8>)
 8007c08:	7819      	ldrb	r1, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c10:	2340      	movs	r3, #64	@ 0x40
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f002 fb9c 	bl	800a350 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000097 	.word	0x20000097
 8007c28:	20000098 	.word	0x20000098
 8007c2c:	20000099 	.word	0x20000099

08007c30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8007d28 <USBD_CDC_DeInit+0xf8>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f002 fabb 	bl	800a1be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c48:	4b37      	ldr	r3, [pc, #220]	@ (8007d28 <USBD_CDC_DeInit+0xf8>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	f003 020f 	and.w	r2, r3, #15
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3323      	adds	r3, #35	@ 0x23
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c62:	4b32      	ldr	r3, [pc, #200]	@ (8007d2c <USBD_CDC_DeInit+0xfc>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f002 faa8 	bl	800a1be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8007d2c <USBD_CDC_DeInit+0xfc>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f003 020f 	and.w	r2, r3, #15
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c8a:	4b29      	ldr	r3, [pc, #164]	@ (8007d30 <USBD_CDC_DeInit+0x100>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f002 fa94 	bl	800a1be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c96:	4b26      	ldr	r3, [pc, #152]	@ (8007d30 <USBD_CDC_DeInit+0x100>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	f003 020f 	and.w	r2, r3, #15
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	440b      	add	r3, r1
 8007caa:	3323      	adds	r3, #35	@ 0x23
 8007cac:	2200      	movs	r2, #0
 8007cae:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007d30 <USBD_CDC_DeInit+0x100>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	f003 020f 	and.w	r2, r3, #15
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	331c      	adds	r3, #28
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	32b0      	adds	r2, #176	@ 0xb0
 8007cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01f      	beq.n	8007d1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	33b0      	adds	r3, #176	@ 0xb0
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	32b0      	adds	r2, #176	@ 0xb0
 8007cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f002 fb68 	bl	800a3d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	32b0      	adds	r2, #176	@ 0xb0
 8007d0e:	2100      	movs	r1, #0
 8007d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000097 	.word	0x20000097
 8007d2c:	20000098 	.word	0x20000098
 8007d30:	20000099 	.word	0x20000099

08007d34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	32b0      	adds	r2, #176	@ 0xb0
 8007d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e0bf      	b.n	8007ee4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d050      	beq.n	8007e12 <USBD_CDC_Setup+0xde>
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	f040 80af 	bne.w	8007ed4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	88db      	ldrh	r3, [r3, #6]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d03a      	beq.n	8007df4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	b25b      	sxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	da1b      	bge.n	8007dc0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	33b0      	adds	r3, #176	@ 0xb0
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	88d2      	ldrh	r2, [r2, #6]
 8007da4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	2b07      	cmp	r3, #7
 8007dac:	bf28      	it	cs
 8007dae:	2307      	movcs	r3, #7
 8007db0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	89fa      	ldrh	r2, [r7, #14]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 fda9 	bl	8009910 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007dbe:	e090      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	785a      	ldrb	r2, [r3, #1]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b3f      	cmp	r3, #63	@ 0x3f
 8007dd0:	d803      	bhi.n	8007dda <USBD_CDC_Setup+0xa6>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	e000      	b.n	8007ddc <USBD_CDC_Setup+0xa8>
 8007dda:	2240      	movs	r2, #64	@ 0x40
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007de2:	6939      	ldr	r1, [r7, #16]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007dea:	461a      	mov	r2, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 fdbe 	bl	800996e <USBD_CtlPrepareRx>
      break;
 8007df2:	e076      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	33b0      	adds	r3, #176	@ 0xb0
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	7850      	ldrb	r0, [r2, #1]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	4798      	blx	r3
      break;
 8007e10:	e067      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	2b0b      	cmp	r3, #11
 8007e18:	d851      	bhi.n	8007ebe <USBD_CDC_Setup+0x18a>
 8007e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <USBD_CDC_Setup+0xec>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007ecd 	.word	0x08007ecd
 8007e28:	08007ebf 	.word	0x08007ebf
 8007e2c:	08007ebf 	.word	0x08007ebf
 8007e30:	08007ebf 	.word	0x08007ebf
 8007e34:	08007ebf 	.word	0x08007ebf
 8007e38:	08007ebf 	.word	0x08007ebf
 8007e3c:	08007ebf 	.word	0x08007ebf
 8007e40:	08007ebf 	.word	0x08007ebf
 8007e44:	08007ebf 	.word	0x08007ebf
 8007e48:	08007e7b 	.word	0x08007e7b
 8007e4c:	08007ea5 	.word	0x08007ea5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d107      	bne.n	8007e6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e5c:	f107 030a 	add.w	r3, r7, #10
 8007e60:	2202      	movs	r2, #2
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 fd53 	bl	8009910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e6a:	e032      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fcd1 	bl	8009816 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	75fb      	strb	r3, [r7, #23]
          break;
 8007e78:	e02b      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d107      	bne.n	8007e96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e86:	f107 030d 	add.w	r3, r7, #13
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 fd3e 	bl	8009910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e94:	e01d      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fcbc 	bl	8009816 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea2:	e016      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d00f      	beq.n	8007ed0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 fcaf 	bl	8009816 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ebc:	e008      	b.n	8007ed0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 fca8 	bl	8009816 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8007eca:	e002      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>
          break;
 8007ecc:	bf00      	nop
 8007ece:	e008      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>
          break;
 8007ed0:	bf00      	nop
      }
      break;
 8007ed2:	e006      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 fc9d 	bl	8009816 <USBD_CtlError>
      ret = USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007efe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	32b0      	adds	r2, #176	@ 0xb0
 8007f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e065      	b.n	8007fe2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	32b0      	adds	r2, #176	@ 0xb0
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	f003 020f 	and.w	r2, r3, #15
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	440b      	add	r3, r1
 8007f38:	3314      	adds	r3, #20
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d02f      	beq.n	8007fa0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	f003 020f 	and.w	r2, r3, #15
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	440b      	add	r3, r1
 8007f52:	3314      	adds	r3, #20
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	f003 010f 	and.w	r1, r3, #15
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	440b      	add	r3, r1
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4403      	add	r3, r0
 8007f68:	331c      	adds	r3, #28
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d112      	bne.n	8007fa0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	f003 020f 	and.w	r2, r3, #15
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	440b      	add	r3, r1
 8007f8c:	3314      	adds	r3, #20
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f92:	78f9      	ldrb	r1, [r7, #3]
 8007f94:	2300      	movs	r3, #0
 8007f96:	2200      	movs	r2, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f002 f9b8 	bl	800a30e <USBD_LL_Transmit>
 8007f9e:	e01f      	b.n	8007fe0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	33b0      	adds	r3, #176	@ 0xb0
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d010      	beq.n	8007fe0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	33b0      	adds	r3, #176	@ 0xb0
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	32b0      	adds	r2, #176	@ 0xb0
 8008000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008004:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	32b0      	adds	r2, #176	@ 0xb0
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008018:	2303      	movs	r3, #3
 800801a:	e01a      	b.n	8008052 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f002 f9b6 	bl	800a392 <USBD_LL_GetRxDataSize>
 8008026:	4602      	mov	r2, r0
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	33b0      	adds	r3, #176	@ 0xb0
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800804c:	4611      	mov	r1, r2
 800804e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	32b0      	adds	r2, #176	@ 0xb0
 800806c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008070:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008078:	2303      	movs	r3, #3
 800807a:	e024      	b.n	80080c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	33b0      	adds	r3, #176	@ 0xb0
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d019      	beq.n	80080c4 <USBD_CDC_EP0_RxReady+0x6a>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008096:	2bff      	cmp	r3, #255	@ 0xff
 8008098:	d014      	beq.n	80080c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	33b0      	adds	r3, #176	@ 0xb0
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80080b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	22ff      	movs	r2, #255	@ 0xff
 80080c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080d8:	2182      	movs	r1, #130	@ 0x82
 80080da:	4818      	ldr	r0, [pc, #96]	@ (800813c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080dc:	f000 fd62 	bl	8008ba4 <USBD_GetEpDesc>
 80080e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080e2:	2101      	movs	r1, #1
 80080e4:	4815      	ldr	r0, [pc, #84]	@ (800813c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080e6:	f000 fd5d 	bl	8008ba4 <USBD_GetEpDesc>
 80080ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080ec:	2181      	movs	r1, #129	@ 0x81
 80080ee:	4813      	ldr	r0, [pc, #76]	@ (800813c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080f0:	f000 fd58 	bl	8008ba4 <USBD_GetEpDesc>
 80080f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2210      	movs	r2, #16
 8008100:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d006      	beq.n	8008116 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2200      	movs	r2, #0
 800810c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008110:	711a      	strb	r2, [r3, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d006      	beq.n	800812a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008124:	711a      	strb	r2, [r3, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2243      	movs	r2, #67	@ 0x43
 800812e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008130:	4b02      	ldr	r3, [pc, #8]	@ (800813c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000054 	.word	0x20000054

08008140 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008148:	2182      	movs	r1, #130	@ 0x82
 800814a:	4818      	ldr	r0, [pc, #96]	@ (80081ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800814c:	f000 fd2a 	bl	8008ba4 <USBD_GetEpDesc>
 8008150:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008152:	2101      	movs	r1, #1
 8008154:	4815      	ldr	r0, [pc, #84]	@ (80081ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008156:	f000 fd25 	bl	8008ba4 <USBD_GetEpDesc>
 800815a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800815c:	2181      	movs	r1, #129	@ 0x81
 800815e:	4813      	ldr	r0, [pc, #76]	@ (80081ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008160:	f000 fd20 	bl	8008ba4 <USBD_GetEpDesc>
 8008164:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2210      	movs	r2, #16
 8008170:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d006      	beq.n	8008186 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	2200      	movs	r2, #0
 800817c:	711a      	strb	r2, [r3, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f042 0202 	orr.w	r2, r2, #2
 8008184:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	711a      	strb	r2, [r3, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f042 0202 	orr.w	r2, r2, #2
 8008198:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2243      	movs	r2, #67	@ 0x43
 800819e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081a0:	4b02      	ldr	r3, [pc, #8]	@ (80081ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000054 	.word	0x20000054

080081b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081b8:	2182      	movs	r1, #130	@ 0x82
 80081ba:	4818      	ldr	r0, [pc, #96]	@ (800821c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081bc:	f000 fcf2 	bl	8008ba4 <USBD_GetEpDesc>
 80081c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081c2:	2101      	movs	r1, #1
 80081c4:	4815      	ldr	r0, [pc, #84]	@ (800821c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081c6:	f000 fced 	bl	8008ba4 <USBD_GetEpDesc>
 80081ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081cc:	2181      	movs	r1, #129	@ 0x81
 80081ce:	4813      	ldr	r0, [pc, #76]	@ (800821c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081d0:	f000 fce8 	bl	8008ba4 <USBD_GetEpDesc>
 80081d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2210      	movs	r2, #16
 80081e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081f0:	711a      	strb	r2, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d006      	beq.n	800820a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008204:	711a      	strb	r2, [r3, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2243      	movs	r2, #67	@ 0x43
 800820e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008210:	4b02      	ldr	r3, [pc, #8]	@ (800821c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000054 	.word	0x20000054

08008220 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	220a      	movs	r2, #10
 800822c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800822e:	4b03      	ldr	r3, [pc, #12]	@ (800823c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	20000010 	.word	0x20000010

08008240 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008250:	2303      	movs	r3, #3
 8008252:	e009      	b.n	8008268 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	33b0      	adds	r3, #176	@ 0xb0
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	32b0      	adds	r2, #176	@ 0xb0
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008296:	2303      	movs	r3, #3
 8008298:	e008      	b.n	80082ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	32b0      	adds	r2, #176	@ 0xb0
 80082cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80082d8:	2303      	movs	r3, #3
 80082da:	e004      	b.n	80082e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
	...

080082f4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	32b0      	adds	r2, #176	@ 0xb0
 8008306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008316:	2303      	movs	r3, #3
 8008318:	e025      	b.n	8008366 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11f      	bne.n	8008364 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2201      	movs	r2, #1
 8008328:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800832c:	4b10      	ldr	r3, [pc, #64]	@ (8008370 <USBD_CDC_TransmitPacket+0x7c>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	f003 020f 	and.w	r2, r3, #15
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4403      	add	r3, r0
 8008346:	3314      	adds	r3, #20
 8008348:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800834a:	4b09      	ldr	r3, [pc, #36]	@ (8008370 <USBD_CDC_TransmitPacket+0x7c>)
 800834c:	7819      	ldrb	r1, [r3, #0]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 ffd7 	bl	800a30e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000097 	.word	0x20000097

08008374 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	32b0      	adds	r2, #176	@ 0xb0
 8008386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	32b0      	adds	r2, #176	@ 0xb0
 8008396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800839e:	2303      	movs	r3, #3
 80083a0:	e018      	b.n	80083d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7c1b      	ldrb	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083aa:	4b0c      	ldr	r3, [pc, #48]	@ (80083dc <USBD_CDC_ReceivePacket+0x68>)
 80083ac:	7819      	ldrb	r1, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 ffc9 	bl	800a350 <USBD_LL_PrepareReceive>
 80083be:	e008      	b.n	80083d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083c0:	4b06      	ldr	r3, [pc, #24]	@ (80083dc <USBD_CDC_ReceivePacket+0x68>)
 80083c2:	7819      	ldrb	r1, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083ca:	2340      	movs	r3, #64	@ 0x40
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 ffbf 	bl	800a350 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000098 	.word	0x20000098

080083e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4613      	mov	r3, r2
 80083ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e01f      	b.n	8008438 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	79fa      	ldrb	r2, [r7, #7]
 800842a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f001 fe39 	bl	800a0a4 <USBD_LL_Init>
 8008432:	4603      	mov	r3, r0
 8008434:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008454:	2303      	movs	r3, #3
 8008456:	e025      	b.n	80084a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	32ae      	adds	r2, #174	@ 0xae
 800846a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00f      	beq.n	8008494 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	32ae      	adds	r2, #174	@ 0xae
 800847e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	f107 020e 	add.w	r2, r7, #14
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	4602      	mov	r2, r0
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 fe41 	bl	800a13c <USBD_LL_Start>
 80084ba:	4603      	mov	r3, r0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	78fa      	ldrb	r2, [r7, #3]
 80084fe:	4611      	mov	r1, r2
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4798      	blx	r3
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	78fa      	ldrb	r2, [r7, #3]
 800852c:	4611      	mov	r1, r2
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4798      	blx	r3
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008538:	2303      	movs	r3, #3
 800853a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f001 f922 	bl	80097a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800856c:	461a      	mov	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800857a:	f003 031f 	and.w	r3, r3, #31
 800857e:	2b02      	cmp	r3, #2
 8008580:	d01a      	beq.n	80085b8 <USBD_LL_SetupStage+0x72>
 8008582:	2b02      	cmp	r3, #2
 8008584:	d822      	bhi.n	80085cc <USBD_LL_SetupStage+0x86>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <USBD_LL_SetupStage+0x4a>
 800858a:	2b01      	cmp	r3, #1
 800858c:	d00a      	beq.n	80085a4 <USBD_LL_SetupStage+0x5e>
 800858e:	e01d      	b.n	80085cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fb77 	bl	8008c8c <USBD_StdDevReq>
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
      break;
 80085a2:	e020      	b.n	80085e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fbdf 	bl	8008d70 <USBD_StdItfReq>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]
      break;
 80085b6:	e016      	b.n	80085e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fc41 	bl	8008e48 <USBD_StdEPReq>
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]
      break;
 80085ca:	e00c      	b.n	80085e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80085d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 fe0e 	bl	800a1fc <USBD_LL_StallEP>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73fb      	strb	r3, [r7, #15]
      break;
 80085e4:	bf00      	nop
  }

  return ret;
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	460b      	mov	r3, r1
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008602:	7afb      	ldrb	r3, [r7, #11]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d177      	bne.n	80086f8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800860e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008616:	2b03      	cmp	r3, #3
 8008618:	f040 80a1 	bne.w	800875e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	8992      	ldrh	r2, [r2, #12]
 8008624:	4293      	cmp	r3, r2
 8008626:	d91c      	bls.n	8008662 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	8992      	ldrh	r2, [r2, #12]
 8008630:	1a9a      	subs	r2, r3, r2
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	8992      	ldrh	r2, [r2, #12]
 800863e:	441a      	add	r2, r3
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	6919      	ldr	r1, [r3, #16]
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	899b      	ldrh	r3, [r3, #12]
 800864c:	461a      	mov	r2, r3
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	4293      	cmp	r3, r2
 8008654:	bf38      	it	cc
 8008656:	4613      	movcc	r3, r2
 8008658:	461a      	mov	r2, r3
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f001 f9a8 	bl	80099b0 <USBD_CtlContinueRx>
 8008660:	e07d      	b.n	800875e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008668:	f003 031f 	and.w	r3, r3, #31
 800866c:	2b02      	cmp	r3, #2
 800866e:	d014      	beq.n	800869a <USBD_LL_DataOutStage+0xaa>
 8008670:	2b02      	cmp	r3, #2
 8008672:	d81d      	bhi.n	80086b0 <USBD_LL_DataOutStage+0xc0>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <USBD_LL_DataOutStage+0x8e>
 8008678:	2b01      	cmp	r3, #1
 800867a:	d003      	beq.n	8008684 <USBD_LL_DataOutStage+0x94>
 800867c:	e018      	b.n	80086b0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	75bb      	strb	r3, [r7, #22]
            break;
 8008682:	e018      	b.n	80086b6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800868a:	b2db      	uxtb	r3, r3
 800868c:	4619      	mov	r1, r3
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 fa6e 	bl	8008b70 <USBD_CoreFindIF>
 8008694:	4603      	mov	r3, r0
 8008696:	75bb      	strb	r3, [r7, #22]
            break;
 8008698:	e00d      	b.n	80086b6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	4619      	mov	r1, r3
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 fa70 	bl	8008b8a <USBD_CoreFindEP>
 80086aa:	4603      	mov	r3, r0
 80086ac:	75bb      	strb	r3, [r7, #22]
            break;
 80086ae:	e002      	b.n	80086b6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	75bb      	strb	r3, [r7, #22]
            break;
 80086b4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80086b6:	7dbb      	ldrb	r3, [r7, #22]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d119      	bne.n	80086f0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d113      	bne.n	80086f0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80086c8:	7dba      	ldrb	r2, [r7, #22]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	32ae      	adds	r2, #174	@ 0xae
 80086ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80086d8:	7dba      	ldrb	r2, [r7, #22]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80086e0:	7dba      	ldrb	r2, [r7, #22]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	32ae      	adds	r2, #174	@ 0xae
 80086e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f001 f96e 	bl	80099d2 <USBD_CtlSendStatus>
 80086f6:	e032      	b.n	800875e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	4619      	mov	r1, r3
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fa41 	bl	8008b8a <USBD_CoreFindEP>
 8008708:	4603      	mov	r3, r0
 800870a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800870c:	7dbb      	ldrb	r3, [r7, #22]
 800870e:	2bff      	cmp	r3, #255	@ 0xff
 8008710:	d025      	beq.n	800875e <USBD_LL_DataOutStage+0x16e>
 8008712:	7dbb      	ldrb	r3, [r7, #22]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d122      	bne.n	800875e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b03      	cmp	r3, #3
 8008722:	d117      	bne.n	8008754 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008724:	7dba      	ldrb	r2, [r7, #22]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	32ae      	adds	r2, #174	@ 0xae
 800872a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00f      	beq.n	8008754 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008734:	7dba      	ldrb	r2, [r7, #22]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800873c:	7dba      	ldrb	r2, [r7, #22]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	32ae      	adds	r2, #174	@ 0xae
 8008742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	7afa      	ldrb	r2, [r7, #11]
 800874a:	4611      	mov	r1, r2
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	4798      	blx	r3
 8008750:	4603      	mov	r3, r0
 8008752:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	e000      	b.n	8008760 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	460b      	mov	r3, r1
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d178      	bne.n	800886e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3314      	adds	r3, #20
 8008780:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008788:	2b02      	cmp	r3, #2
 800878a:	d163      	bne.n	8008854 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	8992      	ldrh	r2, [r2, #12]
 8008794:	4293      	cmp	r3, r2
 8008796:	d91c      	bls.n	80087d2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	8992      	ldrh	r2, [r2, #12]
 80087a0:	1a9a      	subs	r2, r3, r2
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	8992      	ldrh	r2, [r2, #12]
 80087ae:	441a      	add	r2, r3
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	6919      	ldr	r1, [r3, #16]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	461a      	mov	r2, r3
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f001 f8c4 	bl	800994c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087c4:	2300      	movs	r3, #0
 80087c6:	2200      	movs	r2, #0
 80087c8:	2100      	movs	r1, #0
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f001 fdc0 	bl	800a350 <USBD_LL_PrepareReceive>
 80087d0:	e040      	b.n	8008854 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	899b      	ldrh	r3, [r3, #12]
 80087d6:	461a      	mov	r2, r3
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d11c      	bne.n	800881a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d316      	bcc.n	800881a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d20f      	bcs.n	800881a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087fa:	2200      	movs	r2, #0
 80087fc:	2100      	movs	r1, #0
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f001 f8a4 	bl	800994c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800880c:	2300      	movs	r3, #0
 800880e:	2200      	movs	r2, #0
 8008810:	2100      	movs	r1, #0
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f001 fd9c 	bl	800a350 <USBD_LL_PrepareReceive>
 8008818:	e01c      	b.n	8008854 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b03      	cmp	r3, #3
 8008824:	d10f      	bne.n	8008846 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008846:	2180      	movs	r1, #128	@ 0x80
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f001 fcd7 	bl	800a1fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f001 f8d2 	bl	80099f8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d03a      	beq.n	80088d4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f7ff fe30 	bl	80084c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800886c:	e032      	b.n	80088d4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800886e:	7afb      	ldrb	r3, [r7, #11]
 8008870:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008874:	b2db      	uxtb	r3, r3
 8008876:	4619      	mov	r1, r3
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f986 	bl	8008b8a <USBD_CoreFindEP>
 800887e:	4603      	mov	r3, r0
 8008880:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	2bff      	cmp	r3, #255	@ 0xff
 8008886:	d025      	beq.n	80088d4 <USBD_LL_DataInStage+0x16c>
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d122      	bne.n	80088d4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b03      	cmp	r3, #3
 8008898:	d11c      	bne.n	80088d4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800889a:	7dfa      	ldrb	r2, [r7, #23]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	32ae      	adds	r2, #174	@ 0xae
 80088a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d014      	beq.n	80088d4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80088aa:	7dfa      	ldrb	r2, [r7, #23]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80088b2:	7dfa      	ldrb	r2, [r7, #23]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	32ae      	adds	r2, #174	@ 0xae
 80088b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	7afa      	ldrb	r2, [r7, #11]
 80088c0:	4611      	mov	r1, r2
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	4798      	blx	r3
 80088c6:	4603      	mov	r3, r0
 80088c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80088ca:	7dbb      	ldrb	r3, [r7, #22]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80088d0:	7dbb      	ldrb	r3, [r7, #22]
 80088d2:	e000      	b.n	80088d6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d014      	beq.n	8008944 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00e      	beq.n	8008944 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	6852      	ldr	r2, [r2, #4]
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	4611      	mov	r1, r2
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008940:	2303      	movs	r3, #3
 8008942:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008944:	2340      	movs	r3, #64	@ 0x40
 8008946:	2200      	movs	r2, #0
 8008948:	2100      	movs	r1, #0
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 fc11 	bl	800a172 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2240      	movs	r2, #64	@ 0x40
 800895c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008960:	2340      	movs	r3, #64	@ 0x40
 8008962:	2200      	movs	r2, #0
 8008964:	2180      	movs	r1, #128	@ 0x80
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 fc03 	bl	800a172 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2240      	movs	r2, #64	@ 0x40
 8008978:	841a      	strh	r2, [r3, #32]

  return ret;
 800897a:	7bfb      	ldrb	r3, [r7, #15]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	78fa      	ldrb	r2, [r7, #3]
 8008994:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d006      	beq.n	80089c6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2204      	movs	r2, #4
 80089ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d106      	bne.n	80089fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d110      	bne.n	8008a42 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00b      	beq.n	8008a42 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d005      	beq.n	8008a42 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	32ae      	adds	r2, #174	@ 0xae
 8008a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e01c      	b.n	8008aa8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d115      	bne.n	8008aa6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	32ae      	adds	r2, #174	@ 0xae
 8008a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	32ae      	adds	r2, #174	@ 0xae
 8008a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	32ae      	adds	r2, #174	@ 0xae
 8008ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e01c      	b.n	8008b0c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d115      	bne.n	8008b0a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	32ae      	adds	r2, #174	@ 0xae
 8008ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	32ae      	adds	r2, #174	@ 0xae
 8008afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	4611      	mov	r1, r2
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00e      	beq.n	8008b66 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6852      	ldr	r2, [r2, #4]
 8008b54:	b2d2      	uxtb	r2, r2
 8008b56:	4611      	mov	r1, r2
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	4798      	blx	r3
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008b62:	2303      	movs	r3, #3
 8008b64:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b7c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	7812      	ldrb	r2, [r2, #0]
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d91f      	bls.n	8008c0a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008bd0:	e013      	b.n	8008bfa <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008bd2:	f107 030a 	add.w	r3, r7, #10
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6978      	ldr	r0, [r7, #20]
 8008bda:	f000 f81b 	bl	8008c14 <USBD_GetNextDesc>
 8008bde:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	2b05      	cmp	r3, #5
 8008be6:	d108      	bne.n	8008bfa <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	789b      	ldrb	r3, [r3, #2]
 8008bf0:	78fa      	ldrb	r2, [r7, #3]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d008      	beq.n	8008c08 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	885b      	ldrh	r3, [r3, #2]
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	897b      	ldrh	r3, [r7, #10]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d8e5      	bhi.n	8008bd2 <USBD_GetEpDesc+0x2e>
 8008c06:	e000      	b.n	8008c0a <USBD_GetEpDesc+0x66>
          break;
 8008c08:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c0a:	693b      	ldr	r3, [r7, #16]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	7812      	ldrb	r2, [r2, #0]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	3301      	adds	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	b21a      	sxth	r2, r3
 8008c72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	b21b      	sxth	r3, r3
 8008c7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c7c:	89fb      	ldrh	r3, [r7, #14]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	371c      	adds	r7, #28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
	...

08008c8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ca2:	2b40      	cmp	r3, #64	@ 0x40
 8008ca4:	d005      	beq.n	8008cb2 <USBD_StdDevReq+0x26>
 8008ca6:	2b40      	cmp	r3, #64	@ 0x40
 8008ca8:	d857      	bhi.n	8008d5a <USBD_StdDevReq+0xce>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00f      	beq.n	8008cce <USBD_StdDevReq+0x42>
 8008cae:	2b20      	cmp	r3, #32
 8008cb0:	d153      	bne.n	8008d5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	32ae      	adds	r2, #174	@ 0xae
 8008cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]
      break;
 8008ccc:	e04a      	b.n	8008d64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	785b      	ldrb	r3, [r3, #1]
 8008cd2:	2b09      	cmp	r3, #9
 8008cd4:	d83b      	bhi.n	8008d4e <USBD_StdDevReq+0xc2>
 8008cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cdc <USBD_StdDevReq+0x50>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008d31 	.word	0x08008d31
 8008ce0:	08008d45 	.word	0x08008d45
 8008ce4:	08008d4f 	.word	0x08008d4f
 8008ce8:	08008d3b 	.word	0x08008d3b
 8008cec:	08008d4f 	.word	0x08008d4f
 8008cf0:	08008d0f 	.word	0x08008d0f
 8008cf4:	08008d05 	.word	0x08008d05
 8008cf8:	08008d4f 	.word	0x08008d4f
 8008cfc:	08008d27 	.word	0x08008d27
 8008d00:	08008d19 	.word	0x08008d19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fa3e 	bl	8009188 <USBD_GetDescriptor>
          break;
 8008d0c:	e024      	b.n	8008d58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fba3 	bl	800945c <USBD_SetAddress>
          break;
 8008d16:	e01f      	b.n	8008d58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fbe2 	bl	80094e4 <USBD_SetConfig>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
          break;
 8008d24:	e018      	b.n	8008d58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fc85 	bl	8009638 <USBD_GetConfig>
          break;
 8008d2e:	e013      	b.n	8008d58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fcb6 	bl	80096a4 <USBD_GetStatus>
          break;
 8008d38:	e00e      	b.n	8008d58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fce5 	bl	800970c <USBD_SetFeature>
          break;
 8008d42:	e009      	b.n	8008d58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fd09 	bl	800975e <USBD_ClrFeature>
          break;
 8008d4c:	e004      	b.n	8008d58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fd60 	bl	8009816 <USBD_CtlError>
          break;
 8008d56:	bf00      	nop
      }
      break;
 8008d58:	e004      	b.n	8008d64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fd5a 	bl	8009816 <USBD_CtlError>
      break;
 8008d62:	bf00      	nop
  }

  return ret;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop

08008d70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d86:	2b40      	cmp	r3, #64	@ 0x40
 8008d88:	d005      	beq.n	8008d96 <USBD_StdItfReq+0x26>
 8008d8a:	2b40      	cmp	r3, #64	@ 0x40
 8008d8c:	d852      	bhi.n	8008e34 <USBD_StdItfReq+0xc4>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <USBD_StdItfReq+0x26>
 8008d92:	2b20      	cmp	r3, #32
 8008d94:	d14e      	bne.n	8008e34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d840      	bhi.n	8008e26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	889b      	ldrh	r3, [r3, #4]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d836      	bhi.n	8008e1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	889b      	ldrh	r3, [r3, #4]
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff feda 	bl	8008b70 <USBD_CoreFindIF>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	2bff      	cmp	r3, #255	@ 0xff
 8008dc4:	d01d      	beq.n	8008e02 <USBD_StdItfReq+0x92>
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d11a      	bne.n	8008e02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008dcc:	7bba      	ldrb	r2, [r7, #14]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	32ae      	adds	r2, #174	@ 0xae
 8008dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00f      	beq.n	8008dfc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ddc:	7bba      	ldrb	r2, [r7, #14]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008de4:	7bba      	ldrb	r2, [r7, #14]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	32ae      	adds	r2, #174	@ 0xae
 8008dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008dfa:	e004      	b.n	8008e06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e00:	e001      	b.n	8008e06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e02:	2303      	movs	r3, #3
 8008e04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88db      	ldrh	r3, [r3, #6]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d110      	bne.n	8008e30 <USBD_StdItfReq+0xc0>
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10d      	bne.n	8008e30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fddc 	bl	80099d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e1a:	e009      	b.n	8008e30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fcf9 	bl	8009816 <USBD_CtlError>
          break;
 8008e24:	e004      	b.n	8008e30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fcf4 	bl	8009816 <USBD_CtlError>
          break;
 8008e2e:	e000      	b.n	8008e32 <USBD_StdItfReq+0xc2>
          break;
 8008e30:	bf00      	nop
      }
      break;
 8008e32:	e004      	b.n	8008e3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fced 	bl	8009816 <USBD_CtlError>
      break;
 8008e3c:	bf00      	nop
  }

  return ret;
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	889b      	ldrh	r3, [r3, #4]
 8008e5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e64:	2b40      	cmp	r3, #64	@ 0x40
 8008e66:	d007      	beq.n	8008e78 <USBD_StdEPReq+0x30>
 8008e68:	2b40      	cmp	r3, #64	@ 0x40
 8008e6a:	f200 8181 	bhi.w	8009170 <USBD_StdEPReq+0x328>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d02a      	beq.n	8008ec8 <USBD_StdEPReq+0x80>
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	f040 817c 	bne.w	8009170 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff fe84 	bl	8008b8a <USBD_CoreFindEP>
 8008e82:	4603      	mov	r3, r0
 8008e84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e86:	7b7b      	ldrb	r3, [r7, #13]
 8008e88:	2bff      	cmp	r3, #255	@ 0xff
 8008e8a:	f000 8176 	beq.w	800917a <USBD_StdEPReq+0x332>
 8008e8e:	7b7b      	ldrb	r3, [r7, #13]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f040 8172 	bne.w	800917a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008e96:	7b7a      	ldrb	r2, [r7, #13]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e9e:	7b7a      	ldrb	r2, [r7, #13]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	32ae      	adds	r2, #174	@ 0xae
 8008ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 8165 	beq.w	800917a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008eb0:	7b7a      	ldrb	r2, [r7, #13]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	32ae      	adds	r2, #174	@ 0xae
 8008eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ec6:	e158      	b.n	800917a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	785b      	ldrb	r3, [r3, #1]
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d008      	beq.n	8008ee2 <USBD_StdEPReq+0x9a>
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	f300 8147 	bgt.w	8009164 <USBD_StdEPReq+0x31c>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 809b 	beq.w	8009012 <USBD_StdEPReq+0x1ca>
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d03c      	beq.n	8008f5a <USBD_StdEPReq+0x112>
 8008ee0:	e140      	b.n	8009164 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d002      	beq.n	8008ef4 <USBD_StdEPReq+0xac>
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d016      	beq.n	8008f20 <USBD_StdEPReq+0xd8>
 8008ef2:	e02c      	b.n	8008f4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00d      	beq.n	8008f16 <USBD_StdEPReq+0xce>
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b80      	cmp	r3, #128	@ 0x80
 8008efe:	d00a      	beq.n	8008f16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 f979 	bl	800a1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f0a:	2180      	movs	r1, #128	@ 0x80
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 f975 	bl	800a1fc <USBD_LL_StallEP>
 8008f12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f14:	e020      	b.n	8008f58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fc7c 	bl	8009816 <USBD_CtlError>
              break;
 8008f1e:	e01b      	b.n	8008f58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	885b      	ldrh	r3, [r3, #2]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10e      	bne.n	8008f46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00b      	beq.n	8008f46 <USBD_StdEPReq+0xfe>
 8008f2e:	7bbb      	ldrb	r3, [r7, #14]
 8008f30:	2b80      	cmp	r3, #128	@ 0x80
 8008f32:	d008      	beq.n	8008f46 <USBD_StdEPReq+0xfe>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	88db      	ldrh	r3, [r3, #6]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d104      	bne.n	8008f46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f001 f95b 	bl	800a1fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fd43 	bl	80099d2 <USBD_CtlSendStatus>

              break;
 8008f4c:	e004      	b.n	8008f58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fc60 	bl	8009816 <USBD_CtlError>
              break;
 8008f56:	bf00      	nop
          }
          break;
 8008f58:	e109      	b.n	800916e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d002      	beq.n	8008f6c <USBD_StdEPReq+0x124>
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d016      	beq.n	8008f98 <USBD_StdEPReq+0x150>
 8008f6a:	e04b      	b.n	8009004 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00d      	beq.n	8008f8e <USBD_StdEPReq+0x146>
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b80      	cmp	r3, #128	@ 0x80
 8008f76:	d00a      	beq.n	8008f8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 f93d 	bl	800a1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f82:	2180      	movs	r1, #128	@ 0x80
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 f939 	bl	800a1fc <USBD_LL_StallEP>
 8008f8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f8c:	e040      	b.n	8009010 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fc40 	bl	8009816 <USBD_CtlError>
              break;
 8008f96:	e03b      	b.n	8009010 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	885b      	ldrh	r3, [r3, #2]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d136      	bne.n	800900e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008faa:	7bbb      	ldrb	r3, [r7, #14]
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 f943 	bl	800a23a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fd0c 	bl	80099d2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff fde3 	bl	8008b8a <USBD_CoreFindEP>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fc8:	7b7b      	ldrb	r3, [r7, #13]
 8008fca:	2bff      	cmp	r3, #255	@ 0xff
 8008fcc:	d01f      	beq.n	800900e <USBD_StdEPReq+0x1c6>
 8008fce:	7b7b      	ldrb	r3, [r7, #13]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d11c      	bne.n	800900e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008fd4:	7b7a      	ldrb	r2, [r7, #13]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008fdc:	7b7a      	ldrb	r2, [r7, #13]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	32ae      	adds	r2, #174	@ 0xae
 8008fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d010      	beq.n	800900e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008fec:	7b7a      	ldrb	r2, [r7, #13]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	32ae      	adds	r2, #174	@ 0xae
 8008ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	4798      	blx	r3
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009002:	e004      	b.n	800900e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fc05 	bl	8009816 <USBD_CtlError>
              break;
 800900c:	e000      	b.n	8009010 <USBD_StdEPReq+0x1c8>
              break;
 800900e:	bf00      	nop
          }
          break;
 8009010:	e0ad      	b.n	800916e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b02      	cmp	r3, #2
 800901c:	d002      	beq.n	8009024 <USBD_StdEPReq+0x1dc>
 800901e:	2b03      	cmp	r3, #3
 8009020:	d033      	beq.n	800908a <USBD_StdEPReq+0x242>
 8009022:	e099      	b.n	8009158 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <USBD_StdEPReq+0x1f2>
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b80      	cmp	r3, #128	@ 0x80
 800902e:	d004      	beq.n	800903a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fbef 	bl	8009816 <USBD_CtlError>
                break;
 8009038:	e093      	b.n	8009162 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800903a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800903e:	2b00      	cmp	r3, #0
 8009040:	da0b      	bge.n	800905a <USBD_StdEPReq+0x212>
 8009042:	7bbb      	ldrb	r3, [r7, #14]
 8009044:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009048:	4613      	mov	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	3310      	adds	r3, #16
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	4413      	add	r3, r2
 8009056:	3304      	adds	r3, #4
 8009058:	e00b      	b.n	8009072 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009060:	4613      	mov	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	3304      	adds	r3, #4
 8009072:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2200      	movs	r2, #0
 8009078:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	330e      	adds	r3, #14
 800907e:	2202      	movs	r2, #2
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fc44 	bl	8009910 <USBD_CtlSendData>
              break;
 8009088:	e06b      	b.n	8009162 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800908a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800908e:	2b00      	cmp	r3, #0
 8009090:	da11      	bge.n	80090b6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	f003 020f 	and.w	r2, r3, #15
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	3323      	adds	r3, #35	@ 0x23
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d117      	bne.n	80090dc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fbb1 	bl	8009816 <USBD_CtlError>
                  break;
 80090b4:	e055      	b.n	8009162 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	f003 020f 	and.w	r2, r3, #15
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fb9e 	bl	8009816 <USBD_CtlError>
                  break;
 80090da:	e042      	b.n	8009162 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da0b      	bge.n	80090fc <USBD_StdEPReq+0x2b4>
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	3310      	adds	r3, #16
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	3304      	adds	r3, #4
 80090fa:	e00b      	b.n	8009114 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	4413      	add	r3, r2
 8009112:	3304      	adds	r3, #4
 8009114:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <USBD_StdEPReq+0x2da>
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	2b80      	cmp	r3, #128	@ 0x80
 8009120:	d103      	bne.n	800912a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2200      	movs	r2, #0
 8009126:	739a      	strb	r2, [r3, #14]
 8009128:	e00e      	b.n	8009148 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 f8a2 	bl	800a278 <USBD_LL_IsStallEP>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2201      	movs	r2, #1
 800913e:	739a      	strb	r2, [r3, #14]
 8009140:	e002      	b.n	8009148 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2200      	movs	r2, #0
 8009146:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	330e      	adds	r3, #14
 800914c:	2202      	movs	r2, #2
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fbdd 	bl	8009910 <USBD_CtlSendData>
              break;
 8009156:	e004      	b.n	8009162 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fb5b 	bl	8009816 <USBD_CtlError>
              break;
 8009160:	bf00      	nop
          }
          break;
 8009162:	e004      	b.n	800916e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fb55 	bl	8009816 <USBD_CtlError>
          break;
 800916c:	bf00      	nop
      }
      break;
 800916e:	e005      	b.n	800917c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fb4f 	bl	8009816 <USBD_CtlError>
      break;
 8009178:	e000      	b.n	800917c <USBD_StdEPReq+0x334>
      break;
 800917a:	bf00      	nop
  }

  return ret;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009196:	2300      	movs	r3, #0
 8009198:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	885b      	ldrh	r3, [r3, #2]
 80091a2:	0a1b      	lsrs	r3, r3, #8
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	3b01      	subs	r3, #1
 80091a8:	2b06      	cmp	r3, #6
 80091aa:	f200 8128 	bhi.w	80093fe <USBD_GetDescriptor+0x276>
 80091ae:	a201      	add	r2, pc, #4	@ (adr r2, 80091b4 <USBD_GetDescriptor+0x2c>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091d1 	.word	0x080091d1
 80091b8:	080091e9 	.word	0x080091e9
 80091bc:	08009229 	.word	0x08009229
 80091c0:	080093ff 	.word	0x080093ff
 80091c4:	080093ff 	.word	0x080093ff
 80091c8:	0800939f 	.word	0x0800939f
 80091cc:	080093cb 	.word	0x080093cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	7c12      	ldrb	r2, [r2, #16]
 80091dc:	f107 0108 	add.w	r1, r7, #8
 80091e0:	4610      	mov	r0, r2
 80091e2:	4798      	blx	r3
 80091e4:	60f8      	str	r0, [r7, #12]
      break;
 80091e6:	e112      	b.n	800940e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	7c1b      	ldrb	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10d      	bne.n	800920c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f8:	f107 0208 	add.w	r2, r7, #8
 80091fc:	4610      	mov	r0, r2
 80091fe:	4798      	blx	r3
 8009200:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3301      	adds	r3, #1
 8009206:	2202      	movs	r2, #2
 8009208:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800920a:	e100      	b.n	800940e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009214:	f107 0208 	add.w	r2, r7, #8
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3301      	adds	r3, #1
 8009222:	2202      	movs	r2, #2
 8009224:	701a      	strb	r2, [r3, #0]
      break;
 8009226:	e0f2      	b.n	800940e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	885b      	ldrh	r3, [r3, #2]
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b05      	cmp	r3, #5
 8009230:	f200 80ac 	bhi.w	800938c <USBD_GetDescriptor+0x204>
 8009234:	a201      	add	r2, pc, #4	@ (adr r2, 800923c <USBD_GetDescriptor+0xb4>)
 8009236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923a:	bf00      	nop
 800923c:	08009255 	.word	0x08009255
 8009240:	08009289 	.word	0x08009289
 8009244:	080092bd 	.word	0x080092bd
 8009248:	080092f1 	.word	0x080092f1
 800924c:	08009325 	.word	0x08009325
 8009250:	08009359 	.word	0x08009359
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	7c12      	ldrb	r2, [r2, #16]
 800926c:	f107 0108 	add.w	r1, r7, #8
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009276:	e091      	b.n	800939c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 facb 	bl	8009816 <USBD_CtlError>
            err++;
 8009280:	7afb      	ldrb	r3, [r7, #11]
 8009282:	3301      	adds	r3, #1
 8009284:	72fb      	strb	r3, [r7, #11]
          break;
 8009286:	e089      	b.n	800939c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	7c12      	ldrb	r2, [r2, #16]
 80092a0:	f107 0108 	add.w	r1, r7, #8
 80092a4:	4610      	mov	r0, r2
 80092a6:	4798      	blx	r3
 80092a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092aa:	e077      	b.n	800939c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fab1 	bl	8009816 <USBD_CtlError>
            err++;
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	3301      	adds	r3, #1
 80092b8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ba:	e06f      	b.n	800939c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	7c12      	ldrb	r2, [r2, #16]
 80092d4:	f107 0108 	add.w	r1, r7, #8
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092de:	e05d      	b.n	800939c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fa97 	bl	8009816 <USBD_CtlError>
            err++;
 80092e8:	7afb      	ldrb	r3, [r7, #11]
 80092ea:	3301      	adds	r3, #1
 80092ec:	72fb      	strb	r3, [r7, #11]
          break;
 80092ee:	e055      	b.n	800939c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7c12      	ldrb	r2, [r2, #16]
 8009308:	f107 0108 	add.w	r1, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009312:	e043      	b.n	800939c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fa7d 	bl	8009816 <USBD_CtlError>
            err++;
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	3301      	adds	r3, #1
 8009320:	72fb      	strb	r3, [r7, #11]
          break;
 8009322:	e03b      	b.n	800939c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	7c12      	ldrb	r2, [r2, #16]
 800933c:	f107 0108 	add.w	r1, r7, #8
 8009340:	4610      	mov	r0, r2
 8009342:	4798      	blx	r3
 8009344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009346:	e029      	b.n	800939c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fa63 	bl	8009816 <USBD_CtlError>
            err++;
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	3301      	adds	r3, #1
 8009354:	72fb      	strb	r3, [r7, #11]
          break;
 8009356:	e021      	b.n	800939c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7c12      	ldrb	r2, [r2, #16]
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937a:	e00f      	b.n	800939c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fa49 	bl	8009816 <USBD_CtlError>
            err++;
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	3301      	adds	r3, #1
 8009388:	72fb      	strb	r3, [r7, #11]
          break;
 800938a:	e007      	b.n	800939c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa41 	bl	8009816 <USBD_CtlError>
          err++;
 8009394:	7afb      	ldrb	r3, [r7, #11]
 8009396:	3301      	adds	r3, #1
 8009398:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800939a:	bf00      	nop
      }
      break;
 800939c:	e037      	b.n	800940e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	7c1b      	ldrb	r3, [r3, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ae:	f107 0208 	add.w	r2, r7, #8
 80093b2:	4610      	mov	r0, r2
 80093b4:	4798      	blx	r3
 80093b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093b8:	e029      	b.n	800940e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fa2a 	bl	8009816 <USBD_CtlError>
        err++;
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	3301      	adds	r3, #1
 80093c6:	72fb      	strb	r3, [r7, #11]
      break;
 80093c8:	e021      	b.n	800940e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	7c1b      	ldrb	r3, [r3, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10d      	bne.n	80093ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093da:	f107 0208 	add.w	r2, r7, #8
 80093de:	4610      	mov	r0, r2
 80093e0:	4798      	blx	r3
 80093e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3301      	adds	r3, #1
 80093e8:	2207      	movs	r2, #7
 80093ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093ec:	e00f      	b.n	800940e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa10 	bl	8009816 <USBD_CtlError>
        err++;
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	3301      	adds	r3, #1
 80093fa:	72fb      	strb	r3, [r7, #11]
      break;
 80093fc:	e007      	b.n	800940e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fa08 	bl	8009816 <USBD_CtlError>
      err++;
 8009406:	7afb      	ldrb	r3, [r7, #11]
 8009408:	3301      	adds	r3, #1
 800940a:	72fb      	strb	r3, [r7, #11]
      break;
 800940c:	bf00      	nop
  }

  if (err != 0U)
 800940e:	7afb      	ldrb	r3, [r7, #11]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d11e      	bne.n	8009452 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	88db      	ldrh	r3, [r3, #6]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d016      	beq.n	800944a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800941c:	893b      	ldrh	r3, [r7, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00e      	beq.n	8009440 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	88da      	ldrh	r2, [r3, #6]
 8009426:	893b      	ldrh	r3, [r7, #8]
 8009428:	4293      	cmp	r3, r2
 800942a:	bf28      	it	cs
 800942c:	4613      	movcs	r3, r2
 800942e:	b29b      	uxth	r3, r3
 8009430:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009432:	893b      	ldrh	r3, [r7, #8]
 8009434:	461a      	mov	r2, r3
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fa69 	bl	8009910 <USBD_CtlSendData>
 800943e:	e009      	b.n	8009454 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f9e7 	bl	8009816 <USBD_CtlError>
 8009448:	e004      	b.n	8009454 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fac1 	bl	80099d2 <USBD_CtlSendStatus>
 8009450:	e000      	b.n	8009454 <USBD_GetDescriptor+0x2cc>
    return;
 8009452:	bf00      	nop
  }
}
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop

0800945c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	889b      	ldrh	r3, [r3, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d131      	bne.n	80094d2 <USBD_SetAddress+0x76>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	88db      	ldrh	r3, [r3, #6]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d12d      	bne.n	80094d2 <USBD_SetAddress+0x76>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	885b      	ldrh	r3, [r3, #2]
 800947a:	2b7f      	cmp	r3, #127	@ 0x7f
 800947c:	d829      	bhi.n	80094d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	885b      	ldrh	r3, [r3, #2]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009488:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b03      	cmp	r3, #3
 8009494:	d104      	bne.n	80094a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f9bc 	bl	8009816 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800949e:	e01d      	b.n	80094dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	7bfa      	ldrb	r2, [r7, #15]
 80094a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 ff0f 	bl	800a2d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa8d 	bl	80099d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d004      	beq.n	80094c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2202      	movs	r2, #2
 80094c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	e009      	b.n	80094dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d0:	e004      	b.n	80094dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f99e 	bl	8009816 <USBD_CtlError>
  }
}
 80094da:	bf00      	nop
 80094dc:	bf00      	nop
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	885b      	ldrh	r3, [r3, #2]
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	4b4e      	ldr	r3, [pc, #312]	@ (8009634 <USBD_SetConfig+0x150>)
 80094fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094fc:	4b4d      	ldr	r3, [pc, #308]	@ (8009634 <USBD_SetConfig+0x150>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d905      	bls.n	8009510 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f985 	bl	8009816 <USBD_CtlError>
    return USBD_FAIL;
 800950c:	2303      	movs	r3, #3
 800950e:	e08c      	b.n	800962a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b02      	cmp	r3, #2
 800951a:	d002      	beq.n	8009522 <USBD_SetConfig+0x3e>
 800951c:	2b03      	cmp	r3, #3
 800951e:	d029      	beq.n	8009574 <USBD_SetConfig+0x90>
 8009520:	e075      	b.n	800960e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009522:	4b44      	ldr	r3, [pc, #272]	@ (8009634 <USBD_SetConfig+0x150>)
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d020      	beq.n	800956c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800952a:	4b42      	ldr	r3, [pc, #264]	@ (8009634 <USBD_SetConfig+0x150>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009534:	4b3f      	ldr	r3, [pc, #252]	@ (8009634 <USBD_SetConfig+0x150>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7fe ffcd 	bl	80084da <USBD_SetClassConfig>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d008      	beq.n	800955c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f962 	bl	8009816 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2202      	movs	r2, #2
 8009556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800955a:	e065      	b.n	8009628 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fa38 	bl	80099d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2203      	movs	r2, #3
 8009566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800956a:	e05d      	b.n	8009628 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fa30 	bl	80099d2 <USBD_CtlSendStatus>
      break;
 8009572:	e059      	b.n	8009628 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009574:	4b2f      	ldr	r3, [pc, #188]	@ (8009634 <USBD_SetConfig+0x150>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d112      	bne.n	80095a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2202      	movs	r2, #2
 8009580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009584:	4b2b      	ldr	r3, [pc, #172]	@ (8009634 <USBD_SetConfig+0x150>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800958e:	4b29      	ldr	r3, [pc, #164]	@ (8009634 <USBD_SetConfig+0x150>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7fe ffbc 	bl	8008512 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fa19 	bl	80099d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095a0:	e042      	b.n	8009628 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80095a2:	4b24      	ldr	r3, [pc, #144]	@ (8009634 <USBD_SetConfig+0x150>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d02a      	beq.n	8009606 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7fe ffaa 	bl	8008512 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095be:	4b1d      	ldr	r3, [pc, #116]	@ (8009634 <USBD_SetConfig+0x150>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009634 <USBD_SetConfig+0x150>)
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7fe ff83 	bl	80084da <USBD_SetClassConfig>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00f      	beq.n	80095fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f918 	bl	8009816 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fe ff8f 	bl	8008512 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80095fc:	e014      	b.n	8009628 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f9e7 	bl	80099d2 <USBD_CtlSendStatus>
      break;
 8009604:	e010      	b.n	8009628 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f9e3 	bl	80099d2 <USBD_CtlSendStatus>
      break;
 800960c:	e00c      	b.n	8009628 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f900 	bl	8009816 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009616:	4b07      	ldr	r3, [pc, #28]	@ (8009634 <USBD_SetConfig+0x150>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7fe ff78 	bl	8008512 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009622:	2303      	movs	r3, #3
 8009624:	73fb      	strb	r3, [r7, #15]
      break;
 8009626:	bf00      	nop
  }

  return ret;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	200003c6 	.word	0x200003c6

08009638 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	88db      	ldrh	r3, [r3, #6]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d004      	beq.n	8009654 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f8e2 	bl	8009816 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009652:	e023      	b.n	800969c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b02      	cmp	r3, #2
 800965e:	dc02      	bgt.n	8009666 <USBD_GetConfig+0x2e>
 8009660:	2b00      	cmp	r3, #0
 8009662:	dc03      	bgt.n	800966c <USBD_GetConfig+0x34>
 8009664:	e015      	b.n	8009692 <USBD_GetConfig+0x5a>
 8009666:	2b03      	cmp	r3, #3
 8009668:	d00b      	beq.n	8009682 <USBD_GetConfig+0x4a>
 800966a:	e012      	b.n	8009692 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3308      	adds	r3, #8
 8009676:	2201      	movs	r2, #1
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f948 	bl	8009910 <USBD_CtlSendData>
        break;
 8009680:	e00c      	b.n	800969c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3304      	adds	r3, #4
 8009686:	2201      	movs	r2, #1
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f940 	bl	8009910 <USBD_CtlSendData>
        break;
 8009690:	e004      	b.n	800969c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f8be 	bl	8009816 <USBD_CtlError>
        break;
 800969a:	bf00      	nop
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	3b01      	subs	r3, #1
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d81e      	bhi.n	80096fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	88db      	ldrh	r3, [r3, #6]
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d004      	beq.n	80096ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f8a5 	bl	8009816 <USBD_CtlError>
        break;
 80096cc:	e01a      	b.n	8009704 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d005      	beq.n	80096ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f043 0202 	orr.w	r2, r3, #2
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	330c      	adds	r3, #12
 80096ee:	2202      	movs	r2, #2
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f90c 	bl	8009910 <USBD_CtlSendData>
      break;
 80096f8:	e004      	b.n	8009704 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f88a 	bl	8009816 <USBD_CtlError>
      break;
 8009702:	bf00      	nop
  }
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	885b      	ldrh	r3, [r3, #2]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d107      	bne.n	800972e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f953 	bl	80099d2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800972c:	e013      	b.n	8009756 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	885b      	ldrh	r3, [r3, #2]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d10b      	bne.n	800974e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	889b      	ldrh	r3, [r3, #4]
 800973a:	0a1b      	lsrs	r3, r3, #8
 800973c:	b29b      	uxth	r3, r3
 800973e:	b2da      	uxtb	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f943 	bl	80099d2 <USBD_CtlSendStatus>
}
 800974c:	e003      	b.n	8009756 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f860 	bl	8009816 <USBD_CtlError>
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800976e:	b2db      	uxtb	r3, r3
 8009770:	3b01      	subs	r3, #1
 8009772:	2b02      	cmp	r3, #2
 8009774:	d80b      	bhi.n	800978e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	885b      	ldrh	r3, [r3, #2]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d10c      	bne.n	8009798 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f923 	bl	80099d2 <USBD_CtlSendStatus>
      }
      break;
 800978c:	e004      	b.n	8009798 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f840 	bl	8009816 <USBD_CtlError>
      break;
 8009796:	e000      	b.n	800979a <USBD_ClrFeature+0x3c>
      break;
 8009798:	bf00      	nop
  }
}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	781a      	ldrb	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3301      	adds	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	781a      	ldrb	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f7ff fa3d 	bl	8008c4c <SWAPBYTE>
 80097d2:	4603      	mov	r3, r0
 80097d4:	461a      	mov	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3301      	adds	r3, #1
 80097de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3301      	adds	r3, #1
 80097e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f7ff fa30 	bl	8008c4c <SWAPBYTE>
 80097ec:	4603      	mov	r3, r0
 80097ee:	461a      	mov	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3301      	adds	r3, #1
 80097f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f7ff fa23 	bl	8008c4c <SWAPBYTE>
 8009806:	4603      	mov	r3, r0
 8009808:	461a      	mov	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	80da      	strh	r2, [r3, #6]
}
 800980e:	bf00      	nop
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009820:	2180      	movs	r1, #128	@ 0x80
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fcea 	bl	800a1fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009828:	2100      	movs	r1, #0
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fce6 	bl	800a1fc <USBD_LL_StallEP>
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d042      	beq.n	80098d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009852:	6938      	ldr	r0, [r7, #16]
 8009854:	f000 f842 	bl	80098dc <USBD_GetLen>
 8009858:	4603      	mov	r3, r0
 800985a:	3301      	adds	r3, #1
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009862:	d808      	bhi.n	8009876 <USBD_GetString+0x3e>
 8009864:	6938      	ldr	r0, [r7, #16]
 8009866:	f000 f839 	bl	80098dc <USBD_GetLen>
 800986a:	4603      	mov	r3, r0
 800986c:	3301      	adds	r3, #1
 800986e:	b29b      	uxth	r3, r3
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	e001      	b.n	800987a <USBD_GetString+0x42>
 8009876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	4413      	add	r3, r2
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	7812      	ldrb	r2, [r2, #0]
 8009888:	701a      	strb	r2, [r3, #0]
  idx++;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	3301      	adds	r3, #1
 800988e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009890:	7dfb      	ldrb	r3, [r7, #23]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	4413      	add	r3, r2
 8009896:	2203      	movs	r2, #3
 8009898:	701a      	strb	r2, [r3, #0]
  idx++;
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	3301      	adds	r3, #1
 800989e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098a0:	e013      	b.n	80098ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	4413      	add	r3, r2
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	7812      	ldrb	r2, [r2, #0]
 80098ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	3301      	adds	r3, #1
 80098b2:	613b      	str	r3, [r7, #16]
    idx++;
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
 80098b6:	3301      	adds	r3, #1
 80098b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	4413      	add	r3, r2
 80098c0:	2200      	movs	r2, #0
 80098c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	3301      	adds	r3, #1
 80098c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1e7      	bne.n	80098a2 <USBD_GetString+0x6a>
 80098d2:	e000      	b.n	80098d6 <USBD_GetString+0x9e>
    return;
 80098d4:	bf00      	nop
  }
}
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098ec:	e005      	b.n	80098fa <USBD_GetLen+0x1e>
  {
    len++;
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	3301      	adds	r3, #1
 80098f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	3301      	adds	r3, #1
 80098f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1f5      	bne.n	80098ee <USBD_GetLen+0x12>
  }

  return len;
 8009902:	7bfb      	ldrb	r3, [r7, #15]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2202      	movs	r2, #2
 8009920:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	2100      	movs	r1, #0
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 fce6 	bl	800a30e <USBD_LL_Transmit>

  return USBD_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	2100      	movs	r1, #0
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 fcd5 	bl	800a30e <USBD_LL_Transmit>

  return USBD_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2203      	movs	r2, #3
 800997e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	2100      	movs	r1, #0
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 fcd5 	bl	800a350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	2100      	movs	r1, #0
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 fcc4 	bl	800a350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2204      	movs	r2, #4
 80099de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099e2:	2300      	movs	r3, #0
 80099e4:	2200      	movs	r2, #0
 80099e6:	2100      	movs	r1, #0
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fc90 	bl	800a30e <USBD_LL_Transmit>

  return USBD_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2205      	movs	r2, #5
 8009a04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fc9e 	bl	800a350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a24:	2200      	movs	r2, #0
 8009a26:	4912      	ldr	r1, [pc, #72]	@ (8009a70 <MX_USB_DEVICE_Init+0x50>)
 8009a28:	4812      	ldr	r0, [pc, #72]	@ (8009a74 <MX_USB_DEVICE_Init+0x54>)
 8009a2a:	f7fe fcd9 	bl	80083e0 <USBD_Init>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a34:	f7f7 fcc3 	bl	80013be <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a38:	490f      	ldr	r1, [pc, #60]	@ (8009a78 <MX_USB_DEVICE_Init+0x58>)
 8009a3a:	480e      	ldr	r0, [pc, #56]	@ (8009a74 <MX_USB_DEVICE_Init+0x54>)
 8009a3c:	f7fe fd00 	bl	8008440 <USBD_RegisterClass>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a46:	f7f7 fcba 	bl	80013be <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a4a:	490c      	ldr	r1, [pc, #48]	@ (8009a7c <MX_USB_DEVICE_Init+0x5c>)
 8009a4c:	4809      	ldr	r0, [pc, #36]	@ (8009a74 <MX_USB_DEVICE_Init+0x54>)
 8009a4e:	f7fe fbf7 	bl	8008240 <USBD_CDC_RegisterInterface>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a58:	f7f7 fcb1 	bl	80013be <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a5c:	4805      	ldr	r0, [pc, #20]	@ (8009a74 <MX_USB_DEVICE_Init+0x54>)
 8009a5e:	f7fe fd25 	bl	80084ac <USBD_Start>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a68:	f7f7 fca9 	bl	80013be <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a6c:	bf00      	nop
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	200000b0 	.word	0x200000b0
 8009a74:	200003c8 	.word	0x200003c8
 8009a78:	2000001c 	.word	0x2000001c
 8009a7c:	2000009c 	.word	0x2000009c

08009a80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a84:	2200      	movs	r2, #0
 8009a86:	4905      	ldr	r1, [pc, #20]	@ (8009a9c <CDC_Init_FS+0x1c>)
 8009a88:	4805      	ldr	r0, [pc, #20]	@ (8009aa0 <CDC_Init_FS+0x20>)
 8009a8a:	f7fe fbf3 	bl	8008274 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a8e:	4905      	ldr	r1, [pc, #20]	@ (8009aa4 <CDC_Init_FS+0x24>)
 8009a90:	4803      	ldr	r0, [pc, #12]	@ (8009aa0 <CDC_Init_FS+0x20>)
 8009a92:	f7fe fc11 	bl	80082b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20000ea4 	.word	0x20000ea4
 8009aa0:	200003c8 	.word	0x200003c8
 8009aa4:	200006a4 	.word	0x200006a4

08009aa8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009aac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	71fb      	strb	r3, [r7, #7]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	2b23      	cmp	r3, #35	@ 0x23
 8009acc:	d84a      	bhi.n	8009b64 <CDC_Control_FS+0xac>
 8009ace:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad4 <CDC_Control_FS+0x1c>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009b65 	.word	0x08009b65
 8009ad8:	08009b65 	.word	0x08009b65
 8009adc:	08009b65 	.word	0x08009b65
 8009ae0:	08009b65 	.word	0x08009b65
 8009ae4:	08009b65 	.word	0x08009b65
 8009ae8:	08009b65 	.word	0x08009b65
 8009aec:	08009b65 	.word	0x08009b65
 8009af0:	08009b65 	.word	0x08009b65
 8009af4:	08009b65 	.word	0x08009b65
 8009af8:	08009b65 	.word	0x08009b65
 8009afc:	08009b65 	.word	0x08009b65
 8009b00:	08009b65 	.word	0x08009b65
 8009b04:	08009b65 	.word	0x08009b65
 8009b08:	08009b65 	.word	0x08009b65
 8009b0c:	08009b65 	.word	0x08009b65
 8009b10:	08009b65 	.word	0x08009b65
 8009b14:	08009b65 	.word	0x08009b65
 8009b18:	08009b65 	.word	0x08009b65
 8009b1c:	08009b65 	.word	0x08009b65
 8009b20:	08009b65 	.word	0x08009b65
 8009b24:	08009b65 	.word	0x08009b65
 8009b28:	08009b65 	.word	0x08009b65
 8009b2c:	08009b65 	.word	0x08009b65
 8009b30:	08009b65 	.word	0x08009b65
 8009b34:	08009b65 	.word	0x08009b65
 8009b38:	08009b65 	.word	0x08009b65
 8009b3c:	08009b65 	.word	0x08009b65
 8009b40:	08009b65 	.word	0x08009b65
 8009b44:	08009b65 	.word	0x08009b65
 8009b48:	08009b65 	.word	0x08009b65
 8009b4c:	08009b65 	.word	0x08009b65
 8009b50:	08009b65 	.word	0x08009b65
 8009b54:	08009b65 	.word	0x08009b65
 8009b58:	08009b65 	.word	0x08009b65
 8009b5c:	08009b65 	.word	0x08009b65
 8009b60:	08009b65 	.word	0x08009b65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b64:	bf00      	nop
  }

  return (USBD_OK);
 8009b66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	4805      	ldr	r0, [pc, #20]	@ (8009b98 <CDC_Receive_FS+0x24>)
 8009b82:	f7fe fb99 	bl	80082b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b86:	4804      	ldr	r0, [pc, #16]	@ (8009b98 <CDC_Receive_FS+0x24>)
 8009b88:	f7fe fbf4 	bl	8008374 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	200003c8 	.word	0x200003c8

08009b9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bac:	4b0d      	ldr	r3, [pc, #52]	@ (8009be4 <CDC_Transmit_FS+0x48>)
 8009bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009bb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e00b      	b.n	8009bda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009bc2:	887b      	ldrh	r3, [r7, #2]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4806      	ldr	r0, [pc, #24]	@ (8009be4 <CDC_Transmit_FS+0x48>)
 8009bca:	f7fe fb53 	bl	8008274 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009bce:	4805      	ldr	r0, [pc, #20]	@ (8009be4 <CDC_Transmit_FS+0x48>)
 8009bd0:	f7fe fb90 	bl	80082f4 <USBD_CDC_TransmitPacket>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	200003c8 	.word	0x200003c8

08009be8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
	...

08009c0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2212      	movs	r2, #18
 8009c1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c1e:	4b03      	ldr	r3, [pc, #12]	@ (8009c2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	200000cc 	.word	0x200000cc

08009c30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c42:	4b03      	ldr	r3, [pc, #12]	@ (8009c50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	200000e0 	.word	0x200000e0

08009c54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d105      	bne.n	8009c72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	4907      	ldr	r1, [pc, #28]	@ (8009c88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c6a:	4808      	ldr	r0, [pc, #32]	@ (8009c8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009c6c:	f7ff fde4 	bl	8009838 <USBD_GetString>
 8009c70:	e004      	b.n	8009c7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	4904      	ldr	r1, [pc, #16]	@ (8009c88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c76:	4805      	ldr	r0, [pc, #20]	@ (8009c8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009c78:	f7ff fdde 	bl	8009838 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c7c:	4b02      	ldr	r3, [pc, #8]	@ (8009c88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	200016a4 	.word	0x200016a4
 8009c8c:	0800ce48 	.word	0x0800ce48

08009c90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	4904      	ldr	r1, [pc, #16]	@ (8009cb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ca0:	4804      	ldr	r0, [pc, #16]	@ (8009cb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ca2:	f7ff fdc9 	bl	8009838 <USBD_GetString>
  return USBD_StrDesc;
 8009ca6:	4b02      	ldr	r3, [pc, #8]	@ (8009cb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	200016a4 	.word	0x200016a4
 8009cb4:	0800ce60 	.word	0x0800ce60

08009cb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	6039      	str	r1, [r7, #0]
 8009cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	221a      	movs	r2, #26
 8009cc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cca:	f000 f843 	bl	8009d54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009cce:	4b02      	ldr	r3, [pc, #8]	@ (8009cd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	200000e4 	.word	0x200000e4

08009cdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	6039      	str	r1, [r7, #0]
 8009ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4907      	ldr	r1, [pc, #28]	@ (8009d10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cf2:	4808      	ldr	r0, [pc, #32]	@ (8009d14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cf4:	f7ff fda0 	bl	8009838 <USBD_GetString>
 8009cf8:	e004      	b.n	8009d04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	4904      	ldr	r1, [pc, #16]	@ (8009d10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cfe:	4805      	ldr	r0, [pc, #20]	@ (8009d14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d00:	f7ff fd9a 	bl	8009838 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d04:	4b02      	ldr	r3, [pc, #8]	@ (8009d10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	200016a4 	.word	0x200016a4
 8009d14:	0800ce74 	.word	0x0800ce74

08009d18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	6039      	str	r1, [r7, #0]
 8009d22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	4907      	ldr	r1, [pc, #28]	@ (8009d4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d2e:	4808      	ldr	r0, [pc, #32]	@ (8009d50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d30:	f7ff fd82 	bl	8009838 <USBD_GetString>
 8009d34:	e004      	b.n	8009d40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	4904      	ldr	r1, [pc, #16]	@ (8009d4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d3a:	4805      	ldr	r0, [pc, #20]	@ (8009d50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d3c:	f7ff fd7c 	bl	8009838 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d40:	4b02      	ldr	r3, [pc, #8]	@ (8009d4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	200016a4 	.word	0x200016a4
 8009d50:	0800ce80 	.word	0x0800ce80

08009d54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d98 <Get_SerialNum+0x44>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d60:	4b0e      	ldr	r3, [pc, #56]	@ (8009d9c <Get_SerialNum+0x48>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d66:	4b0e      	ldr	r3, [pc, #56]	@ (8009da0 <Get_SerialNum+0x4c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4413      	add	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	4909      	ldr	r1, [pc, #36]	@ (8009da4 <Get_SerialNum+0x50>)
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 f814 	bl	8009dac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d84:	2204      	movs	r2, #4
 8009d86:	4908      	ldr	r1, [pc, #32]	@ (8009da8 <Get_SerialNum+0x54>)
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	f000 f80f 	bl	8009dac <IntToUnicode>
  }
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	1fff7a10 	.word	0x1fff7a10
 8009d9c:	1fff7a14 	.word	0x1fff7a14
 8009da0:	1fff7a18 	.word	0x1fff7a18
 8009da4:	200000e6 	.word	0x200000e6
 8009da8:	200000f6 	.word	0x200000f6

08009dac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	75fb      	strb	r3, [r7, #23]
 8009dc2:	e027      	b.n	8009e14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	0f1b      	lsrs	r3, r3, #28
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	d80b      	bhi.n	8009de4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	0f1b      	lsrs	r3, r3, #28
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	440b      	add	r3, r1
 8009ddc:	3230      	adds	r2, #48	@ 0x30
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	e00a      	b.n	8009dfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	0f1b      	lsrs	r3, r3, #28
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	005b      	lsls	r3, r3, #1
 8009dee:	4619      	mov	r1, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	440b      	add	r3, r1
 8009df4:	3237      	adds	r2, #55	@ 0x37
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	3301      	adds	r3, #1
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	4413      	add	r3, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
 8009e10:	3301      	adds	r3, #1
 8009e12:	75fb      	strb	r3, [r7, #23]
 8009e14:	7dfa      	ldrb	r2, [r7, #23]
 8009e16:	79fb      	ldrb	r3, [r7, #7]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d3d3      	bcc.n	8009dc4 <IntToUnicode+0x18>
  }
}
 8009e1c:	bf00      	nop
 8009e1e:	bf00      	nop
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
	...

08009e2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08a      	sub	sp, #40	@ 0x28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e34:	f107 0314 	add.w	r3, r7, #20
 8009e38:	2200      	movs	r2, #0
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	605a      	str	r2, [r3, #4]
 8009e3e:	609a      	str	r2, [r3, #8]
 8009e40:	60da      	str	r2, [r3, #12]
 8009e42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e4c:	d13a      	bne.n	8009ec4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e4e:	2300      	movs	r3, #0
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	4b1e      	ldr	r3, [pc, #120]	@ (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e56:	4a1d      	ldr	r2, [pc, #116]	@ (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e58:	f043 0301 	orr.w	r3, r3, #1
 8009e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009e6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e70:	2302      	movs	r3, #2
 8009e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e74:	2300      	movs	r3, #0
 8009e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e7c:	230a      	movs	r3, #10
 8009e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e80:	f107 0314 	add.w	r3, r7, #20
 8009e84:	4619      	mov	r1, r3
 8009e86:	4812      	ldr	r0, [pc, #72]	@ (8009ed0 <HAL_PCD_MspInit+0xa4>)
 8009e88:	f7f7 fe4c 	bl	8001b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e90:	4a0e      	ldr	r2, [pc, #56]	@ (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e96:	6353      	str	r3, [r2, #52]	@ 0x34
 8009e98:	2300      	movs	r3, #0
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009ea2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ea6:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ea8:	4b08      	ldr	r3, [pc, #32]	@ (8009ecc <HAL_PCD_MspInit+0xa0>)
 8009eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	2043      	movs	r0, #67	@ 0x43
 8009eba:	f7f7 fdfc 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ebe:	2043      	movs	r0, #67	@ 0x43
 8009ec0:	f7f7 fe15 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	3728      	adds	r7, #40	@ 0x28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	40023800 	.word	0x40023800
 8009ed0:	40020000 	.word	0x40020000

08009ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4610      	mov	r0, r2
 8009eec:	f7fe fb2b 	bl	8008546 <USBD_LL_SetupStage>
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009f0a:	78fa      	ldrb	r2, [r7, #3]
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	78fb      	ldrb	r3, [r7, #3]
 8009f20:	4619      	mov	r1, r3
 8009f22:	f7fe fb65 	bl	80085f0 <USBD_LL_DataOutStage>
}
 8009f26:	bf00      	nop
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009f40:	78fa      	ldrb	r2, [r7, #3]
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	4613      	mov	r3, r2
 8009f46:	00db      	lsls	r3, r3, #3
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	3320      	adds	r3, #32
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	4619      	mov	r1, r3
 8009f56:	f7fe fc07 	bl	8008768 <USBD_LL_DataInStage>
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe fd4b 	bl	8008a0c <USBD_LL_SOF>
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f86:	2301      	movs	r3, #1
 8009f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	79db      	ldrb	r3, [r3, #7]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d001      	beq.n	8009f96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f92:	f7f7 fa14 	bl	80013be <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f9c:	7bfa      	ldrb	r2, [r7, #15]
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fe fcef 	bl	8008984 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fe fc96 	bl	80088de <USBD_LL_Reset>
}
 8009fb2:	bf00      	nop
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fcea 	bl	80089a4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009fe2:	f043 0301 	orr.w	r3, r3, #1
 8009fe6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	7adb      	ldrb	r3, [r3, #11]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ff0:	4b04      	ldr	r3, [pc, #16]	@ (800a004 <HAL_PCD_SuspendCallback+0x48>)
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	4a03      	ldr	r2, [pc, #12]	@ (800a004 <HAL_PCD_SuspendCallback+0x48>)
 8009ff6:	f043 0306 	orr.w	r3, r3, #6
 8009ffa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	e000ed00 	.word	0xe000ed00

0800a008 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fce0 	bl	80089dc <USBD_LL_Resume>
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	4611      	mov	r1, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fd38 	bl	8008ab0 <USBD_LL_IsoOUTIncomplete>
}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	4611      	mov	r1, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe fcf4 	bl	8008a4c <USBD_LL_IsoINIncomplete>
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe fd4a 	bl	8008b14 <USBD_LL_DevConnected>
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fd47 	bl	8008b2a <USBD_LL_DevDisconnected>
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d13c      	bne.n	800a12e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a0b4:	4a20      	ldr	r2, [pc, #128]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a1e      	ldr	r2, [pc, #120]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0c0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a0ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a0cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0ce:	2204      	movs	r2, #4
 800a0d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a0d2:	4b19      	ldr	r3, [pc, #100]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a0d8:	4b17      	ldr	r3, [pc, #92]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0de:	4b16      	ldr	r3, [pc, #88]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a0e4:	4b14      	ldr	r3, [pc, #80]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a0ea:	4b13      	ldr	r3, [pc, #76]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a0f0:	4b11      	ldr	r3, [pc, #68]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a0f6:	4b10      	ldr	r3, [pc, #64]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a0fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a138 <USBD_LL_Init+0x94>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a102:	480d      	ldr	r0, [pc, #52]	@ (800a138 <USBD_LL_Init+0x94>)
 800a104:	f7f8 ffd4 	bl	80030b0 <HAL_PCD_Init>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a10e:	f7f7 f956 	bl	80013be <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a112:	2180      	movs	r1, #128	@ 0x80
 800a114:	4808      	ldr	r0, [pc, #32]	@ (800a138 <USBD_LL_Init+0x94>)
 800a116:	f7fa fa00 	bl	800451a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a11a:	2240      	movs	r2, #64	@ 0x40
 800a11c:	2100      	movs	r1, #0
 800a11e:	4806      	ldr	r0, [pc, #24]	@ (800a138 <USBD_LL_Init+0x94>)
 800a120:	f7fa f9b4 	bl	800448c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a124:	2280      	movs	r2, #128	@ 0x80
 800a126:	2101      	movs	r1, #1
 800a128:	4803      	ldr	r0, [pc, #12]	@ (800a138 <USBD_LL_Init+0x94>)
 800a12a:	f7fa f9af 	bl	800448c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	200018a4 	.word	0x200018a4

0800a13c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a152:	4618      	mov	r0, r3
 800a154:	f7f9 f8bb 	bl	80032ce <HAL_PCD_Start>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f942 	bl	800a3e8 <USBD_Get_USB_Status>
 800a164:	4603      	mov	r3, r0
 800a166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a168:	7bbb      	ldrb	r3, [r7, #14]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	4608      	mov	r0, r1
 800a17c:	4611      	mov	r1, r2
 800a17e:	461a      	mov	r2, r3
 800a180:	4603      	mov	r3, r0
 800a182:	70fb      	strb	r3, [r7, #3]
 800a184:	460b      	mov	r3, r1
 800a186:	70bb      	strb	r3, [r7, #2]
 800a188:	4613      	mov	r3, r2
 800a18a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a19a:	78bb      	ldrb	r3, [r7, #2]
 800a19c:	883a      	ldrh	r2, [r7, #0]
 800a19e:	78f9      	ldrb	r1, [r7, #3]
 800a1a0:	f7f9 fd8f 	bl	8003cc2 <HAL_PCD_EP_Open>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 f91c 	bl	800a3e8 <USBD_Get_USB_Status>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7f9 fdda 	bl	8003d96 <HAL_PCD_EP_Close>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 f8fd 	bl	800a3e8 <USBD_Get_USB_Status>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f9 fe92 	bl	8003f44 <HAL_PCD_EP_SetStall>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	4618      	mov	r0, r3
 800a228:	f000 f8de 	bl	800a3e8 <USBD_Get_USB_Status>
 800a22c:	4603      	mov	r3, r0
 800a22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a230:	7bbb      	ldrb	r3, [r7, #14]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a254:	78fa      	ldrb	r2, [r7, #3]
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f7f9 fed6 	bl	800400a <HAL_PCD_EP_ClrStall>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f8bf 	bl	800a3e8 <USBD_Get_USB_Status>
 800a26a:	4603      	mov	r3, r0
 800a26c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a28a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a28c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a290:	2b00      	cmp	r3, #0
 800a292:	da0b      	bge.n	800a2ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a29a:	68f9      	ldr	r1, [r7, #12]
 800a29c:	4613      	mov	r3, r2
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	440b      	add	r3, r1
 800a2a6:	3316      	adds	r3, #22
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	e00b      	b.n	800a2c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2ac:	78fb      	ldrb	r3, [r7, #3]
 800a2ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2b2:	68f9      	ldr	r1, [r7, #12]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a2c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f9 fcc3 	bl	8003c7a <HAL_PCD_SetAddress>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f874 	bl	800a3e8 <USBD_Get_USB_Status>
 800a300:	4603      	mov	r3, r0
 800a302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a304:	7bbb      	ldrb	r3, [r7, #14]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b086      	sub	sp, #24
 800a312:	af00      	add	r7, sp, #0
 800a314:	60f8      	str	r0, [r7, #12]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
 800a31a:	460b      	mov	r3, r1
 800a31c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a32c:	7af9      	ldrb	r1, [r7, #11]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	f7f9 fdcd 	bl	8003ed0 <HAL_PCD_EP_Transmit>
 800a336:	4603      	mov	r3, r0
 800a338:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 f853 	bl	800a3e8 <USBD_Get_USB_Status>
 800a342:	4603      	mov	r3, r0
 800a344:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a346:	7dbb      	ldrb	r3, [r7, #22]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	603b      	str	r3, [r7, #0]
 800a35c:	460b      	mov	r3, r1
 800a35e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a36e:	7af9      	ldrb	r1, [r7, #11]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	f7f9 fd59 	bl	8003e2a <HAL_PCD_EP_Receive>
 800a378:	4603      	mov	r3, r0
 800a37a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 f832 	bl	800a3e8 <USBD_Get_USB_Status>
 800a384:	4603      	mov	r3, r0
 800a386:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a388:	7dbb      	ldrb	r3, [r7, #22]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b082      	sub	sp, #8
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	460b      	mov	r3, r1
 800a39c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3a4:	78fa      	ldrb	r2, [r7, #3]
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f9 fd79 	bl	8003ea0 <HAL_PCD_EP_GetRxCount>
 800a3ae:	4603      	mov	r3, r0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3c0:	4b03      	ldr	r3, [pc, #12]	@ (800a3d0 <USBD_static_malloc+0x18>)
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	20001d88 	.word	0x20001d88

0800a3d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]

}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3f6:	79fb      	ldrb	r3, [r7, #7]
 800a3f8:	2b03      	cmp	r3, #3
 800a3fa:	d817      	bhi.n	800a42c <USBD_Get_USB_Status+0x44>
 800a3fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a404 <USBD_Get_USB_Status+0x1c>)
 800a3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a402:	bf00      	nop
 800a404:	0800a415 	.word	0x0800a415
 800a408:	0800a41b 	.word	0x0800a41b
 800a40c:	0800a421 	.word	0x0800a421
 800a410:	0800a427 	.word	0x0800a427
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	73fb      	strb	r3, [r7, #15]
    break;
 800a418:	e00b      	b.n	800a432 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a41a:	2303      	movs	r3, #3
 800a41c:	73fb      	strb	r3, [r7, #15]
    break;
 800a41e:	e008      	b.n	800a432 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a420:	2301      	movs	r3, #1
 800a422:	73fb      	strb	r3, [r7, #15]
    break;
 800a424:	e005      	b.n	800a432 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a426:	2303      	movs	r3, #3
 800a428:	73fb      	strb	r3, [r7, #15]
    break;
 800a42a:	e002      	b.n	800a432 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a42c:	2303      	movs	r3, #3
 800a42e:	73fb      	strb	r3, [r7, #15]
    break;
 800a430:	bf00      	nop
  }
  return usb_status;
 800a432:	7bfb      	ldrb	r3, [r7, #15]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <__cvt>:
 800a440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a444:	ec57 6b10 	vmov	r6, r7, d0
 800a448:	2f00      	cmp	r7, #0
 800a44a:	460c      	mov	r4, r1
 800a44c:	4619      	mov	r1, r3
 800a44e:	463b      	mov	r3, r7
 800a450:	bfbb      	ittet	lt
 800a452:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a456:	461f      	movlt	r7, r3
 800a458:	2300      	movge	r3, #0
 800a45a:	232d      	movlt	r3, #45	@ 0x2d
 800a45c:	700b      	strb	r3, [r1, #0]
 800a45e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a460:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a464:	4691      	mov	r9, r2
 800a466:	f023 0820 	bic.w	r8, r3, #32
 800a46a:	bfbc      	itt	lt
 800a46c:	4632      	movlt	r2, r6
 800a46e:	4616      	movlt	r6, r2
 800a470:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a474:	d005      	beq.n	800a482 <__cvt+0x42>
 800a476:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a47a:	d100      	bne.n	800a47e <__cvt+0x3e>
 800a47c:	3401      	adds	r4, #1
 800a47e:	2102      	movs	r1, #2
 800a480:	e000      	b.n	800a484 <__cvt+0x44>
 800a482:	2103      	movs	r1, #3
 800a484:	ab03      	add	r3, sp, #12
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	ab02      	add	r3, sp, #8
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	ec47 6b10 	vmov	d0, r6, r7
 800a490:	4653      	mov	r3, sl
 800a492:	4622      	mov	r2, r4
 800a494:	f000 fe4c 	bl	800b130 <_dtoa_r>
 800a498:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a49c:	4605      	mov	r5, r0
 800a49e:	d119      	bne.n	800a4d4 <__cvt+0x94>
 800a4a0:	f019 0f01 	tst.w	r9, #1
 800a4a4:	d00e      	beq.n	800a4c4 <__cvt+0x84>
 800a4a6:	eb00 0904 	add.w	r9, r0, r4
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	f7f6 fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4b6:	b108      	cbz	r0, 800a4bc <__cvt+0x7c>
 800a4b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4bc:	2230      	movs	r2, #48	@ 0x30
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	454b      	cmp	r3, r9
 800a4c2:	d31e      	bcc.n	800a502 <__cvt+0xc2>
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4c8:	1b5b      	subs	r3, r3, r5
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	b004      	add	sp, #16
 800a4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4d8:	eb00 0904 	add.w	r9, r0, r4
 800a4dc:	d1e5      	bne.n	800a4aa <__cvt+0x6a>
 800a4de:	7803      	ldrb	r3, [r0, #0]
 800a4e0:	2b30      	cmp	r3, #48	@ 0x30
 800a4e2:	d10a      	bne.n	800a4fa <__cvt+0xba>
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	f7f6 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4f0:	b918      	cbnz	r0, 800a4fa <__cvt+0xba>
 800a4f2:	f1c4 0401 	rsb	r4, r4, #1
 800a4f6:	f8ca 4000 	str.w	r4, [sl]
 800a4fa:	f8da 3000 	ldr.w	r3, [sl]
 800a4fe:	4499      	add	r9, r3
 800a500:	e7d3      	b.n	800a4aa <__cvt+0x6a>
 800a502:	1c59      	adds	r1, r3, #1
 800a504:	9103      	str	r1, [sp, #12]
 800a506:	701a      	strb	r2, [r3, #0]
 800a508:	e7d9      	b.n	800a4be <__cvt+0x7e>

0800a50a <__exponent>:
 800a50a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a50c:	2900      	cmp	r1, #0
 800a50e:	bfba      	itte	lt
 800a510:	4249      	neglt	r1, r1
 800a512:	232d      	movlt	r3, #45	@ 0x2d
 800a514:	232b      	movge	r3, #43	@ 0x2b
 800a516:	2909      	cmp	r1, #9
 800a518:	7002      	strb	r2, [r0, #0]
 800a51a:	7043      	strb	r3, [r0, #1]
 800a51c:	dd29      	ble.n	800a572 <__exponent+0x68>
 800a51e:	f10d 0307 	add.w	r3, sp, #7
 800a522:	461d      	mov	r5, r3
 800a524:	270a      	movs	r7, #10
 800a526:	461a      	mov	r2, r3
 800a528:	fbb1 f6f7 	udiv	r6, r1, r7
 800a52c:	fb07 1416 	mls	r4, r7, r6, r1
 800a530:	3430      	adds	r4, #48	@ 0x30
 800a532:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a536:	460c      	mov	r4, r1
 800a538:	2c63      	cmp	r4, #99	@ 0x63
 800a53a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a53e:	4631      	mov	r1, r6
 800a540:	dcf1      	bgt.n	800a526 <__exponent+0x1c>
 800a542:	3130      	adds	r1, #48	@ 0x30
 800a544:	1e94      	subs	r4, r2, #2
 800a546:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a54a:	1c41      	adds	r1, r0, #1
 800a54c:	4623      	mov	r3, r4
 800a54e:	42ab      	cmp	r3, r5
 800a550:	d30a      	bcc.n	800a568 <__exponent+0x5e>
 800a552:	f10d 0309 	add.w	r3, sp, #9
 800a556:	1a9b      	subs	r3, r3, r2
 800a558:	42ac      	cmp	r4, r5
 800a55a:	bf88      	it	hi
 800a55c:	2300      	movhi	r3, #0
 800a55e:	3302      	adds	r3, #2
 800a560:	4403      	add	r3, r0
 800a562:	1a18      	subs	r0, r3, r0
 800a564:	b003      	add	sp, #12
 800a566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a568:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a56c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a570:	e7ed      	b.n	800a54e <__exponent+0x44>
 800a572:	2330      	movs	r3, #48	@ 0x30
 800a574:	3130      	adds	r1, #48	@ 0x30
 800a576:	7083      	strb	r3, [r0, #2]
 800a578:	70c1      	strb	r1, [r0, #3]
 800a57a:	1d03      	adds	r3, r0, #4
 800a57c:	e7f1      	b.n	800a562 <__exponent+0x58>
	...

0800a580 <_printf_float>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	b08d      	sub	sp, #52	@ 0x34
 800a586:	460c      	mov	r4, r1
 800a588:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a58c:	4616      	mov	r6, r2
 800a58e:	461f      	mov	r7, r3
 800a590:	4605      	mov	r5, r0
 800a592:	f000 fccb 	bl	800af2c <_localeconv_r>
 800a596:	6803      	ldr	r3, [r0, #0]
 800a598:	9304      	str	r3, [sp, #16]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7f5 fe70 	bl	8000280 <strlen>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a5a8:	9005      	str	r0, [sp, #20]
 800a5aa:	3307      	adds	r3, #7
 800a5ac:	f023 0307 	bic.w	r3, r3, #7
 800a5b0:	f103 0208 	add.w	r2, r3, #8
 800a5b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a5b8:	f8d4 b000 	ldr.w	fp, [r4]
 800a5bc:	f8c8 2000 	str.w	r2, [r8]
 800a5c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a5c8:	9307      	str	r3, [sp, #28]
 800a5ca:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a5d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5d6:	4b9c      	ldr	r3, [pc, #624]	@ (800a848 <_printf_float+0x2c8>)
 800a5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5dc:	f7f6 faae 	bl	8000b3c <__aeabi_dcmpun>
 800a5e0:	bb70      	cbnz	r0, 800a640 <_printf_float+0xc0>
 800a5e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5e6:	4b98      	ldr	r3, [pc, #608]	@ (800a848 <_printf_float+0x2c8>)
 800a5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ec:	f7f6 fa88 	bl	8000b00 <__aeabi_dcmple>
 800a5f0:	bb30      	cbnz	r0, 800a640 <_printf_float+0xc0>
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	4649      	mov	r1, r9
 800a5fa:	f7f6 fa77 	bl	8000aec <__aeabi_dcmplt>
 800a5fe:	b110      	cbz	r0, 800a606 <_printf_float+0x86>
 800a600:	232d      	movs	r3, #45	@ 0x2d
 800a602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a606:	4a91      	ldr	r2, [pc, #580]	@ (800a84c <_printf_float+0x2cc>)
 800a608:	4b91      	ldr	r3, [pc, #580]	@ (800a850 <_printf_float+0x2d0>)
 800a60a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a60e:	bf8c      	ite	hi
 800a610:	4690      	movhi	r8, r2
 800a612:	4698      	movls	r8, r3
 800a614:	2303      	movs	r3, #3
 800a616:	6123      	str	r3, [r4, #16]
 800a618:	f02b 0304 	bic.w	r3, fp, #4
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	f04f 0900 	mov.w	r9, #0
 800a622:	9700      	str	r7, [sp, #0]
 800a624:	4633      	mov	r3, r6
 800a626:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a628:	4621      	mov	r1, r4
 800a62a:	4628      	mov	r0, r5
 800a62c:	f000 f9d2 	bl	800a9d4 <_printf_common>
 800a630:	3001      	adds	r0, #1
 800a632:	f040 808d 	bne.w	800a750 <_printf_float+0x1d0>
 800a636:	f04f 30ff 	mov.w	r0, #4294967295
 800a63a:	b00d      	add	sp, #52	@ 0x34
 800a63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a640:	4642      	mov	r2, r8
 800a642:	464b      	mov	r3, r9
 800a644:	4640      	mov	r0, r8
 800a646:	4649      	mov	r1, r9
 800a648:	f7f6 fa78 	bl	8000b3c <__aeabi_dcmpun>
 800a64c:	b140      	cbz	r0, 800a660 <_printf_float+0xe0>
 800a64e:	464b      	mov	r3, r9
 800a650:	2b00      	cmp	r3, #0
 800a652:	bfbc      	itt	lt
 800a654:	232d      	movlt	r3, #45	@ 0x2d
 800a656:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a65a:	4a7e      	ldr	r2, [pc, #504]	@ (800a854 <_printf_float+0x2d4>)
 800a65c:	4b7e      	ldr	r3, [pc, #504]	@ (800a858 <_printf_float+0x2d8>)
 800a65e:	e7d4      	b.n	800a60a <_printf_float+0x8a>
 800a660:	6863      	ldr	r3, [r4, #4]
 800a662:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a666:	9206      	str	r2, [sp, #24]
 800a668:	1c5a      	adds	r2, r3, #1
 800a66a:	d13b      	bne.n	800a6e4 <_printf_float+0x164>
 800a66c:	2306      	movs	r3, #6
 800a66e:	6063      	str	r3, [r4, #4]
 800a670:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a674:	2300      	movs	r3, #0
 800a676:	6022      	str	r2, [r4, #0]
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a67c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a680:	ab09      	add	r3, sp, #36	@ 0x24
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	6861      	ldr	r1, [r4, #4]
 800a686:	ec49 8b10 	vmov	d0, r8, r9
 800a68a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a68e:	4628      	mov	r0, r5
 800a690:	f7ff fed6 	bl	800a440 <__cvt>
 800a694:	9b06      	ldr	r3, [sp, #24]
 800a696:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a698:	2b47      	cmp	r3, #71	@ 0x47
 800a69a:	4680      	mov	r8, r0
 800a69c:	d129      	bne.n	800a6f2 <_printf_float+0x172>
 800a69e:	1cc8      	adds	r0, r1, #3
 800a6a0:	db02      	blt.n	800a6a8 <_printf_float+0x128>
 800a6a2:	6863      	ldr	r3, [r4, #4]
 800a6a4:	4299      	cmp	r1, r3
 800a6a6:	dd41      	ble.n	800a72c <_printf_float+0x1ac>
 800a6a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a6ac:	fa5f fa8a 	uxtb.w	sl, sl
 800a6b0:	3901      	subs	r1, #1
 800a6b2:	4652      	mov	r2, sl
 800a6b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a6b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6ba:	f7ff ff26 	bl	800a50a <__exponent>
 800a6be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6c0:	1813      	adds	r3, r2, r0
 800a6c2:	2a01      	cmp	r2, #1
 800a6c4:	4681      	mov	r9, r0
 800a6c6:	6123      	str	r3, [r4, #16]
 800a6c8:	dc02      	bgt.n	800a6d0 <_printf_float+0x150>
 800a6ca:	6822      	ldr	r2, [r4, #0]
 800a6cc:	07d2      	lsls	r2, r2, #31
 800a6ce:	d501      	bpl.n	800a6d4 <_printf_float+0x154>
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	6123      	str	r3, [r4, #16]
 800a6d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d0a2      	beq.n	800a622 <_printf_float+0xa2>
 800a6dc:	232d      	movs	r3, #45	@ 0x2d
 800a6de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6e2:	e79e      	b.n	800a622 <_printf_float+0xa2>
 800a6e4:	9a06      	ldr	r2, [sp, #24]
 800a6e6:	2a47      	cmp	r2, #71	@ 0x47
 800a6e8:	d1c2      	bne.n	800a670 <_printf_float+0xf0>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1c0      	bne.n	800a670 <_printf_float+0xf0>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e7bd      	b.n	800a66e <_printf_float+0xee>
 800a6f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6f6:	d9db      	bls.n	800a6b0 <_printf_float+0x130>
 800a6f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a6fc:	d118      	bne.n	800a730 <_printf_float+0x1b0>
 800a6fe:	2900      	cmp	r1, #0
 800a700:	6863      	ldr	r3, [r4, #4]
 800a702:	dd0b      	ble.n	800a71c <_printf_float+0x19c>
 800a704:	6121      	str	r1, [r4, #16]
 800a706:	b913      	cbnz	r3, 800a70e <_printf_float+0x18e>
 800a708:	6822      	ldr	r2, [r4, #0]
 800a70a:	07d0      	lsls	r0, r2, #31
 800a70c:	d502      	bpl.n	800a714 <_printf_float+0x194>
 800a70e:	3301      	adds	r3, #1
 800a710:	440b      	add	r3, r1
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a716:	f04f 0900 	mov.w	r9, #0
 800a71a:	e7db      	b.n	800a6d4 <_printf_float+0x154>
 800a71c:	b913      	cbnz	r3, 800a724 <_printf_float+0x1a4>
 800a71e:	6822      	ldr	r2, [r4, #0]
 800a720:	07d2      	lsls	r2, r2, #31
 800a722:	d501      	bpl.n	800a728 <_printf_float+0x1a8>
 800a724:	3302      	adds	r3, #2
 800a726:	e7f4      	b.n	800a712 <_printf_float+0x192>
 800a728:	2301      	movs	r3, #1
 800a72a:	e7f2      	b.n	800a712 <_printf_float+0x192>
 800a72c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a732:	4299      	cmp	r1, r3
 800a734:	db05      	blt.n	800a742 <_printf_float+0x1c2>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	6121      	str	r1, [r4, #16]
 800a73a:	07d8      	lsls	r0, r3, #31
 800a73c:	d5ea      	bpl.n	800a714 <_printf_float+0x194>
 800a73e:	1c4b      	adds	r3, r1, #1
 800a740:	e7e7      	b.n	800a712 <_printf_float+0x192>
 800a742:	2900      	cmp	r1, #0
 800a744:	bfd4      	ite	le
 800a746:	f1c1 0202 	rsble	r2, r1, #2
 800a74a:	2201      	movgt	r2, #1
 800a74c:	4413      	add	r3, r2
 800a74e:	e7e0      	b.n	800a712 <_printf_float+0x192>
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	055a      	lsls	r2, r3, #21
 800a754:	d407      	bmi.n	800a766 <_printf_float+0x1e6>
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	4642      	mov	r2, r8
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	d12b      	bne.n	800a7bc <_printf_float+0x23c>
 800a764:	e767      	b.n	800a636 <_printf_float+0xb6>
 800a766:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a76a:	f240 80dd 	bls.w	800a928 <_printf_float+0x3a8>
 800a76e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a772:	2200      	movs	r2, #0
 800a774:	2300      	movs	r3, #0
 800a776:	f7f6 f9af 	bl	8000ad8 <__aeabi_dcmpeq>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d033      	beq.n	800a7e6 <_printf_float+0x266>
 800a77e:	4a37      	ldr	r2, [pc, #220]	@ (800a85c <_printf_float+0x2dc>)
 800a780:	2301      	movs	r3, #1
 800a782:	4631      	mov	r1, r6
 800a784:	4628      	mov	r0, r5
 800a786:	47b8      	blx	r7
 800a788:	3001      	adds	r0, #1
 800a78a:	f43f af54 	beq.w	800a636 <_printf_float+0xb6>
 800a78e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a792:	4543      	cmp	r3, r8
 800a794:	db02      	blt.n	800a79c <_printf_float+0x21c>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	07d8      	lsls	r0, r3, #31
 800a79a:	d50f      	bpl.n	800a7bc <_printf_float+0x23c>
 800a79c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b8      	blx	r7
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	f43f af45 	beq.w	800a636 <_printf_float+0xb6>
 800a7ac:	f04f 0900 	mov.w	r9, #0
 800a7b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7b4:	f104 0a1a 	add.w	sl, r4, #26
 800a7b8:	45c8      	cmp	r8, r9
 800a7ba:	dc09      	bgt.n	800a7d0 <_printf_float+0x250>
 800a7bc:	6823      	ldr	r3, [r4, #0]
 800a7be:	079b      	lsls	r3, r3, #30
 800a7c0:	f100 8103 	bmi.w	800a9ca <_printf_float+0x44a>
 800a7c4:	68e0      	ldr	r0, [r4, #12]
 800a7c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7c8:	4298      	cmp	r0, r3
 800a7ca:	bfb8      	it	lt
 800a7cc:	4618      	movlt	r0, r3
 800a7ce:	e734      	b.n	800a63a <_printf_float+0xba>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	4652      	mov	r2, sl
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b8      	blx	r7
 800a7da:	3001      	adds	r0, #1
 800a7dc:	f43f af2b 	beq.w	800a636 <_printf_float+0xb6>
 800a7e0:	f109 0901 	add.w	r9, r9, #1
 800a7e4:	e7e8      	b.n	800a7b8 <_printf_float+0x238>
 800a7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dc39      	bgt.n	800a860 <_printf_float+0x2e0>
 800a7ec:	4a1b      	ldr	r2, [pc, #108]	@ (800a85c <_printf_float+0x2dc>)
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	47b8      	blx	r7
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	f43f af1d 	beq.w	800a636 <_printf_float+0xb6>
 800a7fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a800:	ea59 0303 	orrs.w	r3, r9, r3
 800a804:	d102      	bne.n	800a80c <_printf_float+0x28c>
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	07d9      	lsls	r1, r3, #31
 800a80a:	d5d7      	bpl.n	800a7bc <_printf_float+0x23c>
 800a80c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a810:	4631      	mov	r1, r6
 800a812:	4628      	mov	r0, r5
 800a814:	47b8      	blx	r7
 800a816:	3001      	adds	r0, #1
 800a818:	f43f af0d 	beq.w	800a636 <_printf_float+0xb6>
 800a81c:	f04f 0a00 	mov.w	sl, #0
 800a820:	f104 0b1a 	add.w	fp, r4, #26
 800a824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a826:	425b      	negs	r3, r3
 800a828:	4553      	cmp	r3, sl
 800a82a:	dc01      	bgt.n	800a830 <_printf_float+0x2b0>
 800a82c:	464b      	mov	r3, r9
 800a82e:	e793      	b.n	800a758 <_printf_float+0x1d8>
 800a830:	2301      	movs	r3, #1
 800a832:	465a      	mov	r2, fp
 800a834:	4631      	mov	r1, r6
 800a836:	4628      	mov	r0, r5
 800a838:	47b8      	blx	r7
 800a83a:	3001      	adds	r0, #1
 800a83c:	f43f aefb 	beq.w	800a636 <_printf_float+0xb6>
 800a840:	f10a 0a01 	add.w	sl, sl, #1
 800a844:	e7ee      	b.n	800a824 <_printf_float+0x2a4>
 800a846:	bf00      	nop
 800a848:	7fefffff 	.word	0x7fefffff
 800a84c:	0800ceac 	.word	0x0800ceac
 800a850:	0800cea8 	.word	0x0800cea8
 800a854:	0800ceb4 	.word	0x0800ceb4
 800a858:	0800ceb0 	.word	0x0800ceb0
 800a85c:	0800ceb8 	.word	0x0800ceb8
 800a860:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a862:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a866:	4553      	cmp	r3, sl
 800a868:	bfa8      	it	ge
 800a86a:	4653      	movge	r3, sl
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	4699      	mov	r9, r3
 800a870:	dc36      	bgt.n	800a8e0 <_printf_float+0x360>
 800a872:	f04f 0b00 	mov.w	fp, #0
 800a876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a87a:	f104 021a 	add.w	r2, r4, #26
 800a87e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a880:	9306      	str	r3, [sp, #24]
 800a882:	eba3 0309 	sub.w	r3, r3, r9
 800a886:	455b      	cmp	r3, fp
 800a888:	dc31      	bgt.n	800a8ee <_printf_float+0x36e>
 800a88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88c:	459a      	cmp	sl, r3
 800a88e:	dc3a      	bgt.n	800a906 <_printf_float+0x386>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	07da      	lsls	r2, r3, #31
 800a894:	d437      	bmi.n	800a906 <_printf_float+0x386>
 800a896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a898:	ebaa 0903 	sub.w	r9, sl, r3
 800a89c:	9b06      	ldr	r3, [sp, #24]
 800a89e:	ebaa 0303 	sub.w	r3, sl, r3
 800a8a2:	4599      	cmp	r9, r3
 800a8a4:	bfa8      	it	ge
 800a8a6:	4699      	movge	r9, r3
 800a8a8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ac:	dc33      	bgt.n	800a916 <_printf_float+0x396>
 800a8ae:	f04f 0800 	mov.w	r8, #0
 800a8b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8b6:	f104 0b1a 	add.w	fp, r4, #26
 800a8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8bc:	ebaa 0303 	sub.w	r3, sl, r3
 800a8c0:	eba3 0309 	sub.w	r3, r3, r9
 800a8c4:	4543      	cmp	r3, r8
 800a8c6:	f77f af79 	ble.w	800a7bc <_printf_float+0x23c>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	465a      	mov	r2, fp
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b8      	blx	r7
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	f43f aeae 	beq.w	800a636 <_printf_float+0xb6>
 800a8da:	f108 0801 	add.w	r8, r8, #1
 800a8de:	e7ec      	b.n	800a8ba <_printf_float+0x33a>
 800a8e0:	4642      	mov	r2, r8
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	47b8      	blx	r7
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d1c2      	bne.n	800a872 <_printf_float+0x2f2>
 800a8ec:	e6a3      	b.n	800a636 <_printf_float+0xb6>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	9206      	str	r2, [sp, #24]
 800a8f6:	47b8      	blx	r7
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	f43f ae9c 	beq.w	800a636 <_printf_float+0xb6>
 800a8fe:	9a06      	ldr	r2, [sp, #24]
 800a900:	f10b 0b01 	add.w	fp, fp, #1
 800a904:	e7bb      	b.n	800a87e <_printf_float+0x2fe>
 800a906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a90a:	4631      	mov	r1, r6
 800a90c:	4628      	mov	r0, r5
 800a90e:	47b8      	blx	r7
 800a910:	3001      	adds	r0, #1
 800a912:	d1c0      	bne.n	800a896 <_printf_float+0x316>
 800a914:	e68f      	b.n	800a636 <_printf_float+0xb6>
 800a916:	9a06      	ldr	r2, [sp, #24]
 800a918:	464b      	mov	r3, r9
 800a91a:	4442      	add	r2, r8
 800a91c:	4631      	mov	r1, r6
 800a91e:	4628      	mov	r0, r5
 800a920:	47b8      	blx	r7
 800a922:	3001      	adds	r0, #1
 800a924:	d1c3      	bne.n	800a8ae <_printf_float+0x32e>
 800a926:	e686      	b.n	800a636 <_printf_float+0xb6>
 800a928:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a92c:	f1ba 0f01 	cmp.w	sl, #1
 800a930:	dc01      	bgt.n	800a936 <_printf_float+0x3b6>
 800a932:	07db      	lsls	r3, r3, #31
 800a934:	d536      	bpl.n	800a9a4 <_printf_float+0x424>
 800a936:	2301      	movs	r3, #1
 800a938:	4642      	mov	r2, r8
 800a93a:	4631      	mov	r1, r6
 800a93c:	4628      	mov	r0, r5
 800a93e:	47b8      	blx	r7
 800a940:	3001      	adds	r0, #1
 800a942:	f43f ae78 	beq.w	800a636 <_printf_float+0xb6>
 800a946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b8      	blx	r7
 800a950:	3001      	adds	r0, #1
 800a952:	f43f ae70 	beq.w	800a636 <_printf_float+0xb6>
 800a956:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a95a:	2200      	movs	r2, #0
 800a95c:	2300      	movs	r3, #0
 800a95e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a962:	f7f6 f8b9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a966:	b9c0      	cbnz	r0, 800a99a <_printf_float+0x41a>
 800a968:	4653      	mov	r3, sl
 800a96a:	f108 0201 	add.w	r2, r8, #1
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	d10c      	bne.n	800a992 <_printf_float+0x412>
 800a978:	e65d      	b.n	800a636 <_printf_float+0xb6>
 800a97a:	2301      	movs	r3, #1
 800a97c:	465a      	mov	r2, fp
 800a97e:	4631      	mov	r1, r6
 800a980:	4628      	mov	r0, r5
 800a982:	47b8      	blx	r7
 800a984:	3001      	adds	r0, #1
 800a986:	f43f ae56 	beq.w	800a636 <_printf_float+0xb6>
 800a98a:	f108 0801 	add.w	r8, r8, #1
 800a98e:	45d0      	cmp	r8, sl
 800a990:	dbf3      	blt.n	800a97a <_printf_float+0x3fa>
 800a992:	464b      	mov	r3, r9
 800a994:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a998:	e6df      	b.n	800a75a <_printf_float+0x1da>
 800a99a:	f04f 0800 	mov.w	r8, #0
 800a99e:	f104 0b1a 	add.w	fp, r4, #26
 800a9a2:	e7f4      	b.n	800a98e <_printf_float+0x40e>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	4642      	mov	r2, r8
 800a9a8:	e7e1      	b.n	800a96e <_printf_float+0x3ee>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	464a      	mov	r2, r9
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b8      	blx	r7
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	f43f ae3e 	beq.w	800a636 <_printf_float+0xb6>
 800a9ba:	f108 0801 	add.w	r8, r8, #1
 800a9be:	68e3      	ldr	r3, [r4, #12]
 800a9c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9c2:	1a5b      	subs	r3, r3, r1
 800a9c4:	4543      	cmp	r3, r8
 800a9c6:	dcf0      	bgt.n	800a9aa <_printf_float+0x42a>
 800a9c8:	e6fc      	b.n	800a7c4 <_printf_float+0x244>
 800a9ca:	f04f 0800 	mov.w	r8, #0
 800a9ce:	f104 0919 	add.w	r9, r4, #25
 800a9d2:	e7f4      	b.n	800a9be <_printf_float+0x43e>

0800a9d4 <_printf_common>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	4616      	mov	r6, r2
 800a9da:	4698      	mov	r8, r3
 800a9dc:	688a      	ldr	r2, [r1, #8]
 800a9de:	690b      	ldr	r3, [r1, #16]
 800a9e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	bfb8      	it	lt
 800a9e8:	4613      	movlt	r3, r2
 800a9ea:	6033      	str	r3, [r6, #0]
 800a9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	b10a      	cbz	r2, 800a9fa <_printf_common+0x26>
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	6033      	str	r3, [r6, #0]
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	0699      	lsls	r1, r3, #26
 800a9fe:	bf42      	ittt	mi
 800aa00:	6833      	ldrmi	r3, [r6, #0]
 800aa02:	3302      	addmi	r3, #2
 800aa04:	6033      	strmi	r3, [r6, #0]
 800aa06:	6825      	ldr	r5, [r4, #0]
 800aa08:	f015 0506 	ands.w	r5, r5, #6
 800aa0c:	d106      	bne.n	800aa1c <_printf_common+0x48>
 800aa0e:	f104 0a19 	add.w	sl, r4, #25
 800aa12:	68e3      	ldr	r3, [r4, #12]
 800aa14:	6832      	ldr	r2, [r6, #0]
 800aa16:	1a9b      	subs	r3, r3, r2
 800aa18:	42ab      	cmp	r3, r5
 800aa1a:	dc26      	bgt.n	800aa6a <_printf_common+0x96>
 800aa1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa20:	6822      	ldr	r2, [r4, #0]
 800aa22:	3b00      	subs	r3, #0
 800aa24:	bf18      	it	ne
 800aa26:	2301      	movne	r3, #1
 800aa28:	0692      	lsls	r2, r2, #26
 800aa2a:	d42b      	bmi.n	800aa84 <_printf_common+0xb0>
 800aa2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa30:	4641      	mov	r1, r8
 800aa32:	4638      	mov	r0, r7
 800aa34:	47c8      	blx	r9
 800aa36:	3001      	adds	r0, #1
 800aa38:	d01e      	beq.n	800aa78 <_printf_common+0xa4>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	6922      	ldr	r2, [r4, #16]
 800aa3e:	f003 0306 	and.w	r3, r3, #6
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	bf02      	ittt	eq
 800aa46:	68e5      	ldreq	r5, [r4, #12]
 800aa48:	6833      	ldreq	r3, [r6, #0]
 800aa4a:	1aed      	subeq	r5, r5, r3
 800aa4c:	68a3      	ldr	r3, [r4, #8]
 800aa4e:	bf0c      	ite	eq
 800aa50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa54:	2500      	movne	r5, #0
 800aa56:	4293      	cmp	r3, r2
 800aa58:	bfc4      	itt	gt
 800aa5a:	1a9b      	subgt	r3, r3, r2
 800aa5c:	18ed      	addgt	r5, r5, r3
 800aa5e:	2600      	movs	r6, #0
 800aa60:	341a      	adds	r4, #26
 800aa62:	42b5      	cmp	r5, r6
 800aa64:	d11a      	bne.n	800aa9c <_printf_common+0xc8>
 800aa66:	2000      	movs	r0, #0
 800aa68:	e008      	b.n	800aa7c <_printf_common+0xa8>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4652      	mov	r2, sl
 800aa6e:	4641      	mov	r1, r8
 800aa70:	4638      	mov	r0, r7
 800aa72:	47c8      	blx	r9
 800aa74:	3001      	adds	r0, #1
 800aa76:	d103      	bne.n	800aa80 <_printf_common+0xac>
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa80:	3501      	adds	r5, #1
 800aa82:	e7c6      	b.n	800aa12 <_printf_common+0x3e>
 800aa84:	18e1      	adds	r1, r4, r3
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	2030      	movs	r0, #48	@ 0x30
 800aa8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa8e:	4422      	add	r2, r4
 800aa90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa98:	3302      	adds	r3, #2
 800aa9a:	e7c7      	b.n	800aa2c <_printf_common+0x58>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	47c8      	blx	r9
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	d0e6      	beq.n	800aa78 <_printf_common+0xa4>
 800aaaa:	3601      	adds	r6, #1
 800aaac:	e7d9      	b.n	800aa62 <_printf_common+0x8e>
	...

0800aab0 <_printf_i>:
 800aab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aab4:	7e0f      	ldrb	r7, [r1, #24]
 800aab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aab8:	2f78      	cmp	r7, #120	@ 0x78
 800aaba:	4691      	mov	r9, r2
 800aabc:	4680      	mov	r8, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	469a      	mov	sl, r3
 800aac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aac6:	d807      	bhi.n	800aad8 <_printf_i+0x28>
 800aac8:	2f62      	cmp	r7, #98	@ 0x62
 800aaca:	d80a      	bhi.n	800aae2 <_printf_i+0x32>
 800aacc:	2f00      	cmp	r7, #0
 800aace:	f000 80d1 	beq.w	800ac74 <_printf_i+0x1c4>
 800aad2:	2f58      	cmp	r7, #88	@ 0x58
 800aad4:	f000 80b8 	beq.w	800ac48 <_printf_i+0x198>
 800aad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aadc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aae0:	e03a      	b.n	800ab58 <_printf_i+0xa8>
 800aae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aae6:	2b15      	cmp	r3, #21
 800aae8:	d8f6      	bhi.n	800aad8 <_printf_i+0x28>
 800aaea:	a101      	add	r1, pc, #4	@ (adr r1, 800aaf0 <_printf_i+0x40>)
 800aaec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aaf0:	0800ab49 	.word	0x0800ab49
 800aaf4:	0800ab5d 	.word	0x0800ab5d
 800aaf8:	0800aad9 	.word	0x0800aad9
 800aafc:	0800aad9 	.word	0x0800aad9
 800ab00:	0800aad9 	.word	0x0800aad9
 800ab04:	0800aad9 	.word	0x0800aad9
 800ab08:	0800ab5d 	.word	0x0800ab5d
 800ab0c:	0800aad9 	.word	0x0800aad9
 800ab10:	0800aad9 	.word	0x0800aad9
 800ab14:	0800aad9 	.word	0x0800aad9
 800ab18:	0800aad9 	.word	0x0800aad9
 800ab1c:	0800ac5b 	.word	0x0800ac5b
 800ab20:	0800ab87 	.word	0x0800ab87
 800ab24:	0800ac15 	.word	0x0800ac15
 800ab28:	0800aad9 	.word	0x0800aad9
 800ab2c:	0800aad9 	.word	0x0800aad9
 800ab30:	0800ac7d 	.word	0x0800ac7d
 800ab34:	0800aad9 	.word	0x0800aad9
 800ab38:	0800ab87 	.word	0x0800ab87
 800ab3c:	0800aad9 	.word	0x0800aad9
 800ab40:	0800aad9 	.word	0x0800aad9
 800ab44:	0800ac1d 	.word	0x0800ac1d
 800ab48:	6833      	ldr	r3, [r6, #0]
 800ab4a:	1d1a      	adds	r2, r3, #4
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6032      	str	r2, [r6, #0]
 800ab50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e09c      	b.n	800ac96 <_printf_i+0x1e6>
 800ab5c:	6833      	ldr	r3, [r6, #0]
 800ab5e:	6820      	ldr	r0, [r4, #0]
 800ab60:	1d19      	adds	r1, r3, #4
 800ab62:	6031      	str	r1, [r6, #0]
 800ab64:	0606      	lsls	r6, r0, #24
 800ab66:	d501      	bpl.n	800ab6c <_printf_i+0xbc>
 800ab68:	681d      	ldr	r5, [r3, #0]
 800ab6a:	e003      	b.n	800ab74 <_printf_i+0xc4>
 800ab6c:	0645      	lsls	r5, r0, #25
 800ab6e:	d5fb      	bpl.n	800ab68 <_printf_i+0xb8>
 800ab70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab74:	2d00      	cmp	r5, #0
 800ab76:	da03      	bge.n	800ab80 <_printf_i+0xd0>
 800ab78:	232d      	movs	r3, #45	@ 0x2d
 800ab7a:	426d      	negs	r5, r5
 800ab7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab80:	4858      	ldr	r0, [pc, #352]	@ (800ace4 <_printf_i+0x234>)
 800ab82:	230a      	movs	r3, #10
 800ab84:	e011      	b.n	800abaa <_printf_i+0xfa>
 800ab86:	6821      	ldr	r1, [r4, #0]
 800ab88:	6833      	ldr	r3, [r6, #0]
 800ab8a:	0608      	lsls	r0, r1, #24
 800ab8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab90:	d402      	bmi.n	800ab98 <_printf_i+0xe8>
 800ab92:	0649      	lsls	r1, r1, #25
 800ab94:	bf48      	it	mi
 800ab96:	b2ad      	uxthmi	r5, r5
 800ab98:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab9a:	4852      	ldr	r0, [pc, #328]	@ (800ace4 <_printf_i+0x234>)
 800ab9c:	6033      	str	r3, [r6, #0]
 800ab9e:	bf14      	ite	ne
 800aba0:	230a      	movne	r3, #10
 800aba2:	2308      	moveq	r3, #8
 800aba4:	2100      	movs	r1, #0
 800aba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abaa:	6866      	ldr	r6, [r4, #4]
 800abac:	60a6      	str	r6, [r4, #8]
 800abae:	2e00      	cmp	r6, #0
 800abb0:	db05      	blt.n	800abbe <_printf_i+0x10e>
 800abb2:	6821      	ldr	r1, [r4, #0]
 800abb4:	432e      	orrs	r6, r5
 800abb6:	f021 0104 	bic.w	r1, r1, #4
 800abba:	6021      	str	r1, [r4, #0]
 800abbc:	d04b      	beq.n	800ac56 <_printf_i+0x1a6>
 800abbe:	4616      	mov	r6, r2
 800abc0:	fbb5 f1f3 	udiv	r1, r5, r3
 800abc4:	fb03 5711 	mls	r7, r3, r1, r5
 800abc8:	5dc7      	ldrb	r7, [r0, r7]
 800abca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abce:	462f      	mov	r7, r5
 800abd0:	42bb      	cmp	r3, r7
 800abd2:	460d      	mov	r5, r1
 800abd4:	d9f4      	bls.n	800abc0 <_printf_i+0x110>
 800abd6:	2b08      	cmp	r3, #8
 800abd8:	d10b      	bne.n	800abf2 <_printf_i+0x142>
 800abda:	6823      	ldr	r3, [r4, #0]
 800abdc:	07df      	lsls	r7, r3, #31
 800abde:	d508      	bpl.n	800abf2 <_printf_i+0x142>
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	6861      	ldr	r1, [r4, #4]
 800abe4:	4299      	cmp	r1, r3
 800abe6:	bfde      	ittt	le
 800abe8:	2330      	movle	r3, #48	@ 0x30
 800abea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abf2:	1b92      	subs	r2, r2, r6
 800abf4:	6122      	str	r2, [r4, #16]
 800abf6:	f8cd a000 	str.w	sl, [sp]
 800abfa:	464b      	mov	r3, r9
 800abfc:	aa03      	add	r2, sp, #12
 800abfe:	4621      	mov	r1, r4
 800ac00:	4640      	mov	r0, r8
 800ac02:	f7ff fee7 	bl	800a9d4 <_printf_common>
 800ac06:	3001      	adds	r0, #1
 800ac08:	d14a      	bne.n	800aca0 <_printf_i+0x1f0>
 800ac0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0e:	b004      	add	sp, #16
 800ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	f043 0320 	orr.w	r3, r3, #32
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	4832      	ldr	r0, [pc, #200]	@ (800ace8 <_printf_i+0x238>)
 800ac1e:	2778      	movs	r7, #120	@ 0x78
 800ac20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	6831      	ldr	r1, [r6, #0]
 800ac28:	061f      	lsls	r7, r3, #24
 800ac2a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac2e:	d402      	bmi.n	800ac36 <_printf_i+0x186>
 800ac30:	065f      	lsls	r7, r3, #25
 800ac32:	bf48      	it	mi
 800ac34:	b2ad      	uxthmi	r5, r5
 800ac36:	6031      	str	r1, [r6, #0]
 800ac38:	07d9      	lsls	r1, r3, #31
 800ac3a:	bf44      	itt	mi
 800ac3c:	f043 0320 	orrmi.w	r3, r3, #32
 800ac40:	6023      	strmi	r3, [r4, #0]
 800ac42:	b11d      	cbz	r5, 800ac4c <_printf_i+0x19c>
 800ac44:	2310      	movs	r3, #16
 800ac46:	e7ad      	b.n	800aba4 <_printf_i+0xf4>
 800ac48:	4826      	ldr	r0, [pc, #152]	@ (800ace4 <_printf_i+0x234>)
 800ac4a:	e7e9      	b.n	800ac20 <_printf_i+0x170>
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	f023 0320 	bic.w	r3, r3, #32
 800ac52:	6023      	str	r3, [r4, #0]
 800ac54:	e7f6      	b.n	800ac44 <_printf_i+0x194>
 800ac56:	4616      	mov	r6, r2
 800ac58:	e7bd      	b.n	800abd6 <_printf_i+0x126>
 800ac5a:	6833      	ldr	r3, [r6, #0]
 800ac5c:	6825      	ldr	r5, [r4, #0]
 800ac5e:	6961      	ldr	r1, [r4, #20]
 800ac60:	1d18      	adds	r0, r3, #4
 800ac62:	6030      	str	r0, [r6, #0]
 800ac64:	062e      	lsls	r6, r5, #24
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	d501      	bpl.n	800ac6e <_printf_i+0x1be>
 800ac6a:	6019      	str	r1, [r3, #0]
 800ac6c:	e002      	b.n	800ac74 <_printf_i+0x1c4>
 800ac6e:	0668      	lsls	r0, r5, #25
 800ac70:	d5fb      	bpl.n	800ac6a <_printf_i+0x1ba>
 800ac72:	8019      	strh	r1, [r3, #0]
 800ac74:	2300      	movs	r3, #0
 800ac76:	6123      	str	r3, [r4, #16]
 800ac78:	4616      	mov	r6, r2
 800ac7a:	e7bc      	b.n	800abf6 <_printf_i+0x146>
 800ac7c:	6833      	ldr	r3, [r6, #0]
 800ac7e:	1d1a      	adds	r2, r3, #4
 800ac80:	6032      	str	r2, [r6, #0]
 800ac82:	681e      	ldr	r6, [r3, #0]
 800ac84:	6862      	ldr	r2, [r4, #4]
 800ac86:	2100      	movs	r1, #0
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f7f5 faa9 	bl	80001e0 <memchr>
 800ac8e:	b108      	cbz	r0, 800ac94 <_printf_i+0x1e4>
 800ac90:	1b80      	subs	r0, r0, r6
 800ac92:	6060      	str	r0, [r4, #4]
 800ac94:	6863      	ldr	r3, [r4, #4]
 800ac96:	6123      	str	r3, [r4, #16]
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac9e:	e7aa      	b.n	800abf6 <_printf_i+0x146>
 800aca0:	6923      	ldr	r3, [r4, #16]
 800aca2:	4632      	mov	r2, r6
 800aca4:	4649      	mov	r1, r9
 800aca6:	4640      	mov	r0, r8
 800aca8:	47d0      	blx	sl
 800acaa:	3001      	adds	r0, #1
 800acac:	d0ad      	beq.n	800ac0a <_printf_i+0x15a>
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	079b      	lsls	r3, r3, #30
 800acb2:	d413      	bmi.n	800acdc <_printf_i+0x22c>
 800acb4:	68e0      	ldr	r0, [r4, #12]
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	4298      	cmp	r0, r3
 800acba:	bfb8      	it	lt
 800acbc:	4618      	movlt	r0, r3
 800acbe:	e7a6      	b.n	800ac0e <_printf_i+0x15e>
 800acc0:	2301      	movs	r3, #1
 800acc2:	4632      	mov	r2, r6
 800acc4:	4649      	mov	r1, r9
 800acc6:	4640      	mov	r0, r8
 800acc8:	47d0      	blx	sl
 800acca:	3001      	adds	r0, #1
 800accc:	d09d      	beq.n	800ac0a <_printf_i+0x15a>
 800acce:	3501      	adds	r5, #1
 800acd0:	68e3      	ldr	r3, [r4, #12]
 800acd2:	9903      	ldr	r1, [sp, #12]
 800acd4:	1a5b      	subs	r3, r3, r1
 800acd6:	42ab      	cmp	r3, r5
 800acd8:	dcf2      	bgt.n	800acc0 <_printf_i+0x210>
 800acda:	e7eb      	b.n	800acb4 <_printf_i+0x204>
 800acdc:	2500      	movs	r5, #0
 800acde:	f104 0619 	add.w	r6, r4, #25
 800ace2:	e7f5      	b.n	800acd0 <_printf_i+0x220>
 800ace4:	0800ceba 	.word	0x0800ceba
 800ace8:	0800cecb 	.word	0x0800cecb

0800acec <std>:
 800acec:	2300      	movs	r3, #0
 800acee:	b510      	push	{r4, lr}
 800acf0:	4604      	mov	r4, r0
 800acf2:	e9c0 3300 	strd	r3, r3, [r0]
 800acf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acfa:	6083      	str	r3, [r0, #8]
 800acfc:	8181      	strh	r1, [r0, #12]
 800acfe:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad00:	81c2      	strh	r2, [r0, #14]
 800ad02:	6183      	str	r3, [r0, #24]
 800ad04:	4619      	mov	r1, r3
 800ad06:	2208      	movs	r2, #8
 800ad08:	305c      	adds	r0, #92	@ 0x5c
 800ad0a:	f000 f906 	bl	800af1a <memset>
 800ad0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad44 <std+0x58>)
 800ad10:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad12:	4b0d      	ldr	r3, [pc, #52]	@ (800ad48 <std+0x5c>)
 800ad14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad16:	4b0d      	ldr	r3, [pc, #52]	@ (800ad4c <std+0x60>)
 800ad18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad50 <std+0x64>)
 800ad1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad54 <std+0x68>)
 800ad20:	6224      	str	r4, [r4, #32]
 800ad22:	429c      	cmp	r4, r3
 800ad24:	d006      	beq.n	800ad34 <std+0x48>
 800ad26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad2a:	4294      	cmp	r4, r2
 800ad2c:	d002      	beq.n	800ad34 <std+0x48>
 800ad2e:	33d0      	adds	r3, #208	@ 0xd0
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d105      	bne.n	800ad40 <std+0x54>
 800ad34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad3c:	f000 b96a 	b.w	800b014 <__retarget_lock_init_recursive>
 800ad40:	bd10      	pop	{r4, pc}
 800ad42:	bf00      	nop
 800ad44:	0800ae95 	.word	0x0800ae95
 800ad48:	0800aeb7 	.word	0x0800aeb7
 800ad4c:	0800aeef 	.word	0x0800aeef
 800ad50:	0800af13 	.word	0x0800af13
 800ad54:	20001fa8 	.word	0x20001fa8

0800ad58 <stdio_exit_handler>:
 800ad58:	4a02      	ldr	r2, [pc, #8]	@ (800ad64 <stdio_exit_handler+0xc>)
 800ad5a:	4903      	ldr	r1, [pc, #12]	@ (800ad68 <stdio_exit_handler+0x10>)
 800ad5c:	4803      	ldr	r0, [pc, #12]	@ (800ad6c <stdio_exit_handler+0x14>)
 800ad5e:	f000 b869 	b.w	800ae34 <_fwalk_sglue>
 800ad62:	bf00      	nop
 800ad64:	20000100 	.word	0x20000100
 800ad68:	0800c951 	.word	0x0800c951
 800ad6c:	20000110 	.word	0x20000110

0800ad70 <cleanup_stdio>:
 800ad70:	6841      	ldr	r1, [r0, #4]
 800ad72:	4b0c      	ldr	r3, [pc, #48]	@ (800ada4 <cleanup_stdio+0x34>)
 800ad74:	4299      	cmp	r1, r3
 800ad76:	b510      	push	{r4, lr}
 800ad78:	4604      	mov	r4, r0
 800ad7a:	d001      	beq.n	800ad80 <cleanup_stdio+0x10>
 800ad7c:	f001 fde8 	bl	800c950 <_fflush_r>
 800ad80:	68a1      	ldr	r1, [r4, #8]
 800ad82:	4b09      	ldr	r3, [pc, #36]	@ (800ada8 <cleanup_stdio+0x38>)
 800ad84:	4299      	cmp	r1, r3
 800ad86:	d002      	beq.n	800ad8e <cleanup_stdio+0x1e>
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f001 fde1 	bl	800c950 <_fflush_r>
 800ad8e:	68e1      	ldr	r1, [r4, #12]
 800ad90:	4b06      	ldr	r3, [pc, #24]	@ (800adac <cleanup_stdio+0x3c>)
 800ad92:	4299      	cmp	r1, r3
 800ad94:	d004      	beq.n	800ada0 <cleanup_stdio+0x30>
 800ad96:	4620      	mov	r0, r4
 800ad98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad9c:	f001 bdd8 	b.w	800c950 <_fflush_r>
 800ada0:	bd10      	pop	{r4, pc}
 800ada2:	bf00      	nop
 800ada4:	20001fa8 	.word	0x20001fa8
 800ada8:	20002010 	.word	0x20002010
 800adac:	20002078 	.word	0x20002078

0800adb0 <global_stdio_init.part.0>:
 800adb0:	b510      	push	{r4, lr}
 800adb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ade0 <global_stdio_init.part.0+0x30>)
 800adb4:	4c0b      	ldr	r4, [pc, #44]	@ (800ade4 <global_stdio_init.part.0+0x34>)
 800adb6:	4a0c      	ldr	r2, [pc, #48]	@ (800ade8 <global_stdio_init.part.0+0x38>)
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	4620      	mov	r0, r4
 800adbc:	2200      	movs	r2, #0
 800adbe:	2104      	movs	r1, #4
 800adc0:	f7ff ff94 	bl	800acec <std>
 800adc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800adc8:	2201      	movs	r2, #1
 800adca:	2109      	movs	r1, #9
 800adcc:	f7ff ff8e 	bl	800acec <std>
 800add0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800add4:	2202      	movs	r2, #2
 800add6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adda:	2112      	movs	r1, #18
 800addc:	f7ff bf86 	b.w	800acec <std>
 800ade0:	200020e0 	.word	0x200020e0
 800ade4:	20001fa8 	.word	0x20001fa8
 800ade8:	0800ad59 	.word	0x0800ad59

0800adec <__sfp_lock_acquire>:
 800adec:	4801      	ldr	r0, [pc, #4]	@ (800adf4 <__sfp_lock_acquire+0x8>)
 800adee:	f000 b912 	b.w	800b016 <__retarget_lock_acquire_recursive>
 800adf2:	bf00      	nop
 800adf4:	200020e9 	.word	0x200020e9

0800adf8 <__sfp_lock_release>:
 800adf8:	4801      	ldr	r0, [pc, #4]	@ (800ae00 <__sfp_lock_release+0x8>)
 800adfa:	f000 b90d 	b.w	800b018 <__retarget_lock_release_recursive>
 800adfe:	bf00      	nop
 800ae00:	200020e9 	.word	0x200020e9

0800ae04 <__sinit>:
 800ae04:	b510      	push	{r4, lr}
 800ae06:	4604      	mov	r4, r0
 800ae08:	f7ff fff0 	bl	800adec <__sfp_lock_acquire>
 800ae0c:	6a23      	ldr	r3, [r4, #32]
 800ae0e:	b11b      	cbz	r3, 800ae18 <__sinit+0x14>
 800ae10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae14:	f7ff bff0 	b.w	800adf8 <__sfp_lock_release>
 800ae18:	4b04      	ldr	r3, [pc, #16]	@ (800ae2c <__sinit+0x28>)
 800ae1a:	6223      	str	r3, [r4, #32]
 800ae1c:	4b04      	ldr	r3, [pc, #16]	@ (800ae30 <__sinit+0x2c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1f5      	bne.n	800ae10 <__sinit+0xc>
 800ae24:	f7ff ffc4 	bl	800adb0 <global_stdio_init.part.0>
 800ae28:	e7f2      	b.n	800ae10 <__sinit+0xc>
 800ae2a:	bf00      	nop
 800ae2c:	0800ad71 	.word	0x0800ad71
 800ae30:	200020e0 	.word	0x200020e0

0800ae34 <_fwalk_sglue>:
 800ae34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae38:	4607      	mov	r7, r0
 800ae3a:	4688      	mov	r8, r1
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	2600      	movs	r6, #0
 800ae40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae44:	f1b9 0901 	subs.w	r9, r9, #1
 800ae48:	d505      	bpl.n	800ae56 <_fwalk_sglue+0x22>
 800ae4a:	6824      	ldr	r4, [r4, #0]
 800ae4c:	2c00      	cmp	r4, #0
 800ae4e:	d1f7      	bne.n	800ae40 <_fwalk_sglue+0xc>
 800ae50:	4630      	mov	r0, r6
 800ae52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae56:	89ab      	ldrh	r3, [r5, #12]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d907      	bls.n	800ae6c <_fwalk_sglue+0x38>
 800ae5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae60:	3301      	adds	r3, #1
 800ae62:	d003      	beq.n	800ae6c <_fwalk_sglue+0x38>
 800ae64:	4629      	mov	r1, r5
 800ae66:	4638      	mov	r0, r7
 800ae68:	47c0      	blx	r8
 800ae6a:	4306      	orrs	r6, r0
 800ae6c:	3568      	adds	r5, #104	@ 0x68
 800ae6e:	e7e9      	b.n	800ae44 <_fwalk_sglue+0x10>

0800ae70 <iprintf>:
 800ae70:	b40f      	push	{r0, r1, r2, r3}
 800ae72:	b507      	push	{r0, r1, r2, lr}
 800ae74:	4906      	ldr	r1, [pc, #24]	@ (800ae90 <iprintf+0x20>)
 800ae76:	ab04      	add	r3, sp, #16
 800ae78:	6808      	ldr	r0, [r1, #0]
 800ae7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae7e:	6881      	ldr	r1, [r0, #8]
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	f001 fbc9 	bl	800c618 <_vfiprintf_r>
 800ae86:	b003      	add	sp, #12
 800ae88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae8c:	b004      	add	sp, #16
 800ae8e:	4770      	bx	lr
 800ae90:	2000010c 	.word	0x2000010c

0800ae94 <__sread>:
 800ae94:	b510      	push	{r4, lr}
 800ae96:	460c      	mov	r4, r1
 800ae98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9c:	f000 f86c 	bl	800af78 <_read_r>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	bfab      	itete	ge
 800aea4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aea6:	89a3      	ldrhlt	r3, [r4, #12]
 800aea8:	181b      	addge	r3, r3, r0
 800aeaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aeae:	bfac      	ite	ge
 800aeb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aeb2:	81a3      	strhlt	r3, [r4, #12]
 800aeb4:	bd10      	pop	{r4, pc}

0800aeb6 <__swrite>:
 800aeb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeba:	461f      	mov	r7, r3
 800aebc:	898b      	ldrh	r3, [r1, #12]
 800aebe:	05db      	lsls	r3, r3, #23
 800aec0:	4605      	mov	r5, r0
 800aec2:	460c      	mov	r4, r1
 800aec4:	4616      	mov	r6, r2
 800aec6:	d505      	bpl.n	800aed4 <__swrite+0x1e>
 800aec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aecc:	2302      	movs	r3, #2
 800aece:	2200      	movs	r2, #0
 800aed0:	f000 f840 	bl	800af54 <_lseek_r>
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aede:	81a3      	strh	r3, [r4, #12]
 800aee0:	4632      	mov	r2, r6
 800aee2:	463b      	mov	r3, r7
 800aee4:	4628      	mov	r0, r5
 800aee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeea:	f000 b857 	b.w	800af9c <_write_r>

0800aeee <__sseek>:
 800aeee:	b510      	push	{r4, lr}
 800aef0:	460c      	mov	r4, r1
 800aef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef6:	f000 f82d 	bl	800af54 <_lseek_r>
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	bf15      	itete	ne
 800af00:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af0a:	81a3      	strheq	r3, [r4, #12]
 800af0c:	bf18      	it	ne
 800af0e:	81a3      	strhne	r3, [r4, #12]
 800af10:	bd10      	pop	{r4, pc}

0800af12 <__sclose>:
 800af12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af16:	f000 b80d 	b.w	800af34 <_close_r>

0800af1a <memset>:
 800af1a:	4402      	add	r2, r0
 800af1c:	4603      	mov	r3, r0
 800af1e:	4293      	cmp	r3, r2
 800af20:	d100      	bne.n	800af24 <memset+0xa>
 800af22:	4770      	bx	lr
 800af24:	f803 1b01 	strb.w	r1, [r3], #1
 800af28:	e7f9      	b.n	800af1e <memset+0x4>
	...

0800af2c <_localeconv_r>:
 800af2c:	4800      	ldr	r0, [pc, #0]	@ (800af30 <_localeconv_r+0x4>)
 800af2e:	4770      	bx	lr
 800af30:	2000024c 	.word	0x2000024c

0800af34 <_close_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d06      	ldr	r5, [pc, #24]	@ (800af50 <_close_r+0x1c>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	602b      	str	r3, [r5, #0]
 800af40:	f7f6 fba2 	bl	8001688 <_close>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_close_r+0x1a>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_close_r+0x1a>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	200020e4 	.word	0x200020e4

0800af54 <_lseek_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d07      	ldr	r5, [pc, #28]	@ (800af74 <_lseek_r+0x20>)
 800af58:	4604      	mov	r4, r0
 800af5a:	4608      	mov	r0, r1
 800af5c:	4611      	mov	r1, r2
 800af5e:	2200      	movs	r2, #0
 800af60:	602a      	str	r2, [r5, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	f7f6 fbb7 	bl	80016d6 <_lseek>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_lseek_r+0x1e>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_lseek_r+0x1e>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	200020e4 	.word	0x200020e4

0800af78 <_read_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d07      	ldr	r5, [pc, #28]	@ (800af98 <_read_r+0x20>)
 800af7c:	4604      	mov	r4, r0
 800af7e:	4608      	mov	r0, r1
 800af80:	4611      	mov	r1, r2
 800af82:	2200      	movs	r2, #0
 800af84:	602a      	str	r2, [r5, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	f7f6 fb61 	bl	800164e <_read>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_read_r+0x1e>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_read_r+0x1e>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	200020e4 	.word	0x200020e4

0800af9c <_write_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	4d07      	ldr	r5, [pc, #28]	@ (800afbc <_write_r+0x20>)
 800afa0:	4604      	mov	r4, r0
 800afa2:	4608      	mov	r0, r1
 800afa4:	4611      	mov	r1, r2
 800afa6:	2200      	movs	r2, #0
 800afa8:	602a      	str	r2, [r5, #0]
 800afaa:	461a      	mov	r2, r3
 800afac:	f7f6 f9f6 	bl	800139c <_write>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_write_r+0x1e>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_write_r+0x1e>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	200020e4 	.word	0x200020e4

0800afc0 <__errno>:
 800afc0:	4b01      	ldr	r3, [pc, #4]	@ (800afc8 <__errno+0x8>)
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	2000010c 	.word	0x2000010c

0800afcc <__libc_init_array>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	4d0d      	ldr	r5, [pc, #52]	@ (800b004 <__libc_init_array+0x38>)
 800afd0:	4c0d      	ldr	r4, [pc, #52]	@ (800b008 <__libc_init_array+0x3c>)
 800afd2:	1b64      	subs	r4, r4, r5
 800afd4:	10a4      	asrs	r4, r4, #2
 800afd6:	2600      	movs	r6, #0
 800afd8:	42a6      	cmp	r6, r4
 800afda:	d109      	bne.n	800aff0 <__libc_init_array+0x24>
 800afdc:	4d0b      	ldr	r5, [pc, #44]	@ (800b00c <__libc_init_array+0x40>)
 800afde:	4c0c      	ldr	r4, [pc, #48]	@ (800b010 <__libc_init_array+0x44>)
 800afe0:	f001 fec4 	bl	800cd6c <_init>
 800afe4:	1b64      	subs	r4, r4, r5
 800afe6:	10a4      	asrs	r4, r4, #2
 800afe8:	2600      	movs	r6, #0
 800afea:	42a6      	cmp	r6, r4
 800afec:	d105      	bne.n	800affa <__libc_init_array+0x2e>
 800afee:	bd70      	pop	{r4, r5, r6, pc}
 800aff0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aff4:	4798      	blx	r3
 800aff6:	3601      	adds	r6, #1
 800aff8:	e7ee      	b.n	800afd8 <__libc_init_array+0xc>
 800affa:	f855 3b04 	ldr.w	r3, [r5], #4
 800affe:	4798      	blx	r3
 800b000:	3601      	adds	r6, #1
 800b002:	e7f2      	b.n	800afea <__libc_init_array+0x1e>
 800b004:	0800d224 	.word	0x0800d224
 800b008:	0800d224 	.word	0x0800d224
 800b00c:	0800d224 	.word	0x0800d224
 800b010:	0800d228 	.word	0x0800d228

0800b014 <__retarget_lock_init_recursive>:
 800b014:	4770      	bx	lr

0800b016 <__retarget_lock_acquire_recursive>:
 800b016:	4770      	bx	lr

0800b018 <__retarget_lock_release_recursive>:
 800b018:	4770      	bx	lr

0800b01a <quorem>:
 800b01a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01e:	6903      	ldr	r3, [r0, #16]
 800b020:	690c      	ldr	r4, [r1, #16]
 800b022:	42a3      	cmp	r3, r4
 800b024:	4607      	mov	r7, r0
 800b026:	db7e      	blt.n	800b126 <quorem+0x10c>
 800b028:	3c01      	subs	r4, #1
 800b02a:	f101 0814 	add.w	r8, r1, #20
 800b02e:	00a3      	lsls	r3, r4, #2
 800b030:	f100 0514 	add.w	r5, r0, #20
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b03a:	9301      	str	r3, [sp, #4]
 800b03c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b044:	3301      	adds	r3, #1
 800b046:	429a      	cmp	r2, r3
 800b048:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b04c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b050:	d32e      	bcc.n	800b0b0 <quorem+0x96>
 800b052:	f04f 0a00 	mov.w	sl, #0
 800b056:	46c4      	mov	ip, r8
 800b058:	46ae      	mov	lr, r5
 800b05a:	46d3      	mov	fp, sl
 800b05c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b060:	b298      	uxth	r0, r3
 800b062:	fb06 a000 	mla	r0, r6, r0, sl
 800b066:	0c02      	lsrs	r2, r0, #16
 800b068:	0c1b      	lsrs	r3, r3, #16
 800b06a:	fb06 2303 	mla	r3, r6, r3, r2
 800b06e:	f8de 2000 	ldr.w	r2, [lr]
 800b072:	b280      	uxth	r0, r0
 800b074:	b292      	uxth	r2, r2
 800b076:	1a12      	subs	r2, r2, r0
 800b078:	445a      	add	r2, fp
 800b07a:	f8de 0000 	ldr.w	r0, [lr]
 800b07e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b082:	b29b      	uxth	r3, r3
 800b084:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b088:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b08c:	b292      	uxth	r2, r2
 800b08e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b092:	45e1      	cmp	r9, ip
 800b094:	f84e 2b04 	str.w	r2, [lr], #4
 800b098:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b09c:	d2de      	bcs.n	800b05c <quorem+0x42>
 800b09e:	9b00      	ldr	r3, [sp, #0]
 800b0a0:	58eb      	ldr	r3, [r5, r3]
 800b0a2:	b92b      	cbnz	r3, 800b0b0 <quorem+0x96>
 800b0a4:	9b01      	ldr	r3, [sp, #4]
 800b0a6:	3b04      	subs	r3, #4
 800b0a8:	429d      	cmp	r5, r3
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	d32f      	bcc.n	800b10e <quorem+0xf4>
 800b0ae:	613c      	str	r4, [r7, #16]
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f001 f97f 	bl	800c3b4 <__mcmp>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	db25      	blt.n	800b106 <quorem+0xec>
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	2000      	movs	r0, #0
 800b0be:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0c2:	f8d1 c000 	ldr.w	ip, [r1]
 800b0c6:	fa1f fe82 	uxth.w	lr, r2
 800b0ca:	fa1f f38c 	uxth.w	r3, ip
 800b0ce:	eba3 030e 	sub.w	r3, r3, lr
 800b0d2:	4403      	add	r3, r0
 800b0d4:	0c12      	lsrs	r2, r2, #16
 800b0d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b0da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0e4:	45c1      	cmp	r9, r8
 800b0e6:	f841 3b04 	str.w	r3, [r1], #4
 800b0ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b0ee:	d2e6      	bcs.n	800b0be <quorem+0xa4>
 800b0f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0f8:	b922      	cbnz	r2, 800b104 <quorem+0xea>
 800b0fa:	3b04      	subs	r3, #4
 800b0fc:	429d      	cmp	r5, r3
 800b0fe:	461a      	mov	r2, r3
 800b100:	d30b      	bcc.n	800b11a <quorem+0x100>
 800b102:	613c      	str	r4, [r7, #16]
 800b104:	3601      	adds	r6, #1
 800b106:	4630      	mov	r0, r6
 800b108:	b003      	add	sp, #12
 800b10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10e:	6812      	ldr	r2, [r2, #0]
 800b110:	3b04      	subs	r3, #4
 800b112:	2a00      	cmp	r2, #0
 800b114:	d1cb      	bne.n	800b0ae <quorem+0x94>
 800b116:	3c01      	subs	r4, #1
 800b118:	e7c6      	b.n	800b0a8 <quorem+0x8e>
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	3b04      	subs	r3, #4
 800b11e:	2a00      	cmp	r2, #0
 800b120:	d1ef      	bne.n	800b102 <quorem+0xe8>
 800b122:	3c01      	subs	r4, #1
 800b124:	e7ea      	b.n	800b0fc <quorem+0xe2>
 800b126:	2000      	movs	r0, #0
 800b128:	e7ee      	b.n	800b108 <quorem+0xee>
 800b12a:	0000      	movs	r0, r0
 800b12c:	0000      	movs	r0, r0
	...

0800b130 <_dtoa_r>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	69c7      	ldr	r7, [r0, #28]
 800b136:	b097      	sub	sp, #92	@ 0x5c
 800b138:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b13c:	ec55 4b10 	vmov	r4, r5, d0
 800b140:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b142:	9107      	str	r1, [sp, #28]
 800b144:	4681      	mov	r9, r0
 800b146:	920c      	str	r2, [sp, #48]	@ 0x30
 800b148:	9311      	str	r3, [sp, #68]	@ 0x44
 800b14a:	b97f      	cbnz	r7, 800b16c <_dtoa_r+0x3c>
 800b14c:	2010      	movs	r0, #16
 800b14e:	f000 fe09 	bl	800bd64 <malloc>
 800b152:	4602      	mov	r2, r0
 800b154:	f8c9 001c 	str.w	r0, [r9, #28]
 800b158:	b920      	cbnz	r0, 800b164 <_dtoa_r+0x34>
 800b15a:	4ba9      	ldr	r3, [pc, #676]	@ (800b400 <_dtoa_r+0x2d0>)
 800b15c:	21ef      	movs	r1, #239	@ 0xef
 800b15e:	48a9      	ldr	r0, [pc, #676]	@ (800b404 <_dtoa_r+0x2d4>)
 800b160:	f001 fcd0 	bl	800cb04 <__assert_func>
 800b164:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b168:	6007      	str	r7, [r0, #0]
 800b16a:	60c7      	str	r7, [r0, #12]
 800b16c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b170:	6819      	ldr	r1, [r3, #0]
 800b172:	b159      	cbz	r1, 800b18c <_dtoa_r+0x5c>
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	604a      	str	r2, [r1, #4]
 800b178:	2301      	movs	r3, #1
 800b17a:	4093      	lsls	r3, r2
 800b17c:	608b      	str	r3, [r1, #8]
 800b17e:	4648      	mov	r0, r9
 800b180:	f000 fee6 	bl	800bf50 <_Bfree>
 800b184:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]
 800b18c:	1e2b      	subs	r3, r5, #0
 800b18e:	bfb9      	ittee	lt
 800b190:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b194:	9305      	strlt	r3, [sp, #20]
 800b196:	2300      	movge	r3, #0
 800b198:	6033      	strge	r3, [r6, #0]
 800b19a:	9f05      	ldr	r7, [sp, #20]
 800b19c:	4b9a      	ldr	r3, [pc, #616]	@ (800b408 <_dtoa_r+0x2d8>)
 800b19e:	bfbc      	itt	lt
 800b1a0:	2201      	movlt	r2, #1
 800b1a2:	6032      	strlt	r2, [r6, #0]
 800b1a4:	43bb      	bics	r3, r7
 800b1a6:	d112      	bne.n	800b1ce <_dtoa_r+0x9e>
 800b1a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b1aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b1ae:	6013      	str	r3, [r2, #0]
 800b1b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1b4:	4323      	orrs	r3, r4
 800b1b6:	f000 855a 	beq.w	800bc6e <_dtoa_r+0xb3e>
 800b1ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b41c <_dtoa_r+0x2ec>
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 855c 	beq.w	800bc7e <_dtoa_r+0xb4e>
 800b1c6:	f10a 0303 	add.w	r3, sl, #3
 800b1ca:	f000 bd56 	b.w	800bc7a <_dtoa_r+0xb4a>
 800b1ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	ec51 0b17 	vmov	r0, r1, d7
 800b1d8:	2300      	movs	r3, #0
 800b1da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b1de:	f7f5 fc7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1e2:	4680      	mov	r8, r0
 800b1e4:	b158      	cbz	r0, 800b1fe <_dtoa_r+0xce>
 800b1e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1ee:	b113      	cbz	r3, 800b1f6 <_dtoa_r+0xc6>
 800b1f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b1f2:	4b86      	ldr	r3, [pc, #536]	@ (800b40c <_dtoa_r+0x2dc>)
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b420 <_dtoa_r+0x2f0>
 800b1fa:	f000 bd40 	b.w	800bc7e <_dtoa_r+0xb4e>
 800b1fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b202:	aa14      	add	r2, sp, #80	@ 0x50
 800b204:	a915      	add	r1, sp, #84	@ 0x54
 800b206:	4648      	mov	r0, r9
 800b208:	f001 f984 	bl	800c514 <__d2b>
 800b20c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b210:	9002      	str	r0, [sp, #8]
 800b212:	2e00      	cmp	r6, #0
 800b214:	d078      	beq.n	800b308 <_dtoa_r+0x1d8>
 800b216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b218:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b21c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b220:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b224:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b228:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b22c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b230:	4619      	mov	r1, r3
 800b232:	2200      	movs	r2, #0
 800b234:	4b76      	ldr	r3, [pc, #472]	@ (800b410 <_dtoa_r+0x2e0>)
 800b236:	f7f5 f82f 	bl	8000298 <__aeabi_dsub>
 800b23a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b3e8 <_dtoa_r+0x2b8>)
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	f7f5 f9e2 	bl	8000608 <__aeabi_dmul>
 800b244:	a36a      	add	r3, pc, #424	@ (adr r3, 800b3f0 <_dtoa_r+0x2c0>)
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	f7f5 f827 	bl	800029c <__adddf3>
 800b24e:	4604      	mov	r4, r0
 800b250:	4630      	mov	r0, r6
 800b252:	460d      	mov	r5, r1
 800b254:	f7f5 f96e 	bl	8000534 <__aeabi_i2d>
 800b258:	a367      	add	r3, pc, #412	@ (adr r3, 800b3f8 <_dtoa_r+0x2c8>)
 800b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25e:	f7f5 f9d3 	bl	8000608 <__aeabi_dmul>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	f7f5 f817 	bl	800029c <__adddf3>
 800b26e:	4604      	mov	r4, r0
 800b270:	460d      	mov	r5, r1
 800b272:	f7f5 fc79 	bl	8000b68 <__aeabi_d2iz>
 800b276:	2200      	movs	r2, #0
 800b278:	4607      	mov	r7, r0
 800b27a:	2300      	movs	r3, #0
 800b27c:	4620      	mov	r0, r4
 800b27e:	4629      	mov	r1, r5
 800b280:	f7f5 fc34 	bl	8000aec <__aeabi_dcmplt>
 800b284:	b140      	cbz	r0, 800b298 <_dtoa_r+0x168>
 800b286:	4638      	mov	r0, r7
 800b288:	f7f5 f954 	bl	8000534 <__aeabi_i2d>
 800b28c:	4622      	mov	r2, r4
 800b28e:	462b      	mov	r3, r5
 800b290:	f7f5 fc22 	bl	8000ad8 <__aeabi_dcmpeq>
 800b294:	b900      	cbnz	r0, 800b298 <_dtoa_r+0x168>
 800b296:	3f01      	subs	r7, #1
 800b298:	2f16      	cmp	r7, #22
 800b29a:	d852      	bhi.n	800b342 <_dtoa_r+0x212>
 800b29c:	4b5d      	ldr	r3, [pc, #372]	@ (800b414 <_dtoa_r+0x2e4>)
 800b29e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2aa:	f7f5 fc1f 	bl	8000aec <__aeabi_dcmplt>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d049      	beq.n	800b346 <_dtoa_r+0x216>
 800b2b2:	3f01      	subs	r7, #1
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2ba:	1b9b      	subs	r3, r3, r6
 800b2bc:	1e5a      	subs	r2, r3, #1
 800b2be:	bf45      	ittet	mi
 800b2c0:	f1c3 0301 	rsbmi	r3, r3, #1
 800b2c4:	9300      	strmi	r3, [sp, #0]
 800b2c6:	2300      	movpl	r3, #0
 800b2c8:	2300      	movmi	r3, #0
 800b2ca:	9206      	str	r2, [sp, #24]
 800b2cc:	bf54      	ite	pl
 800b2ce:	9300      	strpl	r3, [sp, #0]
 800b2d0:	9306      	strmi	r3, [sp, #24]
 800b2d2:	2f00      	cmp	r7, #0
 800b2d4:	db39      	blt.n	800b34a <_dtoa_r+0x21a>
 800b2d6:	9b06      	ldr	r3, [sp, #24]
 800b2d8:	970d      	str	r7, [sp, #52]	@ 0x34
 800b2da:	443b      	add	r3, r7
 800b2dc:	9306      	str	r3, [sp, #24]
 800b2de:	2300      	movs	r3, #0
 800b2e0:	9308      	str	r3, [sp, #32]
 800b2e2:	9b07      	ldr	r3, [sp, #28]
 800b2e4:	2b09      	cmp	r3, #9
 800b2e6:	d863      	bhi.n	800b3b0 <_dtoa_r+0x280>
 800b2e8:	2b05      	cmp	r3, #5
 800b2ea:	bfc4      	itt	gt
 800b2ec:	3b04      	subgt	r3, #4
 800b2ee:	9307      	strgt	r3, [sp, #28]
 800b2f0:	9b07      	ldr	r3, [sp, #28]
 800b2f2:	f1a3 0302 	sub.w	r3, r3, #2
 800b2f6:	bfcc      	ite	gt
 800b2f8:	2400      	movgt	r4, #0
 800b2fa:	2401      	movle	r4, #1
 800b2fc:	2b03      	cmp	r3, #3
 800b2fe:	d863      	bhi.n	800b3c8 <_dtoa_r+0x298>
 800b300:	e8df f003 	tbb	[pc, r3]
 800b304:	2b375452 	.word	0x2b375452
 800b308:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b30c:	441e      	add	r6, r3
 800b30e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b312:	2b20      	cmp	r3, #32
 800b314:	bfc1      	itttt	gt
 800b316:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b31a:	409f      	lslgt	r7, r3
 800b31c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b320:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b324:	bfd6      	itet	le
 800b326:	f1c3 0320 	rsble	r3, r3, #32
 800b32a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b32e:	fa04 f003 	lslle.w	r0, r4, r3
 800b332:	f7f5 f8ef 	bl	8000514 <__aeabi_ui2d>
 800b336:	2201      	movs	r2, #1
 800b338:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b33c:	3e01      	subs	r6, #1
 800b33e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b340:	e776      	b.n	800b230 <_dtoa_r+0x100>
 800b342:	2301      	movs	r3, #1
 800b344:	e7b7      	b.n	800b2b6 <_dtoa_r+0x186>
 800b346:	9010      	str	r0, [sp, #64]	@ 0x40
 800b348:	e7b6      	b.n	800b2b8 <_dtoa_r+0x188>
 800b34a:	9b00      	ldr	r3, [sp, #0]
 800b34c:	1bdb      	subs	r3, r3, r7
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	427b      	negs	r3, r7
 800b352:	9308      	str	r3, [sp, #32]
 800b354:	2300      	movs	r3, #0
 800b356:	930d      	str	r3, [sp, #52]	@ 0x34
 800b358:	e7c3      	b.n	800b2e2 <_dtoa_r+0x1b2>
 800b35a:	2301      	movs	r3, #1
 800b35c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b35e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b360:	eb07 0b03 	add.w	fp, r7, r3
 800b364:	f10b 0301 	add.w	r3, fp, #1
 800b368:	2b01      	cmp	r3, #1
 800b36a:	9303      	str	r3, [sp, #12]
 800b36c:	bfb8      	it	lt
 800b36e:	2301      	movlt	r3, #1
 800b370:	e006      	b.n	800b380 <_dtoa_r+0x250>
 800b372:	2301      	movs	r3, #1
 800b374:	9309      	str	r3, [sp, #36]	@ 0x24
 800b376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b378:	2b00      	cmp	r3, #0
 800b37a:	dd28      	ble.n	800b3ce <_dtoa_r+0x29e>
 800b37c:	469b      	mov	fp, r3
 800b37e:	9303      	str	r3, [sp, #12]
 800b380:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b384:	2100      	movs	r1, #0
 800b386:	2204      	movs	r2, #4
 800b388:	f102 0514 	add.w	r5, r2, #20
 800b38c:	429d      	cmp	r5, r3
 800b38e:	d926      	bls.n	800b3de <_dtoa_r+0x2ae>
 800b390:	6041      	str	r1, [r0, #4]
 800b392:	4648      	mov	r0, r9
 800b394:	f000 fd9c 	bl	800bed0 <_Balloc>
 800b398:	4682      	mov	sl, r0
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d142      	bne.n	800b424 <_dtoa_r+0x2f4>
 800b39e:	4b1e      	ldr	r3, [pc, #120]	@ (800b418 <_dtoa_r+0x2e8>)
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b3a6:	e6da      	b.n	800b15e <_dtoa_r+0x2e>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	e7e3      	b.n	800b374 <_dtoa_r+0x244>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	e7d5      	b.n	800b35c <_dtoa_r+0x22c>
 800b3b0:	2401      	movs	r4, #1
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9307      	str	r3, [sp, #28]
 800b3b6:	9409      	str	r4, [sp, #36]	@ 0x24
 800b3b8:	f04f 3bff 	mov.w	fp, #4294967295
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f8cd b00c 	str.w	fp, [sp, #12]
 800b3c2:	2312      	movs	r3, #18
 800b3c4:	920c      	str	r2, [sp, #48]	@ 0x30
 800b3c6:	e7db      	b.n	800b380 <_dtoa_r+0x250>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3cc:	e7f4      	b.n	800b3b8 <_dtoa_r+0x288>
 800b3ce:	f04f 0b01 	mov.w	fp, #1
 800b3d2:	f8cd b00c 	str.w	fp, [sp, #12]
 800b3d6:	465b      	mov	r3, fp
 800b3d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b3dc:	e7d0      	b.n	800b380 <_dtoa_r+0x250>
 800b3de:	3101      	adds	r1, #1
 800b3e0:	0052      	lsls	r2, r2, #1
 800b3e2:	e7d1      	b.n	800b388 <_dtoa_r+0x258>
 800b3e4:	f3af 8000 	nop.w
 800b3e8:	636f4361 	.word	0x636f4361
 800b3ec:	3fd287a7 	.word	0x3fd287a7
 800b3f0:	8b60c8b3 	.word	0x8b60c8b3
 800b3f4:	3fc68a28 	.word	0x3fc68a28
 800b3f8:	509f79fb 	.word	0x509f79fb
 800b3fc:	3fd34413 	.word	0x3fd34413
 800b400:	0800cee9 	.word	0x0800cee9
 800b404:	0800cf00 	.word	0x0800cf00
 800b408:	7ff00000 	.word	0x7ff00000
 800b40c:	0800ceb9 	.word	0x0800ceb9
 800b410:	3ff80000 	.word	0x3ff80000
 800b414:	0800d050 	.word	0x0800d050
 800b418:	0800cf58 	.word	0x0800cf58
 800b41c:	0800cee5 	.word	0x0800cee5
 800b420:	0800ceb8 	.word	0x0800ceb8
 800b424:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b428:	6018      	str	r0, [r3, #0]
 800b42a:	9b03      	ldr	r3, [sp, #12]
 800b42c:	2b0e      	cmp	r3, #14
 800b42e:	f200 80a1 	bhi.w	800b574 <_dtoa_r+0x444>
 800b432:	2c00      	cmp	r4, #0
 800b434:	f000 809e 	beq.w	800b574 <_dtoa_r+0x444>
 800b438:	2f00      	cmp	r7, #0
 800b43a:	dd33      	ble.n	800b4a4 <_dtoa_r+0x374>
 800b43c:	4b9c      	ldr	r3, [pc, #624]	@ (800b6b0 <_dtoa_r+0x580>)
 800b43e:	f007 020f 	and.w	r2, r7, #15
 800b442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b446:	ed93 7b00 	vldr	d7, [r3]
 800b44a:	05f8      	lsls	r0, r7, #23
 800b44c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b450:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b454:	d516      	bpl.n	800b484 <_dtoa_r+0x354>
 800b456:	4b97      	ldr	r3, [pc, #604]	@ (800b6b4 <_dtoa_r+0x584>)
 800b458:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b45c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b460:	f7f5 f9fc 	bl	800085c <__aeabi_ddiv>
 800b464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b468:	f004 040f 	and.w	r4, r4, #15
 800b46c:	2603      	movs	r6, #3
 800b46e:	4d91      	ldr	r5, [pc, #580]	@ (800b6b4 <_dtoa_r+0x584>)
 800b470:	b954      	cbnz	r4, 800b488 <_dtoa_r+0x358>
 800b472:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b476:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b47a:	f7f5 f9ef 	bl	800085c <__aeabi_ddiv>
 800b47e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b482:	e028      	b.n	800b4d6 <_dtoa_r+0x3a6>
 800b484:	2602      	movs	r6, #2
 800b486:	e7f2      	b.n	800b46e <_dtoa_r+0x33e>
 800b488:	07e1      	lsls	r1, r4, #31
 800b48a:	d508      	bpl.n	800b49e <_dtoa_r+0x36e>
 800b48c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b490:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b494:	f7f5 f8b8 	bl	8000608 <__aeabi_dmul>
 800b498:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b49c:	3601      	adds	r6, #1
 800b49e:	1064      	asrs	r4, r4, #1
 800b4a0:	3508      	adds	r5, #8
 800b4a2:	e7e5      	b.n	800b470 <_dtoa_r+0x340>
 800b4a4:	f000 80af 	beq.w	800b606 <_dtoa_r+0x4d6>
 800b4a8:	427c      	negs	r4, r7
 800b4aa:	4b81      	ldr	r3, [pc, #516]	@ (800b6b0 <_dtoa_r+0x580>)
 800b4ac:	4d81      	ldr	r5, [pc, #516]	@ (800b6b4 <_dtoa_r+0x584>)
 800b4ae:	f004 020f 	and.w	r2, r4, #15
 800b4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b4be:	f7f5 f8a3 	bl	8000608 <__aeabi_dmul>
 800b4c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4c6:	1124      	asrs	r4, r4, #4
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	2602      	movs	r6, #2
 800b4cc:	2c00      	cmp	r4, #0
 800b4ce:	f040 808f 	bne.w	800b5f0 <_dtoa_r+0x4c0>
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1d3      	bne.n	800b47e <_dtoa_r+0x34e>
 800b4d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b4d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 8094 	beq.w	800b60a <_dtoa_r+0x4da>
 800b4e2:	4b75      	ldr	r3, [pc, #468]	@ (800b6b8 <_dtoa_r+0x588>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	f7f5 faff 	bl	8000aec <__aeabi_dcmplt>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	f000 808b 	beq.w	800b60a <_dtoa_r+0x4da>
 800b4f4:	9b03      	ldr	r3, [sp, #12]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 8087 	beq.w	800b60a <_dtoa_r+0x4da>
 800b4fc:	f1bb 0f00 	cmp.w	fp, #0
 800b500:	dd34      	ble.n	800b56c <_dtoa_r+0x43c>
 800b502:	4620      	mov	r0, r4
 800b504:	4b6d      	ldr	r3, [pc, #436]	@ (800b6bc <_dtoa_r+0x58c>)
 800b506:	2200      	movs	r2, #0
 800b508:	4629      	mov	r1, r5
 800b50a:	f7f5 f87d 	bl	8000608 <__aeabi_dmul>
 800b50e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b512:	f107 38ff 	add.w	r8, r7, #4294967295
 800b516:	3601      	adds	r6, #1
 800b518:	465c      	mov	r4, fp
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7f5 f80a 	bl	8000534 <__aeabi_i2d>
 800b520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b524:	f7f5 f870 	bl	8000608 <__aeabi_dmul>
 800b528:	4b65      	ldr	r3, [pc, #404]	@ (800b6c0 <_dtoa_r+0x590>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	f7f4 feb6 	bl	800029c <__adddf3>
 800b530:	4605      	mov	r5, r0
 800b532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b536:	2c00      	cmp	r4, #0
 800b538:	d16a      	bne.n	800b610 <_dtoa_r+0x4e0>
 800b53a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b53e:	4b61      	ldr	r3, [pc, #388]	@ (800b6c4 <_dtoa_r+0x594>)
 800b540:	2200      	movs	r2, #0
 800b542:	f7f4 fea9 	bl	8000298 <__aeabi_dsub>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b54e:	462a      	mov	r2, r5
 800b550:	4633      	mov	r3, r6
 800b552:	f7f5 fae9 	bl	8000b28 <__aeabi_dcmpgt>
 800b556:	2800      	cmp	r0, #0
 800b558:	f040 8298 	bne.w	800ba8c <_dtoa_r+0x95c>
 800b55c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b560:	462a      	mov	r2, r5
 800b562:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b566:	f7f5 fac1 	bl	8000aec <__aeabi_dcmplt>
 800b56a:	bb38      	cbnz	r0, 800b5bc <_dtoa_r+0x48c>
 800b56c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b570:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b574:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b576:	2b00      	cmp	r3, #0
 800b578:	f2c0 8157 	blt.w	800b82a <_dtoa_r+0x6fa>
 800b57c:	2f0e      	cmp	r7, #14
 800b57e:	f300 8154 	bgt.w	800b82a <_dtoa_r+0x6fa>
 800b582:	4b4b      	ldr	r3, [pc, #300]	@ (800b6b0 <_dtoa_r+0x580>)
 800b584:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b588:	ed93 7b00 	vldr	d7, [r3]
 800b58c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b58e:	2b00      	cmp	r3, #0
 800b590:	ed8d 7b00 	vstr	d7, [sp]
 800b594:	f280 80e5 	bge.w	800b762 <_dtoa_r+0x632>
 800b598:	9b03      	ldr	r3, [sp, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f300 80e1 	bgt.w	800b762 <_dtoa_r+0x632>
 800b5a0:	d10c      	bne.n	800b5bc <_dtoa_r+0x48c>
 800b5a2:	4b48      	ldr	r3, [pc, #288]	@ (800b6c4 <_dtoa_r+0x594>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	ec51 0b17 	vmov	r0, r1, d7
 800b5aa:	f7f5 f82d 	bl	8000608 <__aeabi_dmul>
 800b5ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5b2:	f7f5 faaf 	bl	8000b14 <__aeabi_dcmpge>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f000 8266 	beq.w	800ba88 <_dtoa_r+0x958>
 800b5bc:	2400      	movs	r4, #0
 800b5be:	4625      	mov	r5, r4
 800b5c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5c2:	4656      	mov	r6, sl
 800b5c4:	ea6f 0803 	mvn.w	r8, r3
 800b5c8:	2700      	movs	r7, #0
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	4648      	mov	r0, r9
 800b5ce:	f000 fcbf 	bl	800bf50 <_Bfree>
 800b5d2:	2d00      	cmp	r5, #0
 800b5d4:	f000 80bd 	beq.w	800b752 <_dtoa_r+0x622>
 800b5d8:	b12f      	cbz	r7, 800b5e6 <_dtoa_r+0x4b6>
 800b5da:	42af      	cmp	r7, r5
 800b5dc:	d003      	beq.n	800b5e6 <_dtoa_r+0x4b6>
 800b5de:	4639      	mov	r1, r7
 800b5e0:	4648      	mov	r0, r9
 800b5e2:	f000 fcb5 	bl	800bf50 <_Bfree>
 800b5e6:	4629      	mov	r1, r5
 800b5e8:	4648      	mov	r0, r9
 800b5ea:	f000 fcb1 	bl	800bf50 <_Bfree>
 800b5ee:	e0b0      	b.n	800b752 <_dtoa_r+0x622>
 800b5f0:	07e2      	lsls	r2, r4, #31
 800b5f2:	d505      	bpl.n	800b600 <_dtoa_r+0x4d0>
 800b5f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5f8:	f7f5 f806 	bl	8000608 <__aeabi_dmul>
 800b5fc:	3601      	adds	r6, #1
 800b5fe:	2301      	movs	r3, #1
 800b600:	1064      	asrs	r4, r4, #1
 800b602:	3508      	adds	r5, #8
 800b604:	e762      	b.n	800b4cc <_dtoa_r+0x39c>
 800b606:	2602      	movs	r6, #2
 800b608:	e765      	b.n	800b4d6 <_dtoa_r+0x3a6>
 800b60a:	9c03      	ldr	r4, [sp, #12]
 800b60c:	46b8      	mov	r8, r7
 800b60e:	e784      	b.n	800b51a <_dtoa_r+0x3ea>
 800b610:	4b27      	ldr	r3, [pc, #156]	@ (800b6b0 <_dtoa_r+0x580>)
 800b612:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b614:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b618:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b61c:	4454      	add	r4, sl
 800b61e:	2900      	cmp	r1, #0
 800b620:	d054      	beq.n	800b6cc <_dtoa_r+0x59c>
 800b622:	4929      	ldr	r1, [pc, #164]	@ (800b6c8 <_dtoa_r+0x598>)
 800b624:	2000      	movs	r0, #0
 800b626:	f7f5 f919 	bl	800085c <__aeabi_ddiv>
 800b62a:	4633      	mov	r3, r6
 800b62c:	462a      	mov	r2, r5
 800b62e:	f7f4 fe33 	bl	8000298 <__aeabi_dsub>
 800b632:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b636:	4656      	mov	r6, sl
 800b638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b63c:	f7f5 fa94 	bl	8000b68 <__aeabi_d2iz>
 800b640:	4605      	mov	r5, r0
 800b642:	f7f4 ff77 	bl	8000534 <__aeabi_i2d>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b64e:	f7f4 fe23 	bl	8000298 <__aeabi_dsub>
 800b652:	3530      	adds	r5, #48	@ 0x30
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b65c:	f806 5b01 	strb.w	r5, [r6], #1
 800b660:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b664:	f7f5 fa42 	bl	8000aec <__aeabi_dcmplt>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d172      	bne.n	800b752 <_dtoa_r+0x622>
 800b66c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b670:	4911      	ldr	r1, [pc, #68]	@ (800b6b8 <_dtoa_r+0x588>)
 800b672:	2000      	movs	r0, #0
 800b674:	f7f4 fe10 	bl	8000298 <__aeabi_dsub>
 800b678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b67c:	f7f5 fa36 	bl	8000aec <__aeabi_dcmplt>
 800b680:	2800      	cmp	r0, #0
 800b682:	f040 80b4 	bne.w	800b7ee <_dtoa_r+0x6be>
 800b686:	42a6      	cmp	r6, r4
 800b688:	f43f af70 	beq.w	800b56c <_dtoa_r+0x43c>
 800b68c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b690:	4b0a      	ldr	r3, [pc, #40]	@ (800b6bc <_dtoa_r+0x58c>)
 800b692:	2200      	movs	r2, #0
 800b694:	f7f4 ffb8 	bl	8000608 <__aeabi_dmul>
 800b698:	4b08      	ldr	r3, [pc, #32]	@ (800b6bc <_dtoa_r+0x58c>)
 800b69a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b69e:	2200      	movs	r2, #0
 800b6a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6a4:	f7f4 ffb0 	bl	8000608 <__aeabi_dmul>
 800b6a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6ac:	e7c4      	b.n	800b638 <_dtoa_r+0x508>
 800b6ae:	bf00      	nop
 800b6b0:	0800d050 	.word	0x0800d050
 800b6b4:	0800d028 	.word	0x0800d028
 800b6b8:	3ff00000 	.word	0x3ff00000
 800b6bc:	40240000 	.word	0x40240000
 800b6c0:	401c0000 	.word	0x401c0000
 800b6c4:	40140000 	.word	0x40140000
 800b6c8:	3fe00000 	.word	0x3fe00000
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7f4 ff9a 	bl	8000608 <__aeabi_dmul>
 800b6d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b6d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b6da:	4656      	mov	r6, sl
 800b6dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6e0:	f7f5 fa42 	bl	8000b68 <__aeabi_d2iz>
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	f7f4 ff25 	bl	8000534 <__aeabi_i2d>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6f2:	f7f4 fdd1 	bl	8000298 <__aeabi_dsub>
 800b6f6:	3530      	adds	r5, #48	@ 0x30
 800b6f8:	f806 5b01 	strb.w	r5, [r6], #1
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	42a6      	cmp	r6, r4
 800b702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	d124      	bne.n	800b756 <_dtoa_r+0x626>
 800b70c:	4baf      	ldr	r3, [pc, #700]	@ (800b9cc <_dtoa_r+0x89c>)
 800b70e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b712:	f7f4 fdc3 	bl	800029c <__adddf3>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b71e:	f7f5 fa03 	bl	8000b28 <__aeabi_dcmpgt>
 800b722:	2800      	cmp	r0, #0
 800b724:	d163      	bne.n	800b7ee <_dtoa_r+0x6be>
 800b726:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b72a:	49a8      	ldr	r1, [pc, #672]	@ (800b9cc <_dtoa_r+0x89c>)
 800b72c:	2000      	movs	r0, #0
 800b72e:	f7f4 fdb3 	bl	8000298 <__aeabi_dsub>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b73a:	f7f5 f9d7 	bl	8000aec <__aeabi_dcmplt>
 800b73e:	2800      	cmp	r0, #0
 800b740:	f43f af14 	beq.w	800b56c <_dtoa_r+0x43c>
 800b744:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b746:	1e73      	subs	r3, r6, #1
 800b748:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b74a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b74e:	2b30      	cmp	r3, #48	@ 0x30
 800b750:	d0f8      	beq.n	800b744 <_dtoa_r+0x614>
 800b752:	4647      	mov	r7, r8
 800b754:	e03b      	b.n	800b7ce <_dtoa_r+0x69e>
 800b756:	4b9e      	ldr	r3, [pc, #632]	@ (800b9d0 <_dtoa_r+0x8a0>)
 800b758:	f7f4 ff56 	bl	8000608 <__aeabi_dmul>
 800b75c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b760:	e7bc      	b.n	800b6dc <_dtoa_r+0x5ac>
 800b762:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b766:	4656      	mov	r6, sl
 800b768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b76c:	4620      	mov	r0, r4
 800b76e:	4629      	mov	r1, r5
 800b770:	f7f5 f874 	bl	800085c <__aeabi_ddiv>
 800b774:	f7f5 f9f8 	bl	8000b68 <__aeabi_d2iz>
 800b778:	4680      	mov	r8, r0
 800b77a:	f7f4 fedb 	bl	8000534 <__aeabi_i2d>
 800b77e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b782:	f7f4 ff41 	bl	8000608 <__aeabi_dmul>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4620      	mov	r0, r4
 800b78c:	4629      	mov	r1, r5
 800b78e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b792:	f7f4 fd81 	bl	8000298 <__aeabi_dsub>
 800b796:	f806 4b01 	strb.w	r4, [r6], #1
 800b79a:	9d03      	ldr	r5, [sp, #12]
 800b79c:	eba6 040a 	sub.w	r4, r6, sl
 800b7a0:	42a5      	cmp	r5, r4
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	d133      	bne.n	800b810 <_dtoa_r+0x6e0>
 800b7a8:	f7f4 fd78 	bl	800029c <__adddf3>
 800b7ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	460d      	mov	r5, r1
 800b7b4:	f7f5 f9b8 	bl	8000b28 <__aeabi_dcmpgt>
 800b7b8:	b9c0      	cbnz	r0, 800b7ec <_dtoa_r+0x6bc>
 800b7ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	f7f5 f989 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7c6:	b110      	cbz	r0, 800b7ce <_dtoa_r+0x69e>
 800b7c8:	f018 0f01 	tst.w	r8, #1
 800b7cc:	d10e      	bne.n	800b7ec <_dtoa_r+0x6bc>
 800b7ce:	9902      	ldr	r1, [sp, #8]
 800b7d0:	4648      	mov	r0, r9
 800b7d2:	f000 fbbd 	bl	800bf50 <_Bfree>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	7033      	strb	r3, [r6, #0]
 800b7da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7dc:	3701      	adds	r7, #1
 800b7de:	601f      	str	r7, [r3, #0]
 800b7e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f000 824b 	beq.w	800bc7e <_dtoa_r+0xb4e>
 800b7e8:	601e      	str	r6, [r3, #0]
 800b7ea:	e248      	b.n	800bc7e <_dtoa_r+0xb4e>
 800b7ec:	46b8      	mov	r8, r7
 800b7ee:	4633      	mov	r3, r6
 800b7f0:	461e      	mov	r6, r3
 800b7f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7f6:	2a39      	cmp	r2, #57	@ 0x39
 800b7f8:	d106      	bne.n	800b808 <_dtoa_r+0x6d8>
 800b7fa:	459a      	cmp	sl, r3
 800b7fc:	d1f8      	bne.n	800b7f0 <_dtoa_r+0x6c0>
 800b7fe:	2230      	movs	r2, #48	@ 0x30
 800b800:	f108 0801 	add.w	r8, r8, #1
 800b804:	f88a 2000 	strb.w	r2, [sl]
 800b808:	781a      	ldrb	r2, [r3, #0]
 800b80a:	3201      	adds	r2, #1
 800b80c:	701a      	strb	r2, [r3, #0]
 800b80e:	e7a0      	b.n	800b752 <_dtoa_r+0x622>
 800b810:	4b6f      	ldr	r3, [pc, #444]	@ (800b9d0 <_dtoa_r+0x8a0>)
 800b812:	2200      	movs	r2, #0
 800b814:	f7f4 fef8 	bl	8000608 <__aeabi_dmul>
 800b818:	2200      	movs	r2, #0
 800b81a:	2300      	movs	r3, #0
 800b81c:	4604      	mov	r4, r0
 800b81e:	460d      	mov	r5, r1
 800b820:	f7f5 f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b824:	2800      	cmp	r0, #0
 800b826:	d09f      	beq.n	800b768 <_dtoa_r+0x638>
 800b828:	e7d1      	b.n	800b7ce <_dtoa_r+0x69e>
 800b82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b82c:	2a00      	cmp	r2, #0
 800b82e:	f000 80ea 	beq.w	800ba06 <_dtoa_r+0x8d6>
 800b832:	9a07      	ldr	r2, [sp, #28]
 800b834:	2a01      	cmp	r2, #1
 800b836:	f300 80cd 	bgt.w	800b9d4 <_dtoa_r+0x8a4>
 800b83a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b83c:	2a00      	cmp	r2, #0
 800b83e:	f000 80c1 	beq.w	800b9c4 <_dtoa_r+0x894>
 800b842:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b846:	9c08      	ldr	r4, [sp, #32]
 800b848:	9e00      	ldr	r6, [sp, #0]
 800b84a:	9a00      	ldr	r2, [sp, #0]
 800b84c:	441a      	add	r2, r3
 800b84e:	9200      	str	r2, [sp, #0]
 800b850:	9a06      	ldr	r2, [sp, #24]
 800b852:	2101      	movs	r1, #1
 800b854:	441a      	add	r2, r3
 800b856:	4648      	mov	r0, r9
 800b858:	9206      	str	r2, [sp, #24]
 800b85a:	f000 fc2d 	bl	800c0b8 <__i2b>
 800b85e:	4605      	mov	r5, r0
 800b860:	b166      	cbz	r6, 800b87c <_dtoa_r+0x74c>
 800b862:	9b06      	ldr	r3, [sp, #24]
 800b864:	2b00      	cmp	r3, #0
 800b866:	dd09      	ble.n	800b87c <_dtoa_r+0x74c>
 800b868:	42b3      	cmp	r3, r6
 800b86a:	9a00      	ldr	r2, [sp, #0]
 800b86c:	bfa8      	it	ge
 800b86e:	4633      	movge	r3, r6
 800b870:	1ad2      	subs	r2, r2, r3
 800b872:	9200      	str	r2, [sp, #0]
 800b874:	9a06      	ldr	r2, [sp, #24]
 800b876:	1af6      	subs	r6, r6, r3
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	9306      	str	r3, [sp, #24]
 800b87c:	9b08      	ldr	r3, [sp, #32]
 800b87e:	b30b      	cbz	r3, 800b8c4 <_dtoa_r+0x794>
 800b880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 80c6 	beq.w	800ba14 <_dtoa_r+0x8e4>
 800b888:	2c00      	cmp	r4, #0
 800b88a:	f000 80c0 	beq.w	800ba0e <_dtoa_r+0x8de>
 800b88e:	4629      	mov	r1, r5
 800b890:	4622      	mov	r2, r4
 800b892:	4648      	mov	r0, r9
 800b894:	f000 fcc8 	bl	800c228 <__pow5mult>
 800b898:	9a02      	ldr	r2, [sp, #8]
 800b89a:	4601      	mov	r1, r0
 800b89c:	4605      	mov	r5, r0
 800b89e:	4648      	mov	r0, r9
 800b8a0:	f000 fc20 	bl	800c0e4 <__multiply>
 800b8a4:	9902      	ldr	r1, [sp, #8]
 800b8a6:	4680      	mov	r8, r0
 800b8a8:	4648      	mov	r0, r9
 800b8aa:	f000 fb51 	bl	800bf50 <_Bfree>
 800b8ae:	9b08      	ldr	r3, [sp, #32]
 800b8b0:	1b1b      	subs	r3, r3, r4
 800b8b2:	9308      	str	r3, [sp, #32]
 800b8b4:	f000 80b1 	beq.w	800ba1a <_dtoa_r+0x8ea>
 800b8b8:	9a08      	ldr	r2, [sp, #32]
 800b8ba:	4641      	mov	r1, r8
 800b8bc:	4648      	mov	r0, r9
 800b8be:	f000 fcb3 	bl	800c228 <__pow5mult>
 800b8c2:	9002      	str	r0, [sp, #8]
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	4648      	mov	r0, r9
 800b8c8:	f000 fbf6 	bl	800c0b8 <__i2b>
 800b8cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 81d8 	beq.w	800bc86 <_dtoa_r+0xb56>
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	4601      	mov	r1, r0
 800b8da:	4648      	mov	r0, r9
 800b8dc:	f000 fca4 	bl	800c228 <__pow5mult>
 800b8e0:	9b07      	ldr	r3, [sp, #28]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	f300 809f 	bgt.w	800ba28 <_dtoa_r+0x8f8>
 800b8ea:	9b04      	ldr	r3, [sp, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f040 8097 	bne.w	800ba20 <_dtoa_r+0x8f0>
 800b8f2:	9b05      	ldr	r3, [sp, #20]
 800b8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f040 8093 	bne.w	800ba24 <_dtoa_r+0x8f4>
 800b8fe:	9b05      	ldr	r3, [sp, #20]
 800b900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b904:	0d1b      	lsrs	r3, r3, #20
 800b906:	051b      	lsls	r3, r3, #20
 800b908:	b133      	cbz	r3, 800b918 <_dtoa_r+0x7e8>
 800b90a:	9b00      	ldr	r3, [sp, #0]
 800b90c:	3301      	adds	r3, #1
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	9b06      	ldr	r3, [sp, #24]
 800b912:	3301      	adds	r3, #1
 800b914:	9306      	str	r3, [sp, #24]
 800b916:	2301      	movs	r3, #1
 800b918:	9308      	str	r3, [sp, #32]
 800b91a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 81b8 	beq.w	800bc92 <_dtoa_r+0xb62>
 800b922:	6923      	ldr	r3, [r4, #16]
 800b924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b928:	6918      	ldr	r0, [r3, #16]
 800b92a:	f000 fb79 	bl	800c020 <__hi0bits>
 800b92e:	f1c0 0020 	rsb	r0, r0, #32
 800b932:	9b06      	ldr	r3, [sp, #24]
 800b934:	4418      	add	r0, r3
 800b936:	f010 001f 	ands.w	r0, r0, #31
 800b93a:	f000 8082 	beq.w	800ba42 <_dtoa_r+0x912>
 800b93e:	f1c0 0320 	rsb	r3, r0, #32
 800b942:	2b04      	cmp	r3, #4
 800b944:	dd73      	ble.n	800ba2e <_dtoa_r+0x8fe>
 800b946:	9b00      	ldr	r3, [sp, #0]
 800b948:	f1c0 001c 	rsb	r0, r0, #28
 800b94c:	4403      	add	r3, r0
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	9b06      	ldr	r3, [sp, #24]
 800b952:	4403      	add	r3, r0
 800b954:	4406      	add	r6, r0
 800b956:	9306      	str	r3, [sp, #24]
 800b958:	9b00      	ldr	r3, [sp, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	dd05      	ble.n	800b96a <_dtoa_r+0x83a>
 800b95e:	9902      	ldr	r1, [sp, #8]
 800b960:	461a      	mov	r2, r3
 800b962:	4648      	mov	r0, r9
 800b964:	f000 fcba 	bl	800c2dc <__lshift>
 800b968:	9002      	str	r0, [sp, #8]
 800b96a:	9b06      	ldr	r3, [sp, #24]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	dd05      	ble.n	800b97c <_dtoa_r+0x84c>
 800b970:	4621      	mov	r1, r4
 800b972:	461a      	mov	r2, r3
 800b974:	4648      	mov	r0, r9
 800b976:	f000 fcb1 	bl	800c2dc <__lshift>
 800b97a:	4604      	mov	r4, r0
 800b97c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d061      	beq.n	800ba46 <_dtoa_r+0x916>
 800b982:	9802      	ldr	r0, [sp, #8]
 800b984:	4621      	mov	r1, r4
 800b986:	f000 fd15 	bl	800c3b4 <__mcmp>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	da5b      	bge.n	800ba46 <_dtoa_r+0x916>
 800b98e:	2300      	movs	r3, #0
 800b990:	9902      	ldr	r1, [sp, #8]
 800b992:	220a      	movs	r2, #10
 800b994:	4648      	mov	r0, r9
 800b996:	f000 fafd 	bl	800bf94 <__multadd>
 800b99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b99c:	9002      	str	r0, [sp, #8]
 800b99e:	f107 38ff 	add.w	r8, r7, #4294967295
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 8177 	beq.w	800bc96 <_dtoa_r+0xb66>
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	220a      	movs	r2, #10
 800b9ae:	4648      	mov	r0, r9
 800b9b0:	f000 faf0 	bl	800bf94 <__multadd>
 800b9b4:	f1bb 0f00 	cmp.w	fp, #0
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	dc6f      	bgt.n	800ba9c <_dtoa_r+0x96c>
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	dc49      	bgt.n	800ba56 <_dtoa_r+0x926>
 800b9c2:	e06b      	b.n	800ba9c <_dtoa_r+0x96c>
 800b9c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b9c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b9ca:	e73c      	b.n	800b846 <_dtoa_r+0x716>
 800b9cc:	3fe00000 	.word	0x3fe00000
 800b9d0:	40240000 	.word	0x40240000
 800b9d4:	9b03      	ldr	r3, [sp, #12]
 800b9d6:	1e5c      	subs	r4, r3, #1
 800b9d8:	9b08      	ldr	r3, [sp, #32]
 800b9da:	42a3      	cmp	r3, r4
 800b9dc:	db09      	blt.n	800b9f2 <_dtoa_r+0x8c2>
 800b9de:	1b1c      	subs	r4, r3, r4
 800b9e0:	9b03      	ldr	r3, [sp, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f6bf af30 	bge.w	800b848 <_dtoa_r+0x718>
 800b9e8:	9b00      	ldr	r3, [sp, #0]
 800b9ea:	9a03      	ldr	r2, [sp, #12]
 800b9ec:	1a9e      	subs	r6, r3, r2
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	e72b      	b.n	800b84a <_dtoa_r+0x71a>
 800b9f2:	9b08      	ldr	r3, [sp, #32]
 800b9f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b9f6:	9408      	str	r4, [sp, #32]
 800b9f8:	1ae3      	subs	r3, r4, r3
 800b9fa:	441a      	add	r2, r3
 800b9fc:	9e00      	ldr	r6, [sp, #0]
 800b9fe:	9b03      	ldr	r3, [sp, #12]
 800ba00:	920d      	str	r2, [sp, #52]	@ 0x34
 800ba02:	2400      	movs	r4, #0
 800ba04:	e721      	b.n	800b84a <_dtoa_r+0x71a>
 800ba06:	9c08      	ldr	r4, [sp, #32]
 800ba08:	9e00      	ldr	r6, [sp, #0]
 800ba0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ba0c:	e728      	b.n	800b860 <_dtoa_r+0x730>
 800ba0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ba12:	e751      	b.n	800b8b8 <_dtoa_r+0x788>
 800ba14:	9a08      	ldr	r2, [sp, #32]
 800ba16:	9902      	ldr	r1, [sp, #8]
 800ba18:	e750      	b.n	800b8bc <_dtoa_r+0x78c>
 800ba1a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ba1e:	e751      	b.n	800b8c4 <_dtoa_r+0x794>
 800ba20:	2300      	movs	r3, #0
 800ba22:	e779      	b.n	800b918 <_dtoa_r+0x7e8>
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	e777      	b.n	800b918 <_dtoa_r+0x7e8>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9308      	str	r3, [sp, #32]
 800ba2c:	e779      	b.n	800b922 <_dtoa_r+0x7f2>
 800ba2e:	d093      	beq.n	800b958 <_dtoa_r+0x828>
 800ba30:	9a00      	ldr	r2, [sp, #0]
 800ba32:	331c      	adds	r3, #28
 800ba34:	441a      	add	r2, r3
 800ba36:	9200      	str	r2, [sp, #0]
 800ba38:	9a06      	ldr	r2, [sp, #24]
 800ba3a:	441a      	add	r2, r3
 800ba3c:	441e      	add	r6, r3
 800ba3e:	9206      	str	r2, [sp, #24]
 800ba40:	e78a      	b.n	800b958 <_dtoa_r+0x828>
 800ba42:	4603      	mov	r3, r0
 800ba44:	e7f4      	b.n	800ba30 <_dtoa_r+0x900>
 800ba46:	9b03      	ldr	r3, [sp, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	46b8      	mov	r8, r7
 800ba4c:	dc20      	bgt.n	800ba90 <_dtoa_r+0x960>
 800ba4e:	469b      	mov	fp, r3
 800ba50:	9b07      	ldr	r3, [sp, #28]
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	dd1e      	ble.n	800ba94 <_dtoa_r+0x964>
 800ba56:	f1bb 0f00 	cmp.w	fp, #0
 800ba5a:	f47f adb1 	bne.w	800b5c0 <_dtoa_r+0x490>
 800ba5e:	4621      	mov	r1, r4
 800ba60:	465b      	mov	r3, fp
 800ba62:	2205      	movs	r2, #5
 800ba64:	4648      	mov	r0, r9
 800ba66:	f000 fa95 	bl	800bf94 <__multadd>
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	9802      	ldr	r0, [sp, #8]
 800ba70:	f000 fca0 	bl	800c3b4 <__mcmp>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	f77f ada3 	ble.w	800b5c0 <_dtoa_r+0x490>
 800ba7a:	4656      	mov	r6, sl
 800ba7c:	2331      	movs	r3, #49	@ 0x31
 800ba7e:	f806 3b01 	strb.w	r3, [r6], #1
 800ba82:	f108 0801 	add.w	r8, r8, #1
 800ba86:	e59f      	b.n	800b5c8 <_dtoa_r+0x498>
 800ba88:	9c03      	ldr	r4, [sp, #12]
 800ba8a:	46b8      	mov	r8, r7
 800ba8c:	4625      	mov	r5, r4
 800ba8e:	e7f4      	b.n	800ba7a <_dtoa_r+0x94a>
 800ba90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ba94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f000 8101 	beq.w	800bc9e <_dtoa_r+0xb6e>
 800ba9c:	2e00      	cmp	r6, #0
 800ba9e:	dd05      	ble.n	800baac <_dtoa_r+0x97c>
 800baa0:	4629      	mov	r1, r5
 800baa2:	4632      	mov	r2, r6
 800baa4:	4648      	mov	r0, r9
 800baa6:	f000 fc19 	bl	800c2dc <__lshift>
 800baaa:	4605      	mov	r5, r0
 800baac:	9b08      	ldr	r3, [sp, #32]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d05c      	beq.n	800bb6c <_dtoa_r+0xa3c>
 800bab2:	6869      	ldr	r1, [r5, #4]
 800bab4:	4648      	mov	r0, r9
 800bab6:	f000 fa0b 	bl	800bed0 <_Balloc>
 800baba:	4606      	mov	r6, r0
 800babc:	b928      	cbnz	r0, 800baca <_dtoa_r+0x99a>
 800babe:	4b82      	ldr	r3, [pc, #520]	@ (800bcc8 <_dtoa_r+0xb98>)
 800bac0:	4602      	mov	r2, r0
 800bac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bac6:	f7ff bb4a 	b.w	800b15e <_dtoa_r+0x2e>
 800baca:	692a      	ldr	r2, [r5, #16]
 800bacc:	3202      	adds	r2, #2
 800bace:	0092      	lsls	r2, r2, #2
 800bad0:	f105 010c 	add.w	r1, r5, #12
 800bad4:	300c      	adds	r0, #12
 800bad6:	f001 f807 	bl	800cae8 <memcpy>
 800bada:	2201      	movs	r2, #1
 800badc:	4631      	mov	r1, r6
 800bade:	4648      	mov	r0, r9
 800bae0:	f000 fbfc 	bl	800c2dc <__lshift>
 800bae4:	f10a 0301 	add.w	r3, sl, #1
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	eb0a 030b 	add.w	r3, sl, fp
 800baee:	9308      	str	r3, [sp, #32]
 800baf0:	9b04      	ldr	r3, [sp, #16]
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	462f      	mov	r7, r5
 800baf8:	9306      	str	r3, [sp, #24]
 800bafa:	4605      	mov	r5, r0
 800bafc:	9b00      	ldr	r3, [sp, #0]
 800bafe:	9802      	ldr	r0, [sp, #8]
 800bb00:	4621      	mov	r1, r4
 800bb02:	f103 3bff 	add.w	fp, r3, #4294967295
 800bb06:	f7ff fa88 	bl	800b01a <quorem>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	3330      	adds	r3, #48	@ 0x30
 800bb0e:	9003      	str	r0, [sp, #12]
 800bb10:	4639      	mov	r1, r7
 800bb12:	9802      	ldr	r0, [sp, #8]
 800bb14:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb16:	f000 fc4d 	bl	800c3b4 <__mcmp>
 800bb1a:	462a      	mov	r2, r5
 800bb1c:	9004      	str	r0, [sp, #16]
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4648      	mov	r0, r9
 800bb22:	f000 fc63 	bl	800c3ec <__mdiff>
 800bb26:	68c2      	ldr	r2, [r0, #12]
 800bb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	bb02      	cbnz	r2, 800bb70 <_dtoa_r+0xa40>
 800bb2e:	4601      	mov	r1, r0
 800bb30:	9802      	ldr	r0, [sp, #8]
 800bb32:	f000 fc3f 	bl	800c3b4 <__mcmp>
 800bb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb38:	4602      	mov	r2, r0
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	4648      	mov	r0, r9
 800bb3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800bb40:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb42:	f000 fa05 	bl	800bf50 <_Bfree>
 800bb46:	9b07      	ldr	r3, [sp, #28]
 800bb48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bb4a:	9e00      	ldr	r6, [sp, #0]
 800bb4c:	ea42 0103 	orr.w	r1, r2, r3
 800bb50:	9b06      	ldr	r3, [sp, #24]
 800bb52:	4319      	orrs	r1, r3
 800bb54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb56:	d10d      	bne.n	800bb74 <_dtoa_r+0xa44>
 800bb58:	2b39      	cmp	r3, #57	@ 0x39
 800bb5a:	d027      	beq.n	800bbac <_dtoa_r+0xa7c>
 800bb5c:	9a04      	ldr	r2, [sp, #16]
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	dd01      	ble.n	800bb66 <_dtoa_r+0xa36>
 800bb62:	9b03      	ldr	r3, [sp, #12]
 800bb64:	3331      	adds	r3, #49	@ 0x31
 800bb66:	f88b 3000 	strb.w	r3, [fp]
 800bb6a:	e52e      	b.n	800b5ca <_dtoa_r+0x49a>
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	e7b9      	b.n	800bae4 <_dtoa_r+0x9b4>
 800bb70:	2201      	movs	r2, #1
 800bb72:	e7e2      	b.n	800bb3a <_dtoa_r+0xa0a>
 800bb74:	9904      	ldr	r1, [sp, #16]
 800bb76:	2900      	cmp	r1, #0
 800bb78:	db04      	blt.n	800bb84 <_dtoa_r+0xa54>
 800bb7a:	9807      	ldr	r0, [sp, #28]
 800bb7c:	4301      	orrs	r1, r0
 800bb7e:	9806      	ldr	r0, [sp, #24]
 800bb80:	4301      	orrs	r1, r0
 800bb82:	d120      	bne.n	800bbc6 <_dtoa_r+0xa96>
 800bb84:	2a00      	cmp	r2, #0
 800bb86:	ddee      	ble.n	800bb66 <_dtoa_r+0xa36>
 800bb88:	9902      	ldr	r1, [sp, #8]
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	4648      	mov	r0, r9
 800bb90:	f000 fba4 	bl	800c2dc <__lshift>
 800bb94:	4621      	mov	r1, r4
 800bb96:	9002      	str	r0, [sp, #8]
 800bb98:	f000 fc0c 	bl	800c3b4 <__mcmp>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	9b00      	ldr	r3, [sp, #0]
 800bba0:	dc02      	bgt.n	800bba8 <_dtoa_r+0xa78>
 800bba2:	d1e0      	bne.n	800bb66 <_dtoa_r+0xa36>
 800bba4:	07da      	lsls	r2, r3, #31
 800bba6:	d5de      	bpl.n	800bb66 <_dtoa_r+0xa36>
 800bba8:	2b39      	cmp	r3, #57	@ 0x39
 800bbaa:	d1da      	bne.n	800bb62 <_dtoa_r+0xa32>
 800bbac:	2339      	movs	r3, #57	@ 0x39
 800bbae:	f88b 3000 	strb.w	r3, [fp]
 800bbb2:	4633      	mov	r3, r6
 800bbb4:	461e      	mov	r6, r3
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bbbc:	2a39      	cmp	r2, #57	@ 0x39
 800bbbe:	d04e      	beq.n	800bc5e <_dtoa_r+0xb2e>
 800bbc0:	3201      	adds	r2, #1
 800bbc2:	701a      	strb	r2, [r3, #0]
 800bbc4:	e501      	b.n	800b5ca <_dtoa_r+0x49a>
 800bbc6:	2a00      	cmp	r2, #0
 800bbc8:	dd03      	ble.n	800bbd2 <_dtoa_r+0xaa2>
 800bbca:	2b39      	cmp	r3, #57	@ 0x39
 800bbcc:	d0ee      	beq.n	800bbac <_dtoa_r+0xa7c>
 800bbce:	3301      	adds	r3, #1
 800bbd0:	e7c9      	b.n	800bb66 <_dtoa_r+0xa36>
 800bbd2:	9a00      	ldr	r2, [sp, #0]
 800bbd4:	9908      	ldr	r1, [sp, #32]
 800bbd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bbda:	428a      	cmp	r2, r1
 800bbdc:	d028      	beq.n	800bc30 <_dtoa_r+0xb00>
 800bbde:	9902      	ldr	r1, [sp, #8]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	220a      	movs	r2, #10
 800bbe4:	4648      	mov	r0, r9
 800bbe6:	f000 f9d5 	bl	800bf94 <__multadd>
 800bbea:	42af      	cmp	r7, r5
 800bbec:	9002      	str	r0, [sp, #8]
 800bbee:	f04f 0300 	mov.w	r3, #0
 800bbf2:	f04f 020a 	mov.w	r2, #10
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	4648      	mov	r0, r9
 800bbfa:	d107      	bne.n	800bc0c <_dtoa_r+0xadc>
 800bbfc:	f000 f9ca 	bl	800bf94 <__multadd>
 800bc00:	4607      	mov	r7, r0
 800bc02:	4605      	mov	r5, r0
 800bc04:	9b00      	ldr	r3, [sp, #0]
 800bc06:	3301      	adds	r3, #1
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	e777      	b.n	800bafc <_dtoa_r+0x9cc>
 800bc0c:	f000 f9c2 	bl	800bf94 <__multadd>
 800bc10:	4629      	mov	r1, r5
 800bc12:	4607      	mov	r7, r0
 800bc14:	2300      	movs	r3, #0
 800bc16:	220a      	movs	r2, #10
 800bc18:	4648      	mov	r0, r9
 800bc1a:	f000 f9bb 	bl	800bf94 <__multadd>
 800bc1e:	4605      	mov	r5, r0
 800bc20:	e7f0      	b.n	800bc04 <_dtoa_r+0xad4>
 800bc22:	f1bb 0f00 	cmp.w	fp, #0
 800bc26:	bfcc      	ite	gt
 800bc28:	465e      	movgt	r6, fp
 800bc2a:	2601      	movle	r6, #1
 800bc2c:	4456      	add	r6, sl
 800bc2e:	2700      	movs	r7, #0
 800bc30:	9902      	ldr	r1, [sp, #8]
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	2201      	movs	r2, #1
 800bc36:	4648      	mov	r0, r9
 800bc38:	f000 fb50 	bl	800c2dc <__lshift>
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	9002      	str	r0, [sp, #8]
 800bc40:	f000 fbb8 	bl	800c3b4 <__mcmp>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	dcb4      	bgt.n	800bbb2 <_dtoa_r+0xa82>
 800bc48:	d102      	bne.n	800bc50 <_dtoa_r+0xb20>
 800bc4a:	9b00      	ldr	r3, [sp, #0]
 800bc4c:	07db      	lsls	r3, r3, #31
 800bc4e:	d4b0      	bmi.n	800bbb2 <_dtoa_r+0xa82>
 800bc50:	4633      	mov	r3, r6
 800bc52:	461e      	mov	r6, r3
 800bc54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc58:	2a30      	cmp	r2, #48	@ 0x30
 800bc5a:	d0fa      	beq.n	800bc52 <_dtoa_r+0xb22>
 800bc5c:	e4b5      	b.n	800b5ca <_dtoa_r+0x49a>
 800bc5e:	459a      	cmp	sl, r3
 800bc60:	d1a8      	bne.n	800bbb4 <_dtoa_r+0xa84>
 800bc62:	2331      	movs	r3, #49	@ 0x31
 800bc64:	f108 0801 	add.w	r8, r8, #1
 800bc68:	f88a 3000 	strb.w	r3, [sl]
 800bc6c:	e4ad      	b.n	800b5ca <_dtoa_r+0x49a>
 800bc6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bccc <_dtoa_r+0xb9c>
 800bc74:	b11b      	cbz	r3, 800bc7e <_dtoa_r+0xb4e>
 800bc76:	f10a 0308 	add.w	r3, sl, #8
 800bc7a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bc7c:	6013      	str	r3, [r2, #0]
 800bc7e:	4650      	mov	r0, sl
 800bc80:	b017      	add	sp, #92	@ 0x5c
 800bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc86:	9b07      	ldr	r3, [sp, #28]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	f77f ae2e 	ble.w	800b8ea <_dtoa_r+0x7ba>
 800bc8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc90:	9308      	str	r3, [sp, #32]
 800bc92:	2001      	movs	r0, #1
 800bc94:	e64d      	b.n	800b932 <_dtoa_r+0x802>
 800bc96:	f1bb 0f00 	cmp.w	fp, #0
 800bc9a:	f77f aed9 	ble.w	800ba50 <_dtoa_r+0x920>
 800bc9e:	4656      	mov	r6, sl
 800bca0:	9802      	ldr	r0, [sp, #8]
 800bca2:	4621      	mov	r1, r4
 800bca4:	f7ff f9b9 	bl	800b01a <quorem>
 800bca8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bcac:	f806 3b01 	strb.w	r3, [r6], #1
 800bcb0:	eba6 020a 	sub.w	r2, r6, sl
 800bcb4:	4593      	cmp	fp, r2
 800bcb6:	ddb4      	ble.n	800bc22 <_dtoa_r+0xaf2>
 800bcb8:	9902      	ldr	r1, [sp, #8]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	220a      	movs	r2, #10
 800bcbe:	4648      	mov	r0, r9
 800bcc0:	f000 f968 	bl	800bf94 <__multadd>
 800bcc4:	9002      	str	r0, [sp, #8]
 800bcc6:	e7eb      	b.n	800bca0 <_dtoa_r+0xb70>
 800bcc8:	0800cf58 	.word	0x0800cf58
 800bccc:	0800cedc 	.word	0x0800cedc

0800bcd0 <_free_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	2900      	cmp	r1, #0
 800bcd6:	d041      	beq.n	800bd5c <_free_r+0x8c>
 800bcd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcdc:	1f0c      	subs	r4, r1, #4
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	bfb8      	it	lt
 800bce2:	18e4      	addlt	r4, r4, r3
 800bce4:	f000 f8e8 	bl	800beb8 <__malloc_lock>
 800bce8:	4a1d      	ldr	r2, [pc, #116]	@ (800bd60 <_free_r+0x90>)
 800bcea:	6813      	ldr	r3, [r2, #0]
 800bcec:	b933      	cbnz	r3, 800bcfc <_free_r+0x2c>
 800bcee:	6063      	str	r3, [r4, #4]
 800bcf0:	6014      	str	r4, [r2, #0]
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcf8:	f000 b8e4 	b.w	800bec4 <__malloc_unlock>
 800bcfc:	42a3      	cmp	r3, r4
 800bcfe:	d908      	bls.n	800bd12 <_free_r+0x42>
 800bd00:	6820      	ldr	r0, [r4, #0]
 800bd02:	1821      	adds	r1, r4, r0
 800bd04:	428b      	cmp	r3, r1
 800bd06:	bf01      	itttt	eq
 800bd08:	6819      	ldreq	r1, [r3, #0]
 800bd0a:	685b      	ldreq	r3, [r3, #4]
 800bd0c:	1809      	addeq	r1, r1, r0
 800bd0e:	6021      	streq	r1, [r4, #0]
 800bd10:	e7ed      	b.n	800bcee <_free_r+0x1e>
 800bd12:	461a      	mov	r2, r3
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	b10b      	cbz	r3, 800bd1c <_free_r+0x4c>
 800bd18:	42a3      	cmp	r3, r4
 800bd1a:	d9fa      	bls.n	800bd12 <_free_r+0x42>
 800bd1c:	6811      	ldr	r1, [r2, #0]
 800bd1e:	1850      	adds	r0, r2, r1
 800bd20:	42a0      	cmp	r0, r4
 800bd22:	d10b      	bne.n	800bd3c <_free_r+0x6c>
 800bd24:	6820      	ldr	r0, [r4, #0]
 800bd26:	4401      	add	r1, r0
 800bd28:	1850      	adds	r0, r2, r1
 800bd2a:	4283      	cmp	r3, r0
 800bd2c:	6011      	str	r1, [r2, #0]
 800bd2e:	d1e0      	bne.n	800bcf2 <_free_r+0x22>
 800bd30:	6818      	ldr	r0, [r3, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	6053      	str	r3, [r2, #4]
 800bd36:	4408      	add	r0, r1
 800bd38:	6010      	str	r0, [r2, #0]
 800bd3a:	e7da      	b.n	800bcf2 <_free_r+0x22>
 800bd3c:	d902      	bls.n	800bd44 <_free_r+0x74>
 800bd3e:	230c      	movs	r3, #12
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	e7d6      	b.n	800bcf2 <_free_r+0x22>
 800bd44:	6820      	ldr	r0, [r4, #0]
 800bd46:	1821      	adds	r1, r4, r0
 800bd48:	428b      	cmp	r3, r1
 800bd4a:	bf04      	itt	eq
 800bd4c:	6819      	ldreq	r1, [r3, #0]
 800bd4e:	685b      	ldreq	r3, [r3, #4]
 800bd50:	6063      	str	r3, [r4, #4]
 800bd52:	bf04      	itt	eq
 800bd54:	1809      	addeq	r1, r1, r0
 800bd56:	6021      	streq	r1, [r4, #0]
 800bd58:	6054      	str	r4, [r2, #4]
 800bd5a:	e7ca      	b.n	800bcf2 <_free_r+0x22>
 800bd5c:	bd38      	pop	{r3, r4, r5, pc}
 800bd5e:	bf00      	nop
 800bd60:	200020f0 	.word	0x200020f0

0800bd64 <malloc>:
 800bd64:	4b02      	ldr	r3, [pc, #8]	@ (800bd70 <malloc+0xc>)
 800bd66:	4601      	mov	r1, r0
 800bd68:	6818      	ldr	r0, [r3, #0]
 800bd6a:	f000 b825 	b.w	800bdb8 <_malloc_r>
 800bd6e:	bf00      	nop
 800bd70:	2000010c 	.word	0x2000010c

0800bd74 <sbrk_aligned>:
 800bd74:	b570      	push	{r4, r5, r6, lr}
 800bd76:	4e0f      	ldr	r6, [pc, #60]	@ (800bdb4 <sbrk_aligned+0x40>)
 800bd78:	460c      	mov	r4, r1
 800bd7a:	6831      	ldr	r1, [r6, #0]
 800bd7c:	4605      	mov	r5, r0
 800bd7e:	b911      	cbnz	r1, 800bd86 <sbrk_aligned+0x12>
 800bd80:	f000 fea2 	bl	800cac8 <_sbrk_r>
 800bd84:	6030      	str	r0, [r6, #0]
 800bd86:	4621      	mov	r1, r4
 800bd88:	4628      	mov	r0, r5
 800bd8a:	f000 fe9d 	bl	800cac8 <_sbrk_r>
 800bd8e:	1c43      	adds	r3, r0, #1
 800bd90:	d103      	bne.n	800bd9a <sbrk_aligned+0x26>
 800bd92:	f04f 34ff 	mov.w	r4, #4294967295
 800bd96:	4620      	mov	r0, r4
 800bd98:	bd70      	pop	{r4, r5, r6, pc}
 800bd9a:	1cc4      	adds	r4, r0, #3
 800bd9c:	f024 0403 	bic.w	r4, r4, #3
 800bda0:	42a0      	cmp	r0, r4
 800bda2:	d0f8      	beq.n	800bd96 <sbrk_aligned+0x22>
 800bda4:	1a21      	subs	r1, r4, r0
 800bda6:	4628      	mov	r0, r5
 800bda8:	f000 fe8e 	bl	800cac8 <_sbrk_r>
 800bdac:	3001      	adds	r0, #1
 800bdae:	d1f2      	bne.n	800bd96 <sbrk_aligned+0x22>
 800bdb0:	e7ef      	b.n	800bd92 <sbrk_aligned+0x1e>
 800bdb2:	bf00      	nop
 800bdb4:	200020ec 	.word	0x200020ec

0800bdb8 <_malloc_r>:
 800bdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdbc:	1ccd      	adds	r5, r1, #3
 800bdbe:	f025 0503 	bic.w	r5, r5, #3
 800bdc2:	3508      	adds	r5, #8
 800bdc4:	2d0c      	cmp	r5, #12
 800bdc6:	bf38      	it	cc
 800bdc8:	250c      	movcc	r5, #12
 800bdca:	2d00      	cmp	r5, #0
 800bdcc:	4606      	mov	r6, r0
 800bdce:	db01      	blt.n	800bdd4 <_malloc_r+0x1c>
 800bdd0:	42a9      	cmp	r1, r5
 800bdd2:	d904      	bls.n	800bdde <_malloc_r+0x26>
 800bdd4:	230c      	movs	r3, #12
 800bdd6:	6033      	str	r3, [r6, #0]
 800bdd8:	2000      	movs	r0, #0
 800bdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800beb4 <_malloc_r+0xfc>
 800bde2:	f000 f869 	bl	800beb8 <__malloc_lock>
 800bde6:	f8d8 3000 	ldr.w	r3, [r8]
 800bdea:	461c      	mov	r4, r3
 800bdec:	bb44      	cbnz	r4, 800be40 <_malloc_r+0x88>
 800bdee:	4629      	mov	r1, r5
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	f7ff ffbf 	bl	800bd74 <sbrk_aligned>
 800bdf6:	1c43      	adds	r3, r0, #1
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	d158      	bne.n	800beae <_malloc_r+0xf6>
 800bdfc:	f8d8 4000 	ldr.w	r4, [r8]
 800be00:	4627      	mov	r7, r4
 800be02:	2f00      	cmp	r7, #0
 800be04:	d143      	bne.n	800be8e <_malloc_r+0xd6>
 800be06:	2c00      	cmp	r4, #0
 800be08:	d04b      	beq.n	800bea2 <_malloc_r+0xea>
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	4639      	mov	r1, r7
 800be0e:	4630      	mov	r0, r6
 800be10:	eb04 0903 	add.w	r9, r4, r3
 800be14:	f000 fe58 	bl	800cac8 <_sbrk_r>
 800be18:	4581      	cmp	r9, r0
 800be1a:	d142      	bne.n	800bea2 <_malloc_r+0xea>
 800be1c:	6821      	ldr	r1, [r4, #0]
 800be1e:	1a6d      	subs	r5, r5, r1
 800be20:	4629      	mov	r1, r5
 800be22:	4630      	mov	r0, r6
 800be24:	f7ff ffa6 	bl	800bd74 <sbrk_aligned>
 800be28:	3001      	adds	r0, #1
 800be2a:	d03a      	beq.n	800bea2 <_malloc_r+0xea>
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	442b      	add	r3, r5
 800be30:	6023      	str	r3, [r4, #0]
 800be32:	f8d8 3000 	ldr.w	r3, [r8]
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	bb62      	cbnz	r2, 800be94 <_malloc_r+0xdc>
 800be3a:	f8c8 7000 	str.w	r7, [r8]
 800be3e:	e00f      	b.n	800be60 <_malloc_r+0xa8>
 800be40:	6822      	ldr	r2, [r4, #0]
 800be42:	1b52      	subs	r2, r2, r5
 800be44:	d420      	bmi.n	800be88 <_malloc_r+0xd0>
 800be46:	2a0b      	cmp	r2, #11
 800be48:	d917      	bls.n	800be7a <_malloc_r+0xc2>
 800be4a:	1961      	adds	r1, r4, r5
 800be4c:	42a3      	cmp	r3, r4
 800be4e:	6025      	str	r5, [r4, #0]
 800be50:	bf18      	it	ne
 800be52:	6059      	strne	r1, [r3, #4]
 800be54:	6863      	ldr	r3, [r4, #4]
 800be56:	bf08      	it	eq
 800be58:	f8c8 1000 	streq.w	r1, [r8]
 800be5c:	5162      	str	r2, [r4, r5]
 800be5e:	604b      	str	r3, [r1, #4]
 800be60:	4630      	mov	r0, r6
 800be62:	f000 f82f 	bl	800bec4 <__malloc_unlock>
 800be66:	f104 000b 	add.w	r0, r4, #11
 800be6a:	1d23      	adds	r3, r4, #4
 800be6c:	f020 0007 	bic.w	r0, r0, #7
 800be70:	1ac2      	subs	r2, r0, r3
 800be72:	bf1c      	itt	ne
 800be74:	1a1b      	subne	r3, r3, r0
 800be76:	50a3      	strne	r3, [r4, r2]
 800be78:	e7af      	b.n	800bdda <_malloc_r+0x22>
 800be7a:	6862      	ldr	r2, [r4, #4]
 800be7c:	42a3      	cmp	r3, r4
 800be7e:	bf0c      	ite	eq
 800be80:	f8c8 2000 	streq.w	r2, [r8]
 800be84:	605a      	strne	r2, [r3, #4]
 800be86:	e7eb      	b.n	800be60 <_malloc_r+0xa8>
 800be88:	4623      	mov	r3, r4
 800be8a:	6864      	ldr	r4, [r4, #4]
 800be8c:	e7ae      	b.n	800bdec <_malloc_r+0x34>
 800be8e:	463c      	mov	r4, r7
 800be90:	687f      	ldr	r7, [r7, #4]
 800be92:	e7b6      	b.n	800be02 <_malloc_r+0x4a>
 800be94:	461a      	mov	r2, r3
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	42a3      	cmp	r3, r4
 800be9a:	d1fb      	bne.n	800be94 <_malloc_r+0xdc>
 800be9c:	2300      	movs	r3, #0
 800be9e:	6053      	str	r3, [r2, #4]
 800bea0:	e7de      	b.n	800be60 <_malloc_r+0xa8>
 800bea2:	230c      	movs	r3, #12
 800bea4:	6033      	str	r3, [r6, #0]
 800bea6:	4630      	mov	r0, r6
 800bea8:	f000 f80c 	bl	800bec4 <__malloc_unlock>
 800beac:	e794      	b.n	800bdd8 <_malloc_r+0x20>
 800beae:	6005      	str	r5, [r0, #0]
 800beb0:	e7d6      	b.n	800be60 <_malloc_r+0xa8>
 800beb2:	bf00      	nop
 800beb4:	200020f0 	.word	0x200020f0

0800beb8 <__malloc_lock>:
 800beb8:	4801      	ldr	r0, [pc, #4]	@ (800bec0 <__malloc_lock+0x8>)
 800beba:	f7ff b8ac 	b.w	800b016 <__retarget_lock_acquire_recursive>
 800bebe:	bf00      	nop
 800bec0:	200020e8 	.word	0x200020e8

0800bec4 <__malloc_unlock>:
 800bec4:	4801      	ldr	r0, [pc, #4]	@ (800becc <__malloc_unlock+0x8>)
 800bec6:	f7ff b8a7 	b.w	800b018 <__retarget_lock_release_recursive>
 800beca:	bf00      	nop
 800becc:	200020e8 	.word	0x200020e8

0800bed0 <_Balloc>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	69c6      	ldr	r6, [r0, #28]
 800bed4:	4604      	mov	r4, r0
 800bed6:	460d      	mov	r5, r1
 800bed8:	b976      	cbnz	r6, 800bef8 <_Balloc+0x28>
 800beda:	2010      	movs	r0, #16
 800bedc:	f7ff ff42 	bl	800bd64 <malloc>
 800bee0:	4602      	mov	r2, r0
 800bee2:	61e0      	str	r0, [r4, #28]
 800bee4:	b920      	cbnz	r0, 800bef0 <_Balloc+0x20>
 800bee6:	4b18      	ldr	r3, [pc, #96]	@ (800bf48 <_Balloc+0x78>)
 800bee8:	4818      	ldr	r0, [pc, #96]	@ (800bf4c <_Balloc+0x7c>)
 800beea:	216b      	movs	r1, #107	@ 0x6b
 800beec:	f000 fe0a 	bl	800cb04 <__assert_func>
 800bef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bef4:	6006      	str	r6, [r0, #0]
 800bef6:	60c6      	str	r6, [r0, #12]
 800bef8:	69e6      	ldr	r6, [r4, #28]
 800befa:	68f3      	ldr	r3, [r6, #12]
 800befc:	b183      	cbz	r3, 800bf20 <_Balloc+0x50>
 800befe:	69e3      	ldr	r3, [r4, #28]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf06:	b9b8      	cbnz	r0, 800bf38 <_Balloc+0x68>
 800bf08:	2101      	movs	r1, #1
 800bf0a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf0e:	1d72      	adds	r2, r6, #5
 800bf10:	0092      	lsls	r2, r2, #2
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 fe14 	bl	800cb40 <_calloc_r>
 800bf18:	b160      	cbz	r0, 800bf34 <_Balloc+0x64>
 800bf1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf1e:	e00e      	b.n	800bf3e <_Balloc+0x6e>
 800bf20:	2221      	movs	r2, #33	@ 0x21
 800bf22:	2104      	movs	r1, #4
 800bf24:	4620      	mov	r0, r4
 800bf26:	f000 fe0b 	bl	800cb40 <_calloc_r>
 800bf2a:	69e3      	ldr	r3, [r4, #28]
 800bf2c:	60f0      	str	r0, [r6, #12]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1e4      	bne.n	800befe <_Balloc+0x2e>
 800bf34:	2000      	movs	r0, #0
 800bf36:	bd70      	pop	{r4, r5, r6, pc}
 800bf38:	6802      	ldr	r2, [r0, #0]
 800bf3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf44:	e7f7      	b.n	800bf36 <_Balloc+0x66>
 800bf46:	bf00      	nop
 800bf48:	0800cee9 	.word	0x0800cee9
 800bf4c:	0800cf69 	.word	0x0800cf69

0800bf50 <_Bfree>:
 800bf50:	b570      	push	{r4, r5, r6, lr}
 800bf52:	69c6      	ldr	r6, [r0, #28]
 800bf54:	4605      	mov	r5, r0
 800bf56:	460c      	mov	r4, r1
 800bf58:	b976      	cbnz	r6, 800bf78 <_Bfree+0x28>
 800bf5a:	2010      	movs	r0, #16
 800bf5c:	f7ff ff02 	bl	800bd64 <malloc>
 800bf60:	4602      	mov	r2, r0
 800bf62:	61e8      	str	r0, [r5, #28]
 800bf64:	b920      	cbnz	r0, 800bf70 <_Bfree+0x20>
 800bf66:	4b09      	ldr	r3, [pc, #36]	@ (800bf8c <_Bfree+0x3c>)
 800bf68:	4809      	ldr	r0, [pc, #36]	@ (800bf90 <_Bfree+0x40>)
 800bf6a:	218f      	movs	r1, #143	@ 0x8f
 800bf6c:	f000 fdca 	bl	800cb04 <__assert_func>
 800bf70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf74:	6006      	str	r6, [r0, #0]
 800bf76:	60c6      	str	r6, [r0, #12]
 800bf78:	b13c      	cbz	r4, 800bf8a <_Bfree+0x3a>
 800bf7a:	69eb      	ldr	r3, [r5, #28]
 800bf7c:	6862      	ldr	r2, [r4, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf84:	6021      	str	r1, [r4, #0]
 800bf86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf8a:	bd70      	pop	{r4, r5, r6, pc}
 800bf8c:	0800cee9 	.word	0x0800cee9
 800bf90:	0800cf69 	.word	0x0800cf69

0800bf94 <__multadd>:
 800bf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf98:	690d      	ldr	r5, [r1, #16]
 800bf9a:	4607      	mov	r7, r0
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	461e      	mov	r6, r3
 800bfa0:	f101 0c14 	add.w	ip, r1, #20
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfaa:	b299      	uxth	r1, r3
 800bfac:	fb02 6101 	mla	r1, r2, r1, r6
 800bfb0:	0c1e      	lsrs	r6, r3, #16
 800bfb2:	0c0b      	lsrs	r3, r1, #16
 800bfb4:	fb02 3306 	mla	r3, r2, r6, r3
 800bfb8:	b289      	uxth	r1, r1
 800bfba:	3001      	adds	r0, #1
 800bfbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfc0:	4285      	cmp	r5, r0
 800bfc2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfca:	dcec      	bgt.n	800bfa6 <__multadd+0x12>
 800bfcc:	b30e      	cbz	r6, 800c012 <__multadd+0x7e>
 800bfce:	68a3      	ldr	r3, [r4, #8]
 800bfd0:	42ab      	cmp	r3, r5
 800bfd2:	dc19      	bgt.n	800c008 <__multadd+0x74>
 800bfd4:	6861      	ldr	r1, [r4, #4]
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	3101      	adds	r1, #1
 800bfda:	f7ff ff79 	bl	800bed0 <_Balloc>
 800bfde:	4680      	mov	r8, r0
 800bfe0:	b928      	cbnz	r0, 800bfee <__multadd+0x5a>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	4b0c      	ldr	r3, [pc, #48]	@ (800c018 <__multadd+0x84>)
 800bfe6:	480d      	ldr	r0, [pc, #52]	@ (800c01c <__multadd+0x88>)
 800bfe8:	21ba      	movs	r1, #186	@ 0xba
 800bfea:	f000 fd8b 	bl	800cb04 <__assert_func>
 800bfee:	6922      	ldr	r2, [r4, #16]
 800bff0:	3202      	adds	r2, #2
 800bff2:	f104 010c 	add.w	r1, r4, #12
 800bff6:	0092      	lsls	r2, r2, #2
 800bff8:	300c      	adds	r0, #12
 800bffa:	f000 fd75 	bl	800cae8 <memcpy>
 800bffe:	4621      	mov	r1, r4
 800c000:	4638      	mov	r0, r7
 800c002:	f7ff ffa5 	bl	800bf50 <_Bfree>
 800c006:	4644      	mov	r4, r8
 800c008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c00c:	3501      	adds	r5, #1
 800c00e:	615e      	str	r6, [r3, #20]
 800c010:	6125      	str	r5, [r4, #16]
 800c012:	4620      	mov	r0, r4
 800c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c018:	0800cf58 	.word	0x0800cf58
 800c01c:	0800cf69 	.word	0x0800cf69

0800c020 <__hi0bits>:
 800c020:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c024:	4603      	mov	r3, r0
 800c026:	bf36      	itet	cc
 800c028:	0403      	lslcc	r3, r0, #16
 800c02a:	2000      	movcs	r0, #0
 800c02c:	2010      	movcc	r0, #16
 800c02e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c032:	bf3c      	itt	cc
 800c034:	021b      	lslcc	r3, r3, #8
 800c036:	3008      	addcc	r0, #8
 800c038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c03c:	bf3c      	itt	cc
 800c03e:	011b      	lslcc	r3, r3, #4
 800c040:	3004      	addcc	r0, #4
 800c042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c046:	bf3c      	itt	cc
 800c048:	009b      	lslcc	r3, r3, #2
 800c04a:	3002      	addcc	r0, #2
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	db05      	blt.n	800c05c <__hi0bits+0x3c>
 800c050:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c054:	f100 0001 	add.w	r0, r0, #1
 800c058:	bf08      	it	eq
 800c05a:	2020      	moveq	r0, #32
 800c05c:	4770      	bx	lr

0800c05e <__lo0bits>:
 800c05e:	6803      	ldr	r3, [r0, #0]
 800c060:	4602      	mov	r2, r0
 800c062:	f013 0007 	ands.w	r0, r3, #7
 800c066:	d00b      	beq.n	800c080 <__lo0bits+0x22>
 800c068:	07d9      	lsls	r1, r3, #31
 800c06a:	d421      	bmi.n	800c0b0 <__lo0bits+0x52>
 800c06c:	0798      	lsls	r0, r3, #30
 800c06e:	bf49      	itett	mi
 800c070:	085b      	lsrmi	r3, r3, #1
 800c072:	089b      	lsrpl	r3, r3, #2
 800c074:	2001      	movmi	r0, #1
 800c076:	6013      	strmi	r3, [r2, #0]
 800c078:	bf5c      	itt	pl
 800c07a:	6013      	strpl	r3, [r2, #0]
 800c07c:	2002      	movpl	r0, #2
 800c07e:	4770      	bx	lr
 800c080:	b299      	uxth	r1, r3
 800c082:	b909      	cbnz	r1, 800c088 <__lo0bits+0x2a>
 800c084:	0c1b      	lsrs	r3, r3, #16
 800c086:	2010      	movs	r0, #16
 800c088:	b2d9      	uxtb	r1, r3
 800c08a:	b909      	cbnz	r1, 800c090 <__lo0bits+0x32>
 800c08c:	3008      	adds	r0, #8
 800c08e:	0a1b      	lsrs	r3, r3, #8
 800c090:	0719      	lsls	r1, r3, #28
 800c092:	bf04      	itt	eq
 800c094:	091b      	lsreq	r3, r3, #4
 800c096:	3004      	addeq	r0, #4
 800c098:	0799      	lsls	r1, r3, #30
 800c09a:	bf04      	itt	eq
 800c09c:	089b      	lsreq	r3, r3, #2
 800c09e:	3002      	addeq	r0, #2
 800c0a0:	07d9      	lsls	r1, r3, #31
 800c0a2:	d403      	bmi.n	800c0ac <__lo0bits+0x4e>
 800c0a4:	085b      	lsrs	r3, r3, #1
 800c0a6:	f100 0001 	add.w	r0, r0, #1
 800c0aa:	d003      	beq.n	800c0b4 <__lo0bits+0x56>
 800c0ac:	6013      	str	r3, [r2, #0]
 800c0ae:	4770      	bx	lr
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	4770      	bx	lr
 800c0b4:	2020      	movs	r0, #32
 800c0b6:	4770      	bx	lr

0800c0b8 <__i2b>:
 800c0b8:	b510      	push	{r4, lr}
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	2101      	movs	r1, #1
 800c0be:	f7ff ff07 	bl	800bed0 <_Balloc>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	b928      	cbnz	r0, 800c0d2 <__i2b+0x1a>
 800c0c6:	4b05      	ldr	r3, [pc, #20]	@ (800c0dc <__i2b+0x24>)
 800c0c8:	4805      	ldr	r0, [pc, #20]	@ (800c0e0 <__i2b+0x28>)
 800c0ca:	f240 1145 	movw	r1, #325	@ 0x145
 800c0ce:	f000 fd19 	bl	800cb04 <__assert_func>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	6144      	str	r4, [r0, #20]
 800c0d6:	6103      	str	r3, [r0, #16]
 800c0d8:	bd10      	pop	{r4, pc}
 800c0da:	bf00      	nop
 800c0dc:	0800cf58 	.word	0x0800cf58
 800c0e0:	0800cf69 	.word	0x0800cf69

0800c0e4 <__multiply>:
 800c0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e8:	4617      	mov	r7, r2
 800c0ea:	690a      	ldr	r2, [r1, #16]
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	bfa8      	it	ge
 800c0f2:	463b      	movge	r3, r7
 800c0f4:	4689      	mov	r9, r1
 800c0f6:	bfa4      	itt	ge
 800c0f8:	460f      	movge	r7, r1
 800c0fa:	4699      	movge	r9, r3
 800c0fc:	693d      	ldr	r5, [r7, #16]
 800c0fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	eb05 060a 	add.w	r6, r5, sl
 800c10a:	42b3      	cmp	r3, r6
 800c10c:	b085      	sub	sp, #20
 800c10e:	bfb8      	it	lt
 800c110:	3101      	addlt	r1, #1
 800c112:	f7ff fedd 	bl	800bed0 <_Balloc>
 800c116:	b930      	cbnz	r0, 800c126 <__multiply+0x42>
 800c118:	4602      	mov	r2, r0
 800c11a:	4b41      	ldr	r3, [pc, #260]	@ (800c220 <__multiply+0x13c>)
 800c11c:	4841      	ldr	r0, [pc, #260]	@ (800c224 <__multiply+0x140>)
 800c11e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c122:	f000 fcef 	bl	800cb04 <__assert_func>
 800c126:	f100 0414 	add.w	r4, r0, #20
 800c12a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c12e:	4623      	mov	r3, r4
 800c130:	2200      	movs	r2, #0
 800c132:	4573      	cmp	r3, lr
 800c134:	d320      	bcc.n	800c178 <__multiply+0x94>
 800c136:	f107 0814 	add.w	r8, r7, #20
 800c13a:	f109 0114 	add.w	r1, r9, #20
 800c13e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c142:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c146:	9302      	str	r3, [sp, #8]
 800c148:	1beb      	subs	r3, r5, r7
 800c14a:	3b15      	subs	r3, #21
 800c14c:	f023 0303 	bic.w	r3, r3, #3
 800c150:	3304      	adds	r3, #4
 800c152:	3715      	adds	r7, #21
 800c154:	42bd      	cmp	r5, r7
 800c156:	bf38      	it	cc
 800c158:	2304      	movcc	r3, #4
 800c15a:	9301      	str	r3, [sp, #4]
 800c15c:	9b02      	ldr	r3, [sp, #8]
 800c15e:	9103      	str	r1, [sp, #12]
 800c160:	428b      	cmp	r3, r1
 800c162:	d80c      	bhi.n	800c17e <__multiply+0x9a>
 800c164:	2e00      	cmp	r6, #0
 800c166:	dd03      	ble.n	800c170 <__multiply+0x8c>
 800c168:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d055      	beq.n	800c21c <__multiply+0x138>
 800c170:	6106      	str	r6, [r0, #16]
 800c172:	b005      	add	sp, #20
 800c174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c178:	f843 2b04 	str.w	r2, [r3], #4
 800c17c:	e7d9      	b.n	800c132 <__multiply+0x4e>
 800c17e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c182:	f1ba 0f00 	cmp.w	sl, #0
 800c186:	d01f      	beq.n	800c1c8 <__multiply+0xe4>
 800c188:	46c4      	mov	ip, r8
 800c18a:	46a1      	mov	r9, r4
 800c18c:	2700      	movs	r7, #0
 800c18e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c192:	f8d9 3000 	ldr.w	r3, [r9]
 800c196:	fa1f fb82 	uxth.w	fp, r2
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1a0:	443b      	add	r3, r7
 800c1a2:	f8d9 7000 	ldr.w	r7, [r9]
 800c1a6:	0c12      	lsrs	r2, r2, #16
 800c1a8:	0c3f      	lsrs	r7, r7, #16
 800c1aa:	fb0a 7202 	mla	r2, sl, r2, r7
 800c1ae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1b8:	4565      	cmp	r5, ip
 800c1ba:	f849 3b04 	str.w	r3, [r9], #4
 800c1be:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c1c2:	d8e4      	bhi.n	800c18e <__multiply+0xaa>
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	50e7      	str	r7, [r4, r3]
 800c1c8:	9b03      	ldr	r3, [sp, #12]
 800c1ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1ce:	3104      	adds	r1, #4
 800c1d0:	f1b9 0f00 	cmp.w	r9, #0
 800c1d4:	d020      	beq.n	800c218 <__multiply+0x134>
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	4647      	mov	r7, r8
 800c1da:	46a4      	mov	ip, r4
 800c1dc:	f04f 0a00 	mov.w	sl, #0
 800c1e0:	f8b7 b000 	ldrh.w	fp, [r7]
 800c1e4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c1e8:	fb09 220b 	mla	r2, r9, fp, r2
 800c1ec:	4452      	add	r2, sl
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1f4:	f84c 3b04 	str.w	r3, [ip], #4
 800c1f8:	f857 3b04 	ldr.w	r3, [r7], #4
 800c1fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c200:	f8bc 3000 	ldrh.w	r3, [ip]
 800c204:	fb09 330a 	mla	r3, r9, sl, r3
 800c208:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c20c:	42bd      	cmp	r5, r7
 800c20e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c212:	d8e5      	bhi.n	800c1e0 <__multiply+0xfc>
 800c214:	9a01      	ldr	r2, [sp, #4]
 800c216:	50a3      	str	r3, [r4, r2]
 800c218:	3404      	adds	r4, #4
 800c21a:	e79f      	b.n	800c15c <__multiply+0x78>
 800c21c:	3e01      	subs	r6, #1
 800c21e:	e7a1      	b.n	800c164 <__multiply+0x80>
 800c220:	0800cf58 	.word	0x0800cf58
 800c224:	0800cf69 	.word	0x0800cf69

0800c228 <__pow5mult>:
 800c228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c22c:	4615      	mov	r5, r2
 800c22e:	f012 0203 	ands.w	r2, r2, #3
 800c232:	4607      	mov	r7, r0
 800c234:	460e      	mov	r6, r1
 800c236:	d007      	beq.n	800c248 <__pow5mult+0x20>
 800c238:	4c25      	ldr	r4, [pc, #148]	@ (800c2d0 <__pow5mult+0xa8>)
 800c23a:	3a01      	subs	r2, #1
 800c23c:	2300      	movs	r3, #0
 800c23e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c242:	f7ff fea7 	bl	800bf94 <__multadd>
 800c246:	4606      	mov	r6, r0
 800c248:	10ad      	asrs	r5, r5, #2
 800c24a:	d03d      	beq.n	800c2c8 <__pow5mult+0xa0>
 800c24c:	69fc      	ldr	r4, [r7, #28]
 800c24e:	b97c      	cbnz	r4, 800c270 <__pow5mult+0x48>
 800c250:	2010      	movs	r0, #16
 800c252:	f7ff fd87 	bl	800bd64 <malloc>
 800c256:	4602      	mov	r2, r0
 800c258:	61f8      	str	r0, [r7, #28]
 800c25a:	b928      	cbnz	r0, 800c268 <__pow5mult+0x40>
 800c25c:	4b1d      	ldr	r3, [pc, #116]	@ (800c2d4 <__pow5mult+0xac>)
 800c25e:	481e      	ldr	r0, [pc, #120]	@ (800c2d8 <__pow5mult+0xb0>)
 800c260:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c264:	f000 fc4e 	bl	800cb04 <__assert_func>
 800c268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c26c:	6004      	str	r4, [r0, #0]
 800c26e:	60c4      	str	r4, [r0, #12]
 800c270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c278:	b94c      	cbnz	r4, 800c28e <__pow5mult+0x66>
 800c27a:	f240 2171 	movw	r1, #625	@ 0x271
 800c27e:	4638      	mov	r0, r7
 800c280:	f7ff ff1a 	bl	800c0b8 <__i2b>
 800c284:	2300      	movs	r3, #0
 800c286:	f8c8 0008 	str.w	r0, [r8, #8]
 800c28a:	4604      	mov	r4, r0
 800c28c:	6003      	str	r3, [r0, #0]
 800c28e:	f04f 0900 	mov.w	r9, #0
 800c292:	07eb      	lsls	r3, r5, #31
 800c294:	d50a      	bpl.n	800c2ac <__pow5mult+0x84>
 800c296:	4631      	mov	r1, r6
 800c298:	4622      	mov	r2, r4
 800c29a:	4638      	mov	r0, r7
 800c29c:	f7ff ff22 	bl	800c0e4 <__multiply>
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4680      	mov	r8, r0
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	f7ff fe53 	bl	800bf50 <_Bfree>
 800c2aa:	4646      	mov	r6, r8
 800c2ac:	106d      	asrs	r5, r5, #1
 800c2ae:	d00b      	beq.n	800c2c8 <__pow5mult+0xa0>
 800c2b0:	6820      	ldr	r0, [r4, #0]
 800c2b2:	b938      	cbnz	r0, 800c2c4 <__pow5mult+0x9c>
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7ff ff13 	bl	800c0e4 <__multiply>
 800c2be:	6020      	str	r0, [r4, #0]
 800c2c0:	f8c0 9000 	str.w	r9, [r0]
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	e7e4      	b.n	800c292 <__pow5mult+0x6a>
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ce:	bf00      	nop
 800c2d0:	0800d01c 	.word	0x0800d01c
 800c2d4:	0800cee9 	.word	0x0800cee9
 800c2d8:	0800cf69 	.word	0x0800cf69

0800c2dc <__lshift>:
 800c2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	6849      	ldr	r1, [r1, #4]
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2ea:	68a3      	ldr	r3, [r4, #8]
 800c2ec:	4607      	mov	r7, r0
 800c2ee:	4691      	mov	r9, r2
 800c2f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2f4:	f108 0601 	add.w	r6, r8, #1
 800c2f8:	42b3      	cmp	r3, r6
 800c2fa:	db0b      	blt.n	800c314 <__lshift+0x38>
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f7ff fde7 	bl	800bed0 <_Balloc>
 800c302:	4605      	mov	r5, r0
 800c304:	b948      	cbnz	r0, 800c31a <__lshift+0x3e>
 800c306:	4602      	mov	r2, r0
 800c308:	4b28      	ldr	r3, [pc, #160]	@ (800c3ac <__lshift+0xd0>)
 800c30a:	4829      	ldr	r0, [pc, #164]	@ (800c3b0 <__lshift+0xd4>)
 800c30c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c310:	f000 fbf8 	bl	800cb04 <__assert_func>
 800c314:	3101      	adds	r1, #1
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	e7ee      	b.n	800c2f8 <__lshift+0x1c>
 800c31a:	2300      	movs	r3, #0
 800c31c:	f100 0114 	add.w	r1, r0, #20
 800c320:	f100 0210 	add.w	r2, r0, #16
 800c324:	4618      	mov	r0, r3
 800c326:	4553      	cmp	r3, sl
 800c328:	db33      	blt.n	800c392 <__lshift+0xb6>
 800c32a:	6920      	ldr	r0, [r4, #16]
 800c32c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c330:	f104 0314 	add.w	r3, r4, #20
 800c334:	f019 091f 	ands.w	r9, r9, #31
 800c338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c33c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c340:	d02b      	beq.n	800c39a <__lshift+0xbe>
 800c342:	f1c9 0e20 	rsb	lr, r9, #32
 800c346:	468a      	mov	sl, r1
 800c348:	2200      	movs	r2, #0
 800c34a:	6818      	ldr	r0, [r3, #0]
 800c34c:	fa00 f009 	lsl.w	r0, r0, r9
 800c350:	4310      	orrs	r0, r2
 800c352:	f84a 0b04 	str.w	r0, [sl], #4
 800c356:	f853 2b04 	ldr.w	r2, [r3], #4
 800c35a:	459c      	cmp	ip, r3
 800c35c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c360:	d8f3      	bhi.n	800c34a <__lshift+0x6e>
 800c362:	ebac 0304 	sub.w	r3, ip, r4
 800c366:	3b15      	subs	r3, #21
 800c368:	f023 0303 	bic.w	r3, r3, #3
 800c36c:	3304      	adds	r3, #4
 800c36e:	f104 0015 	add.w	r0, r4, #21
 800c372:	4560      	cmp	r0, ip
 800c374:	bf88      	it	hi
 800c376:	2304      	movhi	r3, #4
 800c378:	50ca      	str	r2, [r1, r3]
 800c37a:	b10a      	cbz	r2, 800c380 <__lshift+0xa4>
 800c37c:	f108 0602 	add.w	r6, r8, #2
 800c380:	3e01      	subs	r6, #1
 800c382:	4638      	mov	r0, r7
 800c384:	612e      	str	r6, [r5, #16]
 800c386:	4621      	mov	r1, r4
 800c388:	f7ff fde2 	bl	800bf50 <_Bfree>
 800c38c:	4628      	mov	r0, r5
 800c38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c392:	f842 0f04 	str.w	r0, [r2, #4]!
 800c396:	3301      	adds	r3, #1
 800c398:	e7c5      	b.n	800c326 <__lshift+0x4a>
 800c39a:	3904      	subs	r1, #4
 800c39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3a4:	459c      	cmp	ip, r3
 800c3a6:	d8f9      	bhi.n	800c39c <__lshift+0xc0>
 800c3a8:	e7ea      	b.n	800c380 <__lshift+0xa4>
 800c3aa:	bf00      	nop
 800c3ac:	0800cf58 	.word	0x0800cf58
 800c3b0:	0800cf69 	.word	0x0800cf69

0800c3b4 <__mcmp>:
 800c3b4:	690a      	ldr	r2, [r1, #16]
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	6900      	ldr	r0, [r0, #16]
 800c3ba:	1a80      	subs	r0, r0, r2
 800c3bc:	b530      	push	{r4, r5, lr}
 800c3be:	d10e      	bne.n	800c3de <__mcmp+0x2a>
 800c3c0:	3314      	adds	r3, #20
 800c3c2:	3114      	adds	r1, #20
 800c3c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3d4:	4295      	cmp	r5, r2
 800c3d6:	d003      	beq.n	800c3e0 <__mcmp+0x2c>
 800c3d8:	d205      	bcs.n	800c3e6 <__mcmp+0x32>
 800c3da:	f04f 30ff 	mov.w	r0, #4294967295
 800c3de:	bd30      	pop	{r4, r5, pc}
 800c3e0:	42a3      	cmp	r3, r4
 800c3e2:	d3f3      	bcc.n	800c3cc <__mcmp+0x18>
 800c3e4:	e7fb      	b.n	800c3de <__mcmp+0x2a>
 800c3e6:	2001      	movs	r0, #1
 800c3e8:	e7f9      	b.n	800c3de <__mcmp+0x2a>
	...

0800c3ec <__mdiff>:
 800c3ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	4689      	mov	r9, r1
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4648      	mov	r0, r9
 800c3f8:	4614      	mov	r4, r2
 800c3fa:	f7ff ffdb 	bl	800c3b4 <__mcmp>
 800c3fe:	1e05      	subs	r5, r0, #0
 800c400:	d112      	bne.n	800c428 <__mdiff+0x3c>
 800c402:	4629      	mov	r1, r5
 800c404:	4630      	mov	r0, r6
 800c406:	f7ff fd63 	bl	800bed0 <_Balloc>
 800c40a:	4602      	mov	r2, r0
 800c40c:	b928      	cbnz	r0, 800c41a <__mdiff+0x2e>
 800c40e:	4b3f      	ldr	r3, [pc, #252]	@ (800c50c <__mdiff+0x120>)
 800c410:	f240 2137 	movw	r1, #567	@ 0x237
 800c414:	483e      	ldr	r0, [pc, #248]	@ (800c510 <__mdiff+0x124>)
 800c416:	f000 fb75 	bl	800cb04 <__assert_func>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c420:	4610      	mov	r0, r2
 800c422:	b003      	add	sp, #12
 800c424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c428:	bfbc      	itt	lt
 800c42a:	464b      	movlt	r3, r9
 800c42c:	46a1      	movlt	r9, r4
 800c42e:	4630      	mov	r0, r6
 800c430:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c434:	bfba      	itte	lt
 800c436:	461c      	movlt	r4, r3
 800c438:	2501      	movlt	r5, #1
 800c43a:	2500      	movge	r5, #0
 800c43c:	f7ff fd48 	bl	800bed0 <_Balloc>
 800c440:	4602      	mov	r2, r0
 800c442:	b918      	cbnz	r0, 800c44c <__mdiff+0x60>
 800c444:	4b31      	ldr	r3, [pc, #196]	@ (800c50c <__mdiff+0x120>)
 800c446:	f240 2145 	movw	r1, #581	@ 0x245
 800c44a:	e7e3      	b.n	800c414 <__mdiff+0x28>
 800c44c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c450:	6926      	ldr	r6, [r4, #16]
 800c452:	60c5      	str	r5, [r0, #12]
 800c454:	f109 0310 	add.w	r3, r9, #16
 800c458:	f109 0514 	add.w	r5, r9, #20
 800c45c:	f104 0e14 	add.w	lr, r4, #20
 800c460:	f100 0b14 	add.w	fp, r0, #20
 800c464:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c468:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c46c:	9301      	str	r3, [sp, #4]
 800c46e:	46d9      	mov	r9, fp
 800c470:	f04f 0c00 	mov.w	ip, #0
 800c474:	9b01      	ldr	r3, [sp, #4]
 800c476:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c47a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c47e:	9301      	str	r3, [sp, #4]
 800c480:	fa1f f38a 	uxth.w	r3, sl
 800c484:	4619      	mov	r1, r3
 800c486:	b283      	uxth	r3, r0
 800c488:	1acb      	subs	r3, r1, r3
 800c48a:	0c00      	lsrs	r0, r0, #16
 800c48c:	4463      	add	r3, ip
 800c48e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c492:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c496:	b29b      	uxth	r3, r3
 800c498:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c49c:	4576      	cmp	r6, lr
 800c49e:	f849 3b04 	str.w	r3, [r9], #4
 800c4a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4a6:	d8e5      	bhi.n	800c474 <__mdiff+0x88>
 800c4a8:	1b33      	subs	r3, r6, r4
 800c4aa:	3b15      	subs	r3, #21
 800c4ac:	f023 0303 	bic.w	r3, r3, #3
 800c4b0:	3415      	adds	r4, #21
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	42a6      	cmp	r6, r4
 800c4b6:	bf38      	it	cc
 800c4b8:	2304      	movcc	r3, #4
 800c4ba:	441d      	add	r5, r3
 800c4bc:	445b      	add	r3, fp
 800c4be:	461e      	mov	r6, r3
 800c4c0:	462c      	mov	r4, r5
 800c4c2:	4544      	cmp	r4, r8
 800c4c4:	d30e      	bcc.n	800c4e4 <__mdiff+0xf8>
 800c4c6:	f108 0103 	add.w	r1, r8, #3
 800c4ca:	1b49      	subs	r1, r1, r5
 800c4cc:	f021 0103 	bic.w	r1, r1, #3
 800c4d0:	3d03      	subs	r5, #3
 800c4d2:	45a8      	cmp	r8, r5
 800c4d4:	bf38      	it	cc
 800c4d6:	2100      	movcc	r1, #0
 800c4d8:	440b      	add	r3, r1
 800c4da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4de:	b191      	cbz	r1, 800c506 <__mdiff+0x11a>
 800c4e0:	6117      	str	r7, [r2, #16]
 800c4e2:	e79d      	b.n	800c420 <__mdiff+0x34>
 800c4e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4e8:	46e6      	mov	lr, ip
 800c4ea:	0c08      	lsrs	r0, r1, #16
 800c4ec:	fa1c fc81 	uxtah	ip, ip, r1
 800c4f0:	4471      	add	r1, lr
 800c4f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c4f6:	b289      	uxth	r1, r1
 800c4f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c4fc:	f846 1b04 	str.w	r1, [r6], #4
 800c500:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c504:	e7dd      	b.n	800c4c2 <__mdiff+0xd6>
 800c506:	3f01      	subs	r7, #1
 800c508:	e7e7      	b.n	800c4da <__mdiff+0xee>
 800c50a:	bf00      	nop
 800c50c:	0800cf58 	.word	0x0800cf58
 800c510:	0800cf69 	.word	0x0800cf69

0800c514 <__d2b>:
 800c514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c518:	460f      	mov	r7, r1
 800c51a:	2101      	movs	r1, #1
 800c51c:	ec59 8b10 	vmov	r8, r9, d0
 800c520:	4616      	mov	r6, r2
 800c522:	f7ff fcd5 	bl	800bed0 <_Balloc>
 800c526:	4604      	mov	r4, r0
 800c528:	b930      	cbnz	r0, 800c538 <__d2b+0x24>
 800c52a:	4602      	mov	r2, r0
 800c52c:	4b23      	ldr	r3, [pc, #140]	@ (800c5bc <__d2b+0xa8>)
 800c52e:	4824      	ldr	r0, [pc, #144]	@ (800c5c0 <__d2b+0xac>)
 800c530:	f240 310f 	movw	r1, #783	@ 0x30f
 800c534:	f000 fae6 	bl	800cb04 <__assert_func>
 800c538:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c53c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c540:	b10d      	cbz	r5, 800c546 <__d2b+0x32>
 800c542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	f1b8 0300 	subs.w	r3, r8, #0
 800c54c:	d023      	beq.n	800c596 <__d2b+0x82>
 800c54e:	4668      	mov	r0, sp
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	f7ff fd84 	bl	800c05e <__lo0bits>
 800c556:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c55a:	b1d0      	cbz	r0, 800c592 <__d2b+0x7e>
 800c55c:	f1c0 0320 	rsb	r3, r0, #32
 800c560:	fa02 f303 	lsl.w	r3, r2, r3
 800c564:	430b      	orrs	r3, r1
 800c566:	40c2      	lsrs	r2, r0
 800c568:	6163      	str	r3, [r4, #20]
 800c56a:	9201      	str	r2, [sp, #4]
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	61a3      	str	r3, [r4, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	bf0c      	ite	eq
 800c574:	2201      	moveq	r2, #1
 800c576:	2202      	movne	r2, #2
 800c578:	6122      	str	r2, [r4, #16]
 800c57a:	b1a5      	cbz	r5, 800c5a6 <__d2b+0x92>
 800c57c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c580:	4405      	add	r5, r0
 800c582:	603d      	str	r5, [r7, #0]
 800c584:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c588:	6030      	str	r0, [r6, #0]
 800c58a:	4620      	mov	r0, r4
 800c58c:	b003      	add	sp, #12
 800c58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c592:	6161      	str	r1, [r4, #20]
 800c594:	e7ea      	b.n	800c56c <__d2b+0x58>
 800c596:	a801      	add	r0, sp, #4
 800c598:	f7ff fd61 	bl	800c05e <__lo0bits>
 800c59c:	9b01      	ldr	r3, [sp, #4]
 800c59e:	6163      	str	r3, [r4, #20]
 800c5a0:	3020      	adds	r0, #32
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	e7e8      	b.n	800c578 <__d2b+0x64>
 800c5a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c5ae:	6038      	str	r0, [r7, #0]
 800c5b0:	6918      	ldr	r0, [r3, #16]
 800c5b2:	f7ff fd35 	bl	800c020 <__hi0bits>
 800c5b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5ba:	e7e5      	b.n	800c588 <__d2b+0x74>
 800c5bc:	0800cf58 	.word	0x0800cf58
 800c5c0:	0800cf69 	.word	0x0800cf69

0800c5c4 <__sfputc_r>:
 800c5c4:	6893      	ldr	r3, [r2, #8]
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	b410      	push	{r4}
 800c5cc:	6093      	str	r3, [r2, #8]
 800c5ce:	da08      	bge.n	800c5e2 <__sfputc_r+0x1e>
 800c5d0:	6994      	ldr	r4, [r2, #24]
 800c5d2:	42a3      	cmp	r3, r4
 800c5d4:	db01      	blt.n	800c5da <__sfputc_r+0x16>
 800c5d6:	290a      	cmp	r1, #10
 800c5d8:	d103      	bne.n	800c5e2 <__sfputc_r+0x1e>
 800c5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5de:	f000 b9df 	b.w	800c9a0 <__swbuf_r>
 800c5e2:	6813      	ldr	r3, [r2, #0]
 800c5e4:	1c58      	adds	r0, r3, #1
 800c5e6:	6010      	str	r0, [r2, #0]
 800c5e8:	7019      	strb	r1, [r3, #0]
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <__sfputs_r>:
 800c5f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	460f      	mov	r7, r1
 800c5f8:	4614      	mov	r4, r2
 800c5fa:	18d5      	adds	r5, r2, r3
 800c5fc:	42ac      	cmp	r4, r5
 800c5fe:	d101      	bne.n	800c604 <__sfputs_r+0x12>
 800c600:	2000      	movs	r0, #0
 800c602:	e007      	b.n	800c614 <__sfputs_r+0x22>
 800c604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c608:	463a      	mov	r2, r7
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7ff ffda 	bl	800c5c4 <__sfputc_r>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d1f3      	bne.n	800c5fc <__sfputs_r+0xa>
 800c614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c618 <_vfiprintf_r>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	460d      	mov	r5, r1
 800c61e:	b09d      	sub	sp, #116	@ 0x74
 800c620:	4614      	mov	r4, r2
 800c622:	4698      	mov	r8, r3
 800c624:	4606      	mov	r6, r0
 800c626:	b118      	cbz	r0, 800c630 <_vfiprintf_r+0x18>
 800c628:	6a03      	ldr	r3, [r0, #32]
 800c62a:	b90b      	cbnz	r3, 800c630 <_vfiprintf_r+0x18>
 800c62c:	f7fe fbea 	bl	800ae04 <__sinit>
 800c630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c632:	07d9      	lsls	r1, r3, #31
 800c634:	d405      	bmi.n	800c642 <_vfiprintf_r+0x2a>
 800c636:	89ab      	ldrh	r3, [r5, #12]
 800c638:	059a      	lsls	r2, r3, #22
 800c63a:	d402      	bmi.n	800c642 <_vfiprintf_r+0x2a>
 800c63c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c63e:	f7fe fcea 	bl	800b016 <__retarget_lock_acquire_recursive>
 800c642:	89ab      	ldrh	r3, [r5, #12]
 800c644:	071b      	lsls	r3, r3, #28
 800c646:	d501      	bpl.n	800c64c <_vfiprintf_r+0x34>
 800c648:	692b      	ldr	r3, [r5, #16]
 800c64a:	b99b      	cbnz	r3, 800c674 <_vfiprintf_r+0x5c>
 800c64c:	4629      	mov	r1, r5
 800c64e:	4630      	mov	r0, r6
 800c650:	f000 f9e4 	bl	800ca1c <__swsetup_r>
 800c654:	b170      	cbz	r0, 800c674 <_vfiprintf_r+0x5c>
 800c656:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c658:	07dc      	lsls	r4, r3, #31
 800c65a:	d504      	bpl.n	800c666 <_vfiprintf_r+0x4e>
 800c65c:	f04f 30ff 	mov.w	r0, #4294967295
 800c660:	b01d      	add	sp, #116	@ 0x74
 800c662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c666:	89ab      	ldrh	r3, [r5, #12]
 800c668:	0598      	lsls	r0, r3, #22
 800c66a:	d4f7      	bmi.n	800c65c <_vfiprintf_r+0x44>
 800c66c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c66e:	f7fe fcd3 	bl	800b018 <__retarget_lock_release_recursive>
 800c672:	e7f3      	b.n	800c65c <_vfiprintf_r+0x44>
 800c674:	2300      	movs	r3, #0
 800c676:	9309      	str	r3, [sp, #36]	@ 0x24
 800c678:	2320      	movs	r3, #32
 800c67a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c67e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c682:	2330      	movs	r3, #48	@ 0x30
 800c684:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c834 <_vfiprintf_r+0x21c>
 800c688:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c68c:	f04f 0901 	mov.w	r9, #1
 800c690:	4623      	mov	r3, r4
 800c692:	469a      	mov	sl, r3
 800c694:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c698:	b10a      	cbz	r2, 800c69e <_vfiprintf_r+0x86>
 800c69a:	2a25      	cmp	r2, #37	@ 0x25
 800c69c:	d1f9      	bne.n	800c692 <_vfiprintf_r+0x7a>
 800c69e:	ebba 0b04 	subs.w	fp, sl, r4
 800c6a2:	d00b      	beq.n	800c6bc <_vfiprintf_r+0xa4>
 800c6a4:	465b      	mov	r3, fp
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f7ff ffa1 	bl	800c5f2 <__sfputs_r>
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	f000 80a7 	beq.w	800c804 <_vfiprintf_r+0x1ec>
 800c6b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6b8:	445a      	add	r2, fp
 800c6ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f000 809f 	beq.w	800c804 <_vfiprintf_r+0x1ec>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6d0:	f10a 0a01 	add.w	sl, sl, #1
 800c6d4:	9304      	str	r3, [sp, #16]
 800c6d6:	9307      	str	r3, [sp, #28]
 800c6d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6de:	4654      	mov	r4, sl
 800c6e0:	2205      	movs	r2, #5
 800c6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e6:	4853      	ldr	r0, [pc, #332]	@ (800c834 <_vfiprintf_r+0x21c>)
 800c6e8:	f7f3 fd7a 	bl	80001e0 <memchr>
 800c6ec:	9a04      	ldr	r2, [sp, #16]
 800c6ee:	b9d8      	cbnz	r0, 800c728 <_vfiprintf_r+0x110>
 800c6f0:	06d1      	lsls	r1, r2, #27
 800c6f2:	bf44      	itt	mi
 800c6f4:	2320      	movmi	r3, #32
 800c6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6fa:	0713      	lsls	r3, r2, #28
 800c6fc:	bf44      	itt	mi
 800c6fe:	232b      	movmi	r3, #43	@ 0x2b
 800c700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c704:	f89a 3000 	ldrb.w	r3, [sl]
 800c708:	2b2a      	cmp	r3, #42	@ 0x2a
 800c70a:	d015      	beq.n	800c738 <_vfiprintf_r+0x120>
 800c70c:	9a07      	ldr	r2, [sp, #28]
 800c70e:	4654      	mov	r4, sl
 800c710:	2000      	movs	r0, #0
 800c712:	f04f 0c0a 	mov.w	ip, #10
 800c716:	4621      	mov	r1, r4
 800c718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c71c:	3b30      	subs	r3, #48	@ 0x30
 800c71e:	2b09      	cmp	r3, #9
 800c720:	d94b      	bls.n	800c7ba <_vfiprintf_r+0x1a2>
 800c722:	b1b0      	cbz	r0, 800c752 <_vfiprintf_r+0x13a>
 800c724:	9207      	str	r2, [sp, #28]
 800c726:	e014      	b.n	800c752 <_vfiprintf_r+0x13a>
 800c728:	eba0 0308 	sub.w	r3, r0, r8
 800c72c:	fa09 f303 	lsl.w	r3, r9, r3
 800c730:	4313      	orrs	r3, r2
 800c732:	9304      	str	r3, [sp, #16]
 800c734:	46a2      	mov	sl, r4
 800c736:	e7d2      	b.n	800c6de <_vfiprintf_r+0xc6>
 800c738:	9b03      	ldr	r3, [sp, #12]
 800c73a:	1d19      	adds	r1, r3, #4
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	9103      	str	r1, [sp, #12]
 800c740:	2b00      	cmp	r3, #0
 800c742:	bfbb      	ittet	lt
 800c744:	425b      	neglt	r3, r3
 800c746:	f042 0202 	orrlt.w	r2, r2, #2
 800c74a:	9307      	strge	r3, [sp, #28]
 800c74c:	9307      	strlt	r3, [sp, #28]
 800c74e:	bfb8      	it	lt
 800c750:	9204      	strlt	r2, [sp, #16]
 800c752:	7823      	ldrb	r3, [r4, #0]
 800c754:	2b2e      	cmp	r3, #46	@ 0x2e
 800c756:	d10a      	bne.n	800c76e <_vfiprintf_r+0x156>
 800c758:	7863      	ldrb	r3, [r4, #1]
 800c75a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c75c:	d132      	bne.n	800c7c4 <_vfiprintf_r+0x1ac>
 800c75e:	9b03      	ldr	r3, [sp, #12]
 800c760:	1d1a      	adds	r2, r3, #4
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	9203      	str	r2, [sp, #12]
 800c766:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c76a:	3402      	adds	r4, #2
 800c76c:	9305      	str	r3, [sp, #20]
 800c76e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c844 <_vfiprintf_r+0x22c>
 800c772:	7821      	ldrb	r1, [r4, #0]
 800c774:	2203      	movs	r2, #3
 800c776:	4650      	mov	r0, sl
 800c778:	f7f3 fd32 	bl	80001e0 <memchr>
 800c77c:	b138      	cbz	r0, 800c78e <_vfiprintf_r+0x176>
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	eba0 000a 	sub.w	r0, r0, sl
 800c784:	2240      	movs	r2, #64	@ 0x40
 800c786:	4082      	lsls	r2, r0
 800c788:	4313      	orrs	r3, r2
 800c78a:	3401      	adds	r4, #1
 800c78c:	9304      	str	r3, [sp, #16]
 800c78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c792:	4829      	ldr	r0, [pc, #164]	@ (800c838 <_vfiprintf_r+0x220>)
 800c794:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c798:	2206      	movs	r2, #6
 800c79a:	f7f3 fd21 	bl	80001e0 <memchr>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d03f      	beq.n	800c822 <_vfiprintf_r+0x20a>
 800c7a2:	4b26      	ldr	r3, [pc, #152]	@ (800c83c <_vfiprintf_r+0x224>)
 800c7a4:	bb1b      	cbnz	r3, 800c7ee <_vfiprintf_r+0x1d6>
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	3307      	adds	r3, #7
 800c7aa:	f023 0307 	bic.w	r3, r3, #7
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	9303      	str	r3, [sp, #12]
 800c7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7b4:	443b      	add	r3, r7
 800c7b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7b8:	e76a      	b.n	800c690 <_vfiprintf_r+0x78>
 800c7ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7be:	460c      	mov	r4, r1
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	e7a8      	b.n	800c716 <_vfiprintf_r+0xfe>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	3401      	adds	r4, #1
 800c7c8:	9305      	str	r3, [sp, #20]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	f04f 0c0a 	mov.w	ip, #10
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7d6:	3a30      	subs	r2, #48	@ 0x30
 800c7d8:	2a09      	cmp	r2, #9
 800c7da:	d903      	bls.n	800c7e4 <_vfiprintf_r+0x1cc>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d0c6      	beq.n	800c76e <_vfiprintf_r+0x156>
 800c7e0:	9105      	str	r1, [sp, #20]
 800c7e2:	e7c4      	b.n	800c76e <_vfiprintf_r+0x156>
 800c7e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e7f0      	b.n	800c7d0 <_vfiprintf_r+0x1b8>
 800c7ee:	ab03      	add	r3, sp, #12
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	462a      	mov	r2, r5
 800c7f4:	4b12      	ldr	r3, [pc, #72]	@ (800c840 <_vfiprintf_r+0x228>)
 800c7f6:	a904      	add	r1, sp, #16
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f7fd fec1 	bl	800a580 <_printf_float>
 800c7fe:	4607      	mov	r7, r0
 800c800:	1c78      	adds	r0, r7, #1
 800c802:	d1d6      	bne.n	800c7b2 <_vfiprintf_r+0x19a>
 800c804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c806:	07d9      	lsls	r1, r3, #31
 800c808:	d405      	bmi.n	800c816 <_vfiprintf_r+0x1fe>
 800c80a:	89ab      	ldrh	r3, [r5, #12]
 800c80c:	059a      	lsls	r2, r3, #22
 800c80e:	d402      	bmi.n	800c816 <_vfiprintf_r+0x1fe>
 800c810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c812:	f7fe fc01 	bl	800b018 <__retarget_lock_release_recursive>
 800c816:	89ab      	ldrh	r3, [r5, #12]
 800c818:	065b      	lsls	r3, r3, #25
 800c81a:	f53f af1f 	bmi.w	800c65c <_vfiprintf_r+0x44>
 800c81e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c820:	e71e      	b.n	800c660 <_vfiprintf_r+0x48>
 800c822:	ab03      	add	r3, sp, #12
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	462a      	mov	r2, r5
 800c828:	4b05      	ldr	r3, [pc, #20]	@ (800c840 <_vfiprintf_r+0x228>)
 800c82a:	a904      	add	r1, sp, #16
 800c82c:	4630      	mov	r0, r6
 800c82e:	f7fe f93f 	bl	800aab0 <_printf_i>
 800c832:	e7e4      	b.n	800c7fe <_vfiprintf_r+0x1e6>
 800c834:	0800cfc2 	.word	0x0800cfc2
 800c838:	0800cfcc 	.word	0x0800cfcc
 800c83c:	0800a581 	.word	0x0800a581
 800c840:	0800c5f3 	.word	0x0800c5f3
 800c844:	0800cfc8 	.word	0x0800cfc8

0800c848 <__sflush_r>:
 800c848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c850:	0716      	lsls	r6, r2, #28
 800c852:	4605      	mov	r5, r0
 800c854:	460c      	mov	r4, r1
 800c856:	d454      	bmi.n	800c902 <__sflush_r+0xba>
 800c858:	684b      	ldr	r3, [r1, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	dc02      	bgt.n	800c864 <__sflush_r+0x1c>
 800c85e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c860:	2b00      	cmp	r3, #0
 800c862:	dd48      	ble.n	800c8f6 <__sflush_r+0xae>
 800c864:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c866:	2e00      	cmp	r6, #0
 800c868:	d045      	beq.n	800c8f6 <__sflush_r+0xae>
 800c86a:	2300      	movs	r3, #0
 800c86c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c870:	682f      	ldr	r7, [r5, #0]
 800c872:	6a21      	ldr	r1, [r4, #32]
 800c874:	602b      	str	r3, [r5, #0]
 800c876:	d030      	beq.n	800c8da <__sflush_r+0x92>
 800c878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	0759      	lsls	r1, r3, #29
 800c87e:	d505      	bpl.n	800c88c <__sflush_r+0x44>
 800c880:	6863      	ldr	r3, [r4, #4]
 800c882:	1ad2      	subs	r2, r2, r3
 800c884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c886:	b10b      	cbz	r3, 800c88c <__sflush_r+0x44>
 800c888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c88a:	1ad2      	subs	r2, r2, r3
 800c88c:	2300      	movs	r3, #0
 800c88e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c890:	6a21      	ldr	r1, [r4, #32]
 800c892:	4628      	mov	r0, r5
 800c894:	47b0      	blx	r6
 800c896:	1c43      	adds	r3, r0, #1
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	d106      	bne.n	800c8aa <__sflush_r+0x62>
 800c89c:	6829      	ldr	r1, [r5, #0]
 800c89e:	291d      	cmp	r1, #29
 800c8a0:	d82b      	bhi.n	800c8fa <__sflush_r+0xb2>
 800c8a2:	4a2a      	ldr	r2, [pc, #168]	@ (800c94c <__sflush_r+0x104>)
 800c8a4:	40ca      	lsrs	r2, r1
 800c8a6:	07d6      	lsls	r6, r2, #31
 800c8a8:	d527      	bpl.n	800c8fa <__sflush_r+0xb2>
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	6062      	str	r2, [r4, #4]
 800c8ae:	04d9      	lsls	r1, r3, #19
 800c8b0:	6922      	ldr	r2, [r4, #16]
 800c8b2:	6022      	str	r2, [r4, #0]
 800c8b4:	d504      	bpl.n	800c8c0 <__sflush_r+0x78>
 800c8b6:	1c42      	adds	r2, r0, #1
 800c8b8:	d101      	bne.n	800c8be <__sflush_r+0x76>
 800c8ba:	682b      	ldr	r3, [r5, #0]
 800c8bc:	b903      	cbnz	r3, 800c8c0 <__sflush_r+0x78>
 800c8be:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8c2:	602f      	str	r7, [r5, #0]
 800c8c4:	b1b9      	cbz	r1, 800c8f6 <__sflush_r+0xae>
 800c8c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8ca:	4299      	cmp	r1, r3
 800c8cc:	d002      	beq.n	800c8d4 <__sflush_r+0x8c>
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	f7ff f9fe 	bl	800bcd0 <_free_r>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8d8:	e00d      	b.n	800c8f6 <__sflush_r+0xae>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	4628      	mov	r0, r5
 800c8de:	47b0      	blx	r6
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	1c50      	adds	r0, r2, #1
 800c8e4:	d1c9      	bne.n	800c87a <__sflush_r+0x32>
 800c8e6:	682b      	ldr	r3, [r5, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d0c6      	beq.n	800c87a <__sflush_r+0x32>
 800c8ec:	2b1d      	cmp	r3, #29
 800c8ee:	d001      	beq.n	800c8f4 <__sflush_r+0xac>
 800c8f0:	2b16      	cmp	r3, #22
 800c8f2:	d11e      	bne.n	800c932 <__sflush_r+0xea>
 800c8f4:	602f      	str	r7, [r5, #0]
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	e022      	b.n	800c940 <__sflush_r+0xf8>
 800c8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8fe:	b21b      	sxth	r3, r3
 800c900:	e01b      	b.n	800c93a <__sflush_r+0xf2>
 800c902:	690f      	ldr	r7, [r1, #16]
 800c904:	2f00      	cmp	r7, #0
 800c906:	d0f6      	beq.n	800c8f6 <__sflush_r+0xae>
 800c908:	0793      	lsls	r3, r2, #30
 800c90a:	680e      	ldr	r6, [r1, #0]
 800c90c:	bf08      	it	eq
 800c90e:	694b      	ldreq	r3, [r1, #20]
 800c910:	600f      	str	r7, [r1, #0]
 800c912:	bf18      	it	ne
 800c914:	2300      	movne	r3, #0
 800c916:	eba6 0807 	sub.w	r8, r6, r7
 800c91a:	608b      	str	r3, [r1, #8]
 800c91c:	f1b8 0f00 	cmp.w	r8, #0
 800c920:	dde9      	ble.n	800c8f6 <__sflush_r+0xae>
 800c922:	6a21      	ldr	r1, [r4, #32]
 800c924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c926:	4643      	mov	r3, r8
 800c928:	463a      	mov	r2, r7
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b0      	blx	r6
 800c92e:	2800      	cmp	r0, #0
 800c930:	dc08      	bgt.n	800c944 <__sflush_r+0xfc>
 800c932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c93a:	81a3      	strh	r3, [r4, #12]
 800c93c:	f04f 30ff 	mov.w	r0, #4294967295
 800c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c944:	4407      	add	r7, r0
 800c946:	eba8 0800 	sub.w	r8, r8, r0
 800c94a:	e7e7      	b.n	800c91c <__sflush_r+0xd4>
 800c94c:	20400001 	.word	0x20400001

0800c950 <_fflush_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	690b      	ldr	r3, [r1, #16]
 800c954:	4605      	mov	r5, r0
 800c956:	460c      	mov	r4, r1
 800c958:	b913      	cbnz	r3, 800c960 <_fflush_r+0x10>
 800c95a:	2500      	movs	r5, #0
 800c95c:	4628      	mov	r0, r5
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	b118      	cbz	r0, 800c96a <_fflush_r+0x1a>
 800c962:	6a03      	ldr	r3, [r0, #32]
 800c964:	b90b      	cbnz	r3, 800c96a <_fflush_r+0x1a>
 800c966:	f7fe fa4d 	bl	800ae04 <__sinit>
 800c96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0f3      	beq.n	800c95a <_fflush_r+0xa>
 800c972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c974:	07d0      	lsls	r0, r2, #31
 800c976:	d404      	bmi.n	800c982 <_fflush_r+0x32>
 800c978:	0599      	lsls	r1, r3, #22
 800c97a:	d402      	bmi.n	800c982 <_fflush_r+0x32>
 800c97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c97e:	f7fe fb4a 	bl	800b016 <__retarget_lock_acquire_recursive>
 800c982:	4628      	mov	r0, r5
 800c984:	4621      	mov	r1, r4
 800c986:	f7ff ff5f 	bl	800c848 <__sflush_r>
 800c98a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c98c:	07da      	lsls	r2, r3, #31
 800c98e:	4605      	mov	r5, r0
 800c990:	d4e4      	bmi.n	800c95c <_fflush_r+0xc>
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	059b      	lsls	r3, r3, #22
 800c996:	d4e1      	bmi.n	800c95c <_fflush_r+0xc>
 800c998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c99a:	f7fe fb3d 	bl	800b018 <__retarget_lock_release_recursive>
 800c99e:	e7dd      	b.n	800c95c <_fflush_r+0xc>

0800c9a0 <__swbuf_r>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	460e      	mov	r6, r1
 800c9a4:	4614      	mov	r4, r2
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	b118      	cbz	r0, 800c9b2 <__swbuf_r+0x12>
 800c9aa:	6a03      	ldr	r3, [r0, #32]
 800c9ac:	b90b      	cbnz	r3, 800c9b2 <__swbuf_r+0x12>
 800c9ae:	f7fe fa29 	bl	800ae04 <__sinit>
 800c9b2:	69a3      	ldr	r3, [r4, #24]
 800c9b4:	60a3      	str	r3, [r4, #8]
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	071a      	lsls	r2, r3, #28
 800c9ba:	d501      	bpl.n	800c9c0 <__swbuf_r+0x20>
 800c9bc:	6923      	ldr	r3, [r4, #16]
 800c9be:	b943      	cbnz	r3, 800c9d2 <__swbuf_r+0x32>
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f000 f82a 	bl	800ca1c <__swsetup_r>
 800c9c8:	b118      	cbz	r0, 800c9d2 <__swbuf_r+0x32>
 800c9ca:	f04f 37ff 	mov.w	r7, #4294967295
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	6922      	ldr	r2, [r4, #16]
 800c9d6:	1a98      	subs	r0, r3, r2
 800c9d8:	6963      	ldr	r3, [r4, #20]
 800c9da:	b2f6      	uxtb	r6, r6
 800c9dc:	4283      	cmp	r3, r0
 800c9de:	4637      	mov	r7, r6
 800c9e0:	dc05      	bgt.n	800c9ee <__swbuf_r+0x4e>
 800c9e2:	4621      	mov	r1, r4
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	f7ff ffb3 	bl	800c950 <_fflush_r>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d1ed      	bne.n	800c9ca <__swbuf_r+0x2a>
 800c9ee:	68a3      	ldr	r3, [r4, #8]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	60a3      	str	r3, [r4, #8]
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	1c5a      	adds	r2, r3, #1
 800c9f8:	6022      	str	r2, [r4, #0]
 800c9fa:	701e      	strb	r6, [r3, #0]
 800c9fc:	6962      	ldr	r2, [r4, #20]
 800c9fe:	1c43      	adds	r3, r0, #1
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d004      	beq.n	800ca0e <__swbuf_r+0x6e>
 800ca04:	89a3      	ldrh	r3, [r4, #12]
 800ca06:	07db      	lsls	r3, r3, #31
 800ca08:	d5e1      	bpl.n	800c9ce <__swbuf_r+0x2e>
 800ca0a:	2e0a      	cmp	r6, #10
 800ca0c:	d1df      	bne.n	800c9ce <__swbuf_r+0x2e>
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4628      	mov	r0, r5
 800ca12:	f7ff ff9d 	bl	800c950 <_fflush_r>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d0d9      	beq.n	800c9ce <__swbuf_r+0x2e>
 800ca1a:	e7d6      	b.n	800c9ca <__swbuf_r+0x2a>

0800ca1c <__swsetup_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4b29      	ldr	r3, [pc, #164]	@ (800cac4 <__swsetup_r+0xa8>)
 800ca20:	4605      	mov	r5, r0
 800ca22:	6818      	ldr	r0, [r3, #0]
 800ca24:	460c      	mov	r4, r1
 800ca26:	b118      	cbz	r0, 800ca30 <__swsetup_r+0x14>
 800ca28:	6a03      	ldr	r3, [r0, #32]
 800ca2a:	b90b      	cbnz	r3, 800ca30 <__swsetup_r+0x14>
 800ca2c:	f7fe f9ea 	bl	800ae04 <__sinit>
 800ca30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca34:	0719      	lsls	r1, r3, #28
 800ca36:	d422      	bmi.n	800ca7e <__swsetup_r+0x62>
 800ca38:	06da      	lsls	r2, r3, #27
 800ca3a:	d407      	bmi.n	800ca4c <__swsetup_r+0x30>
 800ca3c:	2209      	movs	r2, #9
 800ca3e:	602a      	str	r2, [r5, #0]
 800ca40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca44:	81a3      	strh	r3, [r4, #12]
 800ca46:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4a:	e033      	b.n	800cab4 <__swsetup_r+0x98>
 800ca4c:	0758      	lsls	r0, r3, #29
 800ca4e:	d512      	bpl.n	800ca76 <__swsetup_r+0x5a>
 800ca50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca52:	b141      	cbz	r1, 800ca66 <__swsetup_r+0x4a>
 800ca54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca58:	4299      	cmp	r1, r3
 800ca5a:	d002      	beq.n	800ca62 <__swsetup_r+0x46>
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f7ff f937 	bl	800bcd0 <_free_r>
 800ca62:	2300      	movs	r3, #0
 800ca64:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca66:	89a3      	ldrh	r3, [r4, #12]
 800ca68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca6c:	81a3      	strh	r3, [r4, #12]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	6063      	str	r3, [r4, #4]
 800ca72:	6923      	ldr	r3, [r4, #16]
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	f043 0308 	orr.w	r3, r3, #8
 800ca7c:	81a3      	strh	r3, [r4, #12]
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	b94b      	cbnz	r3, 800ca96 <__swsetup_r+0x7a>
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca8c:	d003      	beq.n	800ca96 <__swsetup_r+0x7a>
 800ca8e:	4621      	mov	r1, r4
 800ca90:	4628      	mov	r0, r5
 800ca92:	f000 f8c1 	bl	800cc18 <__smakebuf_r>
 800ca96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca9a:	f013 0201 	ands.w	r2, r3, #1
 800ca9e:	d00a      	beq.n	800cab6 <__swsetup_r+0x9a>
 800caa0:	2200      	movs	r2, #0
 800caa2:	60a2      	str	r2, [r4, #8]
 800caa4:	6962      	ldr	r2, [r4, #20]
 800caa6:	4252      	negs	r2, r2
 800caa8:	61a2      	str	r2, [r4, #24]
 800caaa:	6922      	ldr	r2, [r4, #16]
 800caac:	b942      	cbnz	r2, 800cac0 <__swsetup_r+0xa4>
 800caae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cab2:	d1c5      	bne.n	800ca40 <__swsetup_r+0x24>
 800cab4:	bd38      	pop	{r3, r4, r5, pc}
 800cab6:	0799      	lsls	r1, r3, #30
 800cab8:	bf58      	it	pl
 800caba:	6962      	ldrpl	r2, [r4, #20]
 800cabc:	60a2      	str	r2, [r4, #8]
 800cabe:	e7f4      	b.n	800caaa <__swsetup_r+0x8e>
 800cac0:	2000      	movs	r0, #0
 800cac2:	e7f7      	b.n	800cab4 <__swsetup_r+0x98>
 800cac4:	2000010c 	.word	0x2000010c

0800cac8 <_sbrk_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	4d06      	ldr	r5, [pc, #24]	@ (800cae4 <_sbrk_r+0x1c>)
 800cacc:	2300      	movs	r3, #0
 800cace:	4604      	mov	r4, r0
 800cad0:	4608      	mov	r0, r1
 800cad2:	602b      	str	r3, [r5, #0]
 800cad4:	f7f4 fe0c 	bl	80016f0 <_sbrk>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	d102      	bne.n	800cae2 <_sbrk_r+0x1a>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	b103      	cbz	r3, 800cae2 <_sbrk_r+0x1a>
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	200020e4 	.word	0x200020e4

0800cae8 <memcpy>:
 800cae8:	440a      	add	r2, r1
 800caea:	4291      	cmp	r1, r2
 800caec:	f100 33ff 	add.w	r3, r0, #4294967295
 800caf0:	d100      	bne.n	800caf4 <memcpy+0xc>
 800caf2:	4770      	bx	lr
 800caf4:	b510      	push	{r4, lr}
 800caf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cafa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cafe:	4291      	cmp	r1, r2
 800cb00:	d1f9      	bne.n	800caf6 <memcpy+0xe>
 800cb02:	bd10      	pop	{r4, pc}

0800cb04 <__assert_func>:
 800cb04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb06:	4614      	mov	r4, r2
 800cb08:	461a      	mov	r2, r3
 800cb0a:	4b09      	ldr	r3, [pc, #36]	@ (800cb30 <__assert_func+0x2c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4605      	mov	r5, r0
 800cb10:	68d8      	ldr	r0, [r3, #12]
 800cb12:	b14c      	cbz	r4, 800cb28 <__assert_func+0x24>
 800cb14:	4b07      	ldr	r3, [pc, #28]	@ (800cb34 <__assert_func+0x30>)
 800cb16:	9100      	str	r1, [sp, #0]
 800cb18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb1c:	4906      	ldr	r1, [pc, #24]	@ (800cb38 <__assert_func+0x34>)
 800cb1e:	462b      	mov	r3, r5
 800cb20:	f000 f842 	bl	800cba8 <fiprintf>
 800cb24:	f000 f8d6 	bl	800ccd4 <abort>
 800cb28:	4b04      	ldr	r3, [pc, #16]	@ (800cb3c <__assert_func+0x38>)
 800cb2a:	461c      	mov	r4, r3
 800cb2c:	e7f3      	b.n	800cb16 <__assert_func+0x12>
 800cb2e:	bf00      	nop
 800cb30:	2000010c 	.word	0x2000010c
 800cb34:	0800cfdd 	.word	0x0800cfdd
 800cb38:	0800cfea 	.word	0x0800cfea
 800cb3c:	0800d018 	.word	0x0800d018

0800cb40 <_calloc_r>:
 800cb40:	b570      	push	{r4, r5, r6, lr}
 800cb42:	fba1 5402 	umull	r5, r4, r1, r2
 800cb46:	b934      	cbnz	r4, 800cb56 <_calloc_r+0x16>
 800cb48:	4629      	mov	r1, r5
 800cb4a:	f7ff f935 	bl	800bdb8 <_malloc_r>
 800cb4e:	4606      	mov	r6, r0
 800cb50:	b928      	cbnz	r0, 800cb5e <_calloc_r+0x1e>
 800cb52:	4630      	mov	r0, r6
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
 800cb56:	220c      	movs	r2, #12
 800cb58:	6002      	str	r2, [r0, #0]
 800cb5a:	2600      	movs	r6, #0
 800cb5c:	e7f9      	b.n	800cb52 <_calloc_r+0x12>
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4621      	mov	r1, r4
 800cb62:	f7fe f9da 	bl	800af1a <memset>
 800cb66:	e7f4      	b.n	800cb52 <_calloc_r+0x12>

0800cb68 <__ascii_mbtowc>:
 800cb68:	b082      	sub	sp, #8
 800cb6a:	b901      	cbnz	r1, 800cb6e <__ascii_mbtowc+0x6>
 800cb6c:	a901      	add	r1, sp, #4
 800cb6e:	b142      	cbz	r2, 800cb82 <__ascii_mbtowc+0x1a>
 800cb70:	b14b      	cbz	r3, 800cb86 <__ascii_mbtowc+0x1e>
 800cb72:	7813      	ldrb	r3, [r2, #0]
 800cb74:	600b      	str	r3, [r1, #0]
 800cb76:	7812      	ldrb	r2, [r2, #0]
 800cb78:	1e10      	subs	r0, r2, #0
 800cb7a:	bf18      	it	ne
 800cb7c:	2001      	movne	r0, #1
 800cb7e:	b002      	add	sp, #8
 800cb80:	4770      	bx	lr
 800cb82:	4610      	mov	r0, r2
 800cb84:	e7fb      	b.n	800cb7e <__ascii_mbtowc+0x16>
 800cb86:	f06f 0001 	mvn.w	r0, #1
 800cb8a:	e7f8      	b.n	800cb7e <__ascii_mbtowc+0x16>

0800cb8c <__ascii_wctomb>:
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	4608      	mov	r0, r1
 800cb90:	b141      	cbz	r1, 800cba4 <__ascii_wctomb+0x18>
 800cb92:	2aff      	cmp	r2, #255	@ 0xff
 800cb94:	d904      	bls.n	800cba0 <__ascii_wctomb+0x14>
 800cb96:	228a      	movs	r2, #138	@ 0x8a
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb9e:	4770      	bx	lr
 800cba0:	700a      	strb	r2, [r1, #0]
 800cba2:	2001      	movs	r0, #1
 800cba4:	4770      	bx	lr
	...

0800cba8 <fiprintf>:
 800cba8:	b40e      	push	{r1, r2, r3}
 800cbaa:	b503      	push	{r0, r1, lr}
 800cbac:	4601      	mov	r1, r0
 800cbae:	ab03      	add	r3, sp, #12
 800cbb0:	4805      	ldr	r0, [pc, #20]	@ (800cbc8 <fiprintf+0x20>)
 800cbb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbb6:	6800      	ldr	r0, [r0, #0]
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	f7ff fd2d 	bl	800c618 <_vfiprintf_r>
 800cbbe:	b002      	add	sp, #8
 800cbc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbc4:	b003      	add	sp, #12
 800cbc6:	4770      	bx	lr
 800cbc8:	2000010c 	.word	0x2000010c

0800cbcc <__swhatbuf_r>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	460c      	mov	r4, r1
 800cbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	b096      	sub	sp, #88	@ 0x58
 800cbd8:	4615      	mov	r5, r2
 800cbda:	461e      	mov	r6, r3
 800cbdc:	da0d      	bge.n	800cbfa <__swhatbuf_r+0x2e>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbe4:	f04f 0100 	mov.w	r1, #0
 800cbe8:	bf14      	ite	ne
 800cbea:	2340      	movne	r3, #64	@ 0x40
 800cbec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	6031      	str	r1, [r6, #0]
 800cbf4:	602b      	str	r3, [r5, #0]
 800cbf6:	b016      	add	sp, #88	@ 0x58
 800cbf8:	bd70      	pop	{r4, r5, r6, pc}
 800cbfa:	466a      	mov	r2, sp
 800cbfc:	f000 f848 	bl	800cc90 <_fstat_r>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	dbec      	blt.n	800cbde <__swhatbuf_r+0x12>
 800cc04:	9901      	ldr	r1, [sp, #4]
 800cc06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc0e:	4259      	negs	r1, r3
 800cc10:	4159      	adcs	r1, r3
 800cc12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc16:	e7eb      	b.n	800cbf0 <__swhatbuf_r+0x24>

0800cc18 <__smakebuf_r>:
 800cc18:	898b      	ldrh	r3, [r1, #12]
 800cc1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc1c:	079d      	lsls	r5, r3, #30
 800cc1e:	4606      	mov	r6, r0
 800cc20:	460c      	mov	r4, r1
 800cc22:	d507      	bpl.n	800cc34 <__smakebuf_r+0x1c>
 800cc24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	6123      	str	r3, [r4, #16]
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	6163      	str	r3, [r4, #20]
 800cc30:	b003      	add	sp, #12
 800cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc34:	ab01      	add	r3, sp, #4
 800cc36:	466a      	mov	r2, sp
 800cc38:	f7ff ffc8 	bl	800cbcc <__swhatbuf_r>
 800cc3c:	9f00      	ldr	r7, [sp, #0]
 800cc3e:	4605      	mov	r5, r0
 800cc40:	4639      	mov	r1, r7
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7ff f8b8 	bl	800bdb8 <_malloc_r>
 800cc48:	b948      	cbnz	r0, 800cc5e <__smakebuf_r+0x46>
 800cc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc4e:	059a      	lsls	r2, r3, #22
 800cc50:	d4ee      	bmi.n	800cc30 <__smakebuf_r+0x18>
 800cc52:	f023 0303 	bic.w	r3, r3, #3
 800cc56:	f043 0302 	orr.w	r3, r3, #2
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	e7e2      	b.n	800cc24 <__smakebuf_r+0xc>
 800cc5e:	89a3      	ldrh	r3, [r4, #12]
 800cc60:	6020      	str	r0, [r4, #0]
 800cc62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc66:	81a3      	strh	r3, [r4, #12]
 800cc68:	9b01      	ldr	r3, [sp, #4]
 800cc6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc6e:	b15b      	cbz	r3, 800cc88 <__smakebuf_r+0x70>
 800cc70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc74:	4630      	mov	r0, r6
 800cc76:	f000 f81d 	bl	800ccb4 <_isatty_r>
 800cc7a:	b128      	cbz	r0, 800cc88 <__smakebuf_r+0x70>
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	f023 0303 	bic.w	r3, r3, #3
 800cc82:	f043 0301 	orr.w	r3, r3, #1
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	431d      	orrs	r5, r3
 800cc8c:	81a5      	strh	r5, [r4, #12]
 800cc8e:	e7cf      	b.n	800cc30 <__smakebuf_r+0x18>

0800cc90 <_fstat_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d07      	ldr	r5, [pc, #28]	@ (800ccb0 <_fstat_r+0x20>)
 800cc94:	2300      	movs	r3, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	602b      	str	r3, [r5, #0]
 800cc9e:	f7f4 fcff 	bl	80016a0 <_fstat>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	d102      	bne.n	800ccac <_fstat_r+0x1c>
 800cca6:	682b      	ldr	r3, [r5, #0]
 800cca8:	b103      	cbz	r3, 800ccac <_fstat_r+0x1c>
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	bd38      	pop	{r3, r4, r5, pc}
 800ccae:	bf00      	nop
 800ccb0:	200020e4 	.word	0x200020e4

0800ccb4 <_isatty_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d06      	ldr	r5, [pc, #24]	@ (800ccd0 <_isatty_r+0x1c>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7f4 fcfe 	bl	80016c0 <_isatty>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_isatty_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_isatty_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	200020e4 	.word	0x200020e4

0800ccd4 <abort>:
 800ccd4:	b508      	push	{r3, lr}
 800ccd6:	2006      	movs	r0, #6
 800ccd8:	f000 f82c 	bl	800cd34 <raise>
 800ccdc:	2001      	movs	r0, #1
 800ccde:	f7f4 fcab 	bl	8001638 <_exit>

0800cce2 <_raise_r>:
 800cce2:	291f      	cmp	r1, #31
 800cce4:	b538      	push	{r3, r4, r5, lr}
 800cce6:	4605      	mov	r5, r0
 800cce8:	460c      	mov	r4, r1
 800ccea:	d904      	bls.n	800ccf6 <_raise_r+0x14>
 800ccec:	2316      	movs	r3, #22
 800ccee:	6003      	str	r3, [r0, #0]
 800ccf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf4:	bd38      	pop	{r3, r4, r5, pc}
 800ccf6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ccf8:	b112      	cbz	r2, 800cd00 <_raise_r+0x1e>
 800ccfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccfe:	b94b      	cbnz	r3, 800cd14 <_raise_r+0x32>
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 f831 	bl	800cd68 <_getpid_r>
 800cd06:	4622      	mov	r2, r4
 800cd08:	4601      	mov	r1, r0
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd10:	f000 b818 	b.w	800cd44 <_kill_r>
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d00a      	beq.n	800cd2e <_raise_r+0x4c>
 800cd18:	1c59      	adds	r1, r3, #1
 800cd1a:	d103      	bne.n	800cd24 <_raise_r+0x42>
 800cd1c:	2316      	movs	r3, #22
 800cd1e:	6003      	str	r3, [r0, #0]
 800cd20:	2001      	movs	r0, #1
 800cd22:	e7e7      	b.n	800ccf4 <_raise_r+0x12>
 800cd24:	2100      	movs	r1, #0
 800cd26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	4798      	blx	r3
 800cd2e:	2000      	movs	r0, #0
 800cd30:	e7e0      	b.n	800ccf4 <_raise_r+0x12>
	...

0800cd34 <raise>:
 800cd34:	4b02      	ldr	r3, [pc, #8]	@ (800cd40 <raise+0xc>)
 800cd36:	4601      	mov	r1, r0
 800cd38:	6818      	ldr	r0, [r3, #0]
 800cd3a:	f7ff bfd2 	b.w	800cce2 <_raise_r>
 800cd3e:	bf00      	nop
 800cd40:	2000010c 	.word	0x2000010c

0800cd44 <_kill_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	4d07      	ldr	r5, [pc, #28]	@ (800cd64 <_kill_r+0x20>)
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	4611      	mov	r1, r2
 800cd50:	602b      	str	r3, [r5, #0]
 800cd52:	f7f4 fc61 	bl	8001618 <_kill>
 800cd56:	1c43      	adds	r3, r0, #1
 800cd58:	d102      	bne.n	800cd60 <_kill_r+0x1c>
 800cd5a:	682b      	ldr	r3, [r5, #0]
 800cd5c:	b103      	cbz	r3, 800cd60 <_kill_r+0x1c>
 800cd5e:	6023      	str	r3, [r4, #0]
 800cd60:	bd38      	pop	{r3, r4, r5, pc}
 800cd62:	bf00      	nop
 800cd64:	200020e4 	.word	0x200020e4

0800cd68 <_getpid_r>:
 800cd68:	f7f4 bc4e 	b.w	8001608 <_getpid>

0800cd6c <_init>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	bf00      	nop
 800cd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd72:	bc08      	pop	{r3}
 800cd74:	469e      	mov	lr, r3
 800cd76:	4770      	bx	lr

0800cd78 <_fini>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr
